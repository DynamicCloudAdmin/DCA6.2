ErrorModule#$ErrorActionPreference = 'SilentlyContinue'
ErrorModule#$ProgressPreference = 'SilentlyContinue'
ErrorModule#$ErrorActionPreference = 'SilentlyContinue'
ErrorModule#$VerbosePreference = 'SilentlyContinue'
ErrorModule#$WarningPreference = 'SilentlyContinue'
ImpoModule#import-module Microsoft.PowerShell.Management
ImpoModule#Import-Module Microsoft.PowerShell.Utility
ImpoModule#Import-Module Microsoft.WSMan.Management
ImpoModule#Import-Module Microsoft.PowerShell.Security
ImpoModule#Import-Module -Force $NewLocNow\PSmodules\Modules\Az.Accounts\1.9.1\az.Accounts.psd1
ImpoModule#Import-Module -Force $NewLocNow\PSmodules\Modules\Az.Compute\4.2.1\Az.Compute.psd1
ImpoModule#Import-Module -Force $NewLocNow\PSmodules\Modules\Az.Resources\2.3.0\Az.Resources.psd1
ImpoModule#Import-Module -Force $NewLocNow\PSmodules\Modules\Az.OperationalInsights\2.2.0\Az.OperationalInsights.psd1
ImpoModule#Import-Module -Force $NewLocNow\PSmodules\Az.DesktopVirtualization\3.0.0\Az.DesktopVirtualization.psd1
ImpoModule#Import-Module -Force $NewLocNow\PSmodules\Modules\Az.Security\Az.Security.psd1
ImpoModule#Import-Module -Force $NewLocNow\PSModules\Modules\Az.ImageBuilder.0.2.0\Az.ImageBuilder.psd1
ImpoModule#Import-Module -Force $NewLocNow\PSModules\Modules\Az.Network\Az.Network.psd1
ImpoModule#Import-Module -Force $NewLocNow\PSModules\Modules\Az.Storage\Az.Storage.psd1
ImpoModule#Import-Module -Force $NewLocNow\PSModules\Modules\Az.RecoveryServices\Az.RecoveryServices.psd1

OfficeConStringMSOnline#$R = Disconnect-AzAccount
OfficeConStringMSOnline#
OfficeConStringMSOnline#$password = get-content $FinalPassFile | convertto-securestring
OfficeConStringMSOnline#$Credential = New-Object -Typename System.Management.Automation.PSCredential -ArgumentList $OfficeUser, $Password
OfficeConStringMSOnline#$Error.Clear
OfficeConStringMSOnline#$ProceedOrNot = "Yes"
OfficeConStringMSOnline#$R = Connect-MsolService -Credential $Credential -WarningAction ignore
OfficeConStringMSOnline#	IF ($Error.Count -eq 0)
OfficeConStringMSOnline#	{
OfficeConStringMSOnline#		$ProceedOrNot = "Yes"
OfficeConStringMSOnline#	}
OfficeConStringMSOnline#	else
OfficeConStringMSOnline#	{
OfficeConStringMSOnline#		$ProceedOrNot = "No"
OfficeConStringMSOnline#		$STR = "Error Executing:" + $Error
OfficeConStringMSOnline#		Add-Content $FinalLogFile $STR
OfficeConStringMSOnline#	}

OfficeConStringExchanageOnline#$R = Disconnect-AzAccount
OfficeConStringExchanageOnline#
OfficeConStringExchanageOnline#$password = get-content $FinalPassFile | convertto-securestring
OfficeConStringExchanageOnline#$Credential = New-Object -Typename System.Management.Automation.PSCredential -ArgumentList $OfficeUser, $Password
OfficeConStringExchanageOnline#$Error.Clear
OfficeConStringExchanageOnline#$ProceedOrNot = "Yes"
OfficeConStringExchanageOnline#$R = Connect-ExchangeOnline -Credential $Credential -WarningAction Ignore
OfficeConStringExchanageOnline#	IF ($Error.Count -eq 0)
OfficeConStringExchanageOnline#	{
OfficeConStringExchanageOnline#		$ProceedOrNot = "Yes"
OfficeConStringExchanageOnline#	}
OfficeConStringExchanageOnline#	else
OfficeConStringExchanageOnline#	{
OfficeConStringExchanageOnline#		$ProceedOrNot = "No"
OfficeConStringExchanageOnline#		$STR = "Error Executing:" + $Error
OfficeConStringExchanageOnline#		Add-Content $FinalLogFile $STR
OfficeConStringExchanageOnline#	}

ConString#$R = Disconnect-AzAccount
ConString#
ConString#$password = get-content $FinalPassFile | convertto-securestring
ConString#$Credential = New-Object -Typename System.Management.Automation.PSCredential -ArgumentList $SPNGuid, $Password
ConString#$Error.Clear
ConString#$ProceedOrNot = "Yes"
ConString#$R = Connect-AzAccount -Tenant $SPNTenID -Subscription $SPNSubID -Credential $Credential -ServicePrincipal -WarningAction ignore
ConString#	IF ($Error.Count -eq 0)
ConString#	{
ConString#		$ProceedOrNot = "Yes"
ConString#	}
ConString#	else
ConString#	{
ConString#		$ProceedOrNot = "No"
ConString#		$STR = "Error Executing:" + $Error
ConString#		Add-Content $FinalLogFile $STR
ConString#	}
		
ExecutionString#$ExecutionStatusFileTMP = "$NewLocNow\public\$TRPKey\Users\" + $ThisUser + "\ExecutionStatusTMP.CSV"
ExecutionString#Remove-Item $ExecutionStatusFileTMP -ErrorAction SilentlyContinue
ExecutionString#$STR = "Date, Module, Status"
ExecutionString#Add-Content $ExecutionStatusFileTMP $STR
ExecutionString#
ExecutionString#$CSVExe = Import-Csv $ExecutionStatusFile
ExecutionString#foreach ($Item in $CSVExe)
ExecutionString#{
ExecutionString#	IF ($Item.Module -eq $ThisModName -and $Item.'Date' -eq $ExeDate)
ExecutionString#	{
ExecutionString#	}
ExecutionString#	else
ExecutionString#	{
ExecutionString#		$STR = $Item.Date + "," + $Item.Module + "," + $Item.Status
ExecutionString#		Add-Content $ExecutionStatusFileTMP $STR		
ExecutionString#	}
ExecutionString#}
ExecutionString#
ExecutionString#Remove-Item $ExecutionStatusFile -ErrorAction SilentlyContinue
ExecutionString#Copy-Item -Path $ExecutionStatusFileTMP -Destination $ExecutionStatusFile
ExecutionString#Remove-Item $ExecutionStatusFileTMP -ErrorAction SilentlyContinue
ExecutionString#$STR = (Get-Date).ToString() + ",Any Error: " + $Error
ExecutionString#Add-Content $FinalLogFile $STR

LastRefDateCode#$R = Get-Item $FinalResultFile
LastRefDateCode#$LastRef = $R.LastWriteTime.ToString()
LastRefDateCode#$STR = "LASTREFDATE," + $LastRef + ","
LastRefDateCode#Add-Content $FinalResultFile $STR

CopyUserString#$CSVNow = Get-Content $AllUsersFile
CopyUserString#foreach ($Item in $CSVNow)
CopyUserString#{
CopyUserString#	$NewUserNow = $Item
CopyUserString#	
CopyUserString#	$ReplNameMod = $ThisModName.replace(" ", "_")
CopyUserString#	$ReplNameTen = $ThisTenant.replace(" ", "_")
CopyUserString#	
CopyUserString#	$ThisUserNow = "BackRefDataCollector"
CopyUserString#	$ORGFile = "$NewLocNow\public\$TRPKey\Users\" + $ThisUserNow + "\" + $ReplNameMod + "_" + $ReplNameTen + ".CSV"	
CopyUserString#	$NewFile = "$NewLocNow\public\$TRPKey\Users\" + $NewUserNow + "\" + $ReplNameMod + "_" + $ReplNameTen + ".CSV"
CopyUserString#	Remove-Item $NewFile -ErrorAction SilentlyContinue
CopyUserString#	Copy-Item -Path $ORGFile -Destination $NewFile
CopyUserString#	
CopyUserString#}

MODSetOfficeConStringMSOnline#$R = Disconnect-AzAccount
MODSetOfficeConStringMSOnline#
MODSetOfficeConStringMSOnline#$password = get-content $FinalPassFile | convertto-securestring
MODSetOfficeConStringMSOnline#$Credential = New-Object -Typename System.Management.Automation.PSCredential -ArgumentList $OfficeUser, $Password
MODSetOfficeConStringMSOnline#$Error.Clear
MODSetOfficeConStringMSOnline#$ProceedOrNot = "Yes"
MODSetOfficeConStringMSOnline#$R = Connect-MsolService -Credential $Credential -WarningAction ignore
MODSetOfficeConStringMSOnline#	IF ($Error.Count -eq 0)
MODSetOfficeConStringMSOnline#	{
MODSetOfficeConStringMSOnline#		$ProceedOrNot = "Yes"
MODSetOfficeConStringMSOnline#	}
MODSetOfficeConStringMSOnline#	else
MODSetOfficeConStringMSOnline#	{
MODSetOfficeConStringMSOnline#		$ProceedOrNot = "No"
MODSetOfficeConStringMSOnline#	}

MODSetOfficeConStringExchanageOnline#$R = Disconnect-AzAccount
MODSetOfficeConStringExchanageOnline#
MODSetOfficeConStringExchanageOnline#$password = get-content $FinalPassFile | convertto-securestring
MODSetOfficeConStringExchanageOnline#$Credential = New-Object -Typename System.Management.Automation.PSCredential -ArgumentList $OfficeUser, $Password
MODSetOfficeConStringExchanageOnline#$Error.Clear
MODSetOfficeConStringExchanageOnline#$ProceedOrNot = "Yes"
MODSetOfficeConStringExchanageOnline#$R = Connect-ExchangeOnline -Credential $Credential -WarningAction Ignore
MODSetOfficeConStringExchanageOnline#	IF ($Error.Count -eq 0)
MODSetOfficeConStringExchanageOnline#	{
MODSetOfficeConStringExchanageOnline#		$ProceedOrNot = "Yes"
MODSetOfficeConStringExchanageOnline#	}
MODSetOfficeConStringExchanageOnline#	else
MODSetOfficeConStringExchanageOnline#	{
MODSetOfficeConStringExchanageOnline#		$ProceedOrNot = "No"
MODSetOfficeConStringExchanageOnline#		$STR = "Error Executing:" + $Error
MODSetOfficeConStringExchanageOnline#		Add-Content $FinalLogFile $STR
MODSetOfficeConStringExchanageOnline#	}
