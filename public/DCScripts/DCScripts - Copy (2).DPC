Get AVD Host Pools#CredCode#$STR = "Pool Name,"
Get AVD Host Pools#CredCode#Add-Content $FinalResultFile $STR
Get AVD Host Pools#CredCode#
Get AVD Host Pools#CredCode#$Error.Clear()
Get AVD Host Pools#CredCode#$R = Get-AZWVDHostPool | Select-Object *
Get AVD Host Pools#CredCode#IF ($Error.Count -eq 0)
Get AVD Host Pools#CredCode#{
Get AVD Host Pools#CredCode#	ForEach ($Item in $R)
Get AVD Host Pools#CredCode#	{
Get AVD Host Pools#CredCode#		$PoolName = $Item.Name + ","
Get AVD Host Pools#CredCode#		Add-Content $FinalResultFile $PoolName
Get AVD Host Pools#CredCode#	}
Get AVD Host Pools#CredCode#}
Get AVD Host Pools#CredCode#else
Get AVD Host Pools#CredCode#{
Get AVD Host Pools#CredCode#	$FinalLogFile = "$NewLocNow\public\$TRPKey\Users\" + $ThisUser + "\" + $ReplNameMod + "_" + $ReplNameTen + ".LOG"
Get AVD Host Pools#CredCode#	$STR = "Error Executing:" + $Error
Get AVD Host Pools#CredCode#	Add-Content $FinalLogFile $STR
Get AVD Host Pools#CredCode#}
Create VM From Code#CredCode##CredCode#Provide the subscription Id
Create VM From Code#CredCode#
Create VM From Code#CredCode#$subscriptionId = 'yourSubscriptionId'
Create VM From Code#CredCode#
Create VM From Code#CredCode##CredCode#Provide the name of your resource group
Create VM From Code#CredCode#$resourceGroupName ='yourResourceGroupName'
Create VM From Code#CredCode#
Create VM From Code#CredCode##CredCode#Provide the name of the Managed Disk
Create VM From Code#CredCode#$diskName = 'yourDiskName'
Create VM From Code#CredCode#
Create VM From Code#CredCode#
Create VM From Code#CredCode##CredCode#Provide the Azure region (e.g. westus) where virtual machine will be located.
Create VM From Code#CredCode##CredCode#This location should be same as the Managed Disk location 
Create VM From Code#CredCode##CredCode#Get all the Azure location using command below:
Create VM From Code#CredCode##CredCode#Get-AzLocation
Create VM From Code#CredCode#$location = 'westus'
Create VM From Code#CredCode#
Create VM From Code#CredCode##CredCode#Provide the name of an existing virtual network where virtual machine will be created
Create VM From Code#CredCode#$virtualNetworkName = 'yourVirtualNetworkName'
Create VM From Code#CredCode#
Create VM From Code#CredCode##CredCode#Provide the name of the virtual machine
Create VM From Code#CredCode#$virtualMachineName = 'yourVirtualMachineName'
Create VM From Code#CredCode#
Create VM From Code#CredCode##CredCode#Provide the size of the virtual machine
Create VM From Code#CredCode##CredCode#e.g. Standard_DS3
Create VM From Code#CredCode##CredCode#Get all the vm sizes in a region using below script:
Create VM From Code#CredCode##CredCode#e.g. Get-AzVMSize -Location westus
Create VM From Code#CredCode#$virtualMachineSize = 'Standard_DS3'
Create VM From Code#CredCode#
Create VM From Code#CredCode#
Create VM From Code#CredCode##CredCode#Set the context to the subscription Id where Managed Disk will be created
Create VM From Code#CredCode#Select-AzSubscription -SubscriptionId $SubscriptionId
Create VM From Code#CredCode#
Create VM From Code#CredCode##CredCode#Get the Managed Disk based on the resource group and the disk name
Create VM From Code#CredCode#$disk =  Get-AzDisk -ResourceGroupName $resourceGroupName -DiskName $diskName
Create VM From Code#CredCode#
Create VM From Code#CredCode##CredCode#Initialize virtual machine configuration
Create VM From Code#CredCode#$VirtualMachine = New-AzVMConfig -VMName $virtualMachineName -VMSize $virtualMachineSize
Create VM From Code#CredCode#
Create VM From Code#CredCode##CredCode#Use the Managed Disk Resource Id to attach it to the virtual machine. Please change the OS type to linux if OS disk has linux OS
Create VM From Code#CredCode#$VirtualMachine = Set-AzVMOSDisk -VM $VirtualMachine -ManagedDiskId $disk.Id -CreateOption Attach -Windows
Create VM From Code#CredCode#
Create VM From Code#CredCode##CredCode#Create a public IP for the VM  
Create VM From Code#CredCode#$publicIp = New-AzPublicIpAddress -Name ($VirtualMachineName.ToLower()+'_ip') -ResourceGroupName $resourceGroupName -Location $location -AllocationMethod Dynamic
Create VM From Code#CredCode#
Create VM From Code#CredCode##CredCode#Get the virtual network where virtual machine will be hosted
Create VM From Code#CredCode#$vnet = Get-AzVirtualNetwork -Name $virtualNetworkName -ResourceGroupName $resourceGroupName
Create VM From Code#CredCode#
Create VM From Code#CredCode##CredCode# Create NIC in the first subnet of the virtual network 
Create VM From Code#CredCode#$nic = New-AzNetworkInterface -Name ($VirtualMachineName.ToLower()+'_nic') -ResourceGroupName $resourceGroupName -Location $location -SubnetId $vnet.Subnets[0].Id -PublicIpAddressId $publicIp.Id
Create VM From Code#CredCode#
Create VM From Code#CredCode#$VirtualMachine = Add-AzVMNetworkInterface -VM $VirtualMachine -Id $nic.Id
Create VM From Code#CredCode#
Create VM From Code#CredCode##CredCode#Create the virtual machine with Managed Disk
Create VM From Code#CredCode#New-AzVM -VM $VirtualMachine -ResourceGroupName $resourceGroupName -Location $location
asdasdasd#CredCode#$STR = "Host Name
asdasdasd#CredCode# Host Pool Name"
asdasdasd#CredCode#Add-Content $FinalResultFile $STR
asdasdasd#CredCode#
asdasdasd#CredCode#$R = Get-AzWVDHostPool | Select-Object *
asdasdasd#CredCode#					
asdasdasd#CredCode#foreach ($Item in $R)
asdasdasd#CredCode#{
asdasdasd#CredCode#    $ThisLine = $Item.ApplicationGroupReference
asdasdasd#CredCode#	$R = $ThisLine
asdasdasd#CredCode#	$A
asdasdasd#CredCode# $B
asdasdasd#CredCode# $C
asdasdasd#CredCode# $D
asdasdasd#CredCode# $E
asdasdasd#CredCode# $F = $R.Split("/")
asdasdasd#CredCode#						
asdasdasd#CredCode#    $FinalResGroup = $E
asdasdasd#CredCode#	$HostPoolName = $Item.Name
asdasdasd#CredCode#						
asdasdasd#CredCode#    $AllHosts = Get-AzWvdSessionHost -ResourceGroupName $FinalResGroup -HostPoolName $HostPoolName
asdasdasd#CredCode#    ForEach ($Host in $AllHosts)
asdasdasd#CredCode#    {
asdasdasd#CredCode#        $STR = $Host.Name+"
asdasdasd#CredCode#"+$HostPoolName
asdasdasd#CredCode#        Add-Content $FinalResultFile $STR
asdasdasd#CredCode#
asdasdasd#CredCode#    }
asdasdasd#CredCode#}
asdasdasd#CredCode#
rdasdasd#CredCode#$STR = "Host Name
rdasdasd#CredCode# Host Pool Name"
rdasdasd#CredCode#Add-Content $FinalResultFile $STR
rdasdasd#CredCode#
rdasdasd#CredCode#$R = Get-AzWVDHostPool | Select-Object *
rdasdasd#CredCode#					
rdasdasd#CredCode#foreach ($Item in $R)
rdasdasd#CredCode#{
rdasdasd#CredCode#    $ThisLine = $Item.ApplicationGroupReference
rdasdasd#CredCode#	$R = $ThisLine
rdasdasd#CredCode#	$A
rdasdasd#CredCode# $B
rdasdasd#CredCode# $C
rdasdasd#CredCode# $D
rdasdasd#CredCode# $E
rdasdasd#CredCode# $F = $R.Split("/")
rdasdasd#CredCode#						
rdasdasd#CredCode#    $FinalResGroup = $E
rdasdasd#CredCode#	$HostPoolName = $Item.Name
rdasdasd#CredCode#						
rdasdasd#CredCode#    $AllHosts = Get-AzWvdSessionHost -ResourceGroupName $FinalResGroup -HostPoolName $HostPoolName
rdasdasd#CredCode#    ForEach ($Host in $AllHosts)
rdasdasd#CredCode#    {
rdasdasd#CredCode#        $STR = $Host.Name+"
rdasdasd#CredCode#"+$HostPoolName
rdasdasd#CredCode#        Add-Content $FinalResultFile $STR
rdasdasd#CredCode#
rdasdasd#CredCode#    }
rdasdasd#CredCode#}
rdasdasd#CredCode#
Get All Session Hosts Two#CredCode#$STR = "Host Name
Get All Session Hosts Two#CredCode# Host Pool Name"
Get All Session Hosts Two#CredCode#Add-Content $FinalResultFile $STR
Get All Session Hosts Two#CredCode#
Get All Session Hosts Two#CredCode#$R = Get-AzWVDHostPool | Select-Object *
Get All Session Hosts Two#CredCode#					
Get All Session Hosts Two#CredCode#foreach ($Item in $R)
Get All Session Hosts Two#CredCode#{
Get All Session Hosts Two#CredCode#    $ThisLine = $Item.ApplicationGroupReference
Get All Session Hosts Two#CredCode#	$R = $ThisLine
Get All Session Hosts Two#CredCode#	$A
Get All Session Hosts Two#CredCode# $B
Get All Session Hosts Two#CredCode# $C
Get All Session Hosts Two#CredCode# $D
Get All Session Hosts Two#CredCode# $E
Get All Session Hosts Two#CredCode# $F = $R.Split("/")
Get All Session Hosts Two#CredCode#						
Get All Session Hosts Two#CredCode#    $FinalResGroup = $E
Get All Session Hosts Two#CredCode#	$HostPoolName = $Item.Name
Get All Session Hosts Two#CredCode#						
Get All Session Hosts Two#CredCode#    $AllHosts = Get-AzWvdSessionHost -ResourceGroupName $FinalResGroup -HostPoolName $HostPoolName
Get All Session Hosts Two#CredCode#    ForEach ($Host in $AllHosts)
Get All Session Hosts Two#CredCode#    {
Get All Session Hosts Two#CredCode#        $STR = $Host.Name+"
Get All Session Hosts Two#CredCode#"+$HostPoolName
Get All Session Hosts Two#CredCode#        Add-Content $FinalResultFile $STR
Get All Session Hosts Two#CredCode#
Get All Session Hosts Two#CredCode#    }
Get All Session Hosts Two#CredCode#}
Get All Session Hosts Two#CredCode#
Get All Session Hosts Three#CredCode#$STR = "Host Name, Host Pool Name"
Get All Session Hosts Three#CredCode#Add-Content $FinalResultFile $STR
Get All Session Hosts Three#CredCode#
Get All Session Hosts Three#CredCode#$R = Get-AzWVDHostPool | Select-Object *
Get All Session Hosts Three#CredCode#					
Get All Session Hosts Three#CredCode#foreach ($Item in $R)
Get All Session Hosts Three#CredCode#{
Get All Session Hosts Three#CredCode#    $ThisLine = $Item.ApplicationGroupReference
Get All Session Hosts Three#CredCode#	$R = $ThisLine
Get All Session Hosts Three#CredCode#	$A, $B, $C, $D, $E, $F = $R.Split("/")
Get All Session Hosts Three#CredCode#						
Get All Session Hosts Three#CredCode#    $FinalResGroup = $E
Get All Session Hosts Three#CredCode#	$HostPoolName = $Item.Name
Get All Session Hosts Three#CredCode#						
Get All Session Hosts Three#CredCode#    $AllHosts = Get-AzWvdSessionHost -ResourceGroupName $FinalResGroup -HostPoolName $HostPoolName
Get All Session Hosts Three#CredCode#    ForEach ($Host in $AllHosts)
Get All Session Hosts Three#CredCode#    {
Get All Session Hosts Three#CredCode#        $STR = $Host.Name+","+$HostPoolName
Get All Session Hosts Three#CredCode#        Add-Content $FinalResultFile $STR
Get All Session Hosts Three#CredCode#
Get All Session Hosts Three#CredCode#    }
Get All Session Hosts Three#CredCode#}
Get All Session Hosts Three#CredCode#
Get AVD Sessions#CredCode#$STR = "UserPrincipalName, ADUserName, CreateTime, SessionID, HostPoolName, SessionHostName, SessionState, ResourceGroup, Host Status, Account Type"
Get AVD Sessions#CredCode#Add-Content $FinalResultFile $STR
Get AVD Sessions#CredCode#
Get AVD Sessions#CredCode#$Error.Clear()
Get AVD Sessions#CredCode#$R = Get-AzWVDHostPool | Select-Object *
Get AVD Sessions#CredCode#IF ($Error.Count -eq 0)
Get AVD Sessions#CredCode#{	
Get AVD Sessions#CredCode#	foreach ($Item in $R)
Get AVD Sessions#CredCode#	{
Get AVD Sessions#CredCode#		$ThisLine = $Item.ApplicationGroupReference
Get AVD Sessions#CredCode#		$R = $ThisLine
Get AVD Sessions#CredCode#		$A, $B, $C, $D, $E, $F = $R.Split("/")
Get AVD Sessions#CredCode#		
Get AVD Sessions#CredCode#		$FinalResGroup = $E
Get AVD Sessions#CredCode#		$HostPoolName = $Item.Name
Get AVD Sessions#CredCode#		
Get AVD Sessions#CredCode#		$RC = Get-AzWvdUserSession -ResourceGroupName $FinalResGroup -HostPoolName $HostPoolName | Select-Object *
Get AVD Sessions#CredCode#		foreach ($Item in $RC)
Get AVD Sessions#CredCode#		{
Get AVD Sessions#CredCode#			$NewID = $Item.Name
Get AVD Sessions#CredCode#			
Get AVD Sessions#CredCode#			$Z = $NewID
Get AVD Sessions#CredCode#			$A, $B, $C = $Z.Split("/")
Get AVD Sessions#CredCode#			$FinalID = $C
Get AVD Sessions#CredCode#			
Get AVD Sessions#CredCode#			$Z = $NewID
Get AVD Sessions#CredCode#			$A, $B, $C = $Z.Split("/")
Get AVD Sessions#CredCode#			$FinalSessionHost = $B
Get AVD Sessions#CredCode#			
Get AVD Sessions#CredCode#			$Z = $Item.ID
Get AVD Sessions#CredCode#			$A, $B, $C, $D, $E, $F = $Z.Split("/")
Get AVD Sessions#CredCode#			$FinalResGroup = $E
Get AVD Sessions#CredCode#			
Get AVD Sessions#CredCode#			$B, $FinalHostName = $HostName.Split("/")
Get AVD Sessions#CredCode#			$HostWithoutDots, $C = $FinalHostName.Split(".")
Get AVD Sessions#CredCode#			
Get AVD Sessions#CredCode#			$VMStatus = "Unknown"
Get AVD Sessions#CredCode#			$AccState = "Normal"
Get AVD Sessions#CredCode#			
Get AVD Sessions#CredCode#			$ThisHostToCheck, $RC = $FinalSessionHost.Split(".")
Get AVD Sessions#CredCode#			
Get AVD Sessions#CredCode#			foreach ($VMNow in $AllVMCSV)
Get AVD Sessions#CredCode#			{
Get AVD Sessions#CredCode#				$ThisVMNow = $VMNow.VMName
Get AVD Sessions#CredCode#				IF ($ThisVMNow.ToLower() -eq $ThisHostToCheck.ToLower())
Get AVD Sessions#CredCode#				{
Get AVD Sessions#CredCode#					$VMStatus = $VMNow.VMStatus
Get AVD Sessions#CredCode#					break
Get AVD Sessions#CredCode#				}
Get AVD Sessions#CredCode#			}
Get AVD Sessions#CredCode#			
Get AVD Sessions#CredCode#			$SessState = $Item.SessionState
Get AVD Sessions#CredCode#			IF ($SessState -eq "Active" -and $VMStatus -eq "VM running")
Get AVD Sessions#CredCode#			{
Get AVD Sessions#CredCode#				$AccState = "Normal"
Get AVD Sessions#CredCode#			}
Get AVD Sessions#CredCode#			IF ($SessState -eq "Active" -and $VMStatus -ne "VM running")
Get AVD Sessions#CredCode#			{
Get AVD Sessions#CredCode#				$AccState = "Stale"
Get AVD Sessions#CredCode#			}
Get AVD Sessions#CredCode#			
Get AVD Sessions#CredCode#			$STR = $Item.UserPrincipalName + "," + $Item.ActiveDirectoryUserName + "," + $Item.CreateTime + "," + $FinalID + "," + $HostPoolName + "," + $FinalSessionHost + "," + $Item.SessionState + "," + $FinalResGroup + "," + $VMStatus + "," + $AccState + ","
Get AVD Sessions#CredCode#			Add-Content $FinalResultFile $STR
Get AVD Sessions#CredCode#		}
Get AVD Sessions#CredCode#		
Get AVD Sessions#CredCode#	}
Get AVD Sessions#CredCode#	
Get AVD Sessions#CredCode#}
Get AVD Sessions#CredCode#	
Get Azure VMs#CredCode#Get-AzImage | Select-Object Name,ResourceGroupName,Location,ID | Export-CSV $FinalResultFile -NoTypeInformation
Get Azure VMs#CredCode#
Get Azure VMs#CredCode#
Get Office Subcription#CredCode#Get-MsolSubscription | Select-Object SKUPartNumber,Status,TotalLicenses | Export-CSV $FinalResultFile -NoTypeInformation
Get All Session Hosts#CredCode#$Error.Clear()
Get All Session Hosts#CredCode#$R = Get-AzWVDHostPool | Select-Object *
Get All Session Hosts#CredCode#IF ($Error.Count -eq 0)
Get All Session Hosts#CredCode#{
Get All Session Hosts#CredCode#	foreach ($Item in $R)
Get All Session Hosts#CredCode#	{
Get All Session Hosts#CredCode#		$ThisLine = $Item.ApplicationGroupReference
Get All Session Hosts#CredCode#		$R = $ThisLine
Get All Session Hosts#CredCode#		$A, $B, $C, $D, $E, $F = $R.Split("/")
Get All Session Hosts#CredCode#		
Get All Session Hosts#CredCode#		$FinalResGroup = $E
Get All Session Hosts#CredCode#		$HostPoolName = $Item.Name
Get All Session Hosts#CredCode#		
Get All Session Hosts#CredCode#		Get-AzWvdSessionHost -ResourceGroupName $FinalResGroup -HostPoolName $HostPoolName | Select-Object Name, OSVersion, AgentVersion | Export-Csv $FinalResultFile -NoTypeInformation -Append
Get All Session Hosts#CredCode#	}
Get All Session Hosts#CredCode#	
Get All Session Hosts#CredCode#}
Get All Session Hosts#CredCode#			
Office 365 Users Licensing Test#Headercode#$ThisString="Total Users, Total Licensed, Total Not Licensed, % Of Users Not Licensed, Data File Location"
Office 365 Users Licensing Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users Licensing Test#CredCode#
Office 365 Users Licensing Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users Licensing Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users Licensing Test#CredCode#
Office 365 Users Licensing Test#CredCode#$TotLicensed = 0
Office 365 Users Licensing Test#CredCode#$TotNotLicensed = 0
Office 365 Users Licensing Test#CredCode#$AnyGap = "No"
Office 365 Users Licensing Test#CredCode#$TestStatus ="Passed"
Office 365 Users Licensing Test#CredCode#$SumVal = ""
Office 365 Users Licensing Test#CredCode#$TestText = ""
Office 365 Users Licensing Test#CredCode#
Office 365 Users Licensing Test#CredCode#$STR = "UserPrincipalName, Licensed"
Office 365 Users Licensing Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Users Licensing Test#CredCode#
Office 365 Users Licensing Test#CredCode#$AllUsers = Get-MSOlUser -ALL
Office 365 Users Licensing Test#CredCode#$AllUsersCount = $AllUsers.Count
Office 365 Users Licensing Test#CredCode#
Office 365 Users Licensing Test#CredCode#ForEach ($Item in $AllUsers)
Office 365 Users Licensing Test#CredCode#{
Office 365 Users Licensing Test#CredCode#$ValProp = $Item.IsLicensed
Office 365 Users Licensing Test#CredCode#IF ($ValProp -eq $True)
Office 365 Users Licensing Test#CredCode#{
Office 365 Users Licensing Test#CredCode#$TotLicensed++
Office 365 Users Licensing Test#CredCode#}
Office 365 Users Licensing Test#CredCode#else
Office 365 Users Licensing Test#CredCode#{
Office 365 Users Licensing Test#CredCode#$TotNotLicensed++
Office 365 Users Licensing Test#CredCode#$STR = $Item.UserPrincipalName+",No"
Office 365 Users Licensing Test#CredCode#Add-Content $DataFileLocation $STR                
Office 365 Users Licensing Test#CredCode#}
Office 365 Users Licensing Test#CredCode#}
Office 365 Users Licensing Test#CredCode#
Office 365 Users Licensing Test#CredCode#$UsersScore=($TotNotLicensed/$AllUsersCount)*100 
Office 365 Users Licensing Test#CredCode#
Office 365 Users Licensing Test#CredCode#If ($UsersScore -gt 15)
Office 365 Users Licensing Test#CredCode#{
Office 365 Users Licensing Test#CredCode#$TestStatus="High"
Office 365 Users Licensing Test#CredCode#$TestText = "More than 15 percent users are not licensed. Please check to make sure these users do not need any license. Unlicensed users can be found in $AzureUsersUnLicensed"
Office 365 Users Licensing Test#CredCode#$SumVal = "NA"
Office 365 Users Licensing Test#CredCode#}
Office 365 Users Licensing Test#CredCode#else
Office 365 Users Licensing Test#CredCode#{
Office 365 Users Licensing Test#CredCode#$TestStatus="Passed"
Office 365 Users Licensing Test#CredCode#$TestText = "Most Office 365 users are licensed."
Office 365 Users Licensing Test#CredCode#$SumVal = "NA"
Office 365 Users Licensing Test#CredCode#}
Office 365 Users Licensing Test#CredCode#
Office 365 Users Licensing Test#CredCode#$ThisSTR = $AllUsersCount.ToString()+","+$TotLicensed.ToString()+","+$TotNotLicensed.ToString()+","+$UsersScore.ToString()+","+$DataFileLocation
Office 365 Users Licensing Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Office 365 Users Licensing Test#CredCode#
Office 365 Users Licensing Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Office 365 MailBox Last Logon Test#Headercode#$ThisString="Total Mailbox, Total Using Mailbox, Total Users Not Using Mailbox, Percentage Not Using Mailbox, Data File Location"
Office 365 MailBox Last Logon Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 MailBox Last Logon Test#Headercode#
Office 365 MailBox Last Logon Test#Headercode#
Office 365 MailBox Last Logon Test#Headercode#
Office 365 MailBox Last Logon Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 MailBox Last Logon Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 MailBox Last Logon Test#CredCode#$AllMailBox = Get-Mailbox -ResultSize Unlimited
Office 365 MailBox Last Logon Test#CredCode#$TotMailBox = $AllMailBox.Count
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#$TotNotLoggedOn = 0
Office 365 MailBox Last Logon Test#CredCode#$TotLoggedOn = 0
Office 365 MailBox Last Logon Test#CredCode#$AnyGap = "No"
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#ForEach ($Item in $AllMailBox) 
Office 365 MailBox Last Logon Test#CredCode#{
Office 365 MailBox Last Logon Test#CredCode#$UPNNow = $Item.UserPrincipalName
Office 365 MailBox Last Logon Test#CredCode#$LastLogonTime=(Get-MailboxStatistics -Identity $UPNNow).lastlogontime 
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#IF ($LastLogonTime -eq $Null)
Office 365 MailBox Last Logon Test#CredCode#{
Office 365 MailBox Last Logon Test#CredCode#$AnyGap = "Yes"       
Office 365 MailBox Last Logon Test#CredCode#$TotNotLoggedOn++
Office 365 MailBox Last Logon Test#CredCode#} 
Office 365 MailBox Last Logon Test#CredCode#else
Office 365 MailBox Last Logon Test#CredCode#{
Office 365 MailBox Last Logon Test#CredCode#$TotLoggedOn++
Office 365 MailBox Last Logon Test#CredCode#} 
Office 365 MailBox Last Logon Test#CredCode#}
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#$UsersScore=($TotNotLoggedOn/$TotMailBox)*100 
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#$ValSTR = $TotMailBox.ToString()+","+$TotLoggedOn.ToString()+","+$TotNotLoggedOn.ToString()+","+$UsersScore.ToString()+","+$DataFileLocation
Office 365 MailBox Last Logon Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 MailBox Last Logon Test#CredCode#{
Office 365 MailBox Last Logon Test#CredCode#IF ($UsersScore -gt 15)
Office 365 MailBox Last Logon Test#CredCode#{
Office 365 MailBox Last Logon Test#CredCode#$SumVal = ""
Office 365 MailBox Last Logon Test#CredCode#$TestStatus="High"
Office 365 MailBox Last Logon Test#CredCode#$TestText="Not Logged in"
Office 365 MailBox Last Logon Test#CredCode#}
Office 365 MailBox Last Logon Test#CredCode#else
Office 365 MailBox Last Logon Test#CredCode#{
Office 365 MailBox Last Logon Test#CredCode#$SumVal = ""
Office 365 MailBox Last Logon Test#CredCode#$TestStatus="Medium"
Office 365 MailBox Last Logon Test#CredCode#$TestText="Not Logged in"
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#}
Office 365 MailBox Last Logon Test#CredCode#}
Office 365 MailBox Last Logon Test#CredCode#else
Office 365 MailBox Last Logon Test#CredCode#{
Office 365 MailBox Last Logon Test#CredCode#$SumVal = ""
Office 365 MailBox Last Logon Test#CredCode#$TestStatus="Passed"
Office 365 MailBox Last Logon Test#CredCode#$TestText = "All Mailboxes have been using."
Office 365 MailBox Last Logon Test#CredCode#}
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 MailBox Last Logon Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 MailBox Last Logon Test#CredCode#$AllMailBox = Get-Mailbox -ResultSize Unlimited
Office 365 MailBox Last Logon Test#CredCode#$TotMailBox = $AllMailBox.Count
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#$TotNotLoggedOn = 0
Office 365 MailBox Last Logon Test#CredCode#$TotLoggedOn = 0
Office 365 MailBox Last Logon Test#CredCode#$AnyGap = "No"
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#ForEach ($Item in $AllMailBox) 
Office 365 MailBox Last Logon Test#CredCode#{
Office 365 MailBox Last Logon Test#CredCode#$UPNNow = $Item.UserPrincipalName
Office 365 MailBox Last Logon Test#CredCode#$LastLogonTime=(Get-MailboxStatistics -Identity $UPNNow).lastlogontime 
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#IF ($LastLogonTime -eq $Null)
Office 365 MailBox Last Logon Test#CredCode#{
Office 365 MailBox Last Logon Test#CredCode#$AnyGap = "Yes"       
Office 365 MailBox Last Logon Test#CredCode#$TotNotLoggedOn++
Office 365 MailBox Last Logon Test#CredCode#} 
Office 365 MailBox Last Logon Test#CredCode#else
Office 365 MailBox Last Logon Test#CredCode#{
Office 365 MailBox Last Logon Test#CredCode#$TotLoggedOn++
Office 365 MailBox Last Logon Test#CredCode#} 
Office 365 MailBox Last Logon Test#CredCode#}
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#$UsersScore=($TotNotLoggedOn/$TotMailBox)*100 
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#$ValSTR = $TotMailBox.ToString()+","+$TotLoggedOn.ToString()+","+$TotNotLoggedOn.ToString()+","+$UsersScore.ToString()+","+$DataFileLocation
Office 365 MailBox Last Logon Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 MailBox Last Logon Test#CredCode#{
Office 365 MailBox Last Logon Test#CredCode#IF ($UsersScore -gt 15)
Office 365 MailBox Last Logon Test#CredCode#{
Office 365 MailBox Last Logon Test#CredCode#$SumVal = ""
Office 365 MailBox Last Logon Test#CredCode#$TestStatus="High"
Office 365 MailBox Last Logon Test#CredCode#$TestText="Not Logged in"
Office 365 MailBox Last Logon Test#CredCode#}
Office 365 MailBox Last Logon Test#CredCode#else
Office 365 MailBox Last Logon Test#CredCode#{
Office 365 MailBox Last Logon Test#CredCode#$SumVal = ""
Office 365 MailBox Last Logon Test#CredCode#$TestStatus="Medium"
Office 365 MailBox Last Logon Test#CredCode#$TestText="Not Logged in"
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#}
Office 365 MailBox Last Logon Test#CredCode#}
Office 365 MailBox Last Logon Test#CredCode#else
Office 365 MailBox Last Logon Test#CredCode#{
Office 365 MailBox Last Logon Test#CredCode#$SumVal = ""
Office 365 MailBox Last Logon Test#CredCode#$TestStatus="Passed"
Office 365 MailBox Last Logon Test#CredCode#$TestText = "All Mailboxes have been using."
Office 365 MailBox Last Logon Test#CredCode#}
Office 365 MailBox Last Logon Test#CredCode#
Office 365 MailBox Last Logon Test#CredCode#
Office 365 Mailbox Top Big Mailbox Test#Headercode#$ThisString="Total Mailbox, Number of Total 30 Big Mailboxes, Data File Location"
Office 365 Mailbox Top Big Mailbox Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Top Big Mailbox Test#CredCode#
Office 365 Mailbox Top Big Mailbox Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Mailbox Top Big Mailbox Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Mailbox Top Big Mailbox Test#CredCode#$AllMailBox = Get-Mailbox -ResultSize Unlimited
Office 365 Mailbox Top Big Mailbox Test#CredCode#$TotMailBox = $AllMailBox.Count
Office 365 Mailbox Top Big Mailbox Test#CredCode#
Office 365 Mailbox Top Big Mailbox Test#CredCode#$TotBigOnes = Get-Mailbox -ResultSize Unlimited | Get-MailboxStatistics $_.Guid | Sort-Object TotalItemSize -Descending | Select-Object DisplayName,TotalItemSize -First 30
Office 365 Mailbox Top Big Mailbox Test#CredCode#$TotBigOnesCount = $TotBigOnes.Count
Office 365 Mailbox Top Big Mailbox Test#CredCode#
Office 365 Mailbox Top Big Mailbox Test#CredCode#$ValSTR = $TotMailBox.ToString()+","+$TotBigOnesCount+","+$DataFileLocation
Office 365 Mailbox Top Big Mailbox Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Mailbox Top Big Mailbox Test#CredCode#
Office 365 Mailbox Top Big Mailbox Test#CredCode#IF ($TotBigOnesCount -eq 0)
Office 365 Mailbox Top Big Mailbox Test#CredCode#{
Office 365 Mailbox Top Big Mailbox Test#CredCode#    $SumVal = ""
Office 365 Mailbox Top Big Mailbox Test#CredCode#    $TestStatus="Passed"
Office 365 Mailbox Top Big Mailbox Test#CredCode#    $TestText = ""
Office 365 Mailbox Top Big Mailbox Test#CredCode#}
Office 365 Mailbox Top Big Mailbox Test#CredCode#else
Office 365 Mailbox Top Big Mailbox Test#CredCode#{
Office 365 Mailbox Top Big Mailbox Test#CredCode#    $SumVal = ""
Office 365 Mailbox Top Big Mailbox Test#CredCode#    $TestStatus="Low"
Office 365 Mailbox Top Big Mailbox Test#CredCode#    $TestText = ""
Office 365 Mailbox Top Big Mailbox Test#CredCode#}
Office 365 Mailbox Storage Mailbox Policy Test#Headercode#$ThisString="Policy Name, Size"
Office 365 Mailbox Storage Mailbox Policy Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#$TRCA=$CurrentLoc+"\Data\"+$UniqueTest+"_TRCA.TXT"
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#Remove-Item $TRCA -ErrorAction SilentlyContinue
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#$TRCB=$CurrentLoc+"\Data\"+$UniqueTest+"_TRCB.TXT"
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#Remove-Item $TRCB -ErrorAction SilentlyContinue
Office 365 Mailbox Storage Mailbox Policy Test#CredCode# $STR="Policy Name, Size"
Office 365 Mailbox Storage Mailbox Policy Test#CredCode# Add-Content "$TRCB" $ThisString
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#$Mailboxes = Get-Mailbox -ResultSize Unlimited | Select IssueWarningQuota, ProhibitSendQuota, ProhibitSendReceiveQuota
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#$AnyGap = "No"
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#ForEach ($Item in $Mailboxes)
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#{
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $ThisCurrentValue = $ITem.IssueWarningQuota
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $A, $B = $ThisCurrentValue.Split("(")
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $ThisValNow = $A
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $STR = "Issue Warning Quota, "+$ThisValNow
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    Add-Content $TRCA $STR
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $ThisCurrentValue = $ITem.ProhibitSendQuota
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $A, $B = $ThisCurrentValue.Split("(")
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $ThisValNow = $A
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $STR = "Prohibit Send Quota, "+$ThisValNow
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    Add-Content $TRCA $STR
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $ThisCurrentValue = $ITem.ProhibitSendReceiveQuota
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $A, $B = $ThisCurrentValue.Split("(")
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $ThisValNow = $A
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $STR = "Prohibit Send Receive Quota, "+$ThisValNow
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    Add-Content $TRCA $STR
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#}
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#Get-Content $TRCA | Sort-Object -Unique | Out-File $TRCB
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#ForEach ($ITem in GC $TRCB)
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#{
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $STR = $Item
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#}
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#$TotCount = GC $TRCB
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#$TotNow = $TotCount.Count
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#IF ($TotNow -gt 3)
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#{
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $SumVal = ""
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $TestStatus="High"
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $TestText="Different Policies found."    
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#   
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#}
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#else
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#{
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $SumVal = ""
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $TestStatus="Passed"
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Mailbox Storage Mailbox Policy Test#CredCode#}
Office 365 Inactive Mailbox Test#Headercode#$ThisString="Name, Alias, Mailbox Database"
Office 365 Inactive Mailbox Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Inactive Mailbox Test#CredCode#
Office 365 Inactive Mailbox Test#CredCode#$AllItems = Get-Mailbox -InactiveMailboxOnly -ResultSize Unlimited
Office 365 Inactive Mailbox Test#CredCode#$AnyGap = "No"
Office 365 Inactive Mailbox Test#CredCode#
Office 365 Inactive Mailbox Test#CredCode#ForEach ($Item in $AllItems)
Office 365 Inactive Mailbox Test#CredCode#{
Office 365 Inactive Mailbox Test#CredCode#    
Office 365 Inactive Mailbox Test#CredCode#    $MailBoxNow = $Item.Name
Office 365 Inactive Mailbox Test#CredCode#    $AliasNow = $Item.Alias
Office 365 Inactive Mailbox Test#CredCode#    $MailDB = $Item.Database
Office 365 Inactive Mailbox Test#CredCode#
Office 365 Inactive Mailbox Test#CredCode#    $ValSTR = $MailBoxNow+","+$AliasNow+","+$MailDB
Office 365 Inactive Mailbox Test#CredCode#    Add-Content "$TestCSVFile" $ValSTR
Office 365 Inactive Mailbox Test#CredCode#    
Office 365 Inactive Mailbox Test#CredCode#    $AnyGap = "Yes"    
Office 365 Inactive Mailbox Test#CredCode#}
Office 365 Inactive Mailbox Test#CredCode#
Office 365 Inactive Mailbox Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 Inactive Mailbox Test#CredCode#{
Office 365 Inactive Mailbox Test#CredCode#    $SumVal = ""
Office 365 Inactive Mailbox Test#CredCode#    $TestStatus="High"
Office 365 Inactive Mailbox Test#CredCode#    $TestText="There are Inactive Mailbox"    
Office 365 Inactive Mailbox Test#CredCode#   
Office 365 Inactive Mailbox Test#CredCode#}
Office 365 Inactive Mailbox Test#CredCode#else
Office 365 Inactive Mailbox Test#CredCode#{
Office 365 Inactive Mailbox Test#CredCode#    $SumVal = ""
Office 365 Inactive Mailbox Test#CredCode#    $TestStatus="Passed"
Office 365 Inactive Mailbox Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Inactive Mailbox Test#CredCode#}
Office 365 Deleted Mailbox Test#Headercode#$ThisString="Name, Alias, Mailbox Database"
Office 365 Deleted Mailbox Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Deleted Mailbox Test#CredCode#
Office 365 Deleted Mailbox Test#CredCode#$AllItems = Get-Mailbox -SoftDeletedMailbox -ResultSize Unlimited
Office 365 Deleted Mailbox Test#CredCode#$AnyGap = "No"
Office 365 Deleted Mailbox Test#CredCode#
Office 365 Deleted Mailbox Test#CredCode#ForEach ($Item in $AllItems)
Office 365 Deleted Mailbox Test#CredCode#{
Office 365 Deleted Mailbox Test#CredCode#    
Office 365 Deleted Mailbox Test#CredCode#    $MailBoxNow = $Item.Name
Office 365 Deleted Mailbox Test#CredCode#    $AliasNow = $Item.Alias
Office 365 Deleted Mailbox Test#CredCode#    $MailDB = $Item.Database
Office 365 Deleted Mailbox Test#CredCode#
Office 365 Deleted Mailbox Test#CredCode#    $ValSTR = $MailBoxNow+","+$AliasNow+","+$MailDB
Office 365 Deleted Mailbox Test#CredCode#    Add-Content "$TestCSVFile" $ValSTR
Office 365 Deleted Mailbox Test#CredCode#    
Office 365 Deleted Mailbox Test#CredCode#    $AnyGap = "Yes"    
Office 365 Deleted Mailbox Test#CredCode#}
Office 365 Deleted Mailbox Test#CredCode#
Office 365 Deleted Mailbox Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 Deleted Mailbox Test#CredCode#{
Office 365 Deleted Mailbox Test#CredCode#    $SumVal = ""
Office 365 Deleted Mailbox Test#CredCode#    $TestStatus="High"
Office 365 Deleted Mailbox Test#CredCode#    $TestText="There are Soft Deleted Mailbox"    
Office 365 Deleted Mailbox Test#CredCode#   
Office 365 Deleted Mailbox Test#CredCode#}
Office 365 Deleted Mailbox Test#CredCode#else
Office 365 Deleted Mailbox Test#CredCode#{
Office 365 Deleted Mailbox Test#CredCode#    $SumVal = ""
Office 365 Deleted Mailbox Test#CredCode#    $TestStatus="Passed"
Office 365 Deleted Mailbox Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Deleted Mailbox Test#CredCode#}
Office 365 Mailbox Role Assignment Policies Test#Headercode#$ThisString="Role Assignment Policy, Assigned To Mailboxes, Data File Location"
Office 365 Mailbox Role Assignment Policies Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Role Assignment Policies Test#CredCode#
Office 365 Mailbox Role Assignment Policies Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Mailbox Role Assignment Policies Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Mailbox Role Assignment Policies Test#CredCode#$STR = "Assignment Policy, Mailbox"
Office 365 Mailbox Role Assignment Policies Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Mailbox Role Assignment Policies Test#CredCode#
Office 365 Mailbox Role Assignment Policies Test#CredCode#$AllMailBox = Get-Mailbox -ResultSize Unlimited | Select-Object DisplayName, RoleAssignmentPolicy
Office 365 Mailbox Role Assignment Policies Test#CredCode#
Office 365 Mailbox Role Assignment Policies Test#CredCode#$TRCFile = $CurrentLoc+"\Data\"+$UniqueTest+"_TRC.CSV"
Office 365 Mailbox Role Assignment Policies Test#CredCode#Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Role Assignment Policies Test#CredCode#$STR = "Policy,Tot"
Office 365 Mailbox Role Assignment Policies Test#CredCode#Add-Content $TRCFile $STR
Office 365 Mailbox Role Assignment Policies Test#CredCode#
Office 365 Mailbox Role Assignment Policies Test#CredCode#$AnyGap = "No"
Office 365 Mailbox Role Assignment Policies Test#CredCode#
Office 365 Mailbox Role Assignment Policies Test#CredCode#ForEach ($Item in $AllMailBox)
Office 365 Mailbox Role Assignment Policies Test#CredCode#{
Office 365 Mailbox Role Assignment Policies Test#CredCode#    $Policy = $Item.RoleAssignmentPolicy
Office 365 Mailbox Role Assignment Policies Test#CredCode#    
Office 365 Mailbox Role Assignment Policies Test#CredCode#    $FoundOrNot = "No"
Office 365 Mailbox Role Assignment Policies Test#CredCode#    $TRCCSV = Import-CSV $TRCFile
Office 365 Mailbox Role Assignment Policies Test#CredCode#    ForEach ($PolicyNow in $TRCCSV)
Office 365 Mailbox Role Assignment Policies Test#CredCode#    {
Office 365 Mailbox Role Assignment Policies Test#CredCode#        IF ($PolicyNow.Policy -eq $Policy)
Office 365 Mailbox Role Assignment Policies Test#CredCode#        {
Office 365 Mailbox Role Assignment Policies Test#CredCode#            $FoundOrNot = "Yes"
Office 365 Mailbox Role Assignment Policies Test#CredCode#            Break
Office 365 Mailbox Role Assignment Policies Test#CredCode#        }        
Office 365 Mailbox Role Assignment Policies Test#CredCode#    }
Office 365 Mailbox Role Assignment Policies Test#CredCode#
Office 365 Mailbox Role Assignment Policies Test#CredCode#    IF ($FoundOrNot -eq "No")
Office 365 Mailbox Role Assignment Policies Test#CredCode#    {
Office 365 Mailbox Role Assignment Policies Test#CredCode#        $TotCountNow = 0
Office 365 Mailbox Role Assignment Policies Test#CredCode#        ForEach ($AllCounts in $AllMailBox)
Office 365 Mailbox Role Assignment Policies Test#CredCode#        {
Office 365 Mailbox Role Assignment Policies Test#CredCode#            IF ($AllCounts.RoleAssignmentPolicy -eq $Policy)
Office 365 Mailbox Role Assignment Policies Test#CredCode#            {
Office 365 Mailbox Role Assignment Policies Test#CredCode#                $DispName = $AllCounts.DisplayName
Office 365 Mailbox Role Assignment Policies Test#CredCode#                $TotCountNow++
Office 365 Mailbox Role Assignment Policies Test#CredCode#                $STR = $Policy+","+$DispName
Office 365 Mailbox Role Assignment Policies Test#CredCode#                Add-Content $DataFileLocation $STR
Office 365 Mailbox Role Assignment Policies Test#CredCode#            }
Office 365 Mailbox Role Assignment Policies Test#CredCode#        }
Office 365 Mailbox Role Assignment Policies Test#CredCode#
Office 365 Mailbox Role Assignment Policies Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()
Office 365 Mailbox Role Assignment Policies Test#CredCode#        Add-Content $TRCFile $STR
Office 365 Mailbox Role Assignment Policies Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()+","+$DataFileLocation
Office 365 Mailbox Role Assignment Policies Test#CredCode#        Add-Content $TestCSVFile $STR
Office 365 Mailbox Role Assignment Policies Test#CredCode#    }
Office 365 Mailbox Role Assignment Policies Test#CredCode#}
Office 365 Mailbox Role Assignment Policies Test#CredCode#
Office 365 Mailbox Role Assignment Policies Test#CredCode#$TotPolNow = Import-CSV $TestCSVFile
Office 365 Mailbox Role Assignment Policies Test#CredCode#$TotPolCount = $TotPolNow.Count
Office 365 Mailbox Role Assignment Policies Test#CredCode#Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Role Assignment Policies Test#CredCode#
Office 365 Mailbox Role Assignment Policies Test#CredCode#IF ($TotPolCount -gt 1)
Office 365 Mailbox Role Assignment Policies Test#CredCode#{
Office 365 Mailbox Role Assignment Policies Test#CredCode#    $SumVal = ""
Office 365 Mailbox Role Assignment Policies Test#CredCode#    $TestStatus="Low"
Office 365 Mailbox Role Assignment Policies Test#CredCode#    $TestText = ""
Office 365 Mailbox Role Assignment Policies Test#CredCode#}
Office 365 Mailbox Role Assignment Policies Test#CredCode#else
Office 365 Mailbox Role Assignment Policies Test#CredCode#{
Office 365 Mailbox Role Assignment Policies Test#CredCode#    $SumVal = ""
Office 365 Mailbox Role Assignment Policies Test#CredCode#    $TestStatus="Passed"
Office 365 Mailbox Role Assignment Policies Test#CredCode#    $TestText = ""
Office 365 Mailbox Role Assignment Policies Test#CredCode#}
Office 365 Mailbox Role Assignment Policies Test#CredCode#
Office 365 Mailbox Capabilities Test#Headercode#$ThisString="Capabilities, Assigned To Mailboxes, Data File Location"
Office 365 Mailbox Capabilities Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Capabilities Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Mailbox Capabilities Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Mailbox Capabilities Test#CredCode#$STR = "Capabilities, Mailbox"
Office 365 Mailbox Capabilities Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Capabilities Test#CredCode#$AllMailBox = Get-Mailbox -ResultSize Unlimited | Select-Object DisplayName, PersistedCapabilities
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Capabilities Test#CredCode#$TRCFile = $CurrentLoc+"\Data\"+$UniqueTest+"_TRC.CSV"
Office 365 Mailbox Capabilities Test#CredCode#Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Capabilities Test#CredCode#$STR = "Policy,Tot"
Office 365 Mailbox Capabilities Test#CredCode#Add-Content $TRCFile $STR
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Capabilities Test#CredCode#$AnyGap = "No"
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Capabilities Test#CredCode#ForEach ($Item in $AllMailBox)
Office 365 Mailbox Capabilities Test#CredCode#{
Office 365 Mailbox Capabilities Test#CredCode#    $PRNow = $Item.PersistedCapabilities
Office 365 Mailbox Capabilities Test#CredCode#    $arr = @($PRNow)
Office 365 Mailbox Capabilities Test#CredCode#    $Policy = [string]::Concat($arr)
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Capabilities Test#CredCode#    IF ($Policy -eq "" -or $Policy -eq $Null)
Office 365 Mailbox Capabilities Test#CredCode#    {
Office 365 Mailbox Capabilities Test#CredCode#    }
Office 365 Mailbox Capabilities Test#CredCode#    else
Office 365 Mailbox Capabilities Test#CredCode#    {
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Capabilities Test#CredCode#    $FoundOrNot = "No"
Office 365 Mailbox Capabilities Test#CredCode#    $TRCCSV = Import-CSV $TRCFile
Office 365 Mailbox Capabilities Test#CredCode#    ForEach ($PolicyNow in $TRCCSV)
Office 365 Mailbox Capabilities Test#CredCode#    {
Office 365 Mailbox Capabilities Test#CredCode#        IF ($PolicyNow.Policy -eq $Policy)
Office 365 Mailbox Capabilities Test#CredCode#        {
Office 365 Mailbox Capabilities Test#CredCode#            $FoundOrNot = "Yes"
Office 365 Mailbox Capabilities Test#CredCode#            Break
Office 365 Mailbox Capabilities Test#CredCode#        }        
Office 365 Mailbox Capabilities Test#CredCode#    }
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Capabilities Test#CredCode#    IF ($FoundOrNot -eq "No")
Office 365 Mailbox Capabilities Test#CredCode#    {
Office 365 Mailbox Capabilities Test#CredCode#        $TotCountNow = 0
Office 365 Mailbox Capabilities Test#CredCode#        ForEach ($AllCounts in $AllMailBox)
Office 365 Mailbox Capabilities Test#CredCode#        {
Office 365 Mailbox Capabilities Test#CredCode#    
Office 365 Mailbox Capabilities Test#CredCode#            $SetNow = $AllCounts.PersistedCapabilities        
Office 365 Mailbox Capabilities Test#CredCode#            $arr = @($SetNow)
Office 365 Mailbox Capabilities Test#CredCode#            $NewSetNow = [string]::Concat($arr)
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Capabilities Test#CredCode#            IF ($NewSetNow -eq $Policy)
Office 365 Mailbox Capabilities Test#CredCode#            {
Office 365 Mailbox Capabilities Test#CredCode#                $DispName = $AllCounts.DisplayName
Office 365 Mailbox Capabilities Test#CredCode#                $TotCountNow++
Office 365 Mailbox Capabilities Test#CredCode#                $STR = $Policy+","+$DispName
Office 365 Mailbox Capabilities Test#CredCode#                Add-Content $DataFileLocation $STR
Office 365 Mailbox Capabilities Test#CredCode#            }
Office 365 Mailbox Capabilities Test#CredCode#        }
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Capabilities Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()
Office 365 Mailbox Capabilities Test#CredCode#        Add-Content $TRCFile $STR
Office 365 Mailbox Capabilities Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()+","+$DataFileLocation
Office 365 Mailbox Capabilities Test#CredCode#        Add-Content $TestCSVFile $STR
Office 365 Mailbox Capabilities Test#CredCode#    }
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Capabilities Test#CredCode#    }
Office 365 Mailbox Capabilities Test#CredCode#}
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Capabilities Test#CredCode#$TotPolNow = Import-CSV $TestCSVFile
Office 365 Mailbox Capabilities Test#CredCode#$TotPolCount = $TotPolNow.Count
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Capabilities Test#CredCode# Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Capabilities Test#CredCode#IF ($TotPolCount -gt 1)
Office 365 Mailbox Capabilities Test#CredCode#{
Office 365 Mailbox Capabilities Test#CredCode#    $SumVal = ""
Office 365 Mailbox Capabilities Test#CredCode#    $TestStatus="Low"
Office 365 Mailbox Capabilities Test#CredCode#    $TestText = ""
Office 365 Mailbox Capabilities Test#CredCode#}
Office 365 Mailbox Capabilities Test#CredCode#else
Office 365 Mailbox Capabilities Test#CredCode#{
Office 365 Mailbox Capabilities Test#CredCode#    $SumVal = ""
Office 365 Mailbox Capabilities Test#CredCode#    $TestStatus="Passed"
Office 365 Mailbox Capabilities Test#CredCode#    $TestText = ""
Office 365 Mailbox Capabilities Test#CredCode#}
Office 365 Mailbox Capabilities Test#CredCode#
Office 365 Mailbox Retention Policies Test#Headercode#$ThisString="Retention Policy, Assigned To Mailboxes, Data File Location"
Office 365 Mailbox Retention Policies Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Retention Policies Test#CredCode#
Office 365 Mailbox Retention Policies Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Mailbox Retention Policies Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Mailbox Retention Policies Test#CredCode#$STR = "Retention Policy, Mailbox"
Office 365 Mailbox Retention Policies Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Mailbox Retention Policies Test#CredCode#
Office 365 Mailbox Retention Policies Test#CredCode#$AllMailBox = Get-Mailbox -ResultSize Unlimited | Select-Object DisplayName, RetentionPolicy
Office 365 Mailbox Retention Policies Test#CredCode#
Office 365 Mailbox Retention Policies Test#CredCode#$TRCFile = $CurrentLoc+"\Data\"+$UniqueTest+"_TRC.CSV"
Office 365 Mailbox Retention Policies Test#CredCode#Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Retention Policies Test#CredCode#$STR = "Policy,Tot"
Office 365 Mailbox Retention Policies Test#CredCode#Add-Content $TRCFile $STR
Office 365 Mailbox Retention Policies Test#CredCode#
Office 365 Mailbox Retention Policies Test#CredCode#$AnyGap = "No"
Office 365 Mailbox Retention Policies Test#CredCode#
Office 365 Mailbox Retention Policies Test#CredCode#ForEach ($Item in $AllMailBox)
Office 365 Mailbox Retention Policies Test#CredCode#{
Office 365 Mailbox Retention Policies Test#CredCode#    $Policy = $Item.RetentionPolicy
Office 365 Mailbox Retention Policies Test#CredCode#    
Office 365 Mailbox Retention Policies Test#CredCode#    IF ($Policy -eq "" -or $Policy -eq $Null)
Office 365 Mailbox Retention Policies Test#CredCode#    {
Office 365 Mailbox Retention Policies Test#CredCode#    }
Office 365 Mailbox Retention Policies Test#CredCode#    else
Office 365 Mailbox Retention Policies Test#CredCode#    {
Office 365 Mailbox Retention Policies Test#CredCode#
Office 365 Mailbox Retention Policies Test#CredCode#    $FoundOrNot = "No"
Office 365 Mailbox Retention Policies Test#CredCode#    $TRCCSV = Import-CSV $TRCFile
Office 365 Mailbox Retention Policies Test#CredCode#    ForEach ($PolicyNow in $TRCCSV)
Office 365 Mailbox Retention Policies Test#CredCode#    {
Office 365 Mailbox Retention Policies Test#CredCode#        IF ($PolicyNow.Policy -eq $Policy)
Office 365 Mailbox Retention Policies Test#CredCode#        {
Office 365 Mailbox Retention Policies Test#CredCode#            $FoundOrNot = "Yes"
Office 365 Mailbox Retention Policies Test#CredCode#            Break
Office 365 Mailbox Retention Policies Test#CredCode#        }        
Office 365 Mailbox Retention Policies Test#CredCode#    }
Office 365 Mailbox Retention Policies Test#CredCode#
Office 365 Mailbox Retention Policies Test#CredCode#    IF ($FoundOrNot -eq "No")
Office 365 Mailbox Retention Policies Test#CredCode#    {
Office 365 Mailbox Retention Policies Test#CredCode#        $TotCountNow = 0
Office 365 Mailbox Retention Policies Test#CredCode#        ForEach ($AllCounts in $AllMailBox)
Office 365 Mailbox Retention Policies Test#CredCode#        {
Office 365 Mailbox Retention Policies Test#CredCode#            IF ($AllCounts.RetentionPolicy -eq $Policy)
Office 365 Mailbox Retention Policies Test#CredCode#            {
Office 365 Mailbox Retention Policies Test#CredCode#                $DispName = $AllCounts.DisplayName
Office 365 Mailbox Retention Policies Test#CredCode#                $TotCountNow++
Office 365 Mailbox Retention Policies Test#CredCode#                $STR = $Policy+","+$DispName
Office 365 Mailbox Retention Policies Test#CredCode#                Add-Content $DataFileLocation $STR
Office 365 Mailbox Retention Policies Test#CredCode#            }
Office 365 Mailbox Retention Policies Test#CredCode#        }
Office 365 Mailbox Retention Policies Test#CredCode#
Office 365 Mailbox Retention Policies Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()
Office 365 Mailbox Retention Policies Test#CredCode#        Add-Content $TRCFile $STR
Office 365 Mailbox Retention Policies Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()+","+$DataFileLocation
Office 365 Mailbox Retention Policies Test#CredCode#        Add-Content $TestCSVFile $STR
Office 365 Mailbox Retention Policies Test#CredCode#    }
Office 365 Mailbox Retention Policies Test#CredCode#
Office 365 Mailbox Retention Policies Test#CredCode#    }
Office 365 Mailbox Retention Policies Test#CredCode#}
Office 365 Mailbox Retention Policies Test#CredCode#
Office 365 Mailbox Retention Policies Test#CredCode#$TotPolNow = Import-CSV $TestCSVFile
Office 365 Mailbox Retention Policies Test#CredCode#$TotPolCount = $TotPolNow.Count
Office 365 Mailbox Retention Policies Test#CredCode#
Office 365 Mailbox Retention Policies Test#CredCode# Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Retention Policies Test#CredCode#
Office 365 Mailbox Retention Policies Test#CredCode#IF ($TotPolCount -gt 1)
Office 365 Mailbox Retention Policies Test#CredCode#{
Office 365 Mailbox Retention Policies Test#CredCode#    $SumVal = ""
Office 365 Mailbox Retention Policies Test#CredCode#    $TestStatus="Low"
Office 365 Mailbox Retention Policies Test#CredCode#    $TestText = ""
Office 365 Mailbox Retention Policies Test#CredCode#}
Office 365 Mailbox Retention Policies Test#CredCode#else
Office 365 Mailbox Retention Policies Test#CredCode#{
Office 365 Mailbox Retention Policies Test#CredCode#    $SumVal = ""
Office 365 Mailbox Retention Policies Test#CredCode#    $TestStatus="Passed"
Office 365 Mailbox Retention Policies Test#CredCode#    $TestText = ""
Office 365 Mailbox Retention Policies Test#CredCode#}
Office 365 Mailbox Audit Policy Test#Headercode#$ThisString="Audit Policy, Assigned To Mailboxes, Data File Location"
Office 365 Mailbox Audit Policy Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Audit Policy Test#CredCode#
Office 365 Mailbox Audit Policy Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Mailbox Audit Policy Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Mailbox Audit Policy Test#CredCode#$STR = "Audit Policy, Mailbox"
Office 365 Mailbox Audit Policy Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Mailbox Audit Policy Test#CredCode#
Office 365 Mailbox Audit Policy Test#CredCode#$AllMailBox = Get-Mailbox -ResultSize Unlimited | Select-Object DisplayName, DefaultAuditSet
Office 365 Mailbox Audit Policy Test#CredCode#
Office 365 Mailbox Audit Policy Test#CredCode#$TRCFile = $CurrentLoc+"\Data\"+$UniqueTest+"_TRC.CSV"
Office 365 Mailbox Audit Policy Test#CredCode#Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Audit Policy Test#CredCode#$STR = "Policy,Tot"
Office 365 Mailbox Audit Policy Test#CredCode#Add-Content $TRCFile $STR
Office 365 Mailbox Audit Policy Test#CredCode#
Office 365 Mailbox Audit Policy Test#CredCode#$AnyGap = "No"
Office 365 Mailbox Audit Policy Test#CredCode#
Office 365 Mailbox Audit Policy Test#CredCode#ForEach ($Item in $AllMailBox)
Office 365 Mailbox Audit Policy Test#CredCode#{
Office 365 Mailbox Audit Policy Test#CredCode#    $PRNow = $Item.DefaultAuditSet    
Office 365 Mailbox Audit Policy Test#CredCode#    $arr = @($PRNow)
Office 365 Mailbox Audit Policy Test#CredCode#    $Policy = [string]::Concat($arr)
Office 365 Mailbox Audit Policy Test#CredCode#
Office 365 Mailbox Audit Policy Test#CredCode#    IF ($Policy -eq "" -or $Policy -eq $Null)
Office 365 Mailbox Audit Policy Test#CredCode#    {
Office 365 Mailbox Audit Policy Test#CredCode#    }
Office 365 Mailbox Audit Policy Test#CredCode#    else
Office 365 Mailbox Audit Policy Test#CredCode#    {
Office 365 Mailbox Audit Policy Test#CredCode#
Office 365 Mailbox Audit Policy Test#CredCode#    $FoundOrNot = "No"
Office 365 Mailbox Audit Policy Test#CredCode#    $TRCCSV = Import-CSV $TRCFile
Office 365 Mailbox Audit Policy Test#CredCode#    ForEach ($PolicyNow in $TRCCSV)
Office 365 Mailbox Audit Policy Test#CredCode#    {
Office 365 Mailbox Audit Policy Test#CredCode#        IF ($PolicyNow.Policy -eq $Policy)
Office 365 Mailbox Audit Policy Test#CredCode#        {
Office 365 Mailbox Audit Policy Test#CredCode#            $FoundOrNot = "Yes"
Office 365 Mailbox Audit Policy Test#CredCode#            Break
Office 365 Mailbox Audit Policy Test#CredCode#        }        
Office 365 Mailbox Audit Policy Test#CredCode#    }
Office 365 Mailbox Audit Policy Test#CredCode#
Office 365 Mailbox Audit Policy Test#CredCode#    IF ($FoundOrNot -eq "No")
Office 365 Mailbox Audit Policy Test#CredCode#    {
Office 365 Mailbox Audit Policy Test#CredCode#        $TotCountNow = 0
Office 365 Mailbox Audit Policy Test#CredCode#        ForEach ($AllCounts in $AllMailBox)
Office 365 Mailbox Audit Policy Test#CredCode#        {
Office 365 Mailbox Audit Policy Test#CredCode#    
Office 365 Mailbox Audit Policy Test#CredCode#            $SetNow = $AllCounts.DefaultAuditSet            
Office 365 Mailbox Audit Policy Test#CredCode#            $arr = @($SetNow)
Office 365 Mailbox Audit Policy Test#CredCode#            $NewSetNow = [string]::Concat($arr)
Office 365 Mailbox Audit Policy Test#CredCode#
Office 365 Mailbox Audit Policy Test#CredCode#            IF ($NewSetNow -eq $Policy)
Office 365 Mailbox Audit Policy Test#CredCode#            {
Office 365 Mailbox Audit Policy Test#CredCode#                $DispName = $AllCounts.DisplayName
Office 365 Mailbox Audit Policy Test#CredCode#                $TotCountNow++
Office 365 Mailbox Audit Policy Test#CredCode#                $STR = $Policy+","+$DispName
Office 365 Mailbox Audit Policy Test#CredCode#                Add-Content $DataFileLocation $STR
Office 365 Mailbox Audit Policy Test#CredCode#            }
Office 365 Mailbox Audit Policy Test#CredCode#        }
Office 365 Mailbox Audit Policy Test#CredCode#
Office 365 Mailbox Audit Policy Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()
Office 365 Mailbox Audit Policy Test#CredCode#        Add-Content $TRCFile $STR
Office 365 Mailbox Audit Policy Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()+","+$DataFileLocation
Office 365 Mailbox Audit Policy Test#CredCode#        Add-Content $TestCSVFile $STR
Office 365 Mailbox Audit Policy Test#CredCode#    }
Office 365 Mailbox Audit Policy Test#CredCode#
Office 365 Mailbox Audit Policy Test#CredCode#    }
Office 365 Mailbox Audit Policy Test#CredCode#}
Office 365 Mailbox Audit Policy Test#CredCode#
Office 365 Mailbox Audit Policy Test#CredCode#$TotPolNow = Import-CSV $TestCSVFile
Office 365 Mailbox Audit Policy Test#CredCode#$TotPolCount = $TotPolNow.Count
Office 365 Mailbox Audit Policy Test#CredCode#
Office 365 Mailbox Audit Policy Test#CredCode# Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Audit Policy Test#CredCode#
Office 365 Mailbox Audit Policy Test#CredCode#IF ($TotPolCount -gt 1)
Office 365 Mailbox Audit Policy Test#CredCode#{
Office 365 Mailbox Audit Policy Test#CredCode#    $SumVal = ""
Office 365 Mailbox Audit Policy Test#CredCode#    $TestStatus="Low"
Office 365 Mailbox Audit Policy Test#CredCode#    $TestText = ""
Office 365 Mailbox Audit Policy Test#CredCode#}
Office 365 Mailbox Audit Policy Test#CredCode#else
Office 365 Mailbox Audit Policy Test#CredCode#{
Office 365 Mailbox Audit Policy Test#CredCode#    $SumVal = ""
Office 365 Mailbox Audit Policy Test#CredCode#    $TestStatus="Passed"
Office 365 Mailbox Audit Policy Test#CredCode#    $TestText = ""
Office 365 Mailbox Audit Policy Test#CredCode#}
Office 365 Mailbox UsagesLocation Test#Headercode#$ThisString="Usage Location, Assigned To Mailboxes, Data File Location"
Office 365 Mailbox UsagesLocation Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox UsagesLocation Test#CredCode#
Office 365 Mailbox UsagesLocation Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Mailbox UsagesLocation Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Mailbox UsagesLocation Test#CredCode#$STR = "Usage Location, Mailbox"
Office 365 Mailbox UsagesLocation Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Mailbox UsagesLocation Test#CredCode#
Office 365 Mailbox UsagesLocation Test#CredCode#$AllMailBox = Get-Mailbox -ResultSize Unlimited | Select-Object DisplayName, UsageLocation
Office 365 Mailbox UsagesLocation Test#CredCode#
Office 365 Mailbox UsagesLocation Test#CredCode#$TRCFile = $CurrentLoc+"\Data\"+$UniqueTest+"_TRC.CSV"
Office 365 Mailbox UsagesLocation Test#CredCode#Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox UsagesLocation Test#CredCode#$STR = "Policy,Tot"
Office 365 Mailbox UsagesLocation Test#CredCode#Add-Content $TRCFile $STR
Office 365 Mailbox UsagesLocation Test#CredCode#
Office 365 Mailbox UsagesLocation Test#CredCode#$AnyGap = "No"
Office 365 Mailbox UsagesLocation Test#CredCode#
Office 365 Mailbox UsagesLocation Test#CredCode#ForEach ($Item in $AllMailBox)
Office 365 Mailbox UsagesLocation Test#CredCode#{
Office 365 Mailbox UsagesLocation Test#CredCode#    $Policy = $Item.UsageLocation
Office 365 Mailbox UsagesLocation Test#CredCode#    
Office 365 Mailbox UsagesLocation Test#CredCode#    IF ($Policy -eq "" -or $Policy -eq $Null)
Office 365 Mailbox UsagesLocation Test#CredCode#    {
Office 365 Mailbox UsagesLocation Test#CredCode#    }
Office 365 Mailbox UsagesLocation Test#CredCode#    else
Office 365 Mailbox UsagesLocation Test#CredCode#    {
Office 365 Mailbox UsagesLocation Test#CredCode#
Office 365 Mailbox UsagesLocation Test#CredCode#    $FoundOrNot = "No"
Office 365 Mailbox UsagesLocation Test#CredCode#    $TRCCSV = Import-CSV $TRCFile
Office 365 Mailbox UsagesLocation Test#CredCode#    ForEach ($PolicyNow in $TRCCSV)
Office 365 Mailbox UsagesLocation Test#CredCode#    {
Office 365 Mailbox UsagesLocation Test#CredCode#        IF ($PolicyNow.Policy -eq $Policy)
Office 365 Mailbox UsagesLocation Test#CredCode#        {
Office 365 Mailbox UsagesLocation Test#CredCode#            $FoundOrNot = "Yes"
Office 365 Mailbox UsagesLocation Test#CredCode#            Break
Office 365 Mailbox UsagesLocation Test#CredCode#        }        
Office 365 Mailbox UsagesLocation Test#CredCode#    }
Office 365 Mailbox UsagesLocation Test#CredCode#
Office 365 Mailbox UsagesLocation Test#CredCode#    IF ($FoundOrNot -eq "No")
Office 365 Mailbox UsagesLocation Test#CredCode#    {
Office 365 Mailbox UsagesLocation Test#CredCode#        $TotCountNow = 0
Office 365 Mailbox UsagesLocation Test#CredCode#        ForEach ($AllCounts in $AllMailBox)
Office 365 Mailbox UsagesLocation Test#CredCode#        {
Office 365 Mailbox UsagesLocation Test#CredCode#            IF ($AllCounts.UsageLocation -eq $Policy)
Office 365 Mailbox UsagesLocation Test#CredCode#            {
Office 365 Mailbox UsagesLocation Test#CredCode#                $DispName = $AllCounts.DisplayName
Office 365 Mailbox UsagesLocation Test#CredCode#                $TotCountNow++
Office 365 Mailbox UsagesLocation Test#CredCode#                $STR = $Policy+","+$DispName
Office 365 Mailbox UsagesLocation Test#CredCode#                Add-Content $DataFileLocation $STR
Office 365 Mailbox UsagesLocation Test#CredCode#            }
Office 365 Mailbox UsagesLocation Test#CredCode#        }
Office 365 Mailbox UsagesLocation Test#CredCode#
Office 365 Mailbox UsagesLocation Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()
Office 365 Mailbox UsagesLocation Test#CredCode#        Add-Content $TRCFile $STR
Office 365 Mailbox UsagesLocation Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()+","+$DataFileLocation
Office 365 Mailbox UsagesLocation Test#CredCode#        Add-Content $TestCSVFile $STR
Office 365 Mailbox UsagesLocation Test#CredCode#    }
Office 365 Mailbox UsagesLocation Test#CredCode#
Office 365 Mailbox UsagesLocation Test#CredCode#    }
Office 365 Mailbox UsagesLocation Test#CredCode#}
Office 365 Mailbox UsagesLocation Test#CredCode#
Office 365 Mailbox UsagesLocation Test#CredCode#$TotPolNow = Import-CSV $TestCSVFile
Office 365 Mailbox UsagesLocation Test#CredCode#$TotPolCount = $TotPolNow.Count
Office 365 Mailbox UsagesLocation Test#CredCode#
Office 365 Mailbox UsagesLocation Test#CredCode# Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox UsagesLocation Test#CredCode#
Office 365 Mailbox UsagesLocation Test#CredCode#IF ($TotPolCount -gt 1)
Office 365 Mailbox UsagesLocation Test#CredCode#{
Office 365 Mailbox UsagesLocation Test#CredCode#    $SumVal = ""
Office 365 Mailbox UsagesLocation Test#CredCode#    $TestStatus="Low"
Office 365 Mailbox UsagesLocation Test#CredCode#    $TestText = ""
Office 365 Mailbox UsagesLocation Test#CredCode#}
Office 365 Mailbox UsagesLocation Test#CredCode#else
Office 365 Mailbox UsagesLocation Test#CredCode#{
Office 365 Mailbox UsagesLocation Test#CredCode#    $SumVal = ""
Office 365 Mailbox UsagesLocation Test#CredCode#    $TestStatus="Passed"
Office 365 Mailbox UsagesLocation Test#CredCode#    $TestText = ""
Office 365 Mailbox UsagesLocation Test#CredCode#}
Office 365 Mailbox Sync Test#Headercode#$ThisString="Total Mailboxes, Total Synced, Total Not Synced, Data File Location"
Office 365 Mailbox Sync Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Sync Test#CredCode#
Office 365 Mailbox Sync Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Mailbox Sync Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Mailbox Sync Test#CredCode#$STR = "Usage Location, Mailbox"
Office 365 Mailbox Sync Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Mailbox Sync Test#CredCode#
Office 365 Mailbox Sync Test#CredCode#$AllMailBox = Get-Mailbox -ResultSize Unlimited | Select-Object DisplayName, IsDirSynced
Office 365 Mailbox Sync Test#CredCode#$TotMailBoxCount = $AllMailBox.Count
Office 365 Mailbox Sync Test#CredCode#
Office 365 Mailbox Sync Test#CredCode#$TRCFile = $CurrentLoc+"\Data\"+$UniqueTest+"_TRC.CSV"
Office 365 Mailbox Sync Test#CredCode#Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Sync Test#CredCode#$STR = "Display Name, IsSycned"
Office 365 Mailbox Sync Test#CredCode#Add-Content $TRCFile $STR
Office 365 Mailbox Sync Test#CredCode#
Office 365 Mailbox Sync Test#CredCode#$AnyGap = "No"
Office 365 Mailbox Sync Test#CredCode#$TotNotsycned = 0
Office 365 Mailbox Sync Test#CredCode#$TotSynced = 0
Office 365 Mailbox Sync Test#CredCode#
Office 365 Mailbox Sync Test#CredCode#ForEach ($Item in $AllMailBox)
Office 365 Mailbox Sync Test#CredCode#{
Office 365 Mailbox Sync Test#CredCode#    $Policy = $Item.IsDirSynced
Office 365 Mailbox Sync Test#CredCode#    
Office 365 Mailbox Sync Test#CredCode#    IF ($Policy -eq $True)
Office 365 Mailbox Sync Test#CredCode#    {
Office 365 Mailbox Sync Test#CredCode#        $TotSynced++
Office 365 Mailbox Sync Test#CredCode#    }
Office 365 Mailbox Sync Test#CredCode#    else
Office 365 Mailbox Sync Test#CredCode#    {
Office 365 Mailbox Sync Test#CredCode#        $TotNotsycned++
Office 365 Mailbox Sync Test#CredCode#        $AnyGap = "Yes"
Office 365 Mailbox Sync Test#CredCode#        $STR = $Item.DisplayName+",No"
Office 365 Mailbox Sync Test#CredCode#        Add-Content $DataFileLocation $STR
Office 365 Mailbox Sync Test#CredCode#    }
Office 365 Mailbox Sync Test#CredCode#    
Office 365 Mailbox Sync Test#CredCode#}
Office 365 Mailbox Sync Test#CredCode#
Office 365 Mailbox Sync Test#CredCode#$STR = $TotMailBoxCount.ToString()+","+$TotSynced.ToString()+","+$TotNotsycned.ToString()+","+$DataFileLocation
Office 365 Mailbox Sync Test#CredCode#Add-Content $TestCSVFile $STR
Office 365 Mailbox Sync Test#CredCode#    
Office 365 Mailbox Sync Test#CredCode# Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Sync Test#CredCode#
Office 365 Mailbox Sync Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 Mailbox Sync Test#CredCode#{
Office 365 Mailbox Sync Test#CredCode#    $SumVal = ""
Office 365 Mailbox Sync Test#CredCode#    $TestStatus="Medium"
Office 365 Mailbox Sync Test#CredCode#    $TestText = ""
Office 365 Mailbox Sync Test#CredCode#}
Office 365 Mailbox Sync Test#CredCode#else
Office 365 Mailbox Sync Test#CredCode#{
Office 365 Mailbox Sync Test#CredCode#    $SumVal = ""
Office 365 Mailbox Sync Test#CredCode#    $TestStatus="Passed"
Office 365 Mailbox Sync Test#CredCode#    $TestText = ""
Office 365 Mailbox Sync Test#CredCode#}
Office 365 Mailbox Sync Test#CredCode#
Office 365 Mailbox Hidden From Address List Test#Headercode#$ThisString="Total Mailboxes, Hidden Mailboxes, Data File Location"
Office 365 Mailbox Hidden From Address List Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Hidden From Address List Test#CredCode#
Office 365 Mailbox Hidden From Address List Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Mailbox Hidden From Address List Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Mailbox Hidden From Address List Test#CredCode#$STR = "Mailbox, IsHidden?"
Office 365 Mailbox Hidden From Address List Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Mailbox Hidden From Address List Test#CredCode#
Office 365 Mailbox Hidden From Address List Test#CredCode#$AllMailBox = Get-Mailbox -ResultSize Unlimited | Select-Object DisplayName, HiddenFromAddressListsEnabled
Office 365 Mailbox Hidden From Address List Test#CredCode#$TotMailBoxCount = $AllMailBox.Count
Office 365 Mailbox Hidden From Address List Test#CredCode#
Office 365 Mailbox Hidden From Address List Test#CredCode#$TotHidden = 0
Office 365 Mailbox Hidden From Address List Test#CredCode#$AnyGap = "No"
Office 365 Mailbox Hidden From Address List Test#CredCode#
Office 365 Mailbox Hidden From Address List Test#CredCode#ForEach ($Item in $AllMailBox)
Office 365 Mailbox Hidden From Address List Test#CredCode#{
Office 365 Mailbox Hidden From Address List Test#CredCode#    $Policy = $Item.HiddenFromAddressListsEnabled
Office 365 Mailbox Hidden From Address List Test#CredCode#    $DispName = $Item.DisplayName
Office 365 Mailbox Hidden From Address List Test#CredCode#         
Office 365 Mailbox Hidden From Address List Test#CredCode#    IF ($Policy -eq $true)
Office 365 Mailbox Hidden From Address List Test#CredCode#    {
Office 365 Mailbox Hidden From Address List Test#CredCode#        $AnyGap = "Yes"
Office 365 Mailbox Hidden From Address List Test#CredCode#        $TotHidden++
Office 365 Mailbox Hidden From Address List Test#CredCode#    
Office 365 Mailbox Hidden From Address List Test#CredCode#        $STR = $DispName+",Yes"
Office 365 Mailbox Hidden From Address List Test#CredCode#        Add-Content $DataFileLocation $STR
Office 365 Mailbox Hidden From Address List Test#CredCode#    }
Office 365 Mailbox Hidden From Address List Test#CredCode#}
Office 365 Mailbox Hidden From Address List Test#CredCode#
Office 365 Mailbox Hidden From Address List Test#CredCode#$STR = $TotMailBoxCount.ToString()+","+$TotHidden.ToString()+","+$DataFileLocation
Office 365 Mailbox Hidden From Address List Test#CredCode#Add-Content $TestCSVFile $STR
Office 365 Mailbox Hidden From Address List Test#CredCode#
Office 365 Mailbox Hidden From Address List Test#CredCode# Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Hidden From Address List Test#CredCode#
Office 365 Mailbox Hidden From Address List Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 Mailbox Hidden From Address List Test#CredCode#{
Office 365 Mailbox Hidden From Address List Test#CredCode#    $SumVal = ""
Office 365 Mailbox Hidden From Address List Test#CredCode#    $TestStatus="Medium"
Office 365 Mailbox Hidden From Address List Test#CredCode#    $TestText = ""
Office 365 Mailbox Hidden From Address List Test#CredCode#}
Office 365 Mailbox Hidden From Address List Test#CredCode#else
Office 365 Mailbox Hidden From Address List Test#CredCode#{
Office 365 Mailbox Hidden From Address List Test#CredCode#    $SumVal = ""
Office 365 Mailbox Hidden From Address List Test#CredCode#    $TestStatus="Passed"
Office 365 Mailbox Hidden From Address List Test#CredCode#    $TestText = ""
Office 365 Mailbox Hidden From Address List Test#CredCode#}
Office 365 Mailbox Max Send Policy Test#Headercode#$ThisString="MaxSendSize Policy, Assigned To Mailboxes, Data File Location"
Office 365 Mailbox Max Send Policy Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Max Send Policy Test#CredCode#
Office 365 Mailbox Max Send Policy Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Mailbox Max Send Policy Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Mailbox Max Send Policy Test#CredCode#$STR = "MaxSendSize Policy, Mailbox"
Office 365 Mailbox Max Send Policy Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Mailbox Max Send Policy Test#CredCode#
Office 365 Mailbox Max Send Policy Test#CredCode#$AllMailBox = Get-Mailbox -ResultSize Unlimited | Select-Object DisplayName, MaxSendSize
Office 365 Mailbox Max Send Policy Test#CredCode#
Office 365 Mailbox Max Send Policy Test#CredCode#$TRCFile = $CurrentLoc+"\Data\"+$UniqueTest+"_TRC.CSV"
Office 365 Mailbox Max Send Policy Test#CredCode#Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Max Send Policy Test#CredCode#$STR = "Policy,Tot"
Office 365 Mailbox Max Send Policy Test#CredCode#Add-Content $TRCFile $STR
Office 365 Mailbox Max Send Policy Test#CredCode#
Office 365 Mailbox Max Send Policy Test#CredCode#$userObj = New-Object PSObject
Office 365 Mailbox Max Send Policy Test#CredCode#
Office 365 Mailbox Max Send Policy Test#CredCode#$AnyGap = "No"
Office 365 Mailbox Max Send Policy Test#CredCode#
Office 365 Mailbox Max Send Policy Test#CredCode#ForEach ($Item in $AllMailBox)
Office 365 Mailbox Max Send Policy Test#CredCode#{
Office 365 Mailbox Max Send Policy Test#CredCode#    $Rpol = $Item.MaxSendSize
Office 365 Mailbox Max Send Policy Test#CredCode#    $A, $B = $Rpol.Split("(")
Office 365 Mailbox Max Send Policy Test#CredCode#    $Policy = $A
Office 365 Mailbox Max Send Policy Test#CredCode#            
Office 365 Mailbox Max Send Policy Test#CredCode#    IF ($Policy -eq "" -or $Policy -eq $Null)
Office 365 Mailbox Max Send Policy Test#CredCode#    {
Office 365 Mailbox Max Send Policy Test#CredCode#    }
Office 365 Mailbox Max Send Policy Test#CredCode#    else
Office 365 Mailbox Max Send Policy Test#CredCode#    {
Office 365 Mailbox Max Send Policy Test#CredCode#
Office 365 Mailbox Max Send Policy Test#CredCode#    $FoundOrNot = "No"
Office 365 Mailbox Max Send Policy Test#CredCode#    $TRCCSV = Import-CSV $TRCFile
Office 365 Mailbox Max Send Policy Test#CredCode#    ForEach ($PolicyNow in $TRCCSV)
Office 365 Mailbox Max Send Policy Test#CredCode#    {
Office 365 Mailbox Max Send Policy Test#CredCode#        IF ($PolicyNow.Policy -eq $Policy)
Office 365 Mailbox Max Send Policy Test#CredCode#        {
Office 365 Mailbox Max Send Policy Test#CredCode#            $FoundOrNot = "Yes"
Office 365 Mailbox Max Send Policy Test#CredCode#            Break
Office 365 Mailbox Max Send Policy Test#CredCode#        }        
Office 365 Mailbox Max Send Policy Test#CredCode#    }
Office 365 Mailbox Max Send Policy Test#CredCode#
Office 365 Mailbox Max Send Policy Test#CredCode#    IF ($FoundOrNot -eq "No")
Office 365 Mailbox Max Send Policy Test#CredCode#    {
Office 365 Mailbox Max Send Policy Test#CredCode#        $TotCountNow = 0
Office 365 Mailbox Max Send Policy Test#CredCode#        ForEach ($AllCounts in $AllMailBox)
Office 365 Mailbox Max Send Policy Test#CredCode#        {
Office 365 Mailbox Max Send Policy Test#CredCode#            $Rpol = $AllCounts.MaxSendSize
Office 365 Mailbox Max Send Policy Test#CredCode#            $A, $B = $Rpol.Split("(")
Office 365 Mailbox Max Send Policy Test#CredCode#            $PolicyNew = $A    
Office 365 Mailbox Max Send Policy Test#CredCode#
Office 365 Mailbox Max Send Policy Test#CredCode#            IF ($PolicyNew -eq $Policy)
Office 365 Mailbox Max Send Policy Test#CredCode#            {
Office 365 Mailbox Max Send Policy Test#CredCode#                $DispName = $AllCounts.DisplayName
Office 365 Mailbox Max Send Policy Test#CredCode#                $TotCountNow++
Office 365 Mailbox Max Send Policy Test#CredCode#                $STR = $Policy+","+$DispName
Office 365 Mailbox Max Send Policy Test#CredCode#                Add-Content $DataFileLocation $STR
Office 365 Mailbox Max Send Policy Test#CredCode#            }
Office 365 Mailbox Max Send Policy Test#CredCode#        }
Office 365 Mailbox Max Send Policy Test#CredCode#
Office 365 Mailbox Max Send Policy Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()
Office 365 Mailbox Max Send Policy Test#CredCode#        Add-Content $TRCFile $STR
Office 365 Mailbox Max Send Policy Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()+","+$DataFileLocation
Office 365 Mailbox Max Send Policy Test#CredCode#        Add-Content $TestCSVFile $STR
Office 365 Mailbox Max Send Policy Test#CredCode#    }
Office 365 Mailbox Max Send Policy Test#CredCode#
Office 365 Mailbox Max Send Policy Test#CredCode#    }
Office 365 Mailbox Max Send Policy Test#CredCode#}
Office 365 Mailbox Max Send Policy Test#CredCode#
Office 365 Mailbox Max Send Policy Test#CredCode#$TotPolNow = Import-CSV $TestCSVFile
Office 365 Mailbox Max Send Policy Test#CredCode#$TotPolCount = $TotPolNow.Count
Office 365 Mailbox Max Send Policy Test#CredCode#
Office 365 Mailbox Max Send Policy Test#CredCode# Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Max Send Policy Test#CredCode#
Office 365 Mailbox Max Send Policy Test#CredCode#IF ($TotPolCount -gt 1)
Office 365 Mailbox Max Send Policy Test#CredCode#{
Office 365 Mailbox Max Send Policy Test#CredCode#    $SumVal = ""
Office 365 Mailbox Max Send Policy Test#CredCode#    $TestStatus="Low"
Office 365 Mailbox Max Send Policy Test#CredCode#    $TestText = ""
Office 365 Mailbox Max Send Policy Test#CredCode#}
Office 365 Mailbox Max Send Policy Test#CredCode#else
Office 365 Mailbox Max Send Policy Test#CredCode#{
Office 365 Mailbox Max Send Policy Test#CredCode#    $SumVal = ""
Office 365 Mailbox Max Send Policy Test#CredCode#    $TestStatus="Passed"
Office 365 Mailbox Max Send Policy Test#CredCode#    $TestText = ""
Office 365 Mailbox Max Send Policy Test#CredCode#}
Office 365 Mailbox Max Receive Policy Test#Headercode#$ThisString="MaxReceiveSize Policy, Assigned To Mailboxes, Data File Location"
Office 365 Mailbox Max Receive Policy Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Max Receive Policy Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Mailbox Max Receive Policy Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Mailbox Max Receive Policy Test#CredCode#$STR = "MaxReceiveSize Policy, Mailbox"
Office 365 Mailbox Max Receive Policy Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Max Receive Policy Test#CredCode#$AllMailBox = Get-Mailbox -ResultSize Unlimited | Select-Object DisplayName, MaxReceiveSize
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Max Receive Policy Test#CredCode#$TRCFile = $CurrentLoc+"\Data\"+$UniqueTest+"_TRC.CSV"
Office 365 Mailbox Max Receive Policy Test#CredCode#Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Max Receive Policy Test#CredCode#$STR = "Policy,Tot"
Office 365 Mailbox Max Receive Policy Test#CredCode#Add-Content $TRCFile $STR
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Max Receive Policy Test#CredCode#$userObj = New-Object PSObject
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Max Receive Policy Test#CredCode#$AnyGap = "No"
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Max Receive Policy Test#CredCode#ForEach ($Item in $AllMailBox)
Office 365 Mailbox Max Receive Policy Test#CredCode#{
Office 365 Mailbox Max Receive Policy Test#CredCode#    $Rpol = $Item.MaxReceiveSize
Office 365 Mailbox Max Receive Policy Test#CredCode#    $A, $B = $Rpol.Split("(")
Office 365 Mailbox Max Receive Policy Test#CredCode#    $Policy = $A
Office 365 Mailbox Max Receive Policy Test#CredCode#            
Office 365 Mailbox Max Receive Policy Test#CredCode#    IF ($Policy -eq "" -or $Policy -eq $Null)
Office 365 Mailbox Max Receive Policy Test#CredCode#    {
Office 365 Mailbox Max Receive Policy Test#CredCode#    }
Office 365 Mailbox Max Receive Policy Test#CredCode#    else
Office 365 Mailbox Max Receive Policy Test#CredCode#    {
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Max Receive Policy Test#CredCode#    $FoundOrNot = "No"
Office 365 Mailbox Max Receive Policy Test#CredCode#    $TRCCSV = Import-CSV $TRCFile
Office 365 Mailbox Max Receive Policy Test#CredCode#    ForEach ($PolicyNow in $TRCCSV)
Office 365 Mailbox Max Receive Policy Test#CredCode#    {
Office 365 Mailbox Max Receive Policy Test#CredCode#        IF ($PolicyNow.Policy -eq $Policy)
Office 365 Mailbox Max Receive Policy Test#CredCode#        {
Office 365 Mailbox Max Receive Policy Test#CredCode#            $FoundOrNot = "Yes"
Office 365 Mailbox Max Receive Policy Test#CredCode#            Break
Office 365 Mailbox Max Receive Policy Test#CredCode#        }        
Office 365 Mailbox Max Receive Policy Test#CredCode#    }
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Max Receive Policy Test#CredCode#    IF ($FoundOrNot -eq "No")
Office 365 Mailbox Max Receive Policy Test#CredCode#    {
Office 365 Mailbox Max Receive Policy Test#CredCode#        $TotCountNow = 0
Office 365 Mailbox Max Receive Policy Test#CredCode#        ForEach ($AllCounts in $AllMailBox)
Office 365 Mailbox Max Receive Policy Test#CredCode#        {
Office 365 Mailbox Max Receive Policy Test#CredCode#            $Rpol = $AllCounts.MaxReceiveSize
Office 365 Mailbox Max Receive Policy Test#CredCode#            $A, $B = $Rpol.Split("(")
Office 365 Mailbox Max Receive Policy Test#CredCode#            $PolicyNew = $A    
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Max Receive Policy Test#CredCode#            IF ($PolicyNew -eq $Policy)
Office 365 Mailbox Max Receive Policy Test#CredCode#            {
Office 365 Mailbox Max Receive Policy Test#CredCode#                $DispName = $AllCounts.DisplayName
Office 365 Mailbox Max Receive Policy Test#CredCode#                $TotCountNow++
Office 365 Mailbox Max Receive Policy Test#CredCode#                $STR = $Policy+","+$DispName
Office 365 Mailbox Max Receive Policy Test#CredCode#                Add-Content $DataFileLocation $STR
Office 365 Mailbox Max Receive Policy Test#CredCode#            }
Office 365 Mailbox Max Receive Policy Test#CredCode#        }
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Max Receive Policy Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()
Office 365 Mailbox Max Receive Policy Test#CredCode#        Add-Content $TRCFile $STR
Office 365 Mailbox Max Receive Policy Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()+","+$DataFileLocation
Office 365 Mailbox Max Receive Policy Test#CredCode#        Add-Content $TestCSVFile $STR
Office 365 Mailbox Max Receive Policy Test#CredCode#    }
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Max Receive Policy Test#CredCode#    }
Office 365 Mailbox Max Receive Policy Test#CredCode#}
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Max Receive Policy Test#CredCode#$TotPolNow = Import-CSV $TestCSVFile
Office 365 Mailbox Max Receive Policy Test#CredCode#$TotPolCount = $TotPolNow.Count
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Max Receive Policy Test#CredCode# Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Max Receive Policy Test#CredCode#IF ($TotPolCount -gt 1)
Office 365 Mailbox Max Receive Policy Test#CredCode#{
Office 365 Mailbox Max Receive Policy Test#CredCode#    $SumVal = ""
Office 365 Mailbox Max Receive Policy Test#CredCode#    $TestStatus="Low"
Office 365 Mailbox Max Receive Policy Test#CredCode#    $TestText = ""
Office 365 Mailbox Max Receive Policy Test#CredCode#}
Office 365 Mailbox Max Receive Policy Test#CredCode#else
Office 365 Mailbox Max Receive Policy Test#CredCode#{
Office 365 Mailbox Max Receive Policy Test#CredCode#    $SumVal = ""
Office 365 Mailbox Max Receive Policy Test#CredCode#    $TestStatus="Passed"
Office 365 Mailbox Max Receive Policy Test#CredCode#    $TestText = ""
Office 365 Mailbox Max Receive Policy Test#CredCode#}
Office 365 Mailbox Max Receive Policy Test#CredCode#
Office 365 Mailbox Types Test#Headercode#$ThisString="Mailbox Type, Total Mailboxes, Data File Location"
Office 365 Mailbox Types Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Types Test#CredCode#
Office 365 Mailbox Types Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Mailbox Types Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Mailbox Types Test#CredCode#$STR = "Mailbox Type, Display Name"
Office 365 Mailbox Types Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Mailbox Types Test#CredCode#
Office 365 Mailbox Types Test#CredCode#$AllMailBox = Get-Mailbox -ResultSize Unlimited | Select-Object DisplayName, RecipientTypeDetails
Office 365 Mailbox Types Test#CredCode#
Office 365 Mailbox Types Test#CredCode#$TRCFile = $CurrentLoc+"\Data\"+$UniqueTest+"_TRC.CSV"
Office 365 Mailbox Types Test#CredCode#Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Types Test#CredCode#$STR = "Policy,Tot"
Office 365 Mailbox Types Test#CredCode#Add-Content $TRCFile $STR
Office 365 Mailbox Types Test#CredCode#
Office 365 Mailbox Types Test#CredCode#$AnyGap = "No"
Office 365 Mailbox Types Test#CredCode#
Office 365 Mailbox Types Test#CredCode#ForEach ($Item in $AllMailBox)
Office 365 Mailbox Types Test#CredCode#{
Office 365 Mailbox Types Test#CredCode#    $PRNow = $Item.RecipientTypeDetails
Office 365 Mailbox Types Test#CredCode#    $arr = @($PRNow)
Office 365 Mailbox Types Test#CredCode#    $Policy = [string]::Concat($arr)
Office 365 Mailbox Types Test#CredCode#
Office 365 Mailbox Types Test#CredCode#    IF ($Policy -eq "" -or $Policy -eq $Null)
Office 365 Mailbox Types Test#CredCode#    {
Office 365 Mailbox Types Test#CredCode#    }
Office 365 Mailbox Types Test#CredCode#    else
Office 365 Mailbox Types Test#CredCode#    {
Office 365 Mailbox Types Test#CredCode#
Office 365 Mailbox Types Test#CredCode#    $FoundOrNot = "No"
Office 365 Mailbox Types Test#CredCode#    $TRCCSV = Import-CSV $TRCFile
Office 365 Mailbox Types Test#CredCode#    ForEach ($PolicyNow in $TRCCSV)
Office 365 Mailbox Types Test#CredCode#    {
Office 365 Mailbox Types Test#CredCode#        IF ($PolicyNow.Policy -eq $Policy)
Office 365 Mailbox Types Test#CredCode#        {
Office 365 Mailbox Types Test#CredCode#            $FoundOrNot = "Yes"
Office 365 Mailbox Types Test#CredCode#            Break
Office 365 Mailbox Types Test#CredCode#        }        
Office 365 Mailbox Types Test#CredCode#    }
Office 365 Mailbox Types Test#CredCode#
Office 365 Mailbox Types Test#CredCode#    IF ($FoundOrNot -eq "No")
Office 365 Mailbox Types Test#CredCode#    {
Office 365 Mailbox Types Test#CredCode#        $TotCountNow = 0
Office 365 Mailbox Types Test#CredCode#        ForEach ($AllCounts in $AllMailBox)
Office 365 Mailbox Types Test#CredCode#        {
Office 365 Mailbox Types Test#CredCode#    
Office 365 Mailbox Types Test#CredCode#            $SetNow = $AllCounts.RecipientTypeDetails       
Office 365 Mailbox Types Test#CredCode#            $arr = @($SetNow)
Office 365 Mailbox Types Test#CredCode#            $NewSetNow = [string]::Concat($arr)
Office 365 Mailbox Types Test#CredCode#
Office 365 Mailbox Types Test#CredCode#            IF ($NewSetNow -eq $Policy)
Office 365 Mailbox Types Test#CredCode#            {
Office 365 Mailbox Types Test#CredCode#                $DispName = $AllCounts.DisplayName
Office 365 Mailbox Types Test#CredCode#                $TotCountNow++
Office 365 Mailbox Types Test#CredCode#                $STR = $Policy+","+$DispName
Office 365 Mailbox Types Test#CredCode#                Add-Content $DataFileLocation $STR
Office 365 Mailbox Types Test#CredCode#            }
Office 365 Mailbox Types Test#CredCode#        }
Office 365 Mailbox Types Test#CredCode#
Office 365 Mailbox Types Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()
Office 365 Mailbox Types Test#CredCode#        Add-Content $TRCFile $STR
Office 365 Mailbox Types Test#CredCode#        $STR = $Policy+","+$TotCountNow.ToString()+","+$DataFileLocation
Office 365 Mailbox Types Test#CredCode#        Add-Content $TestCSVFile $STR
Office 365 Mailbox Types Test#CredCode#    }
Office 365 Mailbox Types Test#CredCode#
Office 365 Mailbox Types Test#CredCode#    }
Office 365 Mailbox Types Test#CredCode#}
Office 365 Mailbox Types Test#CredCode#
Office 365 Mailbox Types Test#CredCode#$TotPolNow = Import-CSV $TestCSVFile
Office 365 Mailbox Types Test#CredCode#$TotPolCount = $TotPolNow.Count
Office 365 Mailbox Types Test#CredCode#
Office 365 Mailbox Types Test#CredCode# Remove-Item $TRCFile -ErrorAction SilentlyContinue
Office 365 Mailbox Types Test#CredCode#
Office 365 Mailbox Types Test#CredCode#IF ($TotPolCount -gt 1)
Office 365 Mailbox Types Test#CredCode#{
Office 365 Mailbox Types Test#CredCode#    $SumVal = ""
Office 365 Mailbox Types Test#CredCode#    $TestStatus="Low"
Office 365 Mailbox Types Test#CredCode#    $TestText = ""
Office 365 Mailbox Types Test#CredCode#}
Office 365 Mailbox Types Test#CredCode#else
Office 365 Mailbox Types Test#CredCode#{
Office 365 Mailbox Types Test#CredCode#    $SumVal = ""
Office 365 Mailbox Types Test#CredCode#    $TestStatus="Passed"
Office 365 Mailbox Types Test#CredCode#    $TestText = ""
Office 365 Mailbox Types Test#CredCode#}
Office 365 Mailbox Types Test#CredCode#
Office 365 Users Deleted Test#Headercode#$ThisString="Total Users, Total Users In Recycle Bin, Percentage Users In Recycle Bin, Data File Location"
Office 365 Users Deleted Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users Deleted Test#CredCode#
Office 365 Users Deleted Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users Deleted Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users Deleted Test#CredCode#
Office 365 Users Deleted Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users Deleted Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users Deleted Test#CredCode#
Office 365 Users Deleted Test#CredCode#$TotNot = 0
Office 365 Users Deleted Test#CredCode#$TotYes = 0
Office 365 Users Deleted Test#CredCode#$TotPercentage = 0
Office 365 Users Deleted Test#CredCode#
Office 365 Users Deleted Test#CredCode#$TotNotItems = Get-MsolUser -All -ReturnDeletedUsers | Select-Object UserPrincipalName, DisplayName, IsLicensed
Office 365 Users Deleted Test#CredCode#$TotNotCount = $TotNotItems.DisplayName.Count
Office 365 Users Deleted Test#CredCode# $TotYesItems = Get-MsolUser -All | Where-Object {$_.UsageLocation -ne $null}
Office 365 Users Deleted Test#CredCode# $TotYesCount = $TotYesItems.Count
Office 365 Users Deleted Test#CredCode#
Office 365 Users Deleted Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users Deleted Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users Deleted Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users Deleted Test#CredCode#
Office 365 Users Deleted Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users Deleted Test#CredCode#
Office 365 Users Deleted Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users Deleted Test#CredCode#{
Office 365 Users Deleted Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users Deleted Test#CredCode#    {
Office 365 Users Deleted Test#CredCode#        $SumVal = ""
Office 365 Users Deleted Test#CredCode#        $TestStatus="High"
Office 365 Users Deleted Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users Deleted Test#CredCode#    }
Office 365 Users Deleted Test#CredCode#    else
Office 365 Users Deleted Test#CredCode#    {
Office 365 Users Deleted Test#CredCode#        $SumVal = ""
Office 365 Users Deleted Test#CredCode#        $TestStatus="Medium"
Office 365 Users Deleted Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users Deleted Test#CredCode#    }
Office 365 Users Deleted Test#CredCode#}
Office 365 Users Deleted Test#CredCode#else
Office 365 Users Deleted Test#CredCode#{
Office 365 Users Deleted Test#CredCode#    $SumVal = ""
Office 365 Users Deleted Test#CredCode#    $TestStatus="Passed"
Office 365 Users Deleted Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users Deleted Test#CredCode#}
Office 365 Users Disabled Test#Headercode#$ThisString="Total Users, Total Enabled, Total Disabled, % Of Users Disabled, Data File Location"
Office 365 Users Disabled Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users Disabled Test#Headercode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users Disabled Test#Headercode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users Disabled Test#CredCode#$TotEnabled = 0
Office 365 Users Disabled Test#CredCode#$TotDisabled = 0
Office 365 Users Disabled Test#CredCode#$AnyGap = "No"
Office 365 Users Disabled Test#CredCode#$TestStatus ="Passed"
Office 365 Users Disabled Test#CredCode#$SumVal = ""
Office 365 Users Disabled Test#CredCode#$TestText = ""
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#$AzureUsersDisabled = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\Data\"+$CurProfNowForAll+"_AureUsersDisabled.CSV"
Office 365 Users Disabled Test#CredCode#Remove-Item $AzureUsersDisabled -ErrorAction SilentlyContinue
Office 365 Users Disabled Test#CredCode#$STR = "UserPrincipalName, Disabled"
Office 365 Users Disabled Test#CredCode#Add-Content $AzureUsersDisabled $STR
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#$AllUsers = Get-MSOlUser -ALL
Office 365 Users Disabled Test#CredCode#$AllUsersCount = $AllUsers.Count
Office 365 Users Disabled Test#CredCode#$AllDisabledUsers = Get-MSOlUser -ALL -EnabledFilter DisabledOnly
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#ForEach ($Item in $AllDisabledUsers)
Office 365 Users Disabled Test#CredCode#{
Office 365 Users Disabled Test#CredCode#    $TotDisabled++
Office 365 Users Disabled Test#CredCode#    $STR = $Item.UserPrincipalName+",Yes"
Office 365 Users Disabled Test#CredCode#    Add-Content $DataFileLocation $STR                
Office 365 Users Disabled Test#CredCode#}
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#$UsersScore=($TotDisabled/$AllUsersCount)*100 
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#If ($UsersScore -gt 15)
Office 365 Users Disabled Test#CredCode#{
Office 365 Users Disabled Test#CredCode#    $TestStatus="High"
Office 365 Users Disabled Test#CredCode#    $TestText = "More than 15 percent users are disabled in Azure. Please check why these users are disabled."
Office 365 Users Disabled Test#CredCode#    $SumVal = "NA"
Office 365 Users Disabled Test#CredCode#}
Office 365 Users Disabled Test#CredCode#else
Office 365 Users Disabled Test#CredCode#{
Office 365 Users Disabled Test#CredCode#    $TestStatus="Passed"
Office 365 Users Disabled Test#CredCode#    $TestText = "Less than 15 users are disabled in Azure."
Office 365 Users Disabled Test#CredCode#    $SumVal = "NA"
Office 365 Users Disabled Test#CredCode#}
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#$ThisSTR = $AllUsersCount.ToString()+","+$TotEnabled.ToString()+","+$TotDisabled.ToString()+","+$UsersScore.ToString()+","+$DataFileLocation
Office 365 Users Disabled Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode# 
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#$TotEnabled = 0
Office 365 Users Disabled Test#CredCode#$TotDisabled = 0
Office 365 Users Disabled Test#CredCode#$AnyGap = "No"
Office 365 Users Disabled Test#CredCode#$TestStatus ="Passed"
Office 365 Users Disabled Test#CredCode#$SumVal = ""
Office 365 Users Disabled Test#CredCode#$TestText = ""
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#$AzureUsersDisabled = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\Data\"+$CurProfNowForAll+"_AureUsersDisabled.CSV"
Office 365 Users Disabled Test#CredCode#Remove-Item $AzureUsersDisabled -ErrorAction SilentlyContinue
Office 365 Users Disabled Test#CredCode#$STR = "UserPrincipalName, Disabled"
Office 365 Users Disabled Test#CredCode#Add-Content $AzureUsersDisabled $STR
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#$AllUsers = Get-MSOlUser -ALL
Office 365 Users Disabled Test#CredCode#$AllUsersCount = $AllUsers.Count
Office 365 Users Disabled Test#CredCode#$AllDisabledUsers = Get-MSOlUser -ALL -EnabledFilter DisabledOnly
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#ForEach ($Item in $AllDisabledUsers)
Office 365 Users Disabled Test#CredCode#{
Office 365 Users Disabled Test#CredCode#    $TotDisabled++
Office 365 Users Disabled Test#CredCode#    $STR = $Item.UserPrincipalName+",Yes"
Office 365 Users Disabled Test#CredCode#    Add-Content $AzureUsersDisabled $STR                
Office 365 Users Disabled Test#CredCode#}
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#$UsersScore=($TotDisabled/$AllUsersCount)*100     
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#If ($UsersScore -gt 15)
Office 365 Users Disabled Test#CredCode#{
Office 365 Users Disabled Test#CredCode#    $TestStatus="High"
Office 365 Users Disabled Test#CredCode#    $TestText = "More than 15 percent users are disabled in Azure. Please check why these users are disabled."
Office 365 Users Disabled Test#CredCode#    $SumVal = "NA"
Office 365 Users Disabled Test#CredCode#}
Office 365 Users Disabled Test#CredCode#else
Office 365 Users Disabled Test#CredCode#{
Office 365 Users Disabled Test#CredCode#    $TestStatus="Passed"
Office 365 Users Disabled Test#CredCode#    $TestText = "Less than 15 users are disabled in Azure."
Office 365 Users Disabled Test#CredCode#    $SumVal = "NA"
Office 365 Users Disabled Test#CredCode#}
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#$ThisSTR = $AllUsersCount.ToString()+","+$TotEnabled.ToString()+","+$TotDisabled.ToString()+","+$UsersScore.ToString()
Office 365 Users Disabled Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode#
Office 365 Users Disabled Test#CredCode# 
Office 365 Users Disabled Test#CredCode#
Office 365 Users Reconciliation Test#Headercode#$ThisString="Total Users, Total Enabled, Total Needed License Reconciliation, % Of Users Needed License Reconciliation"
Office 365 Users Reconciliation Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users Reconciliation Test#Headercode# 
Office 365 Users Reconciliation Test#Headercode#
Office 365 Users Reconciliation Test#CredCode#$TotEnabled = 0
Office 365 Users Reconciliation Test#CredCode#$TotDisabled = 0
Office 365 Users Reconciliation Test#CredCode#$AnyGap = "No"
Office 365 Users Reconciliation Test#CredCode#$TestStatus ="Passed"
Office 365 Users Reconciliation Test#CredCode#$SumVal = ""
Office 365 Users Reconciliation Test#CredCode#$TestText = ""
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#$AzureUsersLICNeeded = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\Data\"+$CurProfNowForAll+"_-LicenseReconciliationNeededOnly.CSV"
Office 365 Users Reconciliation Test#CredCode#Remove-Item $AzureUsersDisabled -ErrorAction SilentlyContinue
Office 365 Users Reconciliation Test#CredCode#$STR = "UserPrincipalName, License Reconciliation Needed?, Is Enabled?"
Office 365 Users Reconciliation Test#CredCode#Add-Content $AzureUsersDisabled $STR
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#$AllUsers = Get-MSOlUser -ALL
Office 365 Users Reconciliation Test#CredCode#$AllUsersCount = $AllUsers.Count
Office 365 Users Reconciliation Test#CredCode#$TotUsersRecEnabled = 0
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#$AllLicensedRecNeeded = Get-MSOlUser -ALL -LicenseReconciliationNeededOnly | Select-Object UserPrincipalName, AccountEnabled, IsLicensed
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#ForEach ($Item in $AllLicensedRecNeeded)
Office 365 Users Reconciliation Test#CredCode#{
Office 365 Users Reconciliation Test#CredCode#    IF ($Item.AccountEnabled -eq $true)
Office 365 Users Reconciliation Test#CredCode#    {        
Office 365 Users Reconciliation Test#CredCode#        $TotUsersRecEnabled++
Office 365 Users Reconciliation Test#CredCode#        $STR = $Item.UserPrincipalName+",Yes, Yes"
Office 365 Users Reconciliation Test#CredCode#        Add-Content $AzureUsersDisabled $STR                
Office 365 Users Reconciliation Test#CredCode#    }
Office 365 Users Reconciliation Test#CredCode#}
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#$UsersScore=($TotDisabled/$AllUsersCount)*100     
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#If ($UsersScore -gt 15)
Office 365 Users Reconciliation Test#CredCode#{
Office 365 Users Reconciliation Test#CredCode#    $TestStatus="High"
Office 365 Users Reconciliation Test#CredCode#    $TestText = "More than 15 percent users are disabled in Azure. Please check why these users are disabled."
Office 365 Users Reconciliation Test#CredCode#    $SumVal = "NA"
Office 365 Users Reconciliation Test#CredCode#}
Office 365 Users Reconciliation Test#CredCode#else
Office 365 Users Reconciliation Test#CredCode#{
Office 365 Users Reconciliation Test#CredCode#    $TestStatus="Passed"
Office 365 Users Reconciliation Test#CredCode#    $TestText = "Less than 15 users are disabled in Azure."
Office 365 Users Reconciliation Test#CredCode#    $SumVal = "NA"
Office 365 Users Reconciliation Test#CredCode#}
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#$ThisSTR = $AllUsersCount.ToString()+","+$TotEnabled.ToString()+","+$TotDisabled.ToString()+","+$UsersScore.ToString()
Office 365 Users Reconciliation Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode# 
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#$TotEnabled = 0
Office 365 Users Reconciliation Test#CredCode#$TotDisabled = 0
Office 365 Users Reconciliation Test#CredCode#$AnyGap = "No"
Office 365 Users Reconciliation Test#CredCode#$TestStatus ="Passed"
Office 365 Users Reconciliation Test#CredCode#$SumVal = ""
Office 365 Users Reconciliation Test#CredCode#$TestText = ""
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#$AzureUsersLICNeeded = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\Data\"+$CurProfNowForAll+"_-LicenseReconciliationNeededOnly.CSV"
Office 365 Users Reconciliation Test#CredCode#Remove-Item $AzureUsersDisabled -ErrorAction SilentlyContinue
Office 365 Users Reconciliation Test#CredCode#$STR = "UserPrincipalName, License Reconciliation Needed?, Is Enabled?"
Office 365 Users Reconciliation Test#CredCode#Add-Content $AzureUsersDisabled $STR
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#$AllUsers = Get-MSOlUser -ALL
Office 365 Users Reconciliation Test#CredCode#$AllUsersCount = $AllUsers.Count
Office 365 Users Reconciliation Test#CredCode#$TotUsersRecEnabled = 0
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#$AllLicensedRecNeeded = Get-MSOlUser -ALL -LicenseReconciliationNeededOnly | Select-Object UserPrincipalName, AccountEnabled, IsLicensed
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#ForEach ($Item in $AllLicensedRecNeeded)
Office 365 Users Reconciliation Test#CredCode#{
Office 365 Users Reconciliation Test#CredCode#    IF ($Item.AccountEnabled -eq $true)
Office 365 Users Reconciliation Test#CredCode#    {        
Office 365 Users Reconciliation Test#CredCode#        $TotUsersRecEnabled++
Office 365 Users Reconciliation Test#CredCode#        $STR = $Item.UserPrincipalName+",Yes, Yes"
Office 365 Users Reconciliation Test#CredCode#        Add-Content $AzureUsersDisabled $STR                
Office 365 Users Reconciliation Test#CredCode#    }
Office 365 Users Reconciliation Test#CredCode#}
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#$UsersScore=($TotDisabled/$AllUsersCount)*100  
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#If ($UsersScore -gt 15)
Office 365 Users Reconciliation Test#CredCode#{
Office 365 Users Reconciliation Test#CredCode#    $TestStatus="High"
Office 365 Users Reconciliation Test#CredCode#    $TestText = "More than 15 percent users are disabled in Azure. Please check why these users are disabled."
Office 365 Users Reconciliation Test#CredCode#    $SumVal = "NA"
Office 365 Users Reconciliation Test#CredCode#}
Office 365 Users Reconciliation Test#CredCode#else
Office 365 Users Reconciliation Test#CredCode#{
Office 365 Users Reconciliation Test#CredCode#    $TestStatus="Passed"
Office 365 Users Reconciliation Test#CredCode#    $TestText = "Less than 15 users are disabled in Azure."
Office 365 Users Reconciliation Test#CredCode#    $SumVal = "NA"
Office 365 Users Reconciliation Test#CredCode#}
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#$ThisSTR = $AllUsersCount.ToString()+","+$TotEnabled.ToString()+","+$TotDisabled.ToString()+","+$UsersScore.ToString()
Office 365 Users Reconciliation Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode#
Office 365 Users Reconciliation Test#CredCode# 
Office 365 Users Reconciliation Test#CredCode#
Office 365 User Roles Test#Headercode#$ThisString="Role Name, Total Members, Final Status"
Office 365 User Roles Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 User Roles Test#Headercode# 
Office 365 User Roles Test#Headercode#
Office 365 User Roles Test#CredCode#$AnyGap = "No"
Office 365 User Roles Test#CredCode#$TestStatus ="Passed"
Office 365 User Roles Test#CredCode#$SumVal = ""
Office 365 User Roles Test#CredCode#$TestText = ""
Office 365 User Roles Test#CredCode#
Office 365 User Roles Test#CredCode#$Office365RoleAndMembers = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\Data\"+$CurProfNowForAll+"_Office365RoleAndMembers.CSV"
Office 365 User Roles Test#CredCode#Remove-Item $Office365RoleAndMembers -ErrorAction SilentlyContinue
Office 365 User Roles Test#CredCode#$STR = "Role Name, Member"
Office 365 User Roles Test#CredCode#Add-Content $Office365RoleAndMembers $STR
Office 365 User Roles Test#CredCode#
Office 365 User Roles Test#CredCode#$AllRoles = Get-MsolRole
Office 365 User Roles Test#CredCode#
Office 365 User Roles Test#CredCode#ForEach ($Item in $AllRoles)
Office 365 User Roles Test#CredCode#{
Office 365 User Roles Test#CredCode#    $RoleNameNow = $Item.Name
Office 365 User Roles Test#CredCode#    
Office 365 User Roles Test#CredCode#    $ObjectGUID = $Item.ObjectId        
Office 365 User Roles Test#CredCode#    $TotMembers = Get-MsolRoleMember -RoleObjectId $ObjectGUID
Office 365 User Roles Test#CredCode#    $TotMembersCount = $TotMembers.Count
Office 365 User Roles Test#CredCode#    
Office 365 User Roles Test#CredCode#    $FinalStatus = "OK"
Office 365 User Roles Test#CredCode#    IF ($TotMembersCount -gt 10)
Office 365 User Roles Test#CredCode#    {
Office 365 User Roles Test#CredCode#        $FinalStatus = "There are more than 10 members in this role. Please check."
Office 365 User Roles Test#CredCode#        $AnyGap = "Yes"
Office 365 User Roles Test#CredCode#    }
Office 365 User Roles Test#CredCode#    
Office 365 User Roles Test#CredCode#    $STR = $RoleNameNow+","+$TotMembersCount+","+$FinalStatus
Office 365 User Roles Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 User Roles Test#CredCode#}
Office 365 User Roles Test#CredCode#
Office 365 User Roles Test#CredCode#If ($AnyGap -eq "Yes")
Office 365 User Roles Test#CredCode#{
Office 365 User Roles Test#CredCode#    $TestStatus="High"
Office 365 User Roles Test#CredCode#    $TestText = "Office 365 User Roles contain more than 10 members in each or some. Please check if it is really necessary to have these members as part of each User Role."
Office 365 User Roles Test#CredCode#    $SumVal = "NA"
Office 365 User Roles Test#CredCode#}
Office 365 User Roles Test#CredCode#else
Office 365 User Roles Test#CredCode#{
Office 365 User Roles Test#CredCode#    $TestStatus="Passed"
Office 365 User Roles Test#CredCode#    $TestText = "Office 365 User Roles contain 10 or less members in each."
Office 365 User Roles Test#CredCode#    $SumVal = "NA"
Office 365 User Roles Test#CredCode#}
Office 365 User Roles Test#CredCode#
Office 365 User Roles Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Office 365 User Roles Test#CredCode# 
Office 365 User Roles Test#CredCode#
Office 365 User Roles Test#CredCode#$AnyGap = "No"
Office 365 User Roles Test#CredCode#$TestStatus ="Passed"
Office 365 User Roles Test#CredCode#$SumVal = ""
Office 365 User Roles Test#CredCode#$TestText = ""
Office 365 User Roles Test#CredCode#
Office 365 User Roles Test#CredCode#$Office365RoleAndMembers = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\Data\"+$CurProfNowForAll+"_Office365RoleAndMembers.CSV"
Office 365 User Roles Test#CredCode#Remove-Item $Office365RoleAndMembers -ErrorAction SilentlyContinue
Office 365 User Roles Test#CredCode#$STR = "Role Name, Member"
Office 365 User Roles Test#CredCode#Add-Content $Office365RoleAndMembers $STR
Office 365 User Roles Test#CredCode#
Office 365 User Roles Test#CredCode#$AllRoles = Get-MsolRole
Office 365 User Roles Test#CredCode#
Office 365 User Roles Test#CredCode#ForEach ($Item in $AllRoles)
Office 365 User Roles Test#CredCode#{
Office 365 User Roles Test#CredCode#    $RoleNameNow = $Item.Name
Office 365 User Roles Test#CredCode#    
Office 365 User Roles Test#CredCode#    $ObjectGUID = $Item.ObjectId        
Office 365 User Roles Test#CredCode#    $TotMembers = Get-MsolRoleMember -RoleObjectId $ObjectGUID
Office 365 User Roles Test#CredCode#    $TotMembersCount = $TotMembers.Count
Office 365 User Roles Test#CredCode#    
Office 365 User Roles Test#CredCode#    $FinalStatus = "OK"
Office 365 User Roles Test#CredCode#    IF ($TotMembersCount -gt 10)
Office 365 User Roles Test#CredCode#    {
Office 365 User Roles Test#CredCode#        $FinalStatus = "There are more than 10 members in this role. Please check."
Office 365 User Roles Test#CredCode#        $AnyGap = "Yes"
Office 365 User Roles Test#CredCode#    }
Office 365 User Roles Test#CredCode#    
Office 365 User Roles Test#CredCode#    $STR = $RoleNameNow+","+$TotMembersCount+","+$FinalStatus
Office 365 User Roles Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 User Roles Test#CredCode#}
Office 365 User Roles Test#CredCode#
Office 365 User Roles Test#CredCode#If ($AnyGap -eq "Yes")
Office 365 User Roles Test#CredCode#{
Office 365 User Roles Test#CredCode#    $TestStatus="High"
Office 365 User Roles Test#CredCode#    $TestText = "Office 365 User Roles contain more than 10 members in each or some. Please check if it is really necessary to have these members as part of each User Role."
Office 365 User Roles Test#CredCode#    $SumVal = "NA"
Office 365 User Roles Test#CredCode#}
Office 365 User Roles Test#CredCode#else
Office 365 User Roles Test#CredCode#{
Office 365 User Roles Test#CredCode#    $TestStatus="Passed"
Office 365 User Roles Test#CredCode#    $TestText = "Office 365 User Roles contain 10 or less members in each."
Office 365 User Roles Test#CredCode#    $SumVal = "NA"
Office 365 User Roles Test#CredCode#}
Office 365 User Roles Test#CredCode#
Office 365 User Roles Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Office 365 User Roles Test#CredCode# 
Office 365 User Roles Test#CredCode#
Office 365 Users Password Never Expires Test#Headercode#$ThisString="Total Users,Total Users Password Never Expires, Total Users Password Expires, Percentage Users Password Never Expires, Data File Location"
Office 365 Users Password Never Expires Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users Password Never Expires Test#CredCode#
Office 365 Users Password Never Expires Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users Password Never Expires Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users Password Never Expires Test#CredCode#
Office 365 Users Password Never Expires Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users Password Never Expires Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users Password Never Expires Test#CredCode#
Office 365 Users Password Never Expires Test#CredCode#$TotNot = 0
Office 365 Users Password Never Expires Test#CredCode#$TotYes = 0
Office 365 Users Password Never Expires Test#CredCode#$TotPercentage = 0
Office 365 Users Password Never Expires Test#CredCode#
Office 365 Users Password Never Expires Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, PasswordNeverExpires | Where-Object {$_.PasswordNeverExpires -eq $true}
Office 365 Users Password Never Expires Test#CredCode#$TotNotCount = $TotNotItems.UserPrincipalName.Count
Office 365 Users Password Never Expires Test#CredCode#$TotYesItems = Get-MsolUser -All | Select-Object UserPrincipalName, PasswordNeverExpires | Where-Object {$_.PasswordNeverExpires -ne $true}
Office 365 Users Password Never Expires Test#CredCode#$TotYesCount = $TotYesItems.Count
Office 365 Users Password Never Expires Test#CredCode#
Office 365 Users Password Never Expires Test#CredCode#
Office 365 Users Password Never Expires Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users Password Never Expires Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotYesCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users Password Never Expires Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users Password Never Expires Test#CredCode#
Office 365 Users Password Never Expires Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users Password Never Expires Test#CredCode#
Office 365 Users Password Never Expires Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users Password Never Expires Test#CredCode#{
Office 365 Users Password Never Expires Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users Password Never Expires Test#CredCode#    {
Office 365 Users Password Never Expires Test#CredCode#        $SumVal = ""
Office 365 Users Password Never Expires Test#CredCode#        $TestStatus="High"
Office 365 Users Password Never Expires Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users Password Never Expires Test#CredCode#    }
Office 365 Users Password Never Expires Test#CredCode#    else
Office 365 Users Password Never Expires Test#CredCode#    {
Office 365 Users Password Never Expires Test#CredCode#        $SumVal = ""
Office 365 Users Password Never Expires Test#CredCode#        $TestStatus="Medium"
Office 365 Users Password Never Expires Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users Password Never Expires Test#CredCode#    }
Office 365 Users Password Never Expires Test#CredCode#}
Office 365 Users Password Never Expires Test#CredCode#else
Office 365 Users Password Never Expires Test#CredCode#{
Office 365 Users Password Never Expires Test#CredCode#    $SumVal = ""
Office 365 Users Password Never Expires Test#CredCode#    $TestStatus="Passed"
Office 365 Users Password Never Expires Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users Password Never Expires Test#CredCode#}
Office 365 Users Sync Test#Headercode#$ThisString="Total Users, Syncing, Total In Error, % Of Users In Error, Data File Location"
Office 365 Users Sync Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users Sync Test#CredCode#
Office 365 Users Sync Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users Sync Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users Sync Test#CredCode#$STR = "User Principal Name, Last Sync Time"
Office 365 Users Sync Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Users Sync Test#CredCode#
Office 365 Users Sync Test#CredCode#$TotSyncing = 0
Office 365 Users Sync Test#CredCode#$TotInError = 0
Office 365 Users Sync Test#CredCode#$AnyGap = "No"
Office 365 Users Sync Test#CredCode#$TestStatus ="Passed"
Office 365 Users Sync Test#CredCode#$SumVal = ""
Office 365 Users Sync Test#CredCode#$TestText = ""
Office 365 Users Sync Test#CredCode#
Office 365 Users Sync Test#CredCode#$AllUsers = Get-MSOlUser -ALL | Select-Object UserPrincipalName, LastDirSyncTime, ValiadtionStatus, DirSyncProvisioningErrors
Office 365 Users Sync Test#CredCode#$AllUsersCount = $AllUsers.Count
Office 365 Users Sync Test#CredCode#
Office 365 Users Sync Test#CredCode#ForEach ($Item in $AllUsers)
Office 365 Users Sync Test#CredCode#{
Office 365 Users Sync Test#CredCode#
Office 365 Users Sync Test#CredCode#$UPNName = $Item.UserPrincipalName
Office 365 Users Sync Test#CredCode#$LastTime = $Item.LastDirSyncTime
Office 365 Users Sync Test#CredCode#
Office 365 Users Sync Test#CredCode#$ValProp = $Item.DirSyncProvisioningErrors.Count
Office 365 Users Sync Test#CredCode#
Office 365 Users Sync Test#CredCode#IF ($ValProp -eq 0)
Office 365 Users Sync Test#CredCode#{
Office 365 Users Sync Test#CredCode#$TotSyncing++
Office 365 Users Sync Test#CredCode#}
Office 365 Users Sync Test#CredCode#else
Office 365 Users Sync Test#CredCode#{
Office 365 Users Sync Test#CredCode#$TotInError++
Office 365 Users Sync Test#CredCode#$AnyGap = "Yes"
Office 365 Users Sync Test#CredCode#$STR = $UPNName+","+$LastTime
Office 365 Users Sync Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Users Sync Test#CredCode#}
Office 365 Users Sync Test#CredCode#}
Office 365 Users Sync Test#CredCode#
Office 365 Users Sync Test#CredCode#
Office 365 Users Sync Test#CredCode#If ($AnyGap -eq "Yes")
Office 365 Users Sync Test#CredCode#{
Office 365 Users Sync Test#CredCode#$TestStatus="High"
Office 365 Users Sync Test#CredCode#$TestText = "Some Office 365 users are not syncing and resulted in errors."
Office 365 Users Sync Test#CredCode#$SumVal = "NA"
Office 365 Users Sync Test#CredCode#}
Office 365 Users Sync Test#CredCode#else
Office 365 Users Sync Test#CredCode#{
Office 365 Users Sync Test#CredCode#$TestStatus="Passed"
Office 365 Users Sync Test#CredCode#$TestText = "Office 365 users are syncing properly."
Office 365 Users Sync Test#CredCode#$SumVal = "NA"
Office 365 Users Sync Test#CredCode#}
Office 365 Users Sync Test#CredCode#
Office 365 Users Sync Test#CredCode#$ThisSTR = $AllUsersCount.ToString()+","+$TotSyncing.ToString()+","+$TotInError.ToString()+",NA,"+$DataFileLocation
Office 365 Users Sync Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Office 365 Users Sync Test#CredCode#
Office 365 Users Sync Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Office 365 Users MFA Test#Headercode#$ThisString="Total Users, Total MFA Users, MFA Enforced, MFA Enabled, Total MFA NOT Enabled"
Office 365 Users MFA Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users MFA Test#CredCode#
Office 365 Users MFA Test#CredCode#$TestStatus ="Passed"
Office 365 Users MFA Test#CredCode#$SumVal = ""
Office 365 Users MFA Test#CredCode#$TestText = ""
Office 365 Users MFA Test#CredCode#
Office 365 Users MFA Test#CredCode#$users=Get-MsolUser -All
Office 365 Users MFA Test#CredCode#$allUsersCount=$users.Count
Office 365 Users MFA Test#CredCode#
Office 365 Users MFA Test#CredCode#$MFAUsers = $users | select UserPrincipalName -ExpandProperty StrongAuthenticationRequirements | select UserPrincipalName,State
Office 365 Users MFA Test#CredCode#$MFAUsersCount=$MFAUsers.Count
Office 365 Users MFA Test#CredCode#
Office 365 Users MFA Test#CredCode#$MFAUsersEnforced=$users | select UserPrincipalName -ExpandProperty StrongAuthenticationRequirements | select UserPrincipalName,State| where {$_.State -match 'Enforced'};
Office 365 Users MFA Test#CredCode#$MFAUsersEnforcedCount=$MFAUsersEnforced.Count;
Office 365 Users MFA Test#CredCode#
Office 365 Users MFA Test#CredCode#$MFAUsersEnabled=$users | select UserPrincipalName -ExpandProperty StrongAuthenticationRequirements | select UserPrincipalName,State| where {$_.State -match 'Enabled'};
Office 365 Users MFA Test#CredCode#$MFAUsersEnabledCount=$MFAUsersEnabled.Count;
Office 365 Users MFA Test#CredCode#
Office 365 Users MFA Test#CredCode#$TotNotEnabled = ($allUsersCount - $MFAUsersCount)
Office 365 Users MFA Test#CredCode#$ThisSTR = $AllUsersCount.ToString()+","+$MFAUsersCount.ToString()+","+$MFAUsersEnforcedCount.ToString()+","+$MFAUsersEnabledCount.ToString()+","+$TotNotEnabled.ToString()
Office 365 Users MFA Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Office 365 Users MFA Test#CredCode#
Office 365 Users MFA Test#CredCode#If ($TotNotEnabled -ne 0)
Office 365 Users MFA Test#CredCode#{
Office 365 Users MFA Test#CredCode#$TestStatus="High"
Office 365 Users MFA Test#CredCode#$TestText = "Office 365 has MFA Enabled but there are $MFSSCoreVar users who do not have MFA configured. Please check why these users do not have MFA enabled."
Office 365 Users MFA Test#CredCode#$SumVal = "NA"
Office 365 Users MFA Test#CredCode#}
Office 365 Users MFA Test#CredCode#else
Office 365 Users MFA Test#CredCode#{
Office 365 Users MFA Test#CredCode#$TestStatus="Passed"
Office 365 Users MFA Test#CredCode#$TestText = "Alomost all users have MFA enabled in Office 365 Azure WAAD."
Office 365 Users MFA Test#CredCode#$SumVal = "NA"    
Office 365 Users MFA Test#CredCode#}
Office 365 Users MFA Test#CredCode#
Office 365 Users MFA Test#CredCode#$SumVal = ""
Office 365 Users MFA Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Office 365 Users MFA Test#CredCode#
Exchange Online External Address forwarding Test#Headercode#$ThisString="Total Mailboxes, Total Forwarding Enabled Mailboxes, Data File Location"
Exchange Online External Address forwarding Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Exchange Online External Address forwarding Test#CredCode#
Exchange Online External Address forwarding Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Exchange Online External Address forwarding Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Exchange Online External Address forwarding Test#CredCode#
Exchange Online External Address forwarding Test#CredCode#$Mailboxes=Get-Mailbox -ResultSize Unlimited 
Exchange Online External Address forwarding Test#CredCode#$MailboxesCount=$Mailboxes| Measure-Object | select Count; 
Exchange Online External Address forwarding Test#CredCode#
Exchange Online External Address forwarding Test#CredCode##$Mailboxes | select UserPrincipalName,PrimarySMTPAddress,RecipientTypeDetails,WhenCreatedUTC,LitigationHoldEnabled,HiddenFromAddressListsEnabled,HasPicture,ForwardingAddress,ForwardingSMTPAddress,ComplainceTAGHoldApplied,AccountDisabled,AuditEnabled
Exchange Online External Address forwarding Test#CredCode#
Exchange Online External Address forwarding Test#CredCode#$ExternalForwardingMailboxes=$Mailboxes | select  UserPrincipalName,PrimarySMTPAddress,RecipientTypeDetails,WhenCreatedUTC,LitigationHoldEnabled,HiddenFromAddressListsEnabled,HasPicture,ForwardingAddress,ForwardingSMTPAddress,ComplainceTAGHoldApplied,AccountDisabled,AuditEnabled |where{$_.ForwardingSMTPAddress -ne $null}
Exchange Online External Address forwarding Test#CredCode#$ExternalForwardingMailboxesCount=($ExternalForwardingMailboxes | Measure-Object| select Count) ;
Exchange Online External Address forwarding Test#CredCode#$ExternalForwardingScoreVar=(($ExternalForwardingMailboxesCount.Count)/$Mailboxes.Count)*100;
Exchange Online External Address forwarding Test#CredCode#
Exchange Online External Address forwarding Test#CredCode#$ExternalForwardingScore=New-Object PSObject;
Exchange Online External Address forwarding Test#CredCode#$ExternalForwardingScore | Add-Member Noteproperty TotalMailboxes $MailboxesCount.Count;
Exchange Online External Address forwarding Test#CredCode#$ExternalForwardingScore | Add-Member Noteproperty MailboxesWithExternalForwarding $ExternalForwardingMailboxesCount.Count;
Exchange Online External Address forwarding Test#CredCode#$ExternalForwardingScore | Add-Member Noteproperty Severity ($ExternalForwardingScoreLevel=if($ExternalForwardingScoreVar -le 2){'Low'}elseif($ExternalForwardingScoreVar-le 8){'Medium'}else{'High'});
Exchange Online External Address forwarding Test#CredCode#$ExternalForwardingScore | Add-Member Noteproperty Recommendation 'Please Review the Forwarding addresses, remove the forwarding address if needed to prevent data loss' 
Exchange Online External Address forwarding Test#CredCode#
Exchange Online External Address forwarding Test#CredCode#$ValSTR = $ExternalForwardingScore.TotalMailBoxes.ToString()+","+$ExternalForwardingScore.MailboxesWithExternalForwarding.ToString()+","+$DataFileLocation
Exchange Online External Address forwarding Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Exchange Online External Address forwarding Test#CredCode#
Exchange Online External Address forwarding Test#CredCode#$TestData=$ExternalForwardingMailboxes 
Exchange Online External Address forwarding Test#CredCode#$TestData | Export-Csv -Path $DataFileLocation -NoTypeInformation
Exchange Online External Address forwarding Test#CredCode#
Exchange Online External Address forwarding Test#CredCode#$SummaryFile=$ExternalForwardingScore 
Exchange Online External Address forwarding Test#CredCode#
Exchange Online External Address forwarding Test#CredCode#IF ($ExternalForwardingScoreVar -eq 0)
Exchange Online External Address forwarding Test#CredCode#{
Exchange Online External Address forwarding Test#CredCode#$TestStatus="Passed"
Exchange Online External Address forwarding Test#CredCode#$TestText = "No Mailbox has been configured with the Forwarding Address."
Exchange Online External Address forwarding Test#CredCode#$SumVal = ""
Exchange Online External Address forwarding Test#CredCode#}
Exchange Online External Address forwarding Test#CredCode#else
Exchange Online External Address forwarding Test#CredCode#{
Exchange Online External Address forwarding Test#CredCode#$TestStatus=$SummaryFile.Severity
Exchange Online External Address forwarding Test#CredCode#$TestText = $SummaryFile.Recommendation
Exchange Online External Address forwarding Test#CredCode#$SumVal = ""
Exchange Online External Address forwarding Test#CredCode#}
Exchange Online Litigation Hold Test#Headercode#$ThisString="Total Mailboxes, Total Mailbox on Litigation Hold, Data File Location"
Exchange Online Litigation Hold Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Exchange Online Litigation Hold Test#CredCode#
Exchange Online Litigation Hold Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Exchange Online Litigation Hold Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Exchange Online Litigation Hold Test#CredCode#
Exchange Online Litigation Hold Test#CredCode#$Mailboxes=Get-Mailbox -ResultSize Unlimited 
Exchange Online Litigation Hold Test#CredCode#$MailboxesCount=$Mailboxes| Measure-Object | select Count; 
Exchange Online Litigation Hold Test#CredCode#
Exchange Online Litigation Hold Test#CredCode#$Mailboxes | select UserPrincipalName,PrimarySMTPAddress,RecipientTypeDetails,WhenCreatedUTC,LitigationHoldEnabled,HiddenFromAddressListsEnabled,HasPicture,ForwardingAddress,ForwardingSMTPAddress,ComplainceTAGHoldApplied,AccountDisabled,AuditEnabled
Exchange Online Litigation Hold Test#CredCode#
Exchange Online Litigation Hold Test#CredCode#$LitigationHoldDisabledMailboxes=$Mailboxes | select  UserPrincipalName,PrimarySMTPAddress,RecipientTypeDetails,WhenCreatedUTC,LitigationHoldEnabled,HiddenFromAddressListsEnabled,HasPicture,ForwardingAddress,ForwardingSMTPAddress,ComplainceTAGHoldApplied,AccountDisabled,AuditEnabled |where{$_.LitigationHoldEnabled -match 'False'}
Exchange Online Litigation Hold Test#CredCode#$LitigationHoldEnabledMailboxes=$Mailboxes | select  UserPrincipalName,PrimarySMTPAddress,RecipientTypeDetails,WhenCreatedUTC,LitigationHoldEnabled,HiddenFromAddressListsEnabled,HasPicture,ForwardingAddress,ForwardingSMTPAddress,ComplainceTAGHoldApplied,AccountDisabled,AuditEnabled |where{$_.LitigationHoldEnabled -match 'True'}
Exchange Online Litigation Hold Test#CredCode#
Exchange Online Litigation Hold Test#CredCode#$LitigationHoldDisabledMailboxesCount=($LitigationHoldDisabledMailboxes | Measure-Object| select Count) ;
Exchange Online Litigation Hold Test#CredCode#$LitigationHoldDisabledMailboxesVar=(($LitigationHoldDisabledMailboxesMailboxesCount.Count)/$Mailboxes.Count)*100;
Exchange Online Litigation Hold Test#CredCode#
Exchange Online Litigation Hold Test#CredCode#$Severity=if($LitigationHoldDisabledMailboxesVar -le 20){'High'}elseif($LitigationHoldDisabledMailboxesVar-le 40){'Medium'}else{'low'}
Exchange Online Litigation Hold Test#CredCode#$LitigationHoldDisabledScore=New-Object PSObject;
Exchange Online Litigation Hold Test#CredCode#$LitigationHoldDisabledScore | Add-Member Noteproperty TotalMailboxes $Mailboxes.Count;
Exchange Online Litigation Hold Test#CredCode#$LitigationHoldDisabledScore| Add-Member Noteproperty MailboxesWithExternalForwarding $LitigationHoldDisabledMailboxesCount.Count;
Exchange Online Litigation Hold Test#CredCode#$LitigationHoldDisabledScore | Add-Member Noteproperty Severity $Severity;
Exchange Online Litigation Hold Test#CredCode#$LitigationHoldDisabledScore | Add-Member Noteproperty Recommendation 'Please Review Litigation Hold Report.' 
Exchange Online Litigation Hold Test#CredCode#$LitigationHoldDisabledScore 
Exchange Online Litigation Hold Test#CredCode#$LitigationHoldEnabledMailboxes 
Exchange Online Litigation Hold Test#CredCode#$LitigationHoldDisabledMailboxes 
Exchange Online Litigation Hold Test#CredCode#
Exchange Online Litigation Hold Test#CredCode#$TotCountNow = $LitigationHoldEnabledMailboxes.UserPrincipalName.Count
Exchange Online Litigation Hold Test#CredCode#$TotMailBoxes = $Mailboxes.Count
Exchange Online Litigation Hold Test#CredCode#
Exchange Online Litigation Hold Test#CredCode#$STR = $TotMailBoxes.ToString()+","+$TotCountNow.ToString()+","+$DataFileLocation
Exchange Online Litigation Hold Test#CredCode#Add-Content $TestCSVFile $STR
Exchange Online Litigation Hold Test#CredCode#
Exchange Online Litigation Hold Test#CredCode#$TestData=$LitigationHoldEnabledMailboxes 
Exchange Online Litigation Hold Test#CredCode#$TestData | Export-Csv -Path $DataFileLocation -NoTypeInformation
Exchange Online Litigation Hold Test#CredCode#
Exchange Online Litigation Hold Test#CredCode#$TestData=$LitigationHoldDisabledMailboxes
Exchange Online Litigation Hold Test#CredCode#$TestData | Export-Csv -Path $DataFileLocation -Append
Exchange Online Litigation Hold Test#CredCode#
Exchange Online Litigation Hold Test#CredCode#$SummaryFile=$LitigationHoldDisabledScore 
Exchange Online Litigation Hold Test#CredCode#
Exchange Online Litigation Hold Test#CredCode#IF ($LitigationHoldDisabledScore.MailboxesWithExternalForwarding -eq 0)
Exchange Online Litigation Hold Test#CredCode#{
Exchange Online Litigation Hold Test#CredCode#$TestStatus="Passed"
Exchange Online Litigation Hold Test#CredCode#$TestText = "No Mailbox with Litigation Hold"
Exchange Online Litigation Hold Test#CredCode#$SumVal = ""
Exchange Online Litigation Hold Test#CredCode#}
Exchange Online Litigation Hold Test#CredCode#else
Exchange Online Litigation Hold Test#CredCode#{
Exchange Online Litigation Hold Test#CredCode#$TestStatus=$SummaryFile.Severity
Exchange Online Litigation Hold Test#CredCode#$TestText = $SummaryFile.Recommendation
Exchange Online Litigation Hold Test#CredCode#$SumVal = ""
Exchange Online Litigation Hold Test#CredCode#}
Exchange Online Litigation Hold Test#CredCode#
Exchange Online Mailbox Auditing Test#Headercode#$ThisString="Total Mailbox, Total Mailbox Auditing Enabled, Total Mailbox Without Mailbox Auditing, Percentage, Data File Location"
Exchange Online Mailbox Auditing Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Exchange Online Mailbox Auditing Test#CredCode#
Exchange Online Mailbox Auditing Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Exchange Online Mailbox Auditing Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Exchange Online Mailbox Auditing Test#CredCode#
Exchange Online Mailbox Auditing Test#CredCode#$AllItems = Get-Mailbox -ResultSize Unlimited
Exchange Online Mailbox Auditing Test#CredCode#$AllItemsCount = $AllItems.Count
Exchange Online Mailbox Auditing Test#CredCode#
Exchange Online Mailbox Auditing Test#CredCode#$TotNot = 0
Exchange Online Mailbox Auditing Test#CredCode#$TotYes = 0
Exchange Online Mailbox Auditing Test#CredCode#$TotPercentage = 0
Exchange Online Mailbox Auditing Test#CredCode#
Exchange Online Mailbox Auditing Test#CredCode#$TotNotItems = Get-Mailbox -ResultSize Unlimited | Select-Object Name, Database, AuditEnabled,RecipientTypeDetails | Where-Object {$_.AuditEnabled -eq $false}
Exchange Online Mailbox Auditing Test#CredCode#$TotNotCount = $TotNotItems.Name.Count
Exchange Online Mailbox Auditing Test#CredCode#$TotYesItems = Get-Mailbox -ResultSize Unlimited | Select-Object Name, Database, AuditEnabled,RecipientTypeDetails | Where-Object {$_.AuditEnabled -eq $true}
Exchange Online Mailbox Auditing Test#CredCode#$TotYesCount = $TotYesItems.Name.Count
Exchange Online Mailbox Auditing Test#CredCode#
Exchange Online Mailbox Auditing Test#CredCode#
Exchange Online Mailbox Auditing Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Exchange Online Mailbox Auditing Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotYesCount.ToString()+","+$TotNotCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Exchange Online Mailbox Auditing Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Exchange Online Mailbox Auditing Test#CredCode#
Exchange Online Mailbox Auditing Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Exchange Online Mailbox Auditing Test#CredCode#
Exchange Online Mailbox Auditing Test#CredCode#IF ($TotNotCount -ne 0)
Exchange Online Mailbox Auditing Test#CredCode#{
Exchange Online Mailbox Auditing Test#CredCode#    IF ($TotPercentage -gt 15)
Exchange Online Mailbox Auditing Test#CredCode#    {
Exchange Online Mailbox Auditing Test#CredCode#        $SumVal = ""
Exchange Online Mailbox Auditing Test#CredCode#        $TestStatus="High"
Exchange Online Mailbox Auditing Test#CredCode#        $TestText="HIGH ISSUE"
Exchange Online Mailbox Auditing Test#CredCode#    }
Exchange Online Mailbox Auditing Test#CredCode#    else
Exchange Online Mailbox Auditing Test#CredCode#    {
Exchange Online Mailbox Auditing Test#CredCode#        $SumVal = ""
Exchange Online Mailbox Auditing Test#CredCode#        $TestStatus="Medium"
Exchange Online Mailbox Auditing Test#CredCode#        $TestText="MEDIUM ISSUE"    
Exchange Online Mailbox Auditing Test#CredCode#    }
Exchange Online Mailbox Auditing Test#CredCode#}
Exchange Online Mailbox Auditing Test#CredCode#else
Exchange Online Mailbox Auditing Test#CredCode#{
Exchange Online Mailbox Auditing Test#CredCode#    $SumVal = ""
Exchange Online Mailbox Auditing Test#CredCode#    $TestStatus="Passed"
Exchange Online Mailbox Auditing Test#CredCode#    $TestText = "PASSED ITEMS"
Exchange Online Mailbox Auditing Test#CredCode#}
Office 365 Users Provisioning Test#Headercode#$ThisString="Total Users, Total Not Provisioned, Total Provisioned, Percentage Not Provisioned, Data File Location"
Office 365 Users Provisioning Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users Provisioning Test#Headercode#
Office 365 Users Provisioning Test#Headercode#
Office 365 Users Provisioning Test#Headercode#
Office 365 Users Provisioning Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users Provisioning Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users Provisioning Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#$TotNot = 0
Office 365 Users Provisioning Test#CredCode#$TotYes = 0
Office 365 Users Provisioning Test#CredCode#$TotPercentage = 0
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, OverallProvisioningStatus | Where-Object {$_.OverallProvisioningStatus -eq "PendingInput" -or $_.OverallProvisioningStatus -eq "None"}
Office 365 Users Provisioning Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Users Provisioning Test#CredCode#$TotYesItems = Get-MsolUser -All | Where-Object {$_.OverallProvisioningStatus -eq "Success"}
Office 365 Users Provisioning Test#CredCode#$TotYesCount = $TotYesItems.Count
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users Provisioning Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotYesCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users Provisioning Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users Provisioning Test#CredCode#{
Office 365 Users Provisioning Test#CredCode#IF ($TotPercentage -gt 15)
Office 365 Users Provisioning Test#CredCode#{
Office 365 Users Provisioning Test#CredCode#$SumVal = ""
Office 365 Users Provisioning Test#CredCode#$TestStatus="Medium"
Office 365 Users Provisioning Test#CredCode#$TestText="HIGH ISSUE"
Office 365 Users Provisioning Test#CredCode#}
Office 365 Users Provisioning Test#CredCode#else
Office 365 Users Provisioning Test#CredCode#{
Office 365 Users Provisioning Test#CredCode#$SumVal = ""
Office 365 Users Provisioning Test#CredCode#$TestStatus="Low"
Office 365 Users Provisioning Test#CredCode#$TestText="MEDIUM ISSUE"    
Office 365 Users Provisioning Test#CredCode#}
Office 365 Users Provisioning Test#CredCode#}
Office 365 Users Provisioning Test#CredCode#else
Office 365 Users Provisioning Test#CredCode#{
Office 365 Users Provisioning Test#CredCode#$SumVal = ""
Office 365 Users Provisioning Test#CredCode#$TestStatus="Passed"
Office 365 Users Provisioning Test#CredCode#$TestText = "PASSED ITEMS"
Office 365 Users Provisioning Test#CredCode#}
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users Provisioning Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users Provisioning Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#$TotNot = 0
Office 365 Users Provisioning Test#CredCode#$TotYes = 0
Office 365 Users Provisioning Test#CredCode#$TotPercentage = 0
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, OverallProvisioningStatus | Where-Object {$_.OverallProvisioningStatus -eq "PendingInput" -or $_.OverallProvisioningStatus -eq "None"}
Office 365 Users Provisioning Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Users Provisioning Test#CredCode#$TotYesItems = Get-MsolUser -All | Where-Object {$_.OverallProvisioningStatus -eq "Success"}
Office 365 Users Provisioning Test#CredCode#$TotYesCount = $TotYesItems.Count
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users Provisioning Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotYesCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users Provisioning Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users Provisioning Test#CredCode#{
Office 365 Users Provisioning Test#CredCode#IF ($TotPercentage -gt 15)
Office 365 Users Provisioning Test#CredCode#{
Office 365 Users Provisioning Test#CredCode#$SumVal = ""
Office 365 Users Provisioning Test#CredCode#$TestStatus="Medium"
Office 365 Users Provisioning Test#CredCode#$TestText="HIGH ISSUE"
Office 365 Users Provisioning Test#CredCode#}
Office 365 Users Provisioning Test#CredCode#else
Office 365 Users Provisioning Test#CredCode#{
Office 365 Users Provisioning Test#CredCode#$SumVal = ""
Office 365 Users Provisioning Test#CredCode#$TestStatus="Low"
Office 365 Users Provisioning Test#CredCode#$TestText="MEDIUM ISSUE"    
Office 365 Users Provisioning Test#CredCode#}
Office 365 Users Provisioning Test#CredCode#}
Office 365 Users Provisioning Test#CredCode#else
Office 365 Users Provisioning Test#CredCode#{
Office 365 Users Provisioning Test#CredCode#$SumVal = ""
Office 365 Users Provisioning Test#CredCode#$TestStatus="Passed"
Office 365 Users Provisioning Test#CredCode#$TestText = "PASSED ITEMS"
Office 365 Users Provisioning Test#CredCode#}
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#
Office 365 Users Provisioning Test#CredCode#
Office 365 Users With Emtpy Department Field Test#Headercode#$ThisString="Total Users,Total Users Department Field Empty, Total Users With Department Field Ok, Percentage Users Department Field Empty, Data File Location"
Office 365 Users With Emtpy Department Field Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users With Emtpy Department Field Test#CredCode#
Office 365 Users With Emtpy Department Field Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users With Emtpy Department Field Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users With Emtpy Department Field Test#CredCode#
Office 365 Users With Emtpy Department Field Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users With Emtpy Department Field Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users With Emtpy Department Field Test#CredCode#
Office 365 Users With Emtpy Department Field Test#CredCode#$TotNot = 0
Office 365 Users With Emtpy Department Field Test#CredCode#$TotYes = 0
Office 365 Users With Emtpy Department Field Test#CredCode#$TotPercentage = 0
Office 365 Users With Emtpy Department Field Test#CredCode#
Office 365 Users With Emtpy Department Field Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, Department | Where-Object {$_.Department -eq $null}
Office 365 Users With Emtpy Department Field Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Users With Emtpy Department Field Test#CredCode#$TotYesItems = Get-MsolUser -All | Where-Object {$_.Department -ne $null}
Office 365 Users With Emtpy Department Field Test#CredCode#$TotYesCount = $TotYesItems.Count
Office 365 Users With Emtpy Department Field Test#CredCode#
Office 365 Users With Emtpy Department Field Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users With Emtpy Department Field Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotYesCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users With Emtpy Department Field Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users With Emtpy Department Field Test#CredCode#
Office 365 Users With Emtpy Department Field Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users With Emtpy Department Field Test#CredCode#
Office 365 Users With Emtpy Department Field Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users With Emtpy Department Field Test#CredCode#{
Office 365 Users With Emtpy Department Field Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users With Emtpy Department Field Test#CredCode#    {
Office 365 Users With Emtpy Department Field Test#CredCode#        $SumVal = ""
Office 365 Users With Emtpy Department Field Test#CredCode#        $TestStatus="Medium"
Office 365 Users With Emtpy Department Field Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users With Emtpy Department Field Test#CredCode#    }
Office 365 Users With Emtpy Department Field Test#CredCode#    else
Office 365 Users With Emtpy Department Field Test#CredCode#    {
Office 365 Users With Emtpy Department Field Test#CredCode#        $SumVal = ""
Office 365 Users With Emtpy Department Field Test#CredCode#        $TestStatus="Low"
Office 365 Users With Emtpy Department Field Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users With Emtpy Department Field Test#CredCode#    }
Office 365 Users With Emtpy Department Field Test#CredCode#}
Office 365 Users With Emtpy Department Field Test#CredCode#else
Office 365 Users With Emtpy Department Field Test#CredCode#{
Office 365 Users With Emtpy Department Field Test#CredCode#    $SumVal = ""
Office 365 Users With Emtpy Department Field Test#CredCode#    $TestStatus="Passed"
Office 365 Users With Emtpy Department Field Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users With Emtpy Department Field Test#CredCode#}
Office 365 Users With Emtpy Department Field Test#CredCode#
Office 365 Users With Emtpy Department Field Test#CredCode#$AllItemsCount
Office 365 Users With Emtpy Department Field Test#CredCode#
Office 365 Users With Emtpy Department Field Test#CredCode#$TotYesCount
Office 365 Users With Emtpy Department Field Test#CredCode#$TotNotCount
Office 365 Users With Emtpy Department Field Test#CredCode#$TotPercentage
Office 365 Users With Empty Country Field Test#Headercode#$ThisString="Total Users,Total Users Country Field Empty, Total Users Country Field Ok, Percentage Users Country Field Empty, Data File Location"
Office 365 Users With Empty Country Field Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users With Empty Country Field Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users With Empty Country Field Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users With Empty Country Field Test#CredCode#
Office 365 Users With Empty Country Field Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users With Empty Country Field Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users With Empty Country Field Test#CredCode#
Office 365 Users With Empty Country Field Test#CredCode#$TotNot = 0
Office 365 Users With Empty Country Field Test#CredCode#$TotYes = 0
Office 365 Users With Empty Country Field Test#CredCode#$TotPercentage = 0
Office 365 Users With Empty Country Field Test#CredCode#
Office 365 Users With Empty Country Field Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, Country | Where-Object {$_.Country -eq $null}
Office 365 Users With Empty Country Field Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Users With Empty Country Field Test#CredCode#$TotYesItems = Get-MsolUser -All | Where-Object {$_.Country -ne $null}
Office 365 Users With Empty Country Field Test#CredCode#$TotYesCount = $TotYesItems.Count
Office 365 Users With Empty Country Field Test#CredCode#
Office 365 Users With Empty Country Field Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users With Empty Country Field Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotYesCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users With Empty Country Field Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users With Empty Country Field Test#CredCode#
Office 365 Users With Empty Country Field Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users With Empty Country Field Test#CredCode#
Office 365 Users With Empty Country Field Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users With Empty Country Field Test#CredCode#{
Office 365 Users With Empty Country Field Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users With Empty Country Field Test#CredCode#    {
Office 365 Users With Empty Country Field Test#CredCode#        $SumVal = ""
Office 365 Users With Empty Country Field Test#CredCode#        $TestStatus="Medium"
Office 365 Users With Empty Country Field Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users With Empty Country Field Test#CredCode#    }
Office 365 Users With Empty Country Field Test#CredCode#    else
Office 365 Users With Empty Country Field Test#CredCode#    {
Office 365 Users With Empty Country Field Test#CredCode#        $SumVal = ""
Office 365 Users With Empty Country Field Test#CredCode#        $TestStatus="Low"
Office 365 Users With Empty Country Field Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users With Empty Country Field Test#CredCode#    }
Office 365 Users With Empty Country Field Test#CredCode#}
Office 365 Users With Empty Country Field Test#CredCode#else
Office 365 Users With Empty Country Field Test#CredCode#{
Office 365 Users With Empty Country Field Test#CredCode#    $SumVal = ""
Office 365 Users With Empty Country Field Test#CredCode#    $TestStatus="Passed"
Office 365 Users With Empty Country Field Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users With Empty Country Field Test#CredCode#}
Office 365 Users With Empty Country Field Test#CredCode#
Office 365 Users With Empty Title Field Test#Headercode#$ThisString="Total Users,Total Users Title Field Empty, Total Users Title Field Ok, Percentage Users Title Field Empty, Data File Location"
Office 365 Users With Empty Title Field Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users With Empty Title Field Test#CredCode#
Office 365 Users With Empty Title Field Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users With Empty Title Field Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users With Empty Title Field Test#CredCode#
Office 365 Users With Empty Title Field Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users With Empty Title Field Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users With Empty Title Field Test#CredCode#
Office 365 Users With Empty Title Field Test#CredCode#$TotNot = 0
Office 365 Users With Empty Title Field Test#CredCode#$TotYes = 0
Office 365 Users With Empty Title Field Test#CredCode#$TotPercentage = 0
Office 365 Users With Empty Title Field Test#CredCode#
Office 365 Users With Empty Title Field Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, Title | Where-Object {$_.Title -eq $null}
Office 365 Users With Empty Title Field Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Users With Empty Title Field Test#CredCode#$TotYesItems = Get-MsolUser -All | Where-Object {$_.Title -ne $null}
Office 365 Users With Empty Title Field Test#CredCode#$TotYesCount = $TotYesItems.Count
Office 365 Users With Empty Title Field Test#CredCode#
Office 365 Users With Empty Title Field Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users With Empty Title Field Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotYesCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users With Empty Title Field Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users With Empty Title Field Test#CredCode#
Office 365 Users With Empty Title Field Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users With Empty Title Field Test#CredCode#
Office 365 Users With Empty Title Field Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users With Empty Title Field Test#CredCode#{
Office 365 Users With Empty Title Field Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users With Empty Title Field Test#CredCode#    {
Office 365 Users With Empty Title Field Test#CredCode#        $SumVal = ""
Office 365 Users With Empty Title Field Test#CredCode#        $TestStatus="Medium"
Office 365 Users With Empty Title Field Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users With Empty Title Field Test#CredCode#    }
Office 365 Users With Empty Title Field Test#CredCode#    else
Office 365 Users With Empty Title Field Test#CredCode#    {
Office 365 Users With Empty Title Field Test#CredCode#        $SumVal = ""
Office 365 Users With Empty Title Field Test#CredCode#        $TestStatus="Low"
Office 365 Users With Empty Title Field Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users With Empty Title Field Test#CredCode#    }
Office 365 Users With Empty Title Field Test#CredCode#}
Office 365 Users With Empty Title Field Test#CredCode#else
Office 365 Users With Empty Title Field Test#CredCode#{
Office 365 Users With Empty Title Field Test#CredCode#    $SumVal = ""
Office 365 Users With Empty Title Field Test#CredCode#    $TestStatus="Passed"
Office 365 Users With Empty Title Field Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users With Empty Title Field Test#CredCode#}
Office 365 Users With Empty StreetAddress Field Test#Headercode#$ThisString="Total Users,Total Users StreetAddress Field Empty, Total Users StreetAddress Ok, Percentage Users StreetAddress Field Empty, Data File Location"
Office 365 Users With Empty StreetAddress Field Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users With Empty StreetAddress Field Test#CredCode#
Office 365 Users With Empty StreetAddress Field Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users With Empty StreetAddress Field Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users With Empty StreetAddress Field Test#CredCode#
Office 365 Users With Empty StreetAddress Field Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users With Empty StreetAddress Field Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users With Empty StreetAddress Field Test#CredCode#
Office 365 Users With Empty StreetAddress Field Test#CredCode#$TotNot = 0
Office 365 Users With Empty StreetAddress Field Test#CredCode#$TotYes = 0
Office 365 Users With Empty StreetAddress Field Test#CredCode#$TotPercentage = 0
Office 365 Users With Empty StreetAddress Field Test#CredCode#
Office 365 Users With Empty StreetAddress Field Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, StreetAddress | Where-Object {$_.StreetAddress -eq $null}
Office 365 Users With Empty StreetAddress Field Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Users With Empty StreetAddress Field Test#CredCode#$TotYesItems = Get-MsolUser -All | Where-Object {$_.StreetAddress -ne $null}
Office 365 Users With Empty StreetAddress Field Test#CredCode#$TotYesCount = $TotYesItems.Count
Office 365 Users With Empty StreetAddress Field Test#CredCode#
Office 365 Users With Empty StreetAddress Field Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users With Empty StreetAddress Field Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotYesCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users With Empty StreetAddress Field Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users With Empty StreetAddress Field Test#CredCode#
Office 365 Users With Empty StreetAddress Field Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users With Empty StreetAddress Field Test#CredCode#
Office 365 Users With Empty StreetAddress Field Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users With Empty StreetAddress Field Test#CredCode#{
Office 365 Users With Empty StreetAddress Field Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users With Empty StreetAddress Field Test#CredCode#    {
Office 365 Users With Empty StreetAddress Field Test#CredCode#        $SumVal = ""
Office 365 Users With Empty StreetAddress Field Test#CredCode#        $TestStatus="Medium"
Office 365 Users With Empty StreetAddress Field Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users With Empty StreetAddress Field Test#CredCode#    }
Office 365 Users With Empty StreetAddress Field Test#CredCode#    else
Office 365 Users With Empty StreetAddress Field Test#CredCode#    {
Office 365 Users With Empty StreetAddress Field Test#CredCode#        $SumVal = ""
Office 365 Users With Empty StreetAddress Field Test#CredCode#        $TestStatus="Low"
Office 365 Users With Empty StreetAddress Field Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users With Empty StreetAddress Field Test#CredCode#    }
Office 365 Users With Empty StreetAddress Field Test#CredCode#}
Office 365 Users With Empty StreetAddress Field Test#CredCode#else
Office 365 Users With Empty StreetAddress Field Test#CredCode#{
Office 365 Users With Empty StreetAddress Field Test#CredCode#    $SumVal = ""
Office 365 Users With Empty StreetAddress Field Test#CredCode#    $TestStatus="Passed"
Office 365 Users With Empty StreetAddress Field Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users With Empty StreetAddress Field Test#CredCode#}
Office 365 Users With Empty State Field Test#Headercode#$ThisString="Total Users,Total Users State Field Empty, Total Users State Field Ok, Percentage Users State Field Empty, Data File Location"
Office 365 Users With Empty State Field Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users With Empty State Field Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users With Empty State Field Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users With Empty State Field Test#CredCode#
Office 365 Users With Empty State Field Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users With Empty State Field Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users With Empty State Field Test#CredCode#
Office 365 Users With Empty State Field Test#CredCode#$TotNot = 0
Office 365 Users With Empty State Field Test#CredCode#$TotYes = 0
Office 365 Users With Empty State Field Test#CredCode#$TotPercentage = 0
Office 365 Users With Empty State Field Test#CredCode#
Office 365 Users With Empty State Field Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, State | Where-Object {$_.State -eq $null}
Office 365 Users With Empty State Field Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Users With Empty State Field Test#CredCode#$TotYesItems = Get-MsolUser -All | Where-Object {$_.State -ne $null}
Office 365 Users With Empty State Field Test#CredCode#$TotYesCount = $TotYesItems.Count
Office 365 Users With Empty State Field Test#CredCode#
Office 365 Users With Empty State Field Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users With Empty State Field Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotYesCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users With Empty State Field Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users With Empty State Field Test#CredCode#
Office 365 Users With Empty State Field Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users With Empty State Field Test#CredCode#
Office 365 Users With Empty State Field Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users With Empty State Field Test#CredCode#{
Office 365 Users With Empty State Field Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users With Empty State Field Test#CredCode#    {
Office 365 Users With Empty State Field Test#CredCode#        $SumVal = ""
Office 365 Users With Empty State Field Test#CredCode#        $TestStatus="Medium"
Office 365 Users With Empty State Field Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users With Empty State Field Test#CredCode#    }
Office 365 Users With Empty State Field Test#CredCode#    else
Office 365 Users With Empty State Field Test#CredCode#    {
Office 365 Users With Empty State Field Test#CredCode#        $SumVal = ""
Office 365 Users With Empty State Field Test#CredCode#        $TestStatus="Low"
Office 365 Users With Empty State Field Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users With Empty State Field Test#CredCode#    }
Office 365 Users With Empty State Field Test#CredCode#}
Office 365 Users With Empty State Field Test#CredCode#else
Office 365 Users With Empty State Field Test#CredCode#{
Office 365 Users With Empty State Field Test#CredCode#    $SumVal = ""
Office 365 Users With Empty State Field Test#CredCode#    $TestStatus="Passed"
Office 365 Users With Empty State Field Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users With Empty State Field Test#CredCode#}
Office 365 Users With Empty Phone Numer Field Test#Headercode#$ThisString="Total Users,Total Users Phone Number Field Empty, Total Users Phone Number Field Ok, Percentage Users Phone Number Field Empty, Data File Location"
Office 365 Users With Empty Phone Numer Field Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users With Empty Phone Numer Field Test#CredCode#
Office 365 Users With Empty Phone Numer Field Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users With Empty Phone Numer Field Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users With Empty Phone Numer Field Test#CredCode#
Office 365 Users With Empty Phone Numer Field Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users With Empty Phone Numer Field Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users With Empty Phone Numer Field Test#CredCode#
Office 365 Users With Empty Phone Numer Field Test#CredCode#$TotNot = 0
Office 365 Users With Empty Phone Numer Field Test#CredCode#$TotYes = 0
Office 365 Users With Empty Phone Numer Field Test#CredCode#$TotPercentage = 0
Office 365 Users With Empty Phone Numer Field Test#CredCode#
Office 365 Users With Empty Phone Numer Field Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, PhoneNumber | Where-Object {$_.PhoneNumber -eq $null}
Office 365 Users With Empty Phone Numer Field Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Users With Empty Phone Numer Field Test#CredCode#$TotYesItems = Get-MsolUser -All | Where-Object {$_.PhoneNumber -ne $null}
Office 365 Users With Empty Phone Numer Field Test#CredCode#$TotYesCount = $TotYesItems.Count
Office 365 Users With Empty Phone Numer Field Test#CredCode#
Office 365 Users With Empty Phone Numer Field Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users With Empty Phone Numer Field Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotYesCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users With Empty Phone Numer Field Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users With Empty Phone Numer Field Test#CredCode#
Office 365 Users With Empty Phone Numer Field Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users With Empty Phone Numer Field Test#CredCode#
Office 365 Users With Empty Phone Numer Field Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users With Empty Phone Numer Field Test#CredCode#{
Office 365 Users With Empty Phone Numer Field Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users With Empty Phone Numer Field Test#CredCode#    {
Office 365 Users With Empty Phone Numer Field Test#CredCode#        $SumVal = ""
Office 365 Users With Empty Phone Numer Field Test#CredCode#        $TestStatus="Medium"
Office 365 Users With Empty Phone Numer Field Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users With Empty Phone Numer Field Test#CredCode#    }
Office 365 Users With Empty Phone Numer Field Test#CredCode#    else
Office 365 Users With Empty Phone Numer Field Test#CredCode#    {
Office 365 Users With Empty Phone Numer Field Test#CredCode#        $SumVal = ""
Office 365 Users With Empty Phone Numer Field Test#CredCode#        $TestStatus="Low"
Office 365 Users With Empty Phone Numer Field Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users With Empty Phone Numer Field Test#CredCode#    }
Office 365 Users With Empty Phone Numer Field Test#CredCode#}
Office 365 Users With Empty Phone Numer Field Test#CredCode#else
Office 365 Users With Empty Phone Numer Field Test#CredCode#{
Office 365 Users With Empty Phone Numer Field Test#CredCode#    $SumVal = ""
Office 365 Users With Empty Phone Numer Field Test#CredCode#    $TestStatus="Passed"
Office 365 Users With Empty Phone Numer Field Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users With Empty Phone Numer Field Test#CredCode#}
Office 365 Users With Empty Mobile Field Test#Headercode#$ThisString="Total Users,Total Users Mobile Field Empty, Total Users Mobile Field Ok, Percentage Users Mobile Field Empty, Data File Location"
Office 365 Users With Empty Mobile Field Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users With Empty Mobile Field Test#CredCode#
Office 365 Users With Empty Mobile Field Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users With Empty Mobile Field Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users With Empty Mobile Field Test#CredCode#
Office 365 Users With Empty Mobile Field Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users With Empty Mobile Field Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users With Empty Mobile Field Test#CredCode#
Office 365 Users With Empty Mobile Field Test#CredCode#$TotNot = 0
Office 365 Users With Empty Mobile Field Test#CredCode#$TotYes = 0
Office 365 Users With Empty Mobile Field Test#CredCode#$TotPercentage = 0
Office 365 Users With Empty Mobile Field Test#CredCode#
Office 365 Users With Empty Mobile Field Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, MobilePhone | Where-Object {$_.MobilePhone -eq $null}
Office 365 Users With Empty Mobile Field Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Users With Empty Mobile Field Test#CredCode#$TotYesItems = Get-MsolUser -All | Where-Object {$_.MobilePhone -ne $null}
Office 365 Users With Empty Mobile Field Test#CredCode#$TotYesCount = $TotYesItems.Count
Office 365 Users With Empty Mobile Field Test#CredCode#
Office 365 Users With Empty Mobile Field Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users With Empty Mobile Field Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotYesCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users With Empty Mobile Field Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users With Empty Mobile Field Test#CredCode#
Office 365 Users With Empty Mobile Field Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users With Empty Mobile Field Test#CredCode#
Office 365 Users With Empty Mobile Field Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users With Empty Mobile Field Test#CredCode#{
Office 365 Users With Empty Mobile Field Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users With Empty Mobile Field Test#CredCode#    {
Office 365 Users With Empty Mobile Field Test#CredCode#        $SumVal = ""
Office 365 Users With Empty Mobile Field Test#CredCode#        $TestStatus="Medium"
Office 365 Users With Empty Mobile Field Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users With Empty Mobile Field Test#CredCode#    }
Office 365 Users With Empty Mobile Field Test#CredCode#    else
Office 365 Users With Empty Mobile Field Test#CredCode#    {
Office 365 Users With Empty Mobile Field Test#CredCode#        $SumVal = ""
Office 365 Users With Empty Mobile Field Test#CredCode#        $TestStatus="Low"
Office 365 Users With Empty Mobile Field Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users With Empty Mobile Field Test#CredCode#    }
Office 365 Users With Empty Mobile Field Test#CredCode#}
Office 365 Users With Empty Mobile Field Test#CredCode#else
Office 365 Users With Empty Mobile Field Test#CredCode#{
Office 365 Users With Empty Mobile Field Test#CredCode#    $SumVal = ""
Office 365 Users With Empty Mobile Field Test#CredCode#    $TestStatus="Passed"
Office 365 Users With Empty Mobile Field Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users With Empty Mobile Field Test#CredCode#}
Office 365 Users with Empty UsageLocation Test#Headercode#$ThisString="Total Users, Total Users Not Defined With Location, Total Users Location Ok, Percentage Users Not Using Location, Data File Location"
Office 365 Users with Empty UsageLocation Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users with Empty UsageLocation Test#CredCode#
Office 365 Users with Empty UsageLocation Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users with Empty UsageLocation Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users with Empty UsageLocation Test#CredCode#
Office 365 Users with Empty UsageLocation Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users with Empty UsageLocation Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users with Empty UsageLocation Test#CredCode#
Office 365 Users with Empty UsageLocation Test#CredCode#$TotNot = 0
Office 365 Users with Empty UsageLocation Test#CredCode#$TotYes = 0
Office 365 Users with Empty UsageLocation Test#CredCode#$TotPercentage = 0
Office 365 Users with Empty UsageLocation Test#CredCode#
Office 365 Users with Empty UsageLocation Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, UsageLocation | Where-Object {$_.UsageLocation -eq $null}
Office 365 Users with Empty UsageLocation Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Users with Empty UsageLocation Test#CredCode#$TotYesItems = Get-MsolUser -All | Where-Object {$_.UsageLocation -ne $null}
Office 365 Users with Empty UsageLocation Test#CredCode#$TotYesCount = $TotYesItems.Count
Office 365 Users with Empty UsageLocation Test#CredCode#
Office 365 Users with Empty UsageLocation Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users with Empty UsageLocation Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotYesCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users with Empty UsageLocation Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users with Empty UsageLocation Test#CredCode#
Office 365 Users with Empty UsageLocation Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users with Empty UsageLocation Test#CredCode#
Office 365 Users with Empty UsageLocation Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users with Empty UsageLocation Test#CredCode#{
Office 365 Users with Empty UsageLocation Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users with Empty UsageLocation Test#CredCode#    {
Office 365 Users with Empty UsageLocation Test#CredCode#        $SumVal = ""
Office 365 Users with Empty UsageLocation Test#CredCode#        $TestStatus="High"
Office 365 Users with Empty UsageLocation Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users with Empty UsageLocation Test#CredCode#    }
Office 365 Users with Empty UsageLocation Test#CredCode#    else
Office 365 Users with Empty UsageLocation Test#CredCode#    {
Office 365 Users with Empty UsageLocation Test#CredCode#        $SumVal = ""
Office 365 Users with Empty UsageLocation Test#CredCode#        $TestStatus="Medium"
Office 365 Users with Empty UsageLocation Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users with Empty UsageLocation Test#CredCode#    }
Office 365 Users with Empty UsageLocation Test#CredCode#}
Office 365 Users with Empty UsageLocation Test#CredCode#else
Office 365 Users with Empty UsageLocation Test#CredCode#{
Office 365 Users with Empty UsageLocation Test#CredCode#    $SumVal = ""
Office 365 Users with Empty UsageLocation Test#CredCode#    $TestStatus="Passed"
Office 365 Users with Empty UsageLocation Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users with Empty UsageLocation Test#CredCode#}
Office 365 Users Strong Password Requirements Test#Headercode#$ThisString="Total Users,Total Users With Weak Password Allowed, Percentage Users With Weak Password, Data File Location"
Office 365 Users Strong Password Requirements Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users Strong Password Requirements Test#CredCode#
Office 365 Users Strong Password Requirements Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users Strong Password Requirements Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users Strong Password Requirements Test#CredCode#
Office 365 Users Strong Password Requirements Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users Strong Password Requirements Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users Strong Password Requirements Test#CredCode#
Office 365 Users Strong Password Requirements Test#CredCode#$TotNot = 0
Office 365 Users Strong Password Requirements Test#CredCode#$TotYes = 0
Office 365 Users Strong Password Requirements Test#CredCode#$TotPercentage = 0
Office 365 Users Strong Password Requirements Test#CredCode#               
Office 365 Users Strong Password Requirements Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, StrongPasswordRequired | Where-Object {$_.StrongPasswordRequired -eq $false}
Office 365 Users Strong Password Requirements Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Users Strong Password Requirements Test#CredCode# $TotYesItems = Get-MsolUser -All | Where-Object {$_.Department -ne $null}
Office 365 Users Strong Password Requirements Test#CredCode# $TotYesCount = $TotYesItems.Count
Office 365 Users Strong Password Requirements Test#CredCode#
Office 365 Users Strong Password Requirements Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users Strong Password Requirements Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users Strong Password Requirements Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users Strong Password Requirements Test#CredCode#
Office 365 Users Strong Password Requirements Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users Strong Password Requirements Test#CredCode#
Office 365 Users Strong Password Requirements Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users Strong Password Requirements Test#CredCode#{
Office 365 Users Strong Password Requirements Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users Strong Password Requirements Test#CredCode#    {
Office 365 Users Strong Password Requirements Test#CredCode#        $SumVal = ""
Office 365 Users Strong Password Requirements Test#CredCode#        $TestStatus="High"
Office 365 Users Strong Password Requirements Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users Strong Password Requirements Test#CredCode#    }
Office 365 Users Strong Password Requirements Test#CredCode#    else
Office 365 Users Strong Password Requirements Test#CredCode#    {
Office 365 Users Strong Password Requirements Test#CredCode#        $SumVal = ""
Office 365 Users Strong Password Requirements Test#CredCode#        $TestStatus="Medium"
Office 365 Users Strong Password Requirements Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users Strong Password Requirements Test#CredCode#    }
Office 365 Users Strong Password Requirements Test#CredCode#}
Office 365 Users Strong Password Requirements Test#CredCode#else
Office 365 Users Strong Password Requirements Test#CredCode#{
Office 365 Users Strong Password Requirements Test#CredCode#    $SumVal = ""
Office 365 Users Strong Password Requirements Test#CredCode#    $TestStatus="Passed"
Office 365 Users Strong Password Requirements Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users Strong Password Requirements Test#CredCode#}
Office 365 Blocked Users Test#Headercode#$ThisString="Total Users,Total Users Blocked, Total Users Not Blocked, Percentage Users Blocked, Data File Location"
Office 365 Blocked Users Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Blocked Users Test#Headercode# 
Office 365 Blocked Users Test#Headercode#
Office 365 Blocked Users Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Blocked Users Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Blocked Users Test#CredCode#
Office 365 Blocked Users Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Blocked Users Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Blocked Users Test#CredCode#
Office 365 Blocked Users Test#CredCode#$TotNot = 0
Office 365 Blocked Users Test#CredCode#$TotYes = 0
Office 365 Blocked Users Test#CredCode#$TotPercentage = 0
Office 365 Blocked Users Test#CredCode#
Office 365 Blocked Users Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, BlockCredential | Where-Object {$_.BlockCredential -eq $true}
Office 365 Blocked Users Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Blocked Users Test#CredCode#$TotYesItems = Get-MsolUser -All | Where-Object {$_.BlockCredential -eq $false}
Office 365 Blocked Users Test#CredCode#$TotYesCount = $TotYesItems.Count
Office 365 Blocked Users Test#CredCode#
Office 365 Blocked Users Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Blocked Users Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotYesCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Blocked Users Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Blocked Users Test#CredCode#
Office 365 Blocked Users Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Blocked Users Test#CredCode#
Office 365 Blocked Users Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Blocked Users Test#CredCode#{
Office 365 Blocked Users Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Blocked Users Test#CredCode#    {
Office 365 Blocked Users Test#CredCode#        $SumVal = ""
Office 365 Blocked Users Test#CredCode#        $TestStatus="Medium"
Office 365 Blocked Users Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Blocked Users Test#CredCode#    }
Office 365 Blocked Users Test#CredCode#    else
Office 365 Blocked Users Test#CredCode#    {
Office 365 Blocked Users Test#CredCode#        $SumVal = ""
Office 365 Blocked Users Test#CredCode#        $TestStatus="Low"
Office 365 Blocked Users Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Blocked Users Test#CredCode#    }
Office 365 Blocked Users Test#CredCode#}
Office 365 Blocked Users Test#CredCode#else
Office 365 Blocked Users Test#CredCode#{
Office 365 Blocked Users Test#CredCode#    $SumVal = ""
Office 365 Blocked Users Test#CredCode#    $TestStatus="Passed"
Office 365 Blocked Users Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Blocked Users Test#CredCode#}
Office 365 Blocked Users Test#CredCode# 
Office 365 Blocked Users Test#CredCode#
Office 365 Blocked Users Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Blocked Users Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Blocked Users Test#CredCode#
Office 365 Blocked Users Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Blocked Users Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Blocked Users Test#CredCode#
Office 365 Blocked Users Test#CredCode#$TotNot = 0
Office 365 Blocked Users Test#CredCode#$TotYes = 0
Office 365 Blocked Users Test#CredCode#$TotPercentage = 0
Office 365 Blocked Users Test#CredCode#
Office 365 Blocked Users Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, BlockCredential | Where-Object {$_.BlockCredential -eq $true}
Office 365 Blocked Users Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Blocked Users Test#CredCode#$TotYesItems = Get-MsolUser -All | Where-Object {$_.BlockCredential -eq $false}
Office 365 Blocked Users Test#CredCode#$TotYesCount = $TotYesItems.Count
Office 365 Blocked Users Test#CredCode#
Office 365 Blocked Users Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Blocked Users Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotYesCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Blocked Users Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Blocked Users Test#CredCode#
Office 365 Blocked Users Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Blocked Users Test#CredCode#
Office 365 Blocked Users Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Blocked Users Test#CredCode#{
Office 365 Blocked Users Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Blocked Users Test#CredCode#    {
Office 365 Blocked Users Test#CredCode#        $SumVal = ""
Office 365 Blocked Users Test#CredCode#        $TestStatus="Medium"
Office 365 Blocked Users Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Blocked Users Test#CredCode#    }
Office 365 Blocked Users Test#CredCode#    else
Office 365 Blocked Users Test#CredCode#    {
Office 365 Blocked Users Test#CredCode#        $SumVal = ""
Office 365 Blocked Users Test#CredCode#        $TestStatus="Low"
Office 365 Blocked Users Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Blocked Users Test#CredCode#    }
Office 365 Blocked Users Test#CredCode#}
Office 365 Blocked Users Test#CredCode#else
Office 365 Blocked Users Test#CredCode#{
Office 365 Blocked Users Test#CredCode#    $SumVal = ""
Office 365 Blocked Users Test#CredCode#    $TestStatus="Passed"
Office 365 Blocked Users Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Blocked Users Test#CredCode#}
Office 365 Blocked Users Test#CredCode# 
Office 365 Blocked Users Test#CredCode#
Office 365 Users With Empty PostalCode Field Test#Headercode#$ThisString="Total Users,Total Users Postal Code Field Empty, Total Users With Postal Code Field Ok, Percentage Users Postal Code Field Empty, Data File Location"
Office 365 Users With Empty PostalCode Field Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users With Empty PostalCode Field Test#CredCode#
Office 365 Users With Empty PostalCode Field Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users With Empty PostalCode Field Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users With Empty PostalCode Field Test#CredCode#
Office 365 Users With Empty PostalCode Field Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users With Empty PostalCode Field Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users With Empty PostalCode Field Test#CredCode#
Office 365 Users With Empty PostalCode Field Test#CredCode#$TotNot = 0
Office 365 Users With Empty PostalCode Field Test#CredCode#$TotYes = 0
Office 365 Users With Empty PostalCode Field Test#CredCode#$TotPercentage = 0
Office 365 Users With Empty PostalCode Field Test#CredCode#
Office 365 Users With Empty PostalCode Field Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, PostalCode | Where-Object {$_.PostalCode -eq $null}
Office 365 Users With Empty PostalCode Field Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Users With Empty PostalCode Field Test#CredCode#$TotYesItems = Get-MsolUser -All | Where-Object {$_.PostalCode -ne $null}
Office 365 Users With Empty PostalCode Field Test#CredCode#$TotYesCount = $TotYesItems.Count
Office 365 Users With Empty PostalCode Field Test#CredCode#
Office 365 Users With Empty PostalCode Field Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users With Empty PostalCode Field Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotYesCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users With Empty PostalCode Field Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users With Empty PostalCode Field Test#CredCode#
Office 365 Users With Empty PostalCode Field Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users With Empty PostalCode Field Test#CredCode#
Office 365 Users With Empty PostalCode Field Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users With Empty PostalCode Field Test#CredCode#{
Office 365 Users With Empty PostalCode Field Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users With Empty PostalCode Field Test#CredCode#    {
Office 365 Users With Empty PostalCode Field Test#CredCode#        $SumVal = ""
Office 365 Users With Empty PostalCode Field Test#CredCode#        $TestStatus="Medium"
Office 365 Users With Empty PostalCode Field Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users With Empty PostalCode Field Test#CredCode#    }
Office 365 Users With Empty PostalCode Field Test#CredCode#    else
Office 365 Users With Empty PostalCode Field Test#CredCode#    {
Office 365 Users With Empty PostalCode Field Test#CredCode#        $SumVal = ""
Office 365 Users With Empty PostalCode Field Test#CredCode#        $TestStatus="Low"
Office 365 Users With Empty PostalCode Field Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users With Empty PostalCode Field Test#CredCode#    }
Office 365 Users With Empty PostalCode Field Test#CredCode#}
Office 365 Users With Empty PostalCode Field Test#CredCode#else
Office 365 Users With Empty PostalCode Field Test#CredCode#{
Office 365 Users With Empty PostalCode Field Test#CredCode#    $SumVal = ""
Office 365 Users With Empty PostalCode Field Test#CredCode#    $TestStatus="Passed"
Office 365 Users With Empty PostalCode Field Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users With Empty PostalCode Field Test#CredCode#}
Office 365 Users Not Changed Password Test#Headercode#$ThisString="Total Users,Total Not Changed Password Within 90 Days, Percentage Users Not Changed Password, Data File Location"
Office 365 Users Not Changed Password Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users Not Changed Password Test#CredCode#
Office 365 Users Not Changed Password Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users Not Changed Password Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users Not Changed Password Test#CredCode#
Office 365 Users Not Changed Password Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users Not Changed Password Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users Not Changed Password Test#CredCode#
Office 365 Users Not Changed Password Test#CredCode#$TotNot = 0
Office 365 Users Not Changed Password Test#CredCode#$TotYes = 0
Office 365 Users Not Changed Password Test#CredCode#$TotPercentage = 0
Office 365 Users Not Changed Password Test#CredCode#               
Office 365 Users Not Changed Password Test#CredCode#$TotNotItems = Get-MsolUser -All | Select-Object UserPrincipalName, LastPasswordChangeTimestamp | Where-Object {$_.LastPasswordChangeTimestamp -lt (Get-Date).AddDays(-90)}
Office 365 Users Not Changed Password Test#CredCode#$TotNotCount = $TotNotItems.Count
Office 365 Users Not Changed Password Test#CredCode# $TotYesItems = Get-MsolUser -All | Where-Object {$_.Department -ne $null}
Office 365 Users Not Changed Password Test#CredCode# $TotYesCount = $TotYesItems.Count
Office 365 Users Not Changed Password Test#CredCode#
Office 365 Users Not Changed Password Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users Not Changed Password Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users Not Changed Password Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users Not Changed Password Test#CredCode#
Office 365 Users Not Changed Password Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users Not Changed Password Test#CredCode#
Office 365 Users Not Changed Password Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users Not Changed Password Test#CredCode#{
Office 365 Users Not Changed Password Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users Not Changed Password Test#CredCode#    {
Office 365 Users Not Changed Password Test#CredCode#        $SumVal = ""
Office 365 Users Not Changed Password Test#CredCode#        $TestStatus="High"
Office 365 Users Not Changed Password Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users Not Changed Password Test#CredCode#    }
Office 365 Users Not Changed Password Test#CredCode#    else
Office 365 Users Not Changed Password Test#CredCode#    {
Office 365 Users Not Changed Password Test#CredCode#        $SumVal = ""
Office 365 Users Not Changed Password Test#CredCode#        $TestStatus="Medium"
Office 365 Users Not Changed Password Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users Not Changed Password Test#CredCode#    }
Office 365 Users Not Changed Password Test#CredCode#}
Office 365 Users Not Changed Password Test#CredCode#else
Office 365 Users Not Changed Password Test#CredCode#{
Office 365 Users Not Changed Password Test#CredCode#    $SumVal = ""
Office 365 Users Not Changed Password Test#CredCode#    $TestStatus="Passed"
Office 365 Users Not Changed Password Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users Not Changed Password Test#CredCode#}
Office 365 Users Without Group Membership Test#Headercode#$ThisString="Total Users, Total Users With Group Membership, Total Users Without Group Membership, Percentage Users Without Group Membership, Data File Location"
Office 365 Users Without Group Membership Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users Without Group Membership Test#CredCode#
Office 365 Users Without Group Membership Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users Without Group Membership Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users Without Group Membership Test#CredCode#
Office 365 Users Without Group Membership Test#CredCode#$STR = "User Principal Name, Total In Group"
Office 365 Users Without Group Membership Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Users Without Group Membership Test#CredCode#
Office 365 Users Without Group Membership Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users Without Group Membership Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users Without Group Membership Test#CredCode#
Office 365 Users Without Group Membership Test#CredCode#$TotNot = 0
Office 365 Users Without Group Membership Test#CredCode#$TotYes = 0
Office 365 Users Without Group Membership Test#CredCode#$TotPercentage = 0
Office 365 Users Without Group Membership Test#CredCode#
Office 365 Users Without Group Membership Test#CredCode#$TotUsersNotInGroup = 0
Office 365 Users Without Group Membership Test#CredCode#$TotUsersInGroup = 0
Office 365 Users Without Group Membership Test#CredCode#
Office 365 Users Without Group Membership Test#CredCode#ForEach ($Item in $AllItems)
Office 365 Users Without Group Membership Test#CredCode#{
Office 365 Users Without Group Membership Test#CredCode#    $UPNNow = $Item.UserPrincipalName
Office 365 Users Without Group Membership Test#CredCode#    $TotCount = (Get-MsolUserRole -UserPrincipalName "$UPNNow").Count
Office 365 Users Without Group Membership Test#CredCode#
Office 365 Users Without Group Membership Test#CredCode#    IF ($TotCount -eq 0)
Office 365 Users Without Group Membership Test#CredCode#    {
Office 365 Users Without Group Membership Test#CredCode#        $TotUsersNotInGroup++
Office 365 Users Without Group Membership Test#CredCode#        $STR = $UPNNow+",0"
Office 365 Users Without Group Membership Test#CredCode#        Add-Content $DataFileLocation $STR
Office 365 Users Without Group Membership Test#CredCode#    }
Office 365 Users Without Group Membership Test#CredCode#    else
Office 365 Users Without Group Membership Test#CredCode#    {
Office 365 Users Without Group Membership Test#CredCode#        $TotUsersInGroup++
Office 365 Users Without Group Membership Test#CredCode#    }
Office 365 Users Without Group Membership Test#CredCode#}
Office 365 Users Without Group Membership Test#CredCode#
Office 365 Users Without Group Membership Test#CredCode#$TotPercentage=($TotUsersNotInGroup/$AllItemsCount)*100
Office 365 Users Without Group Membership Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotUsersInGroup.ToString()+","+$TotUsersNotInGroup.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users Without Group Membership Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users Without Group Membership Test#CredCode#
Office 365 Users Without Group Membership Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users Without Group Membership Test#CredCode#{
Office 365 Users Without Group Membership Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users Without Group Membership Test#CredCode#    {
Office 365 Users Without Group Membership Test#CredCode#        $SumVal = ""
Office 365 Users Without Group Membership Test#CredCode#        $TestStatus="High"
Office 365 Users Without Group Membership Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users Without Group Membership Test#CredCode#    }
Office 365 Users Without Group Membership Test#CredCode#    else
Office 365 Users Without Group Membership Test#CredCode#    {
Office 365 Users Without Group Membership Test#CredCode#        $SumVal = ""
Office 365 Users Without Group Membership Test#CredCode#        $TestStatus="Medium"
Office 365 Users Without Group Membership Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users Without Group Membership Test#CredCode#    }
Office 365 Users Without Group Membership Test#CredCode#}
Office 365 Users Without Group Membership Test#CredCode#else
Office 365 Users Without Group Membership Test#CredCode#{
Office 365 Users Without Group Membership Test#CredCode#    $SumVal = ""
Office 365 Users Without Group Membership Test#CredCode#    $TestStatus="Passed"
Office 365 Users Without Group Membership Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users Without Group Membership Test#CredCode#}
Office 365 Users With Company Administrators Test#Headercode#$ThisString="Total Company Administrators, Final Status"
Office 365 Users With Company Administrators Test#Headercode#Add-Content "$TestCSVFile" $ThisString 
Office 365 Users With Company Administrators Test#CredCode#
Office 365 Users With Company Administrators Test#CredCode#$AnyGap = "No"
Office 365 Users With Company Administrators Test#CredCode#$TestStatus ="Passed"
Office 365 Users With Company Administrators Test#CredCode#$SumVal = ""
Office 365 Users With Company Administrators Test#CredCode#$TestText = ""
Office 365 Users With Company Administrators Test#CredCode#
Office 365 Users With Company Administrators Test#CredCode#$AllRoles = Get-MsolRole
Office 365 Users With Company Administrators Test#CredCode#
Office 365 Users With Company Administrators Test#CredCode#ForEach ($Item in $AllRoles)
Office 365 Users With Company Administrators Test#CredCode#{
Office 365 Users With Company Administrators Test#CredCode#    $RoleNameNow = $Item.Name
Office 365 Users With Company Administrators Test#CredCode#    
Office 365 Users With Company Administrators Test#CredCode#    IF ($RoleNameNow -eq "Company Administrator")
Office 365 Users With Company Administrators Test#CredCode#    {
Office 365 Users With Company Administrators Test#CredCode#        $ObjectGUID = $Item.ObjectId        
Office 365 Users With Company Administrators Test#CredCode#        $TotMembers = Get-MsolRoleMember -RoleObjectId $ObjectGUID
Office 365 Users With Company Administrators Test#CredCode#        $TotMembersCount = $TotMembers.Count
Office 365 Users With Company Administrators Test#CredCode#
Office 365 Users With Company Administrators Test#CredCode#        IF ($TotMembersCount -gt 5)
Office 365 Users With Company Administrators Test#CredCode#        {
Office 365 Users With Company Administrators Test#CredCode#            $STR = $TotMembersCount.ToString()+",There are more than five Company Administrators. Please check."
Office 365 Users With Company Administrators Test#CredCode#            Add-Content $TestCSVFile $STR
Office 365 Users With Company Administrators Test#CredCode#            $TestStatus="High"
Office 365 Users With Company Administrators Test#CredCode#            $TestText = "Not Ok"
Office 365 Users With Company Administrators Test#CredCode#        }
Office 365 Users With Company Administrators Test#CredCode#        else
Office 365 Users With Company Administrators Test#CredCode#        {
Office 365 Users With Company Administrators Test#CredCode#           $STR = $TotMembersCount.ToString()+",Ok"
Office 365 Users With Company Administrators Test#CredCode#           Add-Content $TestCSVFile $STR        
Office 365 Users With Company Administrators Test#CredCode#           $TestStatus="Passed"
Office 365 Users With Company Administrators Test#CredCode#           $TestText = "Ok"
Office 365 Users With Company Administrators Test#CredCode#
Office 365 Users With Company Administrators Test#CredCode#        }
Office 365 Users With Company Administrators Test#CredCode#    }            
Office 365 Users With Company Administrators Test#CredCode#}
Office 365 Users With Admins MFA Test#Headercode#$ThisString="Total Admins, Total MFA Enabled, Total MFA Enforced, Total MFA Disabled, Data File Location"
Office 365 Users With Admins MFA Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users With Admins MFA Test#CredCode#
Office 365 Users With Admins MFA Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users With Admins MFA Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users With Admins MFA Test#CredCode#
Office 365 Users With Admins MFA Test#CredCode#$R=Get-MsolRole -RoleName "Company Administrator"
Office 365 Users With Admins MFA Test#CredCode#$GuidNow = $R.ObjectId
Office 365 Users With Admins MFA Test#CredCode#
Office 365 Users With Admins MFA Test#CredCode#$AllAdmins = Get-MsolRoleMember -RoleObjectId $GuidNow
Office 365 Users With Admins MFA Test#CredCode#$AllAdminsTotal = $AllAdmins.Count
Office 365 Users With Admins MFA Test#CredCode#
Office 365 Users With Admins MFA Test#CredCode#$AdminsMFAEnabled = Get-MsolRoleMember -RoleObjectId $GuidNow | Where-Object {$_.StrongAuthenticationRequirements.State -eq "Enabled"}
Office 365 Users With Admins MFA Test#CredCode#$AdminsMFAEnabledTotal = $AdminsMFAEnabled.Count
Office 365 Users With Admins MFA Test#CredCode#
Office 365 Users With Admins MFA Test#CredCode#$AdminsMFAEnforced = Get-MsolRoleMember -RoleObjectId $GuidNow | Where-Object {$_.StrongAuthenticationRequirements.State -eq "Enforced"}
Office 365 Users With Admins MFA Test#CredCode#$AdminsMFAEnforcedTotal = $AdminsMFAEnforced.Count
Office 365 Users With Admins MFA Test#CredCode#
Office 365 Users With Admins MFA Test#CredCode#$AdminsMFADisabled = Get-MsolRoleMember -RoleObjectId $GuidNow | Where-Object {$_.StrongAuthenticationRequirements.State -eq $null}
Office 365 Users With Admins MFA Test#CredCode#$AdminsMFADisabledTotal = $AdminsMFADisabled.Count
Office 365 Users With Admins MFA Test#CredCode#
Office 365 Users With Admins MFA Test#CredCode#$DataNow = $AdminsMFAEnabled+$AdminsMFAEnforced
Office 365 Users With Admins MFA Test#CredCode#
Office 365 Users With Admins MFA Test#CredCode#$ValSTR = $AllAdminsTotal.ToString()+","+$AdminsMFAEnabledTotal.ToString()+","+$AdminsMFAEnforcedTotal.ToString()+","+$AdminsMFADisabledTotal.ToString()+","+$DataFileLocation
Office 365 Users With Admins MFA Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users With Admins MFA Test#CredCode#
Office 365 Users With Admins MFA Test#CredCode#$TotMFAAndEnforced = $AdminsMFAEnabledTotal+$AdminsMFAEnforcedTotal
Office 365 Users With Admins MFA Test#CredCode#
Office 365 Users With Admins MFA Test#CredCode#$DataNow | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users With Admins MFA Test#CredCode#
Office 365 Users With Admins MFA Test#CredCode#IF ($AdminsMFADisabledTotal -ne 0)
Office 365 Users With Admins MFA Test#CredCode#{
Office 365 Users With Admins MFA Test#CredCode#    $SumVal = ""
Office 365 Users With Admins MFA Test#CredCode#    $TestStatus="High"
Office 365 Users With Admins MFA Test#CredCode#    $TestText="High ISSUE"        
Office 365 Users With Admins MFA Test#CredCode#}
Office 365 Users With Admins MFA Test#CredCode#else
Office 365 Users With Admins MFA Test#CredCode#{
Office 365 Users With Admins MFA Test#CredCode#    $SumVal = ""
Office 365 Users With Admins MFA Test#CredCode#    $TestStatus="Passed"
Office 365 Users With Admins MFA Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users With Admins MFA Test#CredCode#}
Office 365 Users Deleted and Licensed Test#Headercode#$ThisString="Total Users, Total Users In Recycle Bin, Unlicensed, Licensed, Percentage Users In Recycle Bin, Data File Location"
Office 365 Users Deleted and Licensed Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Users Deleted and Licensed Test#CredCode#
Office 365 Users Deleted and Licensed Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Users Deleted and Licensed Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Users Deleted and Licensed Test#CredCode#
Office 365 Users Deleted and Licensed Test#CredCode#$AllItems = Get-MsolUser -All
Office 365 Users Deleted and Licensed Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Users Deleted and Licensed Test#CredCode#
Office 365 Users Deleted and Licensed Test#CredCode#$TotNot = 0
Office 365 Users Deleted and Licensed Test#CredCode#$TotYes = 0
Office 365 Users Deleted and Licensed Test#CredCode#$TotPercentage = 0
Office 365 Users Deleted and Licensed Test#CredCode#
Office 365 Users Deleted and Licensed Test#CredCode#$TotNotItems = Get-MsolUser -All -ReturnDeletedUsers | Select-Object UserPrincipalName, DisplayName, IsLicensed
Office 365 Users Deleted and Licensed Test#CredCode#$TotNotCount = $TotNotItems.DisplayName.Count
Office 365 Users Deleted and Licensed Test#CredCode#
Office 365 Users Deleted and Licensed Test#CredCode#$TotLicensedNow = 0
Office 365 Users Deleted and Licensed Test#CredCode#ForEach ($Item in $TotNotItems)
Office 365 Users Deleted and Licensed Test#CredCode#{
Office 365 Users Deleted and Licensed Test#CredCode#    IF ($Item.IsLicensed -eq $true)
Office 365 Users Deleted and Licensed Test#CredCode#    {
Office 365 Users Deleted and Licensed Test#CredCode#        $TotLicensedNow++
Office 365 Users Deleted and Licensed Test#CredCode#    }
Office 365 Users Deleted and Licensed Test#CredCode#}
Office 365 Users Deleted and Licensed Test#CredCode#$TotNotLicensedNow = 0
Office 365 Users Deleted and Licensed Test#CredCode#ForEach ($Item in $TotNotItems)
Office 365 Users Deleted and Licensed Test#CredCode#{
Office 365 Users Deleted and Licensed Test#CredCode#    IF ($Item.IsLicensed -eq $false)
Office 365 Users Deleted and Licensed Test#CredCode#    {
Office 365 Users Deleted and Licensed Test#CredCode#        $TotNotLicensedNow++
Office 365 Users Deleted and Licensed Test#CredCode#    }
Office 365 Users Deleted and Licensed Test#CredCode#}
Office 365 Users Deleted and Licensed Test#CredCode#
Office 365 Users Deleted and Licensed Test#CredCode#$TotLicensedNow
Office 365 Users Deleted and Licensed Test#CredCode#$TotNotLicensedNow
Office 365 Users Deleted and Licensed Test#CredCode#
Office 365 Users Deleted and Licensed Test#CredCode# $TotYesItems = Get-MsolUser -All | Where-Object {$_.UsageLocation -ne $null}
Office 365 Users Deleted and Licensed Test#CredCode# $TotYesCount = $TotYesItems.Count
Office 365 Users Deleted and Licensed Test#CredCode#
Office 365 Users Deleted and Licensed Test#CredCode#$TotPercentage=($TotNotCount/$AllItemsCount)*100
Office 365 Users Deleted and Licensed Test#CredCode#$ValSTR = $AllItemsCount.ToString()+","+$TotNotCount.ToString()+","+$TotNotLicensedNow.ToString()+","+$TotLicensedNow.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Users Deleted and Licensed Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Users Deleted and Licensed Test#CredCode#
Office 365 Users Deleted and Licensed Test#CredCode#$TotNotItems | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Users Deleted and Licensed Test#CredCode#
Office 365 Users Deleted and Licensed Test#CredCode#IF ($TotNotCount -ne 0)
Office 365 Users Deleted and Licensed Test#CredCode#{
Office 365 Users Deleted and Licensed Test#CredCode#    IF ($TotPercentage -gt 15)
Office 365 Users Deleted and Licensed Test#CredCode#    {
Office 365 Users Deleted and Licensed Test#CredCode#        $SumVal = ""
Office 365 Users Deleted and Licensed Test#CredCode#        $TestStatus="High"
Office 365 Users Deleted and Licensed Test#CredCode#        $TestText="HIGH ISSUE"
Office 365 Users Deleted and Licensed Test#CredCode#    }
Office 365 Users Deleted and Licensed Test#CredCode#    else
Office 365 Users Deleted and Licensed Test#CredCode#    {
Office 365 Users Deleted and Licensed Test#CredCode#        $SumVal = ""
Office 365 Users Deleted and Licensed Test#CredCode#        $TestStatus="Medium"
Office 365 Users Deleted and Licensed Test#CredCode#        $TestText="MEDIUM ISSUE"    
Office 365 Users Deleted and Licensed Test#CredCode#    }
Office 365 Users Deleted and Licensed Test#CredCode#}
Office 365 Users Deleted and Licensed Test#CredCode#else
Office 365 Users Deleted and Licensed Test#CredCode#{
Office 365 Users Deleted and Licensed Test#CredCode#    $SumVal = ""
Office 365 Users Deleted and Licensed Test#CredCode#    $TestStatus="Passed"
Office 365 Users Deleted and Licensed Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Users Deleted and Licensed Test#CredCode#}
Office 365 License Consumption Test#Headercode#$ThisString="License, Active Licenses, Consumed, Final Status"
Office 365 License Consumption Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 License Consumption Test#CredCode#
Office 365 License Consumption Test#CredCode#$AllItems = Get-MsolAccountSku
Office 365 License Consumption Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 License Consumption Test#CredCode#
Office 365 License Consumption Test#CredCode#$TotNot = 0
Office 365 License Consumption Test#CredCode#$TotYes = 0
Office 365 License Consumption Test#CredCode#$TotPercentage = 0
Office 365 License Consumption Test#CredCode#$AnyGap = "No"
Office 365 License Consumption Test#CredCode#ForEach ($Item in $AllItems)
Office 365 License Consumption Test#CredCode#{
Office 365 License Consumption Test#CredCode#    $ThisLic = $Item.AccountSkuID
Office 365 License Consumption Test#CredCode#    $ThisActive = $Item.ActiveUnits
Office 365 License Consumption Test#CredCode#    $ThisConsumed = $Item.ConsumedUnits
Office 365 License Consumption Test#CredCode#
Office 365 License Consumption Test#CredCode#    $FinalNow = "OK"
Office 365 License Consumption Test#CredCode#
Office 365 License Consumption Test#CredCode#    IF ($ThisConsumed -eq 0)
Office 365 License Consumption Test#CredCode#    {
Office 365 License Consumption Test#CredCode#        $AnyGap = "Yes"
Office 365 License Consumption Test#CredCode#        $FinalNow = "Not Used"    
Office 365 License Consumption Test#CredCode#    }
Office 365 License Consumption Test#CredCode#    $STR = $ThisLic+","+$ThisActive+","+$ThisConsumed+","+$FinalNow
Office 365 License Consumption Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 License Consumption Test#CredCode#
Office 365 License Consumption Test#CredCode#}
Office 365 License Consumption Test#CredCode#
Office 365 License Consumption Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 License Consumption Test#CredCode#{
Office 365 License Consumption Test#CredCode#    $SumVal = ""
Office 365 License Consumption Test#CredCode#    $TestStatus="High"
Office 365 License Consumption Test#CredCode#    $TestText="Some Licensed are not used."        
Office 365 License Consumption Test#CredCode#}
Office 365 License Consumption Test#CredCode#else
Office 365 License Consumption Test#CredCode#{
Office 365 License Consumption Test#CredCode#    $SumVal = ""
Office 365 License Consumption Test#CredCode#    $TestStatus="Passed"
Office 365 License Consumption Test#CredCode#    $TestText = "All Licenses are in use."
Office 365 License Consumption Test#CredCode#}
Office 365 Groups Without Members Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Groups Without Members Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Groups Without Members Test#CredCode#$STR = "Group Name, Group Type, Members"
Office 365 Groups Without Members Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Groups Without Members Test#CredCode#
Office 365 Groups Without Members Test#Headercode#$ThisString="Total Groups, Total Security Groups, Total Distribution Groups, Total Mail Groups, Total Groups Without Members, Percentage, Data File Location"
Office 365 Groups Without Members Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Groups Without Members Test#CredCode#
Office 365 Groups Without Members Test#CredCode#$AllGroups = Get-MsolGroup
Office 365 Groups Without Members Test#CredCode#$AllGroupsCount = $AllGroups.Count
Office 365 Groups Without Members Test#CredCode#
Office 365 Groups Without Members Test#CredCode#$SecGroups = Get-MsolGroup -GroupType Security
Office 365 Groups Without Members Test#CredCode#$GroupsSecCount = $SecGroups.Count
Office 365 Groups Without Members Test#CredCode#
Office 365 Groups Without Members Test#CredCode#$MailGroups = Get-MsolGroup -GroupType MailEnabledSecurity
Office 365 Groups Without Members Test#CredCode#$GroupsMailCount = $MailGroups.Count
Office 365 Groups Without Members Test#CredCode#
Office 365 Groups Without Members Test#CredCode#$DestGroups = Get-MsolGroup -GroupType DistributionList
Office 365 Groups Without Members Test#CredCode#$GroupsDestCount = $DestGroups.Count
Office 365 Groups Without Members Test#CredCode#
Office 365 Groups Without Members Test#CredCode#$AnyGap = "No"
Office 365 Groups Without Members Test#CredCode#$TotDoNotContainMembers = 0
Office 365 Groups Without Members Test#CredCode#
Office 365 Groups Without Members Test#CredCode#ForEach ($Item in $AllGroups)
Office 365 Groups Without Members Test#CredCode#{
Office 365 Groups Without Members Test#CredCode#    $GroupID = $Item.ObjectId
Office 365 Groups Without Members Test#CredCode#    $GroupType = $Item.GroupType
Office 365 Groups Without Members Test#CredCode#    $GroupName = $Item.DisplayName
Office 365 Groups Without Members Test#CredCode#
Office 365 Groups Without Members Test#CredCode#    $AllMemsCount = (Get-MsolGroupMember –GroupObjectID $GroupID).Count    
Office 365 Groups Without Members Test#CredCode#
Office 365 Groups Without Members Test#CredCode#    IF ($AllMemsCount -eq 0)
Office 365 Groups Without Members Test#CredCode#    {
Office 365 Groups Without Members Test#CredCode#        $AnyGap = "Yes"
Office 365 Groups Without Members Test#CredCode#        $TotDoNotContainMembers++
Office 365 Groups Without Members Test#CredCode#        $STR = $GroupName+","+$GroupType+",0"
Office 365 Groups Without Members Test#CredCode#        Add-Content $DataFileLocation $STR
Office 365 Groups Without Members Test#CredCode#    }
Office 365 Groups Without Members Test#CredCode#}
Office 365 Groups Without Members Test#CredCode#
Office 365 Groups Without Members Test#CredCode#$TotPercentage=($TotDoNotContainMembers/$AllGroupsCount)*100
Office 365 Groups Without Members Test#CredCode#$ValSTR = $AllGroupsCount.ToString()+","+$GroupsSecCount.ToString()+","+$GroupsDestCount.ToString()+","+$GroupsMailCount.ToString()+","+$TotDoNotContainMembers.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Groups Without Members Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Groups Without Members Test#CredCode#
Office 365 Groups Without Members Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 Groups Without Members Test#CredCode#{
Office 365 Groups Without Members Test#CredCode#    $SumVal = ""
Office 365 Groups Without Members Test#CredCode#    $TestStatus="Medium"
Office 365 Groups Without Members Test#CredCode#    $TestText="Some Groups do not contain any members"        
Office 365 Groups Without Members Test#CredCode#}
Office 365 Groups Without Members Test#CredCode#else
Office 365 Groups Without Members Test#CredCode#{
Office 365 Groups Without Members Test#CredCode#    $SumVal = ""
Office 365 Groups Without Members Test#CredCode#    $TestStatus="Passed"
Office 365 Groups Without Members Test#CredCode#    $TestText = "All Groups contain members."
Office 365 Groups Without Members Test#CredCode#}
Office 365 Groups Without Members Test#CredCode#
Office 365 Groups Without Members Test#CredCode#
Office 365 Groups Without Members Test#CredCode#
Office 365 Groups Without Description Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Groups Without Description Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Groups Without Description Test#CredCode#$STR = "Group Name, Group Type, Description"
Office 365 Groups Without Description Test#CredCode#Add-Content $DataFileLocation $STR
Office 365 Groups Without Description Test#CredCode#
Office 365 Groups Without Description Test#Headercode#$ThisString="Total Groups, Total Security Groups, Total Distribution Groups, Total Mail Groups, Total Groups Without Description, Percentage, Data File Location"
Office 365 Groups Without Description Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Groups Without Description Test#CredCode#
Office 365 Groups Without Description Test#CredCode#$AllGroups = Get-MsolGroup
Office 365 Groups Without Description Test#CredCode#$AllGroupsCount = $AllGroups.Count
Office 365 Groups Without Description Test#CredCode#
Office 365 Groups Without Description Test#CredCode#$SecGroups = Get-MsolGroup -GroupType Security
Office 365 Groups Without Description Test#CredCode#$GroupsSecCount = $SecGroups.Count
Office 365 Groups Without Description Test#CredCode#
Office 365 Groups Without Description Test#CredCode#$MailGroups = Get-MsolGroup -GroupType MailEnabledSecurity
Office 365 Groups Without Description Test#CredCode#$GroupsMailCount = $MailGroups.Count
Office 365 Groups Without Description Test#CredCode#
Office 365 Groups Without Description Test#CredCode#$DestGroups = Get-MsolGroup -GroupType DistributionList
Office 365 Groups Without Description Test#CredCode#$GroupsDestCount = $DestGroups.Count
Office 365 Groups Without Description Test#CredCode#
Office 365 Groups Without Description Test#CredCode#$AnyGap = "No"
Office 365 Groups Without Description Test#CredCode#$TotDoNotContainMembers = 0
Office 365 Groups Without Description Test#CredCode#
Office 365 Groups Without Description Test#CredCode#ForEach ($Item in $AllGroups)
Office 365 Groups Without Description Test#CredCode#{
Office 365 Groups Without Description Test#CredCode#    $GroupID = $Item.ObjectId
Office 365 Groups Without Description Test#CredCode#    $GroupType = $Item.GroupType
Office 365 Groups Without Description Test#CredCode#    $GroupName = $Item.DisplayName
Office 365 Groups Without Description Test#CredCode#    $GroupDes = $Item.Description
Office 365 Groups Without Description Test#CredCode#    
Office 365 Groups Without Description Test#CredCode#    IF ($GroupDes -eq $null -or $GroupDes -eq "")
Office 365 Groups Without Description Test#CredCode#    {
Office 365 Groups Without Description Test#CredCode#        $AnyGap = "Yes"
Office 365 Groups Without Description Test#CredCode#        $TotDoNotContainMembers++
Office 365 Groups Without Description Test#CredCode#        $STR = $GroupName+","+$GroupType+", "
Office 365 Groups Without Description Test#CredCode#        Add-Content $DataFileLocation $STR
Office 365 Groups Without Description Test#CredCode#    }
Office 365 Groups Without Description Test#CredCode#}
Office 365 Groups Without Description Test#CredCode#
Office 365 Groups Without Description Test#CredCode#$TotPercentage=($TotDoNotContainMembers/$AllGroupsCount)*100
Office 365 Groups Without Description Test#CredCode#$ValSTR = $AllGroupsCount.ToString()+","+$GroupsSecCount.ToString()+","+$GroupsDestCount.ToString()+","+$GroupsMailCount.ToString()+","+$TotDoNotContainMembers.ToString()+","+$TotPercentage.ToString()+","+$DataFileLocation
Office 365 Groups Without Description Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Office 365 Groups Without Description Test#CredCode#
Office 365 Groups Without Description Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 Groups Without Description Test#CredCode#{
Office 365 Groups Without Description Test#CredCode#    $SumVal = ""
Office 365 Groups Without Description Test#CredCode#    $TestStatus="Low"
Office 365 Groups Without Description Test#CredCode#    $TestText="Some Groups do not have Description Set"
Office 365 Groups Without Description Test#CredCode#}
Office 365 Groups Without Description Test#CredCode#else
Office 365 Groups Without Description Test#CredCode#{
Office 365 Groups Without Description Test#CredCode#    $SumVal = ""
Office 365 Groups Without Description Test#CredCode#    $TestStatus="Passed"
Office 365 Groups Without Description Test#CredCode#    $TestText = "All Groups have description set."
Office 365 Groups Without Description Test#CredCode#}
Office 365 Groups Without Description Test#CredCode#
Office 365 Groups Without Description Test#CredCode#
Office 365 Groups Without Description Test#CredCode#
Office 365 Domain Verification Test#Headercode#$ThisString="Domain, Verification Status, Status"
Office 365 Domain Verification Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Domain Verification Test#CredCode#
Office 365 Domain Verification Test#CredCode#$AllItems = Get-MsolDomain | select name,capabilities,status
Office 365 Domain Verification Test#CredCode#
Office 365 Domain Verification Test#CredCode#$AnyGap = "No"
Office 365 Domain Verification Test#CredCode#
Office 365 Domain Verification Test#CredCode#ForEach ($Item in $AllItems)
Office 365 Domain Verification Test#CredCode#{
Office 365 Domain Verification Test#CredCode#    
Office 365 Domain Verification Test#CredCode#    $DomName = $Item.Name
Office 365 Domain Verification Test#CredCode#    $DomStatus = $Item.Status
Office 365 Domain Verification Test#CredCode#
Office 365 Domain Verification Test#CredCode#    IF ($DomStatus -eq "Verified")
Office 365 Domain Verification Test#CredCode#    {
Office 365 Domain Verification Test#CredCode#        $ValSTR = $DomName+","+$DomStatus+",OK"
Office 365 Domain Verification Test#CredCode#        Add-Content "$TestCSVFile" $ValSTR
Office 365 Domain Verification Test#CredCode#    }
Office 365 Domain Verification Test#CredCode#    else
Office 365 Domain Verification Test#CredCode#    {
Office 365 Domain Verification Test#CredCode#        $AnyGap = "Yes"
Office 365 Domain Verification Test#CredCode#        $ValSTR = $DomName+","+$DomStatus+",Not Verified"
Office 365 Domain Verification Test#CredCode#        Add-Content "$TestCSVFile" $ValSTR
Office 365 Domain Verification Test#CredCode#    }
Office 365 Domain Verification Test#CredCode#
Office 365 Domain Verification Test#CredCode#}
Office 365 Domain Verification Test#CredCode#
Office 365 Domain Verification Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 Domain Verification Test#CredCode#{
Office 365 Domain Verification Test#CredCode#    $SumVal = ""
Office 365 Domain Verification Test#CredCode#    $TestStatus="High"
Office 365 Domain Verification Test#CredCode#    $TestText="Domain Not Verified"    
Office 365 Domain Verification Test#CredCode#   
Office 365 Domain Verification Test#CredCode#}
Office 365 Domain Verification Test#CredCode#else
Office 365 Domain Verification Test#CredCode#{
Office 365 Domain Verification Test#CredCode#    $SumVal = ""
Office 365 Domain Verification Test#CredCode#    $TestStatus="Passed"
Office 365 Domain Verification Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Domain Verification Test#CredCode#}
Office 365 Domain Services Test#Headercode#$ThisString="Domain, Services, Status"
Office 365 Domain Services Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Domain Services Test#CredCode#
Office 365 Domain Services Test#CredCode#$AllItems = Get-MsolDomain | select name,capabilities,status
Office 365 Domain Services Test#CredCode#
Office 365 Domain Services Test#CredCode#$AnyGap = "No"
Office 365 Domain Services Test#CredCode#
Office 365 Domain Services Test#CredCode#ForEach ($Item in $AllItems)
Office 365 Domain Services Test#CredCode#{
Office 365 Domain Services Test#CredCode#    
Office 365 Domain Services Test#CredCode#    $DomName = $Item.Name
Office 365 Domain Services Test#CredCode#    $DomServices = $Item.Capabilities
Office 365 Domain Services Test#CredCode#
Office 365 Domain Services Test#CredCode#    IF ($DomServices -eq $Null)
Office 365 Domain Services Test#CredCode#    {
Office 365 Domain Services Test#CredCode#        $AnyGap = "Yes"
Office 365 Domain Services Test#CredCode#        $ValSTR = $DomName+","+'"'+$DomServices+'"'+",No Services Assigned"
Office 365 Domain Services Test#CredCode#        Add-Content "$TestCSVFile" $ValSTR
Office 365 Domain Services Test#CredCode#    }
Office 365 Domain Services Test#CredCode#    else
Office 365 Domain Services Test#CredCode#    {
Office 365 Domain Services Test#CredCode#        $ValSTR = $DomName+","+'"'+$DomServices+'"'+",Ok"
Office 365 Domain Services Test#CredCode#        Add-Content "$TestCSVFile" $ValSTR
Office 365 Domain Services Test#CredCode#    
Office 365 Domain Services Test#CredCode#    }
Office 365 Domain Services Test#CredCode#
Office 365 Domain Services Test#CredCode#}
Office 365 Domain Services Test#CredCode#
Office 365 Domain Services Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 Domain Services Test#CredCode#{
Office 365 Domain Services Test#CredCode#    $SumVal = ""
Office 365 Domain Services Test#CredCode#    $TestStatus="High"
Office 365 Domain Services Test#CredCode#    $TestText="Domains verified but not using any services"    
Office 365 Domain Services Test#CredCode#   
Office 365 Domain Services Test#CredCode#}
Office 365 Domain Services Test#CredCode#else
Office 365 Domain Services Test#CredCode#{
Office 365 Domain Services Test#CredCode#    $SumVal = ""
Office 365 Domain Services Test#CredCode#    $TestStatus="Passed"
Office 365 Domain Services Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Domain Services Test#CredCode#}
Office 365 Subscription Status Test#Headercode#$ThisString="SKU Name, SKU Status, SKU Active Licenses"
Office 365 Subscription Status Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Subscription Status Test#CredCode#
Office 365 Subscription Status Test#CredCode#$AnyGap = "No"
Office 365 Subscription Status Test#CredCode#
Office 365 Subscription Status Test#CredCode#$AllItems = Get-MsolSubscription
Office 365 Subscription Status Test#CredCode#ForEach ($Item in $AllItems)
Office 365 Subscription Status Test#CredCode#{
Office 365 Subscription Status Test#CredCode#    $STR = $Item.SKUPartNumber+","+$Item.Status+","+$Item.TotalLicenses
Office 365 Subscription Status Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Subscription Status Test#CredCode#    
Office 365 Subscription Status Test#CredCode#    IF ($Item.Status -ne "Enabled")
Office 365 Subscription Status Test#CredCode#    {
Office 365 Subscription Status Test#CredCode#        $AnyGap = "Yes"
Office 365 Subscription Status Test#CredCode#    }
Office 365 Subscription Status Test#CredCode#
Office 365 Subscription Status Test#CredCode#}
Office 365 Subscription Status Test#CredCode#
Office 365 Subscription Status Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 Subscription Status Test#CredCode#{
Office 365 Subscription Status Test#CredCode#    $SumVal = ""
Office 365 Subscription Status Test#CredCode#    $TestStatus="Low"
Office 365 Subscription Status Test#CredCode#    $TestText="Please configure."    
Office 365 Subscription Status Test#CredCode#   
Office 365 Subscription Status Test#CredCode#}
Office 365 Subscription Status Test#CredCode#else
Office 365 Subscription Status Test#CredCode#{
Office 365 Subscription Status Test#CredCode#    $SumVal = ""
Office 365 Subscription Status Test#CredCode#    $TestStatus="Passed"
Office 365 Subscription Status Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Subscription Status Test#CredCode#}
Office 365 Self Service Password Reset Test#Headercode#$ThisString="Item, Value"
Office 365 Self Service Password Reset Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Self Service Password Reset Test#CredCode#
Office 365 Self Service Password Reset Test#CredCode#$AllItems = Get-MsolCompanyInformation
Office 365 Self Service Password Reset Test#CredCode#
Office 365 Self Service Password Reset Test#CredCode#IF ($AllItems.SelfServePasswordResetEnabled -eq $false)
Office 365 Self Service Password Reset Test#CredCode#{    
Office 365 Self Service Password Reset Test#CredCode#    $STR = "Self Service Password, NOT Enabled"
Office 365 Self Service Password Reset Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Self Service Password Reset Test#CredCode#    $SumVal = ""
Office 365 Self Service Password Reset Test#CredCode#    $TestStatus="High"
Office 365 Self Service Password Reset Test#CredCode#    $TestText="SSR Not Enabled"    
Office 365 Self Service Password Reset Test#CredCode#
Office 365 Self Service Password Reset Test#CredCode#}
Office 365 Self Service Password Reset Test#CredCode#else
Office 365 Self Service Password Reset Test#CredCode#{
Office 365 Self Service Password Reset Test#CredCode#    $STR = "Self Service Password, Enabled"
Office 365 Self Service Password Reset Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Self Service Password Reset Test#CredCode#    $SumVal = ""
Office 365 Self Service Password Reset Test#CredCode#    $TestStatus="Passed"
Office 365 Self Service Password Reset Test#CredCode#    $TestText="SSR Not Enabled"    
Office 365 Self Service Password Reset Test#CredCode#}
Office 365 Self Service Password Reset Test#CredCode#
Office 365 Notification Emails Test#Headercode#$ThisString="Item, Value"
Office 365 Notification Emails Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Notification Emails Test#CredCode#
Office 365 Notification Emails Test#CredCode#$AllItems = Get-MsolCompanyInformation
Office 365 Notification Emails Test#CredCode#
Office 365 Notification Emails Test#CredCode#$Now = $AllItems.TechnicalNotificationEmails.Count
Office 365 Notification Emails Test#CredCode#
Office 365 Notification Emails Test#CredCode#IF ($Now -eq 0)
Office 365 Notification Emails Test#CredCode#{    
Office 365 Notification Emails Test#CredCode#    $STR = "Technical Notification Emails, Not Configured"
Office 365 Notification Emails Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Notification Emails Test#CredCode#}
Office 365 Notification Emails Test#CredCode#else
Office 365 Notification Emails Test#CredCode#{
Office 365 Notification Emails Test#CredCode#    $STR = "Technical Notification Emails,"+'"'+$AllItems.TechnicalNotificationEmails+'"'
Office 365 Notification Emails Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Notification Emails Test#CredCode#}
Office 365 Notification Emails Test#CredCode#
Office 365 Notification Emails Test#CredCode#IF ($Now -eq 0)
Office 365 Notification Emails Test#CredCode#{
Office 365 Notification Emails Test#CredCode#    $SumVal = ""
Office 365 Notification Emails Test#CredCode#    $TestStatus="Low"
Office 365 Notification Emails Test#CredCode#    $TestText="Please configure."    
Office 365 Notification Emails Test#CredCode#   
Office 365 Notification Emails Test#CredCode#}
Office 365 Notification Emails Test#CredCode#else
Office 365 Notification Emails Test#CredCode#{
Office 365 Notification Emails Test#CredCode#    $SumVal = ""
Office 365 Notification Emails Test#CredCode#    $TestStatus="Passed"
Office 365 Notification Emails Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Notification Emails Test#CredCode#}
Office 365 MFA Test#Headercode#$ThisString="Total MFA Users, Enabled/Disabled"
Office 365 MFA Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 MFA Test#CredCode#
Office 365 MFA Test#CredCode#$users=Get-MsolUser -All
Office 365 MFA Test#CredCode#$MFAUsers = $users | select UserPrincipalName -ExpandProperty StrongAuthenticationRequirements | select UserPrincipalName,State
Office 365 MFA Test#CredCode#$MFAUsersCount=$MFAUsers.Count
Office 365 MFA Test#CredCode#
Office 365 MFA Test#CredCode#IF ($MFAUsersCount -eq 0)
Office 365 MFA Test#CredCode#{
Office 365 MFA Test#CredCode#    $ValSTR = $MFAUsersCount.ToString()+",Disabled"
Office 365 MFA Test#CredCode#    Add-Content "$TestCSVFile" $ValSTR     
Office 365 MFA Test#CredCode#    $SumVal = ""
Office 365 MFA Test#CredCode#    $TestStatus="High"
Office 365 MFA Test#CredCode#    $TestText="MFA Is not enabled"    
Office 365 MFA Test#CredCode#}
Office 365 MFA Test#CredCode#else
Office 365 MFA Test#CredCode#{
Office 365 MFA Test#CredCode#    $ValSTR = $MFAUsersCount.ToString()+",Enabled"
Office 365 MFA Test#CredCode#    Add-Content "$TestCSVFile" $ValSTR
Office 365 MFA Test#CredCode#    $SumVal = ""
Office 365 MFA Test#CredCode#    $TestStatus="Passed"
Office 365 MFA Test#CredCode#    $TestText="MFA Is enabled"         
Office 365 MFA Test#CredCode#}
Office 365 MFA Test#CredCode#
Office 365 Organization Auditing Test#Headercode#$ThisString="Organizationa Name, Auditing Setting, Final Status"
Office 365 Organization Auditing Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Organization Auditing Test#CredCode#
Office 365 Organization Auditing Test#CredCode#$AllItems = Get-OrganizationConfig | Select-Object Name, AuditDisabled
Office 365 Organization Auditing Test#CredCode#$AnyGap = "No"
Office 365 Organization Auditing Test#CredCode#
Office 365 Organization Auditing Test#CredCode#ForEach ($Item in $AllItems)
Office 365 Organization Auditing Test#CredCode#{
Office 365 Organization Auditing Test#CredCode#    
Office 365 Organization Auditing Test#CredCode#    $OrgName = $Item.Name
Office 365 Organization Auditing Test#CredCode#    $AuditingSetting = $Item.AuditDisabled
Office 365 Organization Auditing Test#CredCode#    
Office 365 Organization Auditing Test#CredCode#    IF ($AuditingSetting -eq $false)
Office 365 Organization Auditing Test#CredCode#    {                
Office 365 Organization Auditing Test#CredCode#        $ValSTR = $OrgName+",Enabled,Ok"
Office 365 Organization Auditing Test#CredCode#        Add-Content "$TestCSVFile" $ValSTR     
Office 365 Organization Auditing Test#CredCode#    }
Office 365 Organization Auditing Test#CredCode#    else
Office 365 Organization Auditing Test#CredCode#    {
Office 365 Organization Auditing Test#CredCode#        $ValSTR = $OrgName+",NOT ENABLED,Not Ok"
Office 365 Organization Auditing Test#CredCode#        Add-Content "$TestCSVFile" $ValSTR
Office 365 Organization Auditing Test#CredCode#        $AnyGap = "Yes"
Office 365 Organization Auditing Test#CredCode#    }    
Office 365 Organization Auditing Test#CredCode#}
Office 365 Organization Auditing Test#CredCode#
Office 365 Organization Auditing Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 Organization Auditing Test#CredCode#{
Office 365 Organization Auditing Test#CredCode#    $SumVal = ""
Office 365 Organization Auditing Test#CredCode#    $TestStatus="High"
Office 365 Organization Auditing Test#CredCode#    $TestText="Auditing is not enabled"    
Office 365 Organization Auditing Test#CredCode#   
Office 365 Organization Auditing Test#CredCode#}
Office 365 Organization Auditing Test#CredCode#else
Office 365 Organization Auditing Test#CredCode#{
Office 365 Organization Auditing Test#CredCode#    $SumVal = ""
Office 365 Organization Auditing Test#CredCode#    $TestStatus="Passed"
Office 365 Organization Auditing Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Organization Auditing Test#CredCode#}
Office 365 Dir Config Test#Headercode#$ThisString="Item, Value, Final Status"
Office 365 Dir Config Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Dir Config Test#CredCode#
Office 365 Dir Config Test#CredCode#$AllItems = Get-MsolCompanyInformation
Office 365 Dir Config Test#CredCode#
Office 365 Dir Config Test#CredCode#IF ($AllItems.DirectorySynchronizationEnabled -eq $false)
Office 365 Dir Config Test#CredCode#{    
Office 365 Dir Config Test#CredCode#    $STR = "Dir Sync Configured,"+$AllItems.DirectorySynchronizationEnabled+", NOT Enabled"
Office 365 Dir Config Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Dir Config Test#CredCode#}
Office 365 Dir Config Test#CredCode#else
Office 365 Dir Config Test#CredCode#{
Office 365 Dir Config Test#CredCode#    $STR = "Dir Sync Configured,"+$AllItems.DirectorySynchronizationEnabled+", Enabled"
Office 365 Dir Config Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Dir Config Test#CredCode#}
Office 365 Dir Config Test#CredCode#
Office 365 Dir Config Test#CredCode#IF ($AllItems.DirSyncServiceAccount -eq $null)
Office 365 Dir Config Test#CredCode#{    
Office 365 Dir Config Test#CredCode#    $STR = "Dir Sync Service Account,"+$AllItems.DirSyncServiceAccount+", NOT Configured"
Office 365 Dir Config Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Dir Config Test#CredCode#}
Office 365 Dir Config Test#CredCode#else
Office 365 Dir Config Test#CredCode#{
Office 365 Dir Config Test#CredCode#    $STR = "Dir Sync Service Account,"+$AllItems.DirSyncServiceAccount+", Configured"
Office 365 Dir Config Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Dir Config Test#CredCode#}
Office 365 Dir Config Test#CredCode#
Office 365 Dir Config Test#CredCode#IF ($AllItems.LastDirSyncTime -eq $null)
Office 365 Dir Config Test#CredCode#{    
Office 365 Dir Config Test#CredCode#    $STR = "Last Dir Sync Time for Objects,"+$AllItems.LastDirSyncTime+", Unknown"
Office 365 Dir Config Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Dir Config Test#CredCode#}
Office 365 Dir Config Test#CredCode#else
Office 365 Dir Config Test#CredCode#{
Office 365 Dir Config Test#CredCode#    $STR = "Last Dir Sync Time for Objects,"+$AllItems.LastDirSyncTime+", Fetched"
Office 365 Dir Config Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Dir Config Test#CredCode#}
Office 365 Dir Config Test#CredCode#
Office 365 Dir Config Test#CredCode#IF ($AllItems.LastPasswordSyncTime -eq $null)
Office 365 Dir Config Test#CredCode#{    
Office 365 Dir Config Test#CredCode#    $STR = "Last Dir Sync Time for Passwords,"+$AllItems.LastPasswordSyncTime+", Unknown"
Office 365 Dir Config Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Dir Config Test#CredCode#}
Office 365 Dir Config Test#CredCode#else
Office 365 Dir Config Test#CredCode#{
Office 365 Dir Config Test#CredCode#    $STR = "Last Dir Sync Time for Passwords,"+$AllItems.LastPasswordSyncTime+", Fetched"
Office 365 Dir Config Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Dir Config Test#CredCode#}
Office 365 Dir Config Test#CredCode#
Office 365 Dir Config Test#CredCode#IF ($AllItems.DirectorySynchronizationStatus -eq "Disabled")
Office 365 Dir Config Test#CredCode#{
Office 365 Dir Config Test#CredCode#    $SumVal = ""
Office 365 Dir Config Test#CredCode#    $TestStatus="High"
Office 365 Dir Config Test#CredCode#    $TestText="Directory Synchornization is disabled."    
Office 365 Dir Config Test#CredCode#   
Office 365 Dir Config Test#CredCode#}
Office 365 Dir Config Test#CredCode#else
Office 365 Dir Config Test#CredCode#{
Office 365 Dir Config Test#CredCode#    $SumVal = ""
Office 365 Dir Config Test#CredCode#    $TestStatus="Passed"
Office 365 Dir Config Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Dir Config Test#CredCode#}
Office 365 Dir Sync Features Test#CredCode#$ThisString="DIR Sync Feature, Feature Status"
Office 365 Dir Sync Features Test#CredCode#Add-Content "$TestCSVFile" $ThisString
Office 365 Dir Sync Features Test#CredCode#
Office 365 Dir Sync Features Test#CredCode#$AnyGap = "No"
Office 365 Dir Sync Features Test#CredCode#
Office 365 Dir Sync Features Test#CredCode#$AllItems = Get-MsolDirSyncFeatures
Office 365 Dir Sync Features Test#CredCode#ForEach ($Item in $AllItems)
Office 365 Dir Sync Features Test#CredCode#{
Office 365 Dir Sync Features Test#CredCode#    $STR = $Item.DirSyncFeature+","+$Item.Enabled
Office 365 Dir Sync Features Test#CredCode#    Add-Content $TestCSVFile $STR
Office 365 Dir Sync Features Test#CredCode#    
Office 365 Dir Sync Features Test#CredCode#    IF ($Item.Enabled -eq $false)
Office 365 Dir Sync Features Test#CredCode#    {
Office 365 Dir Sync Features Test#CredCode#        $AnyGap = "Yes"
Office 365 Dir Sync Features Test#CredCode#    }
Office 365 Dir Sync Features Test#CredCode#
Office 365 Dir Sync Features Test#CredCode#}
Office 365 Dir Sync Features Test#CredCode#
Office 365 Dir Sync Features Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 Dir Sync Features Test#CredCode#{
Office 365 Dir Sync Features Test#CredCode#    $SumVal = ""
Office 365 Dir Sync Features Test#CredCode#    $TestStatus="Low"
Office 365 Dir Sync Features Test#CredCode#    $TestText="Please configure."    
Office 365 Dir Sync Features Test#CredCode#   
Office 365 Dir Sync Features Test#CredCode#}
Office 365 Dir Sync Features Test#CredCode#else
Office 365 Dir Sync Features Test#CredCode#{
Office 365 Dir Sync Features Test#CredCode#    $SumVal = ""
Office 365 Dir Sync Features Test#CredCode#    $TestStatus="Passed"
Office 365 Dir Sync Features Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Dir Sync Features Test#CredCode#}
Office 365 Dir Sync Property Conflict Test#Headercode#$ThisString="Total Objects in Property Conflict, Data File Location"
Office 365 Dir Sync Property Conflict Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Dir Sync Property Conflict Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Dir Sync Property Conflict Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Dir Sync Property Conflict Test#CredCode#$AnyGap = "No"
Office 365 Dir Sync Property Conflict Test#CredCode#
Office 365 Dir Sync Property Conflict Test#CredCode#$AllItems = Get-MsolDirSyncProvisioningError -All -ErrorCategory PropertyConflict
Office 365 Dir Sync Property Conflict Test#CredCode#$TotItemsCount = $AllItems.Count
Office 365 Dir Sync Property Conflict Test#CredCode#Get-MsolDirSyncProvisioningError -All -ErrorCategory PropertyConflict | Export-CSV $DataFileLocation -NoType
Office 365 Dir Sync Property Conflict Test#CredCode#$STR = $TotItemsCount.ToString()+","+$DataFileLocation
Office 365 Dir Sync Property Conflict Test#CredCode#Add-Content "$TestCSVFile" $STR
Office 365 Dir Sync Property Conflict Test#CredCode#
Office 365 Dir Sync Property Conflict Test#CredCode#IF ($TotItemsCount -ne 0)
Office 365 Dir Sync Property Conflict Test#CredCode#{
Office 365 Dir Sync Property Conflict Test#CredCode#    $SumVal = ""
Office 365 Dir Sync Property Conflict Test#CredCode#    $TestStatus="Medium"
Office 365 Dir Sync Property Conflict Test#CredCode#    $TestText="Please check."    
Office 365 Dir Sync Property Conflict Test#CredCode#   
Office 365 Dir Sync Property Conflict Test#CredCode#}
Office 365 Dir Sync Property Conflict Test#CredCode#else
Office 365 Dir Sync Property Conflict Test#CredCode#{
Office 365 Dir Sync Property Conflict Test#CredCode#    $SumVal = ""
Office 365 Dir Sync Property Conflict Test#CredCode#    $TestStatus="Passed"
Office 365 Dir Sync Property Conflict Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Dir Sync Property Conflict Test#CredCode#}
Office 365 Dir Sync Property Conflict with User Principal Name Test#Headercode#$ThisString="Total Objects in Property Conflict for UPN, Data File Location"
Office 365 Dir Sync Property Conflict with User Principal Name Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#$AnyGap = "No"
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#$AllItems = Get-MsolDirSyncProvisioningError -All -ErrorCategory PropertyConflict -PropertyName UserPrincipalName
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#$TotItemsCount = $AllItems.Count
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#Get-MsolDirSyncProvisioningError -All -ErrorCategory PropertyConflict -PropertyName UserPrincipalName | Export-CSV $DataFileLocation -NoType
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#$STR = $TotItemsCount.ToString()+","+$DataFileLocation
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#Add-Content $TestCSVFile $STR
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#IF ($TotItemsCount -ne 0)
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#{
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#    $SumVal = ""
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#    $TestStatus="Medium"
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#    $TestText="Please configure."    
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#   
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#}
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#else
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#{
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#    $SumVal = ""
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#    $TestStatus="Passed"
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Dir Sync Property Conflict with User Principal Name Test#CredCode#}
Office 365 Dir Sync Property Conflict with ProxyAddress Test#Headercode#$ThisString="Total Objects in Property Conflict for ProxyAddress, Data File Location"
Office 365 Dir Sync Property Conflict with ProxyAddress Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#$AnyGap = "No"
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#$AllItems = Get-MsolDirSyncProvisioningError -All -ErrorCategory PropertyConflict -PropertyName ProxyAddresses
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#$TotItemsCount = $AllItems.Count
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#Get-MsolDirSyncProvisioningError -All -ErrorCategory PropertyConflict -PropertyName ProxyAddresses | Export-CSV $DataFileLocation -NoType
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#$STR = $TotItemsCount.ToString()+","+$DataFileLocation
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#Add-Content $TestCSVFile $STR
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#IF ($TotItemsCount -ne 0)
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#{
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#    $SumVal = ""
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#    $TestStatus="Medium"
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#    $TestText="Please configure."    
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#   
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#}
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#else
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#{
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#    $SumVal = ""
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#    $TestStatus="Passed"
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Dir Sync Property Conflict with ProxyAddress Test#CredCode#}
Office 365 Mailbox Storage Warning Test#Headercode#$ThisString="Item, Value, Data File Location"
Office 365 Mailbox Storage Warning Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Mailbox Storage Warning Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Mailbox Storage Warning Test#CredCode#$STR = "Display Name, Storage Limit Type"
Office 365 Mailbox Storage Warning Test#CredCode#ADd-Content $DataFileLocation $STR
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#$AllItems = Get-Mailbox -ResultSize Unlimited
Office 365 Mailbox Storage Warning Test#CredCode#$AllItemsCount = $AllItems.Count
Office 365 Mailbox Storage Warning Test#CredCode#$TotNormalCount = 0
Office 365 Mailbox Storage Warning Test#CredCode#$TotInWarningCount = 0
Office 365 Mailbox Storage Warning Test#CredCode#$TotInProhibtSendCount = 0
Office 365 Mailbox Storage Warning Test#CredCode#$TotInBelowLimitCount = 0
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#ForEach ($Item in $AllItems)
Office 365 Mailbox Storage Warning Test#CredCode#{
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#    $ThisItemNow = $Item.distinguishedname
Office 365 Mailbox Storage Warning Test#CredCode#    $RC = Get-MailboxStatistics $ThisItemNow | Select-Object DisplayName,StorageLimitStatus
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#    $DisplayName = $RC.DisplayName
Office 365 Mailbox Storage Warning Test#CredCode#    $StatusNow = $RC.StorageLimitStatus
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#    IF ($StatusNow -eq $null)
Office 365 Mailbox Storage Warning Test#CredCode#    {
Office 365 Mailbox Storage Warning Test#CredCode#        $TotNormalCount++
Office 365 Mailbox Storage Warning Test#CredCode#    }
Office 365 Mailbox Storage Warning Test#CredCode#    IF ($StatusNow -eq "IssueWarning")
Office 365 Mailbox Storage Warning Test#CredCode#    {
Office 365 Mailbox Storage Warning Test#CredCode#        $TotInWarningCount++
Office 365 Mailbox Storage Warning Test#CredCode#        $STR = $DisplayName+", Issue Warning"
Office 365 Mailbox Storage Warning Test#CredCode#        ADd-Content $DataFileLocation $STR
Office 365 Mailbox Storage Warning Test#CredCode#    }
Office 365 Mailbox Storage Warning Test#CredCode#    IF ($StatusNow -eq "ProhibitSend")
Office 365 Mailbox Storage Warning Test#CredCode#    {
Office 365 Mailbox Storage Warning Test#CredCode#        $TotInProhibtSendCount++
Office 365 Mailbox Storage Warning Test#CredCode#        $STR = $DisplayName+", Prohibit Send"
Office 365 Mailbox Storage Warning Test#CredCode#        ADd-Content $DataFileLocation $STR
Office 365 Mailbox Storage Warning Test#CredCode#    }
Office 365 Mailbox Storage Warning Test#CredCode#    IF ($StatusNow -eq "BelowLimit")
Office 365 Mailbox Storage Warning Test#CredCode#    {
Office 365 Mailbox Storage Warning Test#CredCode#        $TotInBelowLimitCount++
Office 365 Mailbox Storage Warning Test#CredCode#        $STR = $DisplayName+", Below Limit"
Office 365 Mailbox Storage Warning Test#CredCode#        ADd-Content $DataFileLocation $STR
Office 365 Mailbox Storage Warning Test#CredCode#    }    
Office 365 Mailbox Storage Warning Test#CredCode#}
Office 365 Mailbox Storage Warning Test#CredCode#IF ($TotInWarningCount -eq 0 -and $TotInProhibtSendCount -eq 0 -and $TotInBelowLimitCount -eq 0)
Office 365 Mailbox Storage Warning Test#CredCode#{
Office 365 Mailbox Storage Warning Test#CredCode#  $TestStatus = "Passed"
Office 365 Mailbox Storage Warning Test#CredCode#}
Office 365 Mailbox Storage Warning Test#CredCode#else
Office 365 Mailbox Storage Warning Test#CredCode#{
Office 365 Mailbox Storage Warning Test#CredCode#  $TestStatus = "High"
Office 365 Mailbox Storage Warning Test#CredCode#}
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#$ThisString="Total Mailbox,"+$AllItemsCount+","
Office 365 Mailbox Storage Warning Test#CredCode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#$ThisString="Total Operating Normally,"+$TotNormalCount.ToString()+","
Office 365 Mailbox Storage Warning Test#CredCode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#$ThisString="Total In Warning,"+$TotInWarningCount.ToString()+","+$DataFileLocation
Office 365 Mailbox Storage Warning Test#CredCode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#$ThisString="Total In Below Limit,"+$TotInBelowLimitCount.ToString()+","+$DataFileLocation
Office 365 Mailbox Storage Warning Test#CredCode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#$ThisString="Total In Prohibit Send,"+$TotInProhibtSendCount.ToString()+","+$DataFileLocation
Office 365 Mailbox Storage Warning Test#CredCode#Add-Content "$TestCSVFile" $ThisString
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#$TotNormalCount
Office 365 Mailbox Storage Warning Test#CredCode#$TotInWarningCount
Office 365 Mailbox Storage Warning Test#CredCode#$TotInProhibtSendCount
Office 365 Mailbox Storage Warning Test#CredCode#$TotInBelowLimitCount
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Mailbox Storage Warning Test#CredCode#
Office 365 Exchange Online Modern Authentication Test#Headercode#$ThisString="Organizationa Name, Modern Authentication, Final Status"
Office 365 Exchange Online Modern Authentication Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Exchange Online Modern Authentication Test#CredCode#
Office 365 Exchange Online Modern Authentication Test#CredCode#$AllItems = Get-OrganizationConfig | Select-Object Name, OAuth*
Office 365 Exchange Online Modern Authentication Test#CredCode#$AnyGap = "No"
Office 365 Exchange Online Modern Authentication Test#CredCode#
Office 365 Exchange Online Modern Authentication Test#CredCode#ForEach ($Item in $AllItems)
Office 365 Exchange Online Modern Authentication Test#CredCode#{
Office 365 Exchange Online Modern Authentication Test#CredCode#    
Office 365 Exchange Online Modern Authentication Test#CredCode#    $OrgName = $Item.Name
Office 365 Exchange Online Modern Authentication Test#CredCode#    $ModernSetting = $Item.OAuth2ClientProfileEnabled
Office 365 Exchange Online Modern Authentication Test#CredCode#    
Office 365 Exchange Online Modern Authentication Test#CredCode#    IF ($ModernSetting -eq $true)
Office 365 Exchange Online Modern Authentication Test#CredCode#    {                
Office 365 Exchange Online Modern Authentication Test#CredCode#        $ValSTR = $OrgName+",Enabled,Ok"
Office 365 Exchange Online Modern Authentication Test#CredCode#        Add-Content "$TestCSVFile" $ValSTR     
Office 365 Exchange Online Modern Authentication Test#CredCode#    }
Office 365 Exchange Online Modern Authentication Test#CredCode#    else
Office 365 Exchange Online Modern Authentication Test#CredCode#    {
Office 365 Exchange Online Modern Authentication Test#CredCode#        $ValSTR = $OrgName+",NOT ENABLED,Not Ok"
Office 365 Exchange Online Modern Authentication Test#CredCode#        Add-Content "$TestCSVFile" $ValSTR
Office 365 Exchange Online Modern Authentication Test#CredCode#        $AnyGap = "Yes"
Office 365 Exchange Online Modern Authentication Test#CredCode#    }    
Office 365 Exchange Online Modern Authentication Test#CredCode#}
Office 365 Exchange Online Modern Authentication Test#CredCode#
Office 365 Exchange Online Modern Authentication Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 Exchange Online Modern Authentication Test#CredCode#{
Office 365 Exchange Online Modern Authentication Test#CredCode#    $SumVal = ""
Office 365 Exchange Online Modern Authentication Test#CredCode#    $TestStatus="High"
Office 365 Exchange Online Modern Authentication Test#CredCode#    $TestText="Modern Authentication is not enabled"    
Office 365 Exchange Online Modern Authentication Test#CredCode#   
Office 365 Exchange Online Modern Authentication Test#CredCode#}
Office 365 Exchange Online Modern Authentication Test#CredCode#else
Office 365 Exchange Online Modern Authentication Test#CredCode#{
Office 365 Exchange Online Modern Authentication Test#CredCode#    $SumVal = ""
Office 365 Exchange Online Modern Authentication Test#CredCode#    $TestStatus="Passed"
Office 365 Exchange Online Modern Authentication Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Exchange Online Modern Authentication Test#CredCode#}
Office 365 Exchange Online Privileged Access Management Test#Headercode#$ThisString="Organizationa Name, Privileged Access Management, Final Status"
Office 365 Exchange Online Privileged Access Management Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Exchange Online Privileged Access Management Test#CredCode#
Office 365 Exchange Online Privileged Access Management Test#CredCode#$AllItems = Get-OrganizationConfig | Select-Object Name, ElevatedAccessControl
Office 365 Exchange Online Privileged Access Management Test#CredCode#$AnyGap = "No"
Office 365 Exchange Online Privileged Access Management Test#CredCode#
Office 365 Exchange Online Privileged Access Management Test#CredCode#ForEach ($Item in $AllItems)
Office 365 Exchange Online Privileged Access Management Test#CredCode#{
Office 365 Exchange Online Privileged Access Management Test#CredCode#    
Office 365 Exchange Online Privileged Access Management Test#CredCode#    $OrgName = $Item.Name
Office 365 Exchange Online Privileged Access Management Test#CredCode#    $ModernSetting = $Item.ElevatedAccessControl
Office 365 Exchange Online Privileged Access Management Test#CredCode#    
Office 365 Exchange Online Privileged Access Management Test#CredCode#    IF ($ModernSetting -eq $Null)
Office 365 Exchange Online Privileged Access Management Test#CredCode#    {                
Office 365 Exchange Online Privileged Access Management Test#CredCode#        $ValSTR = $OrgName+",NOT ENABLED,Not Ok"
Office 365 Exchange Online Privileged Access Management Test#CredCode#        Add-Content "$TestCSVFile" $ValSTR     
Office 365 Exchange Online Privileged Access Management Test#CredCode#        $AnyGap = "Yes"
Office 365 Exchange Online Privileged Access Management Test#CredCode#    }
Office 365 Exchange Online Privileged Access Management Test#CredCode#    else
Office 365 Exchange Online Privileged Access Management Test#CredCode#    {
Office 365 Exchange Online Privileged Access Management Test#CredCode#        $ValSTR = $OrgName+",Enabled,Ok"
Office 365 Exchange Online Privileged Access Management Test#CredCode#        Add-Content "$TestCSVFile" $ValSTR
Office 365 Exchange Online Privileged Access Management Test#CredCode#    }    
Office 365 Exchange Online Privileged Access Management Test#CredCode#}
Office 365 Exchange Online Privileged Access Management Test#CredCode#
Office 365 Exchange Online Privileged Access Management Test#CredCode#IF ($AnyGap -eq "Yes")
Office 365 Exchange Online Privileged Access Management Test#CredCode#{
Office 365 Exchange Online Privileged Access Management Test#CredCode#    $SumVal = ""
Office 365 Exchange Online Privileged Access Management Test#CredCode#    $TestStatus="High"
Office 365 Exchange Online Privileged Access Management Test#CredCode#    $TestText="Privileged Access Management is not enabled"    
Office 365 Exchange Online Privileged Access Management Test#CredCode#   
Office 365 Exchange Online Privileged Access Management Test#CredCode#}
Office 365 Exchange Online Privileged Access Management Test#CredCode#else
Office 365 Exchange Online Privileged Access Management Test#CredCode#{
Office 365 Exchange Online Privileged Access Management Test#CredCode#    $SumVal = ""
Office 365 Exchange Online Privileged Access Management Test#CredCode#    $TestStatus="Passed"
Office 365 Exchange Online Privileged Access Management Test#CredCode#    $TestText = "PASSED ITEMS"
Office 365 Exchange Online Privileged Access Management Test#CredCode#}
Office 365 Exchange Online Admin Auditing Test#Headercode#$ThisString="Item, Value"
Office 365 Exchange Online Admin Auditing Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Exchange Online Admin Auditing Test#CredCode#
Office 365 Exchange Online Admin Auditing Test#CredCode#$AllItems = Get-AdminAuditLogConfig
Office 365 Exchange Online Admin Auditing Test#CredCode#
Office 365 Exchange Online Admin Auditing Test#CredCode#$AdminLogging = $AllItems.AdminAuditLogEnabled
Office 365 Exchange Online Admin Auditing Test#CredCode#$AdminLogingLevel = $AllItems.LogLevel
Office 365 Exchange Online Admin Auditing Test#CredCode#$AdminLogAgeLimit = $AllItems.AdminAuditLogAgeLimit
Office 365 Exchange Online Admin Auditing Test#CredCode#$UnifiedLogStatus = $AllItems.UnifiedAuditLogIngestionEnabled
Office 365 Exchange Online Admin Auditing Test#CredCode#
Office 365 Exchange Online Admin Auditing Test#CredCode#$STR = "Admin Audit Logging Status,"+$AdminLogging
Office 365 Exchange Online Admin Auditing Test#CredCode#Add-Content $TestCSVFile $STR
Office 365 Exchange Online Admin Auditing Test#CredCode#$STR = "Admin Log Level,"+$AdminLogingLevel
Office 365 Exchange Online Admin Auditing Test#CredCode#Add-Content $TestCSVFile $STR
Office 365 Exchange Online Admin Auditing Test#CredCode#$STR = "Admin Audit Log Age Limit,"+$AdminLogAgeLimit
Office 365 Exchange Online Admin Auditing Test#CredCode#Add-Content $TestCSVFile $STR
Office 365 Exchange Online Admin Auditing Test#CredCode#$STR = "Unified Audit Log Status,"+$UnifiedLogStatus
Office 365 Exchange Online Admin Auditing Test#CredCode#Add-Content $TestCSVFile $STR
Office 365 Exchange Online Admin Auditing Test#CredCode#
Office 365 Exchange Online Admin Auditing Test#CredCode#IF ($AdminLogging -eq $false)
Office 365 Exchange Online Admin Auditing Test#CredCode#{
Office 365 Exchange Online Admin Auditing Test#CredCode#    $SumVal = ""
Office 365 Exchange Online Admin Auditing Test#CredCode#    $TestStatus="High"
Office 365 Exchange Online Admin Auditing Test#CredCode#    $TestText="Not Enabled."    
Office 365 Exchange Online Admin Auditing Test#CredCode#   
Office 365 Exchange Online Admin Auditing Test#CredCode#}
Office 365 Exchange Online Admin Auditing Test#CredCode#else
Office 365 Exchange Online Admin Auditing Test#CredCode#{
Office 365 Exchange Online Admin Auditing Test#CredCode#    $SumVal = ""
Office 365 Exchange Online Admin Auditing Test#CredCode#    $TestStatus="Passed"
Office 365 Exchange Online Admin Auditing Test#CredCode#    $TestText = "Enabled"
Office 365 Exchange Online Admin Auditing Test#CredCode#}
Office 365 Exchange Online Admin Success and Failure Attempts#Headercode#$ThisString="Item, Value, Data File Location"
Office 365 Exchange Online Admin Success and Failure Attempts#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#$ExtFailure = Search-AdminAuditLog -ResultSize 250000 | Where-Object ({$_.ExternalAccess -eq $false -and $_.Succeeded -eq $false})
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#$TotExtFailure = $ExtFailure.Error.Count
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#$ExtSuccess = Search-AdminAuditLog -ResultSize 250000 | Where-Object ({$_.ExternalAccess -eq $false -and $_.Succeeded -eq $True})
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#$TotExtSuccess = $ExtSuccess.Error.Count
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#$STR = "Admin Tasks Success Attempts,"+$TotExtSuccess+","+$DataFileLocation
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#Add-Content $TestCSVFile $STR
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#$STR = "Admin Tasks Failure Attempts,"+$TotExtFailure+","+$DataFileLocation
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#Add-Content $TestCSVFile $STR
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#$DataNow = $ExtFailure+$ExtSuccess
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#$DataNow | Export-CSV $DataFileLocation -NoTypeInformation
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#IF ($TotExtFailure -ne 0)
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#{
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#    $SumVal = ""
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#    $TestStatus="High"
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#    $TestText="Not Enabled."    
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#   
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#}
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#else
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#{
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#    $SumVal = ""
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#    $TestStatus="Passed"
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#    $TestText = "Enabled"
Office 365 Exchange Online Admin Success and Failure Attempts#CredCode#}
Office 365 Exchange Online External Access Admin Success and Failure Attempts#Headercode#$ThisString="Item, Value, Data File Location"
Office 365 Exchange Online External Access Admin Success and Failure Attempts#Headercode#Add-Content "$TestCSVFile" $ThisString
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#$ExtFailure = Search-AdminAuditLog -ResultSize 250000 | Where-Object ({$_.ExternalAccess -eq $True -and $_.Succeeded -eq $false})
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#$TotExtFailure = $ExtFailure.Error.Count
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#$ExtSuccess = Search-AdminAuditLog -ResultSize 250000 | Where-Object ({$_.ExternalAccess -eq $True -and $_.Succeeded -eq $True})
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#$TotExtSuccess = $ExtSuccess.Error.Count
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#$STR = "External Admin Tasks Success Attempts,"+$TotExtSuccess+","+$DataFileLocation
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#Add-Content $TestCSVFile $STR
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#$STR = "External Admin Tasks Failure Attempts,"+$TotExtFailure+","+$DataFileLocation
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#Add-Content $TestCSVFile $STR
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#IF ($TotExtFailure -ne 0)
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#{
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#    $SumVal = ""
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#    $TestStatus="High"
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#    $TestText="Not Enabled."    
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#   
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#}
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#else
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#{
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#    $SumVal = ""
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#    $TestStatus="Passed"
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#    $TestText = "Enabled"
Office 365 Exchange Online External Access Admin Success and Failure Attempts#CredCode#}
Exchange Online SPAM Test#Headercode#$ThisString="Item, Value, Data File Location"
Exchange Online SPAM Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Exchange Online SPAM Test#CredCode#
Exchange Online SPAM Test#CredCode#$InDataFileLocation=$CurrentLoc+"\Data\"+$UniqueTest+"_InboundSPAMItems.CSV"
Exchange Online SPAM Test#CredCode#Remove-Item $InDataFileLocation -ErrorAction SilentlyContinue
Exchange Online SPAM Test#CredCode#$OutDataFileLocation=$CurrentLoc+"\Data\"+$UniqueTest+"_OutboundSPAMItems.CSV"
Exchange Online SPAM Test#CredCode#Remove-Item $OutDataFileLocation -ErrorAction SilentlyContinue
Exchange Online SPAM Test#CredCode#
Exchange Online SPAM Test#CredCode#$InboundQuarantine =Get-QuarantineMessage -PageSize 1000 -Direction Inbound  | select Direction,Type,Expires,Identity,MessageID,Organization,PolicyName,PolicyType,QuarantinedUser,QuarantineTypes,ReceivedTime,RecipientAddress,RecipientCount,Released,ReleasedUser,Reported,SenderAddress,Size,Subject,SystemReleased;
Exchange Online SPAM Test#CredCode#$outboundQuarantine=Get-QuarantineMessage -PageSize 1000 -Direction Outbound | select Direction,Type,Expires,Identity,MessageID,Organization,PolicyName,PolicyType,QuarantinedUser,QuarantineTypes,ReceivedTime,RecipientAddress,RecipientCount,Released,ReleasedUser,Reported,SenderAddress,Size,Subject,SystemReleased;
Exchange Online SPAM Test#CredCode#
Exchange Online SPAM Test#CredCode#$TotalInbound=$InboundQuarantine.Direction.Count
Exchange Online SPAM Test#CredCode#$TotalOutbound=$outboundQuarantine.Direction.Count
Exchange Online SPAM Test#CredCode#
Exchange Online SPAM Test#CredCode#$TotalSpams=$TotalInbound+$TotalOutbound
Exchange Online SPAM Test#CredCode#
Exchange Online SPAM Test#CredCode#$ValSTR = "Inbound Spam Items"+","+$TotalInbound.ToString()+","+$InDataFileLocation
Exchange Online SPAM Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Exchange Online SPAM Test#CredCode#$ValSTR = "Outbound Spam Items"+","+$TotalOutbound.ToString()+","+$OutDataFileLocation
Exchange Online SPAM Test#CredCode#Add-Content "$TestCSVFile" $ValSTR
Exchange Online SPAM Test#CredCode#
Exchange Online SPAM Test#CredCode#$InboundQuarantine | Export-Csv -Path $InDataFileLocation -NoTypeInformation
Exchange Online SPAM Test#CredCode#$outboundQuarantine | Export-Csv -Path $OutDataFileLocation -NoTypeInformation
Exchange Online SPAM Test#CredCode#
Exchange Online SPAM Test#CredCode#IF ($TotalSpams -eq 0)
Exchange Online SPAM Test#CredCode#{
Exchange Online SPAM Test#CredCode#    $TestStatus="Passed"
Exchange Online SPAM Test#CredCode#    $TestText = "No Spam emails were found."
Exchange Online SPAM Test#CredCode#    $SumVal = ""
Exchange Online SPAM Test#CredCode#}
Exchange Online SPAM Test#CredCode#else
Exchange Online SPAM Test#CredCode#{
Exchange Online SPAM Test#CredCode#    $TestStatus="High"
Exchange Online SPAM Test#CredCode#    $TestText = "Please check"
Exchange Online SPAM Test#CredCode#    $SumVal = ""
Exchange Online SPAM Test#CredCode#}
Get AD Domain Count#HeaderCode#$ThisString="Domain Name," 
Get AD Domain Count#HeaderCode#Add-Content "$TestCSVFile" $ThisString 
Get AD Domain Count#CredCode#$R=Get-ADForest $CurForestName 
Get AD Domain Count#CredCode#$Items = $R.Domains 
Get AD Domain Count#CredCode#$ItemCount=$R.Domains.Count 
Get AD Domain Count#CredCode#$FinalText = "Domain Counts were retrieved. Please load result to see values."           
Get AD Domain Count#CredCode#IF ($Error.count -eq 0) 
Get AD Domain Count#CredCode#{ 
Get AD Domain Count#CredCode#} 
Get AD Domain Count#CredCode#else 
Get AD Domain Count#CredCode#{ 
Get AD Domain Count#CredCode#$ErrorOrNot="Yes" 
Get AD Domain Count#CredCode#} 
Get AD Domain Count#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Domain Count#CredCode#{ 
Get AD Domain Count#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Domain Count#CredCode#$SumVal = "" 
Get AD Domain Count#CredCode#$TestStatus="Error executing AD Test." 
Get AD Domain Count#CredCode#} 
Get AD Domain Count#CredCode#else 
Get AD Domain Count#CredCode#{  
Get AD Domain Count#CredCode#$TestText = $FinalText 
Get AD Domain Count#CredCode#$SumVal=$ItemCount 
Get AD Domain Count#CredCode#$TestStatus="Completed" 
Get AD Domain Count#CredCode#ForEach ($ThisItem in $Items) 
Get AD Domain Count#CredCode#{ 
Get AD Domain Count#CredCode#$FinalVal='"'+$ThisItem+'"' 
Get AD Domain Count#CredCode#Add-Content "$TestCSVFile" $FinalVal             
Get AD Domain Count#CredCode#} 
Get AD Domain Count#CredCode#} 
Get AD Domain Count#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Domain Count#CredCode#$R=Get-ADForest $CurForestName -Credential $Creds 
Get AD Domain Count#CredCode#$Items = $R.Domains 
Get AD Domain Count#CredCode#$ItemCount=$R.Domains.Count 
Get AD Domain Count#CredCode#$FinalText = "Domain Counts were retrieved. Please load result to see values."           
Get AD Domain Count#CredCode#IF ($Error.count -eq 0) 
Get AD Domain Count#CredCode#{ 
Get AD Domain Count#CredCode#} 
Get AD Domain Count#CredCode#else 
Get AD Domain Count#CredCode#{ 
Get AD Domain Count#CredCode#$ErrorOrNot="Yes" 
Get AD Domain Count#CredCode#} 
Get AD Domain Count#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Domain Count#CredCode#{ 
Get AD Domain Count#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Domain Count#CredCode#$SumVal = "" 
Get AD Domain Count#CredCode#$TestStatus="Error executing AD Test." 
Get AD Domain Count#CredCode#} 
Get AD Domain Count#CredCode#else 
Get AD Domain Count#CredCode#{  
Get AD Domain Count#CredCode#$TestText = $FinalText 
Get AD Domain Count#CredCode#$SumVal=$ItemCount 
Get AD Domain Count#CredCode#$TestStatus="Completed" 
Get AD Domain Count#CredCode#ForEach ($ThisItem in $Items) 
Get AD Domain Count#CredCode#{ 
Get AD Domain Count#CredCode#$FinalVal='"'+$ThisItem+'"' 
Get AD Domain Count#CredCode#Add-Content "$TestCSVFile" $FinalVal             
Get AD Domain Count#CredCode#} 
Get AD Domain Count#CredCode#} 
Get AD Domain Count#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Application Partition Count#HeaderCode#$ThisString="Application Partition," 
Get AD Application Partition Count#HeaderCode#Add-Content "$TestCSVFile" $ThisString 
Get AD Application Partition Count#CredCode#$R=Get-ADForest $CurForestName 
Get AD Application Partition Count#CredCode#$Items = $R.ApplicationPartitions 
Get AD Application Partition Count#CredCode#$ItemCount=$R.ApplicationPartitions.Count 
Get AD Application Partition Count#CredCode#$FinalText = "Application Partitions Count were retrieved. Please load result to see values." 
Get AD Application Partition Count#CredCode#IF ($Error.count -eq 0) 
Get AD Application Partition Count#CredCode#{ 
Get AD Application Partition Count#CredCode#} 
Get AD Application Partition Count#CredCode#else 
Get AD Application Partition Count#CredCode#{ 
Get AD Application Partition Count#CredCode#$ErrorOrNot="Yes" 
Get AD Application Partition Count#CredCode#} 
Get AD Application Partition Count#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Application Partition Count#CredCode#{ 
Get AD Application Partition Count#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Application Partition Count#CredCode#$SumVal = "" 
Get AD Application Partition Count#CredCode#$TestStatus="Error executing AD Test." 
Get AD Application Partition Count#CredCode#} 
Get AD Application Partition Count#CredCode#else 
Get AD Application Partition Count#CredCode#{  
Get AD Application Partition Count#CredCode#$TestText = $FinalText 
Get AD Application Partition Count#CredCode#$SumVal=$ItemCount 
Get AD Application Partition Count#CredCode#$TestStatus="Completed" 
Get AD Application Partition Count#CredCode#ForEach ($ThisItem in $Items) 
Get AD Application Partition Count#CredCode#{ 
Get AD Application Partition Count#CredCode#$FinalVal='"'+$ThisItem+'"' 
Get AD Application Partition Count#CredCode#Add-Content "$TestCSVFile" $FinalVal             
Get AD Application Partition Count#CredCode#} 
Get AD Application Partition Count#CredCode#} 
Get AD Application Partition Count#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Application Partition Count#CredCode#$R=Get-ADForest $CurForestName -Credential $Creds 
Get AD Application Partition Count#CredCode#$Items = $R.ApplicationPartitions 
Get AD Application Partition Count#CredCode#$ItemCount=$R.ApplicationPartitions.Count 
Get AD Application Partition Count#CredCode#$FinalText = "Application Partitions Count were retrieved. Please load result to see values." 
Get AD Application Partition Count#CredCode#IF ($Error.count -eq 0) 
Get AD Application Partition Count#CredCode#{ 
Get AD Application Partition Count#CredCode#} 
Get AD Application Partition Count#CredCode#else 
Get AD Application Partition Count#CredCode#{ 
Get AD Application Partition Count#CredCode#$ErrorOrNot="Yes" 
Get AD Application Partition Count#CredCode#} 
Get AD Application Partition Count#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Application Partition Count#CredCode#{ 
Get AD Application Partition Count#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Application Partition Count#CredCode#$SumVal = "" 
Get AD Application Partition Count#CredCode#$TestStatus="Error executing AD Test." 
Get AD Application Partition Count#CredCode#} 
Get AD Application Partition Count#CredCode#else 
Get AD Application Partition Count#CredCode#{  
Get AD Application Partition Count#CredCode#$TestText = $FinalText 
Get AD Application Partition Count#CredCode#$SumVal=$ItemCount 
Get AD Application Partition Count#CredCode#$TestStatus="Completed" 
Get AD Application Partition Count#CredCode#ForEach ($ThisItem in $Items) 
Get AD Application Partition Count#CredCode#{ 
Get AD Application Partition Count#CredCode#$FinalVal='"'+$ThisItem+'"' 
Get AD Application Partition Count#CredCode#Add-Content "$TestCSVFile" $FinalVal             
Get AD Application Partition Count#CredCode#} 
Get AD Application Partition Count#CredCode#} 
Get AD Application Partition Count#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Site Count#HeaderCode#$ThisString="AD Site Name," 
Get AD Site Count#HeaderCode#Add-Content "$TestCSVFile" $ThisString 
Get AD Site Count#CredCode#$R=Get-ADForest $CurForestName 
Get AD Site Count#CredCode#$Items = $R.sites 
Get AD Site Count#CredCode#$ItemCount=$R.sites.count 
Get AD Site Count#CredCode#$FinalText = "Active Directory Sites Count were retrieved. Please load result to see values." 
Get AD Site Count#CredCode#IF ($Error.count -eq 0) 
Get AD Site Count#CredCode#{ 
Get AD Site Count#CredCode#} 
Get AD Site Count#CredCode#else 
Get AD Site Count#CredCode#{ 
Get AD Site Count#CredCode#$ErrorOrNot="Yes" 
Get AD Site Count#CredCode#} 
Get AD Site Count#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Site Count#CredCode#{ 
Get AD Site Count#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Site Count#CredCode#$SumVal = "" 
Get AD Site Count#CredCode#$TestStatus="Error executing AD Test." 
Get AD Site Count#CredCode#} 
Get AD Site Count#CredCode#else 
Get AD Site Count#CredCode#{  
Get AD Site Count#CredCode#$TestText = $FinalText 
Get AD Site Count#CredCode#$SumVal=$ItemCount 
Get AD Site Count#CredCode#$TestStatus="Completed" 
Get AD Site Count#CredCode#ForEach ($ThisItem in $Items) 
Get AD Site Count#CredCode#{ 
Get AD Site Count#CredCode#$FinalVal='"'+$ThisItem+'"' 
Get AD Site Count#CredCode#Add-Content "$TestCSVFile" $FinalVal             
Get AD Site Count#CredCode#} 
Get AD Site Count#CredCode#} 
Get AD Site Count#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Site Count#CredCode#$R=Get-ADForest $CurForestName -Credential $Creds 
Get AD Site Count#CredCode#$Items = $R.sites 
Get AD Site Count#CredCode#$ItemCount=$R.sites.count 
Get AD Site Count#CredCode#$FinalText = "Active Directory Sites Count were retrieved. Please load result to see values." 
Get AD Site Count#CredCode#IF ($Error.count -eq 0) 
Get AD Site Count#CredCode#{ 
Get AD Site Count#CredCode#} 
Get AD Site Count#CredCode#else 
Get AD Site Count#CredCode#{ 
Get AD Site Count#CredCode#$ErrorOrNot="Yes" 
Get AD Site Count#CredCode#} 
Get AD Site Count#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Site Count#CredCode#{ 
Get AD Site Count#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Site Count#CredCode#$SumVal = "" 
Get AD Site Count#CredCode#$TestStatus="Error executing AD Test." 
Get AD Site Count#CredCode#} 
Get AD Site Count#CredCode#else 
Get AD Site Count#CredCode#{  
Get AD Site Count#CredCode#$TestText = $FinalText 
Get AD Site Count#CredCode#$SumVal=$ItemCount 
Get AD Site Count#CredCode#$TestStatus="Completed" 
Get AD Site Count#CredCode#ForEach ($ThisItem in $Items) 
Get AD Site Count#CredCode#{ 
Get AD Site Count#CredCode#$FinalVal='"'+$ThisItem+'"' 
Get AD Site Count#CredCode#Add-Content "$TestCSVFile" $FinalVal             
Get AD Site Count#CredCode#} 
Get AD Site Count#CredCode#} 
Get AD Site Count#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Subnets Count and List#HeaderCode#$ThisString="AD Subnet, Location, Associated with AD Site" 
Get AD Subnets Count and List#HeaderCode#Add-Content "$TestCSVFile" $ThisString 
Get AD Subnets Count and List#CredCode#$Items=Get-ADReplicationSubnet -filter * 
Get AD Subnets Count and List#CredCode#$ItemCount=0 
Get AD Subnets Count and List#CredCode#ForEach ($all in $Items) 
Get AD Subnets Count and List#CredCode#{ 
Get AD Subnets Count and List#CredCode#$ItemCount++ 
Get AD Subnets Count and List#CredCode#} 
Get AD Subnets Count and List#CredCode#$FinalText = "AD Subnets list was retrieved. Please load result to see values." 
Get AD Subnets Count and List#CredCode#IF ($Error.count -eq 0) 
Get AD Subnets Count and List#CredCode#{ 
Get AD Subnets Count and List#CredCode#} 
Get AD Subnets Count and List#CredCode#else 
Get AD Subnets Count and List#CredCode#{ 
Get AD Subnets Count and List#CredCode#$ErrorOrNot="Yes" 
Get AD Subnets Count and List#CredCode#} 
Get AD Subnets Count and List#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Subnets Count and List#CredCode#{ 
Get AD Subnets Count and List#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Subnets Count and List#CredCode#$SumVal = "" 
Get AD Subnets Count and List#CredCode#$TestStatus="Error executing AD Test." 
Get AD Subnets Count and List#CredCode#} 
Get AD Subnets Count and List#CredCode#else 
Get AD Subnets Count and List#CredCode#{  
Get AD Subnets Count and List#CredCode#$TestText = $FinalText 
Get AD Subnets Count and List#CredCode#$SumVal=$ItemCount 
Get AD Subnets Count and List#CredCode#$TestStatus="Completed" 
Get AD Subnets Count and List#CredCode#ForEach ($ThisItem in $Items) 
Get AD Subnets Count and List#CredCode#{ 
Get AD Subnets Count and List#CredCode#$FinalVal='"'+$ThisItem.Name+'"'+","+'"'+$ThisItem.Location+'"'+","+$ThisItem.Site 
Get AD Subnets Count and List#CredCode#Add-Content "$TestCSVFile" $FinalVal             
Get AD Subnets Count and List#CredCode#} 
Get AD Subnets Count and List#CredCode#} 
Get AD Subnets Count and List#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Subnets Count and List#CredCode#$Items=Get-ADReplicationSubnet -filter * -Credential $Creds 
Get AD Subnets Count and List#CredCode#$ItemCount=0 
Get AD Subnets Count and List#CredCode#ForEach ($all in $Items) 
Get AD Subnets Count and List#CredCode#{ 
Get AD Subnets Count and List#CredCode#$ItemCount++ 
Get AD Subnets Count and List#CredCode#} 
Get AD Subnets Count and List#CredCode#$FinalText = "AD Subnets list was retrieved. Please load result to see values." 
Get AD Subnets Count and List#CredCode#IF ($Error.count -eq 0) 
Get AD Subnets Count and List#CredCode#{ 
Get AD Subnets Count and List#CredCode#} 
Get AD Subnets Count and List#CredCode#else 
Get AD Subnets Count and List#CredCode#{ 
Get AD Subnets Count and List#CredCode#$ErrorOrNot="Yes" 
Get AD Subnets Count and List#CredCode#} 
Get AD Subnets Count and List#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Subnets Count and List#CredCode#{ 
Get AD Subnets Count and List#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Subnets Count and List#CredCode#$SumVal = "" 
Get AD Subnets Count and List#CredCode#$TestStatus="Error executing AD Test." 
Get AD Subnets Count and List#CredCode#} 
Get AD Subnets Count and List#CredCode#else 
Get AD Subnets Count and List#CredCode#{  
Get AD Subnets Count and List#CredCode#$TestText = $FinalText 
Get AD Subnets Count and List#CredCode#$SumVal=$ItemCount 
Get AD Subnets Count and List#CredCode#$TestStatus="Completed" 
Get AD Subnets Count and List#CredCode#ForEach ($ThisItem in $Items) 
Get AD Subnets Count and List#CredCode#{ 
Get AD Subnets Count and List#CredCode#$FinalVal='"'+$ThisItem.Name+'"'+","+'"'+$ThisItem.Location+'"'+","+$ThisItem.Site 
Get AD Subnets Count and List#CredCode#Add-Content "$TestCSVFile" $FinalVal             
Get AD Subnets Count and List#CredCode#} 
Get AD Subnets Count and List#CredCode#} 
Get AD Subnets Count and List#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Subnets Count Per Site#HeaderCode#$ThisString="AD Site, Total Subnets" 
Get AD Subnets Count Per Site#HeaderCode#Add-Content "$TestCSVFile" $ThisString 
Get AD Subnets Count Per Site#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName) 
Get AD Subnets Count Per Site#CredCode#$Items=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites 
Get AD Subnets Count Per Site#CredCode#$ItemCount=0 
Get AD Subnets Count Per Site#CredCode# 
Get AD Subnets Count Per Site#CredCode#ForEach ($all in $Items) 
Get AD Subnets Count Per Site#CredCode#{ 
Get AD Subnets Count Per Site#CredCode#$ItemCount++ 
Get AD Subnets Count Per Site#CredCode#} 
Get AD Subnets Count Per Site#CredCode#$FinalText = "AD Subnets count per Site were retrieved. Please load result to see values." 
Get AD Subnets Count Per Site#CredCode# 
Get AD Subnets Count Per Site#CredCode#IF ($Error.count -eq 0) 
Get AD Subnets Count Per Site#CredCode#{ 
Get AD Subnets Count Per Site#CredCode#} 
Get AD Subnets Count Per Site#CredCode#else 
Get AD Subnets Count Per Site#CredCode#{ 
Get AD Subnets Count Per Site#CredCode#$ErrorOrNot="Yes" 
Get AD Subnets Count Per Site#CredCode#} 
Get AD Subnets Count Per Site#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Subnets Count Per Site#CredCode#{ 
Get AD Subnets Count Per Site#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Subnets Count Per Site#CredCode#$SumVal = "" 
Get AD Subnets Count Per Site#CredCode#$TestStatus="Error executing AD Test." 
Get AD Subnets Count Per Site#CredCode#} 
Get AD Subnets Count Per Site#CredCode#else 
Get AD Subnets Count Per Site#CredCode#{  
Get AD Subnets Count Per Site#CredCode#$TestText = $FinalText 
Get AD Subnets Count Per Site#CredCode#$SumVal=$ItemCount 
Get AD Subnets Count Per Site#CredCode#$TestStatus="Completed" 
Get AD Subnets Count Per Site#CredCode# 
Get AD Subnets Count Per Site#CredCode#ForEach ($AllSites in $Items) 
Get AD Subnets Count Per Site#CredCode#{ 
Get AD Subnets Count Per Site#CredCode#$TotSubCount=$AllSites.Subnets.Count 
Get AD Subnets Count Per Site#CredCode#$ThisStr=$AllSites.Name+","+$TotSubCount     
Get AD Subnets Count Per Site#CredCode#Add-Content "$TestCSVFile" $ThisStr         
Get AD Subnets Count Per Site#CredCode#} 
Get AD Subnets Count Per Site#CredCode#} 
Get AD Subnets Count Per Site#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Subnets Count Per Site#CredCode#$RPass=$Creds.GetNetworkCredential().Password 
Get AD Subnets Count Per Site#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName,$CredUserToUse,$RPass) 
Get AD Subnets Count Per Site#CredCode#[array]$Items=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites 
Get AD Subnets Count Per Site#CredCode#$ItemCount=0 
Get AD Subnets Count Per Site#CredCode# 
Get AD Subnets Count Per Site#CredCode#ForEach ($all in $Items) 
Get AD Subnets Count Per Site#CredCode#{ 
Get AD Subnets Count Per Site#CredCode#$ItemCount++ 
Get AD Subnets Count Per Site#CredCode#} 
Get AD Subnets Count Per Site#CredCode#$FinalText = "AD Subnets count per Site were retrieved. Please load result to see values." 
Get AD Subnets Count Per Site#CredCode# 
Get AD Subnets Count Per Site#CredCode#IF ($Error.count -eq 0) 
Get AD Subnets Count Per Site#CredCode#{ 
Get AD Subnets Count Per Site#CredCode#} 
Get AD Subnets Count Per Site#CredCode#else 
Get AD Subnets Count Per Site#CredCode#{ 
Get AD Subnets Count Per Site#CredCode#$ErrorOrNot="Yes" 
Get AD Subnets Count Per Site#CredCode#} 
Get AD Subnets Count Per Site#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Subnets Count Per Site#CredCode#{ 
Get AD Subnets Count Per Site#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Subnets Count Per Site#CredCode#$SumVal = "" 
Get AD Subnets Count Per Site#CredCode#$TestStatus="Error executing AD Test." 
Get AD Subnets Count Per Site#CredCode#} 
Get AD Subnets Count Per Site#CredCode#else 
Get AD Subnets Count Per Site#CredCode#{  
Get AD Subnets Count Per Site#CredCode#$TestText = $FinalText 
Get AD Subnets Count Per Site#CredCode#$SumVal=$ItemCount 
Get AD Subnets Count Per Site#CredCode#$TestStatus="Completed" 
Get AD Subnets Count Per Site#CredCode# 
Get AD Subnets Count Per Site#CredCode#ForEach ($AllSites in $Items) 
Get AD Subnets Count Per Site#CredCode#{ 
Get AD Subnets Count Per Site#CredCode#$TotSubCount=$AllSites.Subnets.Count 
Get AD Subnets Count Per Site#CredCode#$ThisStr=$AllSites.Name+","+$TotSubCount     
Get AD Subnets Count Per Site#CredCode#Add-Content "$TestCSVFile" $ThisStr         
Get AD Subnets Count Per Site#CredCode#} 
Get AD Subnets Count Per Site#CredCode#} 
Get AD Subnets Count Per Site#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Global Catalog Server Count and List#HeaderCode#$ThisString="Global Catalog Server," 
Get AD Global Catalog Server Count and List#HeaderCode#Add-Content "$TestCSVFile" $ThisString 
Get AD Global Catalog Server Count and List#CredCode#$R=Get-ADForest $CurForestName 
Get AD Global Catalog Server Count and List#CredCode#$Items = $R.GlobalCatalogs 
Get AD Global Catalog Server Count and List#CredCode#$ItemCount=$R.GlobalCatalogs.Count 
Get AD Global Catalog Server Count and List#CredCode#$FinalText = "Global Catalogs Count were retrieved. Please load result to see values." 
Get AD Global Catalog Server Count and List#CredCode#IF ($Error.count -eq 0) 
Get AD Global Catalog Server Count and List#CredCode#{ 
Get AD Global Catalog Server Count and List#CredCode#} 
Get AD Global Catalog Server Count and List#CredCode#else 
Get AD Global Catalog Server Count and List#CredCode#{ 
Get AD Global Catalog Server Count and List#CredCode#$ErrorOrNot="Yes" 
Get AD Global Catalog Server Count and List#CredCode#} 
Get AD Global Catalog Server Count and List#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Global Catalog Server Count and List#CredCode#{ 
Get AD Global Catalog Server Count and List#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Global Catalog Server Count and List#CredCode#$SumVal = "" 
Get AD Global Catalog Server Count and List#CredCode#$TestStatus="Error executing AD Test." 
Get AD Global Catalog Server Count and List#CredCode#} 
Get AD Global Catalog Server Count and List#CredCode#else 
Get AD Global Catalog Server Count and List#CredCode#{  
Get AD Global Catalog Server Count and List#CredCode#$TestText = $FinalText 
Get AD Global Catalog Server Count and List#CredCode#$SumVal=$ItemCount 
Get AD Global Catalog Server Count and List#CredCode#$TestStatus="Completed" 
Get AD Global Catalog Server Count and List#CredCode#ForEach ($ThisItem in $Items) 
Get AD Global Catalog Server Count and List#CredCode#{ 
Get AD Global Catalog Server Count and List#CredCode#$FinalVal='"'+$ThisItem+'"' 
Get AD Global Catalog Server Count and List#CredCode#Add-Content "$TestCSVFile" $FinalVal             
Get AD Global Catalog Server Count and List#CredCode#} 
Get AD Global Catalog Server Count and List#CredCode#} 
Get AD Global Catalog Server Count and List#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Global Catalog Server Count and List#CredCode#$R=Get-ADForest $CurForestName -Credential $Creds 
Get AD Global Catalog Server Count and List#CredCode#$Items = $R.GlobalCatalogs 
Get AD Global Catalog Server Count and List#CredCode#$ItemCount=$R.GlobalCatalogs.Count 
Get AD Global Catalog Server Count and List#CredCode#$FinalText = "Global Catalogs Count were retrieved. Please load result to see values." 
Get AD Global Catalog Server Count and List#CredCode#IF ($Error.count -eq 0) 
Get AD Global Catalog Server Count and List#CredCode#{ 
Get AD Global Catalog Server Count and List#CredCode#} 
Get AD Global Catalog Server Count and List#CredCode#else 
Get AD Global Catalog Server Count and List#CredCode#{ 
Get AD Global Catalog Server Count and List#CredCode#$ErrorOrNot="Yes" 
Get AD Global Catalog Server Count and List#CredCode#} 
Get AD Global Catalog Server Count and List#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Global Catalog Server Count and List#CredCode#{ 
Get AD Global Catalog Server Count and List#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Global Catalog Server Count and List#CredCode#$SumVal = "" 
Get AD Global Catalog Server Count and List#CredCode#$TestStatus="Error executing AD Test." 
Get AD Global Catalog Server Count and List#CredCode#} 
Get AD Global Catalog Server Count and List#CredCode#else 
Get AD Global Catalog Server Count and List#CredCode#{  
Get AD Global Catalog Server Count and List#CredCode#$TestText = $FinalText 
Get AD Global Catalog Server Count and List#CredCode#$SumVal=$ItemCount 
Get AD Global Catalog Server Count and List#CredCode#$TestStatus="Completed" 
Get AD Global Catalog Server Count and List#CredCode#ForEach ($ThisItem in $Items) 
Get AD Global Catalog Server Count and List#CredCode#{ 
Get AD Global Catalog Server Count and List#CredCode#$FinalVal='"'+$ThisItem+'"' 
Get AD Global Catalog Server Count and List#CredCode#Add-Content "$TestCSVFile" $FinalVal             
Get AD Global Catalog Server Count and List#CredCode#} 
Get AD Global Catalog Server Count and List#CredCode#} 
Get AD Global Catalog Server Count and List#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Forest Info and FSMO#HeaderCode#$ThisString="Item, Value" 
Get AD Forest Info and FSMO#HeaderCode#Add-Content "$TestCSVFile" $ThisString 
Get AD Forest Info and FSMO#CredCode#$TotNo=0 
Get AD Forest Info and FSMO#CredCode#$ItemCount=0 
Get AD Forest Info and FSMO#CredCode#$TestText = "Please check result" 
Get AD Forest Info and FSMO#CredCode#$TestStatus="Completed" 
Get AD Forest Info and FSMO#CredCode#$SumVal = "NA" 
Get AD Forest Info and FSMO#CredCode# 
Get AD Forest Info and FSMO#CredCode#$R=Get-ADForest -Identity $CurForestName 
Get AD Forest Info and FSMO#CredCode#IF ($Error.count -eq 0) 
Get AD Forest Info and FSMO#CredCode#{ 
Get AD Forest Info and FSMO#CredCode#} 
Get AD Forest Info and FSMO#CredCode#else 
Get AD Forest Info and FSMO#CredCode#{ 
Get AD Forest Info and FSMO#CredCode#$ErrorOrNot="Yes" 
Get AD Forest Info and FSMO#CredCode#} 
Get AD Forest Info and FSMO#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Forest Info and FSMO#CredCode#{ 
Get AD Forest Info and FSMO#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Forest Info and FSMO#CredCode#$SumVal = "" 
Get AD Forest Info and FSMO#CredCode#$TestStatus="Error executing AD Test" 
Get AD Forest Info and FSMO#CredCode#} 
Get AD Forest Info and FSMO#CredCode#else 
Get AD Forest Info and FSMO#CredCode#{ 
Get AD Forest Info and FSMO#CredCode# 
Get AD Forest Info and FSMO#CredCode#$STR = "AD Forest Name,"+$CurForestName 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Forest Functional Level,"+$R.ForestMode 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Forest Domains, "+'"'+$R.Domains+'"' 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Forest Root Domain,"+$R.RootDomain 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Forest Domain Naming Master,"+$R.DomainNamingMaster 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Forest Schema Master,"+$R.SchemaMaster 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Forest UPN Suffixes,"+'"'+$R.UPNSuffixes+'"' 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Number of Global Catalogs,"+$R.GlobalCatalogs.Count 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Number of Application Partitions,"+$R.ApplicationPartitions.Count 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Number of AD Sites,"+$R.Sites.Count 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#} 
Get AD Forest Info and FSMO#CredCode# 
Get AD Forest Info and FSMO#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Forest Info and FSMO#CredCode#$TotNo=0 
Get AD Forest Info and FSMO#CredCode#$ItemCount=0 
Get AD Forest Info and FSMO#CredCode#$TestText = "Please check result" 
Get AD Forest Info and FSMO#CredCode#$TestStatus="Completed" 
Get AD Forest Info and FSMO#CredCode#$SumVal = "NA" 
Get AD Forest Info and FSMO#CredCode# 
Get AD Forest Info and FSMO#CredCode#$R=Get-ADForest -Identity $CurForestName -Credential $Creds 
Get AD Forest Info and FSMO#CredCode#IF ($Error.count -eq 0) 
Get AD Forest Info and FSMO#CredCode#{ 
Get AD Forest Info and FSMO#CredCode#} 
Get AD Forest Info and FSMO#CredCode#else 
Get AD Forest Info and FSMO#CredCode#{ 
Get AD Forest Info and FSMO#CredCode#$ErrorOrNot="Yes" 
Get AD Forest Info and FSMO#CredCode#} 
Get AD Forest Info and FSMO#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Forest Info and FSMO#CredCode#{ 
Get AD Forest Info and FSMO#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Forest Info and FSMO#CredCode#$SumVal = "" 
Get AD Forest Info and FSMO#CredCode#$TestStatus="Error executing AD Test" 
Get AD Forest Info and FSMO#CredCode#} 
Get AD Forest Info and FSMO#CredCode#else 
Get AD Forest Info and FSMO#CredCode#{ 
Get AD Forest Info and FSMO#CredCode# 
Get AD Forest Info and FSMO#CredCode#$STR = "AD Forest Name,"+$CurForestName 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Forest Functional Level,"+$R.ForestMode 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Forest Domains, "+'"'+$R.Domains+'"' 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Forest Root Domain,"+$R.RootDomain 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Forest Domain Naming Master,"+$R.DomainNamingMaster 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Forest Schema Master,"+$R.SchemaMaster 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Forest UPN Suffixes,"+'"'+$R.UPNSuffixes+'"' 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Number of Global Catalogs,"+$R.GlobalCatalogs.Count 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Number of Application Partitions,"+$R.ApplicationPartitions.Count 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#$STR = "Number of AD Sites,"+$R.Sites.Count 
Get AD Forest Info and FSMO#CredCode#Add-Content "$TestCSVFile" $STR 
Get AD Forest Info and FSMO#CredCode#} 
Get AD Forest Info and FSMO#CredCode# 
Get AD Forest Info and FSMO#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Forest Site Info#HeaderCode#$ThisString="AD Site,Location,Site Option,Current ISTG,Subnets,Servers,In Site Links,Bridgehead Servers" 
Get AD Forest Site Info#HeaderCode#Add-Content "$TestCSVFile" $ThisString 
Get AD Forest Site Info#CredCode#$TotNo=0 
Get AD Forest Site Info#CredCode#$ItemCount=0 
Get AD Forest Site Info#CredCode#$TestText = "Please check result" 
Get AD Forest Site Info#CredCode#$TestStatus="Completed" 
Get AD Forest Site Info#CredCode#$SumVal = "NA" 
Get AD Forest Site Info#CredCode# 
Get AD Forest Site Info#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName) 
Get AD Forest Site Info#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites 
Get AD Forest Site Info#CredCode#$ADSites 
Get AD Forest Site Info#CredCode# 
Get AD Forest Site Info#CredCode#IF ($Error.count -eq 0) 
Get AD Forest Site Info#CredCode#{ 
Get AD Forest Site Info#CredCode#} 
Get AD Forest Site Info#CredCode#else 
Get AD Forest Site Info#CredCode#{ 
Get AD Forest Site Info#CredCode#$ErrorOrNot="Yes" 
Get AD Forest Site Info#CredCode#} 
Get AD Forest Site Info#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Forest Site Info#CredCode#{ 
Get AD Forest Site Info#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Forest Site Info#CredCode#$SumVal = "" 
Get AD Forest Site Info#CredCode#$TestStatus="Error executing AD Test" 
Get AD Forest Site Info#CredCode#} 
Get AD Forest Site Info#CredCode#else 
Get AD Forest Site Info#CredCode#{ 
Get AD Forest Site Info#CredCode# 
Get AD Forest Site Info#CredCode#ForEach ($Site in $ADSites) 
Get AD Forest Site Info#CredCode#{ 
Get AD Forest Site Info#CredCode#$SiteName = $Site.Name 
Get AD Forest Site Info#CredCode#$SiteLocation = $site.Location 
Get AD Forest Site Info#CredCode#$SiteOption = $Site.Options 
Get AD Forest Site Info#CredCode#$SiteISTG = $Site.InterSiteTopologyGenerator 
Get AD Forest Site Info#CredCode# 
Get AD Forest Site Info#CredCode#[array] $SiteServers = $Site.Servers.Count 
Get AD Forest Site Info#CredCode#[array] $SiteSubnets = $Site.Subnets.Count 
Get AD Forest Site Info#CredCode#[array] $SiteLinks = $Site.SiteLinks.Count 
Get AD Forest Site Info#CredCode#[array] $SiteBH = $Site.BridgeheadServers.Count 
Get AD Forest Site Info#CredCode# 
Get AD Forest Site Info#CredCode#$FinalVal=$SiteName+","+'"'+$SiteLocation+'"'+","+'"'+$SiteOptions+'"'+","+$SiteISTG+","+$SiteSubnets+","+$SiteServers+","+$SiteLinks+","+$SiteBH 
Get AD Forest Site Info#CredCode#Add-Content "$TestCSVFile" $FinalVal                
Get AD Forest Site Info#CredCode#} 
Get AD Forest Site Info#CredCode# 
Get AD Forest Site Info#CredCode#} 
Get AD Forest Site Info#CredCode# 
Get AD Forest Site Info#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Forest Site Info#CredCode#$TotNo=0 
Get AD Forest Site Info#CredCode#$ItemCount=0 
Get AD Forest Site Info#CredCode#$TestText = "Please check result" 
Get AD Forest Site Info#CredCode#$TestStatus="Completed" 
Get AD Forest Site Info#CredCode#$SumVal = "NA" 
Get AD Forest Site Info#CredCode# 
Get AD Forest Site Info#CredCode#$RPass=$Creds.GetNetworkCredential().Password 
Get AD Forest Site Info#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName,$CredUserToUse,$RPass) 
Get AD Forest Site Info#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites 
Get AD Forest Site Info#CredCode#IF ($Error.count -eq 0) 
Get AD Forest Site Info#CredCode#{ 
Get AD Forest Site Info#CredCode#} 
Get AD Forest Site Info#CredCode#else 
Get AD Forest Site Info#CredCode#{ 
Get AD Forest Site Info#CredCode#$ErrorOrNot="Yes" 
Get AD Forest Site Info#CredCode#} 
Get AD Forest Site Info#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get AD Forest Site Info#CredCode#{ 
Get AD Forest Site Info#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get AD Forest Site Info#CredCode#$SumVal = "" 
Get AD Forest Site Info#CredCode#$TestStatus="Error executing AD Test" 
Get AD Forest Site Info#CredCode#} 
Get AD Forest Site Info#CredCode#else 
Get AD Forest Site Info#CredCode#{ 
Get AD Forest Site Info#CredCode# 
Get AD Forest Site Info#CredCode#ForEach ($Site in $ADSites) 
Get AD Forest Site Info#CredCode#{ 
Get AD Forest Site Info#CredCode#$SiteName = $Site.Name 
Get AD Forest Site Info#CredCode#$SiteLocation = $site.Location 
Get AD Forest Site Info#CredCode#$SiteOption = $Site.Options 
Get AD Forest Site Info#CredCode#$SiteISTG = $Site.InterSiteTopologyGenerator 
Get AD Forest Site Info#CredCode# 
Get AD Forest Site Info#CredCode#[array] $SiteServers = $Site.Servers.Count 
Get AD Forest Site Info#CredCode#[array] $SiteSubnets = $Site.Subnets.Count 
Get AD Forest Site Info#CredCode#[array] $SiteLinks = $Site.SiteLinks.Count 
Get AD Forest Site Info#CredCode#[array] $SiteBH = $Site.BridgeheadServers.Count 
Get AD Forest Site Info#CredCode# 
Get AD Forest Site Info#CredCode#$FinalVal=$SiteName+","+'"'+$SiteLocation+'"'+","+'"'+$SiteOptions+'"'+","+$SiteISTG+","+$SiteSubnets+","+$SiteServers+","+$SiteLinks+","+$SiteBH 
Get AD Forest Site Info#CredCode#Add-Content "$TestCSVFile" $FinalVal                
Get AD Forest Site Info#CredCode#} 
Get AD Forest Site Info#CredCode# 
Get AD Forest Site Info#CredCode#} 
Get AD Forest Site Info#CredCode# 
Get AD Forest Site Info#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get AD Forest Site Link Info#HeaderCode#$ThisString="AD Site Link,Total AD Sites, AD Sites"
Get AD Forest Site Link Info#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Get AD Forest Site Link Info#HeaderCode#
Get AD Forest Site Link Info#HeaderCode#
Get AD Forest Site Link Info#HeaderCode#
Get AD Forest Site Link Info#HeaderCode#
Get AD Forest Site Link Info#CredCode#$AllSiteLinks=Get-ADReplicationSiteLink -filter * -Credential $Creds -Server $CurForestName
Get AD Forest Site Link Info#CredCode#$TotNo = 0
Get AD Forest Site Link Info#CredCode#IF ($Error.count -eq 0)
Get AD Forest Site Link Info#CredCode#{
Get AD Forest Site Link Info#CredCode#ForEach ($Item in $AllSiteLinks)
Get AD Forest Site Link Info#CredCode#{
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#$SiteLinkName = $Item.Name
Get AD Forest Site Link Info#CredCode#$TotSites = $Item.SitesIncluded.Count
Get AD Forest Site Link Info#CredCode#$SitesInc = $ITem.SitesIncluded
Get AD Forest Site Link Info#CredCode#$TotNo++
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#$ThisSTr = $SiteLinkName+","+$TotSites+","+'"'+$SitesInc+'"'
Get AD Forest Site Link Info#CredCode#Add-Content "$TestCSVFile" $ThisStr
Get AD Forest Site Link Info#CredCode#} 
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#}
Get AD Forest Site Link Info#CredCode#else
Get AD Forest Site Link Info#CredCode#{
Get AD Forest Site Link Info#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
Get AD Forest Site Link Info#CredCode#$SumVal = ""
Get AD Forest Site Link Info#CredCode#$TestStatus="Error executing AD Test."
Get AD Forest Site Link Info#CredCode#}
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#$TestStatus = "Completed"
Get AD Forest Site Link Info#CredCode#$SumVal = $TotNo
Get AD Forest Site Link Info#CredCode#$TestText = "AD Site Link information were retrieved."
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#$AllSiteLinks=Get-ADReplicationSiteLink -filter * -Server $CurForestName
Get AD Forest Site Link Info#CredCode#$TotNo = 0
Get AD Forest Site Link Info#CredCode#IF ($Error.count -eq 0)
Get AD Forest Site Link Info#CredCode#{
Get AD Forest Site Link Info#CredCode#ForEach ($Item in $AllSiteLinks)
Get AD Forest Site Link Info#CredCode#{
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#$SiteLinkName = $Item.Name
Get AD Forest Site Link Info#CredCode#$TotSites = $Item.SitesIncluded.Count
Get AD Forest Site Link Info#CredCode#$SitesInc = $ITem.SitesIncluded
Get AD Forest Site Link Info#CredCode#$TotNo++
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#$ThisSTr = $SiteLinkName+","+$TotSites+","+'"'+$SitesInc+'"'
Get AD Forest Site Link Info#CredCode#Add-Content "$TestCSVFile" $ThisStr
Get AD Forest Site Link Info#CredCode#} 
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#}
Get AD Forest Site Link Info#CredCode#else
Get AD Forest Site Link Info#CredCode#{
Get AD Forest Site Link Info#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
Get AD Forest Site Link Info#CredCode#$SumVal = ""
Get AD Forest Site Link Info#CredCode#$TestStatus="Error executing AD Test."
Get AD Forest Site Link Info#CredCode#}
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#$TestStatus = "Completed"
Get AD Forest Site Link Info#CredCode#$SumVal = $TotNo
Get AD Forest Site Link Info#CredCode#$TestText = "AD Site Link information were retrieved."
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#
Get AD Forest Site Link Info#CredCode#
Get Domain Controller Info#CredCode#$TotNo=0 
Get Domain Controller Info#CredCode#$ItemCount=0 
Get Domain Controller Info#CredCode#$TestText = "Please check result" 
Get Domain Controller Info#CredCode#$TestStatus="Completed" 
Get Domain Controller Info#CredCode#$SumVal = "NA" 
Get Domain Controller Info#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Get Domain Controller Info#CredCode#{ 
Get Domain Controller Info#CredCode#$Error.Clear()
Get Domain Controller Info#CredCode#Get-addomaincontroller -Filter * -Server $ThisDomain | Select-Object HostName, Domain, IPv4Address, IPv6Address,IsGlobalCatalog, IsReadOnly, OperatingSystem, OperatingSystemServicePack,Site,SslPort | Export-CSV "$TestCSVFile" -NoType -Append
Get Domain Controller Info#CredCode# 
Get Domain Controller Info#CredCode#IF ($Error.count -eq 0) 
Get Domain Controller Info#CredCode#{ 
Get Domain Controller Info#CredCode#} 
Get Domain Controller Info#CredCode#else 
Get Domain Controller Info#CredCode#{ 
Get Domain Controller Info#CredCode#$ErrorOrNot="Yes" 
Get Domain Controller Info#CredCode#} 
Get Domain Controller Info#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get Domain Controller Info#CredCode#{ 
Get Domain Controller Info#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get Domain Controller Info#CredCode#$SumVal = "" 
Get Domain Controller Info#CredCode#$TestStatus="Error executing AD Test" 
Get Domain Controller Info#CredCode#}  
Get Domain Controller Info#CredCode#}  
Get Domain Controller Info#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Get Domain Controller Info#CredCode#$TotNo=0 
Get Domain Controller Info#CredCode#$ItemCount=0 
Get Domain Controller Info#CredCode#$TestText = "Please check result" 
Get Domain Controller Info#CredCode#$TestStatus="Completed" 
Get Domain Controller Info#CredCode#$SumVal = "NA" 
Get Domain Controller Info#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Get Domain Controller Info#CredCode#{ 
Get Domain Controller Info#CredCode#$Error.Clear()
Get Domain Controller Info#CredCode#Get-addomaincontroller -Filter * -Server $ThisDomain -Credential $Creds | Select-Object HostName, Domain, IPv4Address, IPv6Address,IsGlobalCatalog, IsReadOnly, OperatingSystem, OperatingSystemServicePack,Site,SslPort | Export-CSV "$TestCSVFile" -NoType -Append
Get Domain Controller Info#CredCode# 
Get Domain Controller Info#CredCode#IF ($Error.count -eq 0) 
Get Domain Controller Info#CredCode#{ 
Get Domain Controller Info#CredCode#} 
Get Domain Controller Info#CredCode#else 
Get Domain Controller Info#CredCode#{ 
Get Domain Controller Info#CredCode#$ErrorOrNot="Yes" 
Get Domain Controller Info#CredCode#} 
Get Domain Controller Info#CredCode#IF ($ErrorOrNot -eq "Yes") 
Get Domain Controller Info#CredCode#{ 
Get Domain Controller Info#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Get Domain Controller Info#CredCode#$SumVal = "" 
Get Domain Controller Info#CredCode#$TestStatus="Error executing AD Test" 
Get Domain Controller Info#CredCode#}  
Get Domain Controller Info#CredCode#}  
Get Domain Controller Info#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Domain Computers Stale Accounts Test#HeaderCode#$ThisString="Computer Name, SamAccountName, DistinguishedName, OperatingSystem, In AD Domain" 
Domain Computers Stale Accounts Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString 
Domain Computers Stale Accounts Test#CredCode#$TotNo=0 
Domain Computers Stale Accounts Test#CredCode#$ItemCount=0 
Domain Computers Stale Accounts Test#CredCode#$TestText = "" 
Domain Computers Stale Accounts Test#CredCode#$TestStatus="" 
Domain Computers Stale Accounts Test#CredCode#$SumVal = "" 
Domain Computers Stale Accounts Test#CredCode#$DaysInactive = 90   
Domain Computers Stale Accounts Test#CredCode#$time = (Get-Date).Adddays(-($DaysInactive)) 
Domain Computers Stale Accounts Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$CompsInactiveCount=Get-ADComputer -Filter {LastLogonTimeStamp -lt $time} -ResultPageSize 2000 -resultSetSize $null -Server $ThisDomain -Credential $Creds -Properties Name,OperatingSystem,SamAccountName,DistinguishedName 
Domain Computers Stale Accounts Test#CredCode#IF ($Error.count -eq 0) 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#else 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$ErrorOrNot="Yes" 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#IF ($ErrorOrNot -eq "Yes") 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Domain Computers Stale Accounts Test#CredCode#$SumVal = "" 
Domain Computers Stale Accounts Test#CredCode#$TestStatus="Error executing AD Test." 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#else 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$Items = $CompsInactiveCount 
Domain Computers Stale Accounts Test#CredCode#$ItemCount=$CompsInactiveCount.Count 
Domain Computers Stale Accounts Test#CredCode#$FinalText = "" 
Domain Computers Stale Accounts Test#CredCode#$SumVal=$ItemCount 
Domain Computers Stale Accounts Test#CredCode# 
Domain Computers Stale Accounts Test#CredCode#ForEach ($ThisItem in $Items) 
Domain Computers Stale Accounts Test#CredCode#{  
Domain Computers Stale Accounts Test#CredCode#$TotNo++ 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#$FinalVal="Total Stale Computers: ["+$TotNo+"]"+",,,,"+$ThisDomain 
Domain Computers Stale Accounts Test#CredCode#Add-Content "$TestCSVFile" $FinalVal                     
Domain Computers Stale Accounts Test#CredCode#$TotSrv=0	 
Domain Computers Stale Accounts Test#CredCode#ForEach ($ThisItem in $Items) 
Domain Computers Stale Accounts Test#CredCode#{  
Domain Computers Stale Accounts Test#CredCode#IF ($ThisItem.OperatingSystem -like "*Server*") 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$TotSrv++ 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#$FinalVal="Total Stale Servers: ["+$TotSrv+"]"+",,,,"+$ThisDomain 
Domain Computers Stale Accounts Test#CredCode#Add-Content "$TestCSVFile" $FinalVal 
Domain Computers Stale Accounts Test#CredCode#ForEach ($ThisItem in $Items) 
Domain Computers Stale Accounts Test#CredCode#{  
Domain Computers Stale Accounts Test#CredCode#$FinalVal=$ThisItem.Name+","+$ThisItem.SamAccountName+","+'"'+$ThisItem.DistinguishedName+'"'+","+$ThisItem.OperatingSystem+","+$ThisDomain 
Domain Computers Stale Accounts Test#CredCode#Add-Content "$TestCSVFile" $FinalVal             
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode# 
Domain Computers Stale Accounts Test#CredCode#IF ($TotNo -ge 500) 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$TestText = "More than 500 Stale computer accounts were found in AD Domains. Please load and check result." 
Domain Computers Stale Accounts Test#CredCode#$TestStatus="High" 
Domain Computers Stale Accounts Test#CredCode#$SumVal = $TotNo 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#else 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$TestText = "Less than 500 Stale computer accounts were found in AD Domains. Please load and check result." 
Domain Computers Stale Accounts Test#CredCode#$TestStatus="Low" 
Domain Computers Stale Accounts Test#CredCode#$SumVal = $TotNo           
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#IF ($TotNo -eq 0) 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$TestText = "No Stale computers were found in AD Domains." 
Domain Computers Stale Accounts Test#CredCode#$TestStatus="Passed" 
Domain Computers Stale Accounts Test#CredCode#$SumVal = $TotNo 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode# 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Domain Computers Stale Accounts Test#CredCode#$TotNo=0 
Domain Computers Stale Accounts Test#CredCode#$ItemCount=0 
Domain Computers Stale Accounts Test#CredCode#$TestText = "" 
Domain Computers Stale Accounts Test#CredCode#$TestStatus="" 
Domain Computers Stale Accounts Test#CredCode#$SumVal = "" 
Domain Computers Stale Accounts Test#CredCode#$DaysInactive = 90   
Domain Computers Stale Accounts Test#CredCode#$time = (Get-Date).Adddays(-($DaysInactive)) 
Domain Computers Stale Accounts Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$CompsInactiveCount=Get-ADComputer -Filter {LastLogonTimeStamp -lt $time} -ResultPageSize 2000 -resultSetSize $null -Server $ThisDomain -Properties Name,OperatingSystem,SamAccountName,DistinguishedName 
Domain Computers Stale Accounts Test#CredCode#IF ($Error.count -eq 0) 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#else 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$ErrorOrNot="Yes" 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#IF ($ErrorOrNot -eq "Yes") 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
Domain Computers Stale Accounts Test#CredCode#$SumVal = "" 
Domain Computers Stale Accounts Test#CredCode#$TestStatus="Error executing AD Test." 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#else 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$Items = $CompsInactiveCount 
Domain Computers Stale Accounts Test#CredCode#$ItemCount=$CompsInactiveCount.Count 
Domain Computers Stale Accounts Test#CredCode#$FinalText = "" 
Domain Computers Stale Accounts Test#CredCode#$SumVal=$ItemCount 
Domain Computers Stale Accounts Test#CredCode# 
Domain Computers Stale Accounts Test#CredCode#ForEach ($ThisItem in $Items) 
Domain Computers Stale Accounts Test#CredCode#{  
Domain Computers Stale Accounts Test#CredCode#$TotNo++ 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#$FinalVal="Total Stale Computers: ["+$TotNo+"]"+",,,,"+$ThisDomain 
Domain Computers Stale Accounts Test#CredCode#Add-Content "$TestCSVFile" $FinalVal                     
Domain Computers Stale Accounts Test#CredCode#$TotSrv=0	 
Domain Computers Stale Accounts Test#CredCode#ForEach ($ThisItem in $Items) 
Domain Computers Stale Accounts Test#CredCode#{  
Domain Computers Stale Accounts Test#CredCode#IF ($ThisItem.OperatingSystem -like "*Server*") 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$TotSrv++ 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#$FinalVal="Total Stale Servers: ["+$TotSrv+"]"+",,,,"+$ThisDomain 
Domain Computers Stale Accounts Test#CredCode#Add-Content "$TestCSVFile" $FinalVal 
Domain Computers Stale Accounts Test#CredCode#ForEach ($ThisItem in $Items) 
Domain Computers Stale Accounts Test#CredCode#{  
Domain Computers Stale Accounts Test#CredCode#$FinalVal=$ThisItem.Name+","+$ThisItem.SamAccountName+","+'"'+$ThisItem.DistinguishedName+'"'+","+$ThisItem.OperatingSystem+","+$ThisDomain 
Domain Computers Stale Accounts Test#CredCode#Add-Content "$TestCSVFile" $FinalVal             
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode# 
Domain Computers Stale Accounts Test#CredCode#IF ($TotNo -ge 500) 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$TestText = "More than 500 Stale computer accounts were found in AD Domains. Please load and check result." 
Domain Computers Stale Accounts Test#CredCode#$TestStatus="High" 
Domain Computers Stale Accounts Test#CredCode#$SumVal = $TotNo 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#else 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$TestText = "Less than 500 Stale computer accounts were found in AD Domains. Please load and check result." 
Domain Computers Stale Accounts Test#CredCode#$TestStatus="Low" 
Domain Computers Stale Accounts Test#CredCode#$SumVal = $TotNo           
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#IF ($TotNo -eq 0) 
Domain Computers Stale Accounts Test#CredCode#{ 
Domain Computers Stale Accounts Test#CredCode#$TestText = "No Stale computers were found in AD Domains." 
Domain Computers Stale Accounts Test#CredCode#$TestStatus="Passed" 
Domain Computers Stale Accounts Test#CredCode#$SumVal = $TotNo 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode# 
Domain Computers Stale Accounts Test#CredCode#} 
Domain Computers Stale Accounts Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
AD Adjacent Site Test#HeaderCode#$ThisString="AD Site, Total Adjacent Sites, Adjacent Sites, Final Status" 
AD Adjacent Site Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString 
AD Adjacent Site Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName) 
AD Adjacent Site Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites 
AD Adjacent Site Test#CredCode#IF ($Error.count -eq 0) 
AD Adjacent Site Test#CredCode#{ 
AD Adjacent Site Test#CredCode#} 
AD Adjacent Site Test#CredCode#else 
AD Adjacent Site Test#CredCode#{ 
AD Adjacent Site Test#CredCode#$ErrorOrNot="Yes" 
AD Adjacent Site Test#CredCode#} 
AD Adjacent Site Test#CredCode#$TestStatus="Passed" 
AD Adjacent Site Test#CredCode#$SumVal = "" 
AD Adjacent Site Test#CredCode#$TestText = "Adjacent Sites were retrieved. " 
AD Adjacent Site Test#CredCode#ForEach ($Site in $ADSites) 
AD Adjacent Site Test#CredCode#{  
AD Adjacent Site Test#CredCode#$FinStatus = "Ok"
AD Adjacent Site Test#CredCode#IF ($Site.AdjacentSites.count -eq 0)
AD Adjacent Site Test#CredCode#{
AD Adjacent Site Test#CredCode#$FinStatus = "Not Ok - This AD Site is not covered."
AD Adjacent Site Test#CredCode#$AnyGap = "Yes"
AD Adjacent Site Test#CredCode#}
AD Adjacent Site Test#CredCode#
AD Adjacent Site Test#CredCode#$Thisstr=$Site.Name+","+$Site.AdjacentSites.count+","+'"'+$Site.AdjacentSites.Name+'"'+","+$FinStatus
AD Adjacent Site Test#CredCode#Add-Content "$TestCSVFile" $ThisStr    
AD Adjacent Site Test#CredCode#} 
AD Adjacent Site Test#CredCode#IF ($ErrorOrNot -eq "Yes") 
AD Adjacent Site Test#CredCode#{ 
AD Adjacent Site Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
AD Adjacent Site Test#CredCode#$SumVal = "" 
AD Adjacent Site Test#CredCode#$TestStatus="Error executing AD Test." 
AD Adjacent Site Test#CredCode#} 
AD Adjacent Site Test#CredCode#IF ($AnyGap -eq "Yes") 
AD Adjacent Site Test#CredCode#{ 
AD Adjacent Site Test#CredCode#$TestText = "" 
AD Adjacent Site Test#CredCode#$SumVal = "" 
AD Adjacent Site Test#CredCode#$TestStatus="High" 
AD Adjacent Site Test#CredCode#} 
AD Adjacent Site Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
AD Adjacent Site Test#CredCode#$RPass=$Creds.GetNetworkCredential().Password 
AD Adjacent Site Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName,$CredUserToUse,$RPass) 
AD Adjacent Site Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites 
AD Adjacent Site Test#CredCode#IF ($Error.count -eq 0) 
AD Adjacent Site Test#CredCode#{ 
AD Adjacent Site Test#CredCode#} 
AD Adjacent Site Test#CredCode#else 
AD Adjacent Site Test#CredCode#{ 
AD Adjacent Site Test#CredCode#$ErrorOrNot="Yes" 
AD Adjacent Site Test#CredCode#} 
AD Adjacent Site Test#CredCode#$TestStatus="Passed" 
AD Adjacent Site Test#CredCode#$SumVal = "" 
AD Adjacent Site Test#CredCode#$TestText = "Adjacent Sites were retrieved. " 
AD Adjacent Site Test#CredCode#ForEach ($Site in $ADSites) 
AD Adjacent Site Test#CredCode#{  
AD Adjacent Site Test#CredCode#$FinStatus = "Ok"
AD Adjacent Site Test#CredCode#IF ($Site.AdjacentSites.count -eq 0)
AD Adjacent Site Test#CredCode#{
AD Adjacent Site Test#CredCode#$FinStatus = "Not Ok - This AD Site is not covered."
AD Adjacent Site Test#CredCode#$AnyGap = "Yes"
AD Adjacent Site Test#CredCode#}
AD Adjacent Site Test#CredCode#
AD Adjacent Site Test#CredCode#$Thisstr=$Site.Name+","+$Site.AdjacentSites.count+","+'"'+$Site.AdjacentSites.Name+'"'+","+$FinStatus
AD Adjacent Site Test#CredCode#Add-Content "$TestCSVFile" $ThisStr    
AD Adjacent Site Test#CredCode#} 
AD Adjacent Site Test#CredCode#IF ($ErrorOrNot -eq "Yes") 
AD Adjacent Site Test#CredCode#{ 
AD Adjacent Site Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
AD Adjacent Site Test#CredCode#$SumVal = "" 
AD Adjacent Site Test#CredCode#$TestStatus="Error executing AD Test." 
AD Adjacent Site Test#CredCode#} 
AD Adjacent Site Test#CredCode#IF ($AnyGap -eq "Yes") 
AD Adjacent Site Test#CredCode#{ 
AD Adjacent Site Test#CredCode#$TestText = "" 
AD Adjacent Site Test#CredCode#$SumVal = "" 
AD Adjacent Site Test#CredCode#$TestStatus="High" 
AD Adjacent Site Test#CredCode#} 
AD Adjacent Site Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
AD Forest Orphaned Domain Controllers#HeaderCode#$ThisString="NTDS Object for Domain Controller, Active Directory Forest, Final Status" 
AD Forest Orphaned Domain Controllers#HeaderCode#Add-Content "$TestCSVFile" $ThisString 
AD Forest Orphaned Domain Controllers#CredCode#$TotNo=0 
AD Forest Orphaned Domain Controllers#CredCode#$TestStatus="" 
AD Forest Orphaned Domain Controllers#CredCode#$TestText="" 
AD Forest Orphaned Domain Controllers#CredCode#$SumVal="" 
AD Forest Orphaned Domain Controllers#CredCode#$Config = (Get-ADRootDSE).configurationNamingContext 
AD Forest Orphaned Domain Controllers#CredCode#$Servers = Get-ADObject -Filter {ObjectClass -eq "Server"} -SearchBase "CN=Sites,$Config" -SearchScope Subtree 
AD Forest Orphaned Domain Controllers#CredCode#foreach ($Server in $Servers)  
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#$Ntdsa = Get-ADObject -Filter {ObjectClass -eq "nTDSDSA"} -SearchBase "$(($Server).DistinguishedName)" -SearchScope Subtree 
AD Forest Orphaned Domain Controllers#CredCode#if ($Ntdsa) 
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#$ThisServer=$Server.DistinguishedName 
AD Forest Orphaned Domain Controllers#CredCode#$RemovedComma = $ThisServer.replace(",", " ")
AD Forest Orphaned Domain Controllers#CredCode#$Thisstr='"'+$RemovedComma+'"'+","+$CurForestName+",OK" 
AD Forest Orphaned Domain Controllers#CredCode#Add-Content "$TestCSVFile" $ThisStr 
AD Forest Orphaned Domain Controllers#CredCode#}  
AD Forest Orphaned Domain Controllers#CredCode#else  
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#$ThisServer=$Server.DistinguishedName 
AD Forest Orphaned Domain Controllers#CredCode#$TotNo++ 
AD Forest Orphaned Domain Controllers#CredCode#$RemovedComma = $ThisServer.replace(",", " ")
AD Forest Orphaned Domain Controllers#CredCode#$Thisstr='"'+$RemovedComma+'"'+","+$CurForestName+",Not Ok - This Server does not have NTDS Object" 
AD Forest Orphaned Domain Controllers#CredCode#Add-Content "$TestCSVFile" $ThisStr 
AD Forest Orphaned Domain Controllers#CredCode#}  
AD Forest Orphaned Domain Controllers#CredCode#} 
AD Forest Orphaned Domain Controllers#CredCode#IF ($Error.count -eq 0) 
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#} 
AD Forest Orphaned Domain Controllers#CredCode#else 
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#$ErrorOrNot="Yes" 
AD Forest Orphaned Domain Controllers#CredCode#} 
AD Forest Orphaned Domain Controllers#CredCode#IF ($ErrorOrNot -eq "Yes") 
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
AD Forest Orphaned Domain Controllers#CredCode#$SumVal = "" 
AD Forest Orphaned Domain Controllers#CredCode#$TestStatus="Error executing AD Test." 
AD Forest Orphaned Domain Controllers#CredCode#} 
AD Forest Orphaned Domain Controllers#CredCode#else 
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#IF ($TotNo -eq 0) 
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#$TestText = "All Domain Controllers have NTDS Objects."     
AD Forest Orphaned Domain Controllers#CredCode#$TestStatus="Passed" 
AD Forest Orphaned Domain Controllers#CredCode#$SumVal="" 
AD Forest Orphaned Domain Controllers#CredCode#} 
AD Forest Orphaned Domain Controllers#CredCode#else 
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#$SumVal = $TotNo 
AD Forest Orphaned Domain Controllers#CredCode#$TestStatus="High" 
AD Forest Orphaned Domain Controllers#CredCode#$TestText = "Some Domain Controllers are missing NTDS Object. These Domain Controllers are considered Orphaned and have no role in Active Directory. " 
AD Forest Orphaned Domain Controllers#CredCode#} 
AD Forest Orphaned Domain Controllers#CredCode#} 
AD Forest Orphaned Domain Controllers#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
AD Forest Orphaned Domain Controllers#CredCode#$TotNo=0 
AD Forest Orphaned Domain Controllers#CredCode#$TestStatus="" 
AD Forest Orphaned Domain Controllers#CredCode#$TestText="" 
AD Forest Orphaned Domain Controllers#CredCode#$SumVal="" 
AD Forest Orphaned Domain Controllers#CredCode#$Config = (Get-ADRootDSE -Credential $Creds).configurationNamingContext 
AD Forest Orphaned Domain Controllers#CredCode#$Servers = Get-ADObject -Credential $Creds -Filter {ObjectClass -eq "Server"} -SearchBase "CN=Sites,$Config" -SearchScope Subtree 
AD Forest Orphaned Domain Controllers#CredCode#foreach ($Server in $Servers)  
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#$Ntdsa = Get-ADObject -Credential $Creds -Filter {ObjectClass -eq "nTDSDSA"} -SearchBase "$(($Server).DistinguishedName)" -SearchScope Subtree 
AD Forest Orphaned Domain Controllers#CredCode#if ($Ntdsa)  
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#$RemovedComma = $Server.DistinguishedName.replace(",", " ")
AD Forest Orphaned Domain Controllers#CredCode#$Thisstr='"'+$RemovedComma+'"'+","+$CurForestName+",OK" 
AD Forest Orphaned Domain Controllers#CredCode#Add-Content "$TestCSVFile" $ThisStr 
AD Forest Orphaned Domain Controllers#CredCode#}  
AD Forest Orphaned Domain Controllers#CredCode#else  
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#$ThisServer=$Server.DistinguishedName 
AD Forest Orphaned Domain Controllers#CredCode#$TotNo++ 
AD Forest Orphaned Domain Controllers#CredCode#$RemovedComma = $ThisServer.replace(",", " ")
AD Forest Orphaned Domain Controllers#CredCode#$Thisstr='"'+$RemovedComma+'"'+","+$CurForestName+",Not Ok - This Server does not have NTDS Object" 
AD Forest Orphaned Domain Controllers#CredCode#Add-Content "$TestCSVFile" $ThisStr 
AD Forest Orphaned Domain Controllers#CredCode#}  
AD Forest Orphaned Domain Controllers#CredCode#} 
AD Forest Orphaned Domain Controllers#CredCode#IF ($Error.count -eq 0) 
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#} 
AD Forest Orphaned Domain Controllers#CredCode#else 
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#$ErrorOrNot="Yes" 
AD Forest Orphaned Domain Controllers#CredCode#} 
AD Forest Orphaned Domain Controllers#CredCode#IF ($ErrorOrNot -eq "Yes") 
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test." 
AD Forest Orphaned Domain Controllers#CredCode#$SumVal = "" 
AD Forest Orphaned Domain Controllers#CredCode#$TestStatus="Error executing AD Test." 
AD Forest Orphaned Domain Controllers#CredCode#} 
AD Forest Orphaned Domain Controllers#CredCode#else 
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#IF ($TotNo -eq 0) 
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#$TestText = "All Domain Controllers have NTDS Objects."     
AD Forest Orphaned Domain Controllers#CredCode#$TestStatus="Passed" 
AD Forest Orphaned Domain Controllers#CredCode#$SumVal="" 
AD Forest Orphaned Domain Controllers#CredCode#} 
AD Forest Orphaned Domain Controllers#CredCode#else 
AD Forest Orphaned Domain Controllers#CredCode#{ 
AD Forest Orphaned Domain Controllers#CredCode#$SumVal = $TotNo 
AD Forest Orphaned Domain Controllers#CredCode#$TestStatus="High" 
AD Forest Orphaned Domain Controllers#CredCode#$TestText = "Some Domain Controllers are missing NTDS Object. These Domain Controllers are considered Orphaned and have no role in Active Directory. " 
AD Forest Orphaned Domain Controllers#CredCode#} 
AD Forest Orphaned Domain Controllers#CredCode#} 
AD Forest Orphaned Domain Controllers#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText 
Domain Users Account Expired Test#HeaderCode#$ThisString="User Name, SamAccountName, DistinguishedName, In AD Domain"
Domain Users Account Expired Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain Users Account Expired Test#HeaderCode#
Domain Users Account Expired Test#HeaderCode#
Domain Users Account Expired Test#CredCode#$TotNo=0
Domain Users Account Expired Test#CredCode#$ItemCount=0
Domain Users Account Expired Test#CredCode#$TestText = ""
Domain Users Account Expired Test#CredCode#$TestStatus=""
Domain Users Account Expired Test#CredCode#$SumVal = ""
Domain Users Account Expired Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#$UsersExpiredList=Search-ADAccount -Server $ThisDomain -Credential $Creds -AccountExpired -UsersOnly -ResultPageSize 2000 -resultSetSize $null| Select-Object Name, SamAccountName, DistinguishedName
Domain Users Account Expired Test#CredCode#
Domain Users Account Expired Test#CredCode#IF ($Error.count -eq 0)
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#else
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#$ErrorOrNot="Yes"
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain Users Account Expired Test#CredCode#$SumVal = ""
Domain Users Account Expired Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#else
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#$Items = $UsersExpiredList
Domain Users Account Expired Test#CredCode#$ItemCount=$UsersExpiredList.Count
Domain Users Account Expired Test#CredCode#$FinalText = ""
Domain Users Account Expired Test#CredCode#$SumVal=$ItemCount
Domain Users Account Expired Test#CredCode#
Domain Users Account Expired Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Account Expired Test#CredCode#{ 
Domain Users Account Expired Test#CredCode#$TotNo++
Domain Users Account Expired Test#CredCode#} 
Domain Users Account Expired Test#CredCode#$FinalVal="Total Expired Users: ["+$TotNo+"]"+",,,"+$ThisDomain
Domain Users Account Expired Test#CredCode#Add-Content "$TestCSVFile" $FinalVal
Domain Users Account Expired Test#CredCode#
Domain Users Account Expired Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Account Expired Test#CredCode#{ 
Domain Users Account Expired Test#CredCode#$RemovedComma = $ThisItem.DistinguishedName.replace(",", " ")
Domain Users Account Expired Test#CredCode#$FinalVal=$ThisItem.Name+","+$ThisItem.SamAccountName+","+'"'+$RemovedComma+'"'+","+$ThisDomain
Domain Users Account Expired Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#
Domain Users Account Expired Test#CredCode#IF ($TotNo -ge 500)
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#$TestText = "More than 500 expired users accounts were found in AD Domains. Please load and check result."
Domain Users Account Expired Test#CredCode#$TestStatus="High"
Domain Users Account Expired Test#CredCode#$SumVal = $TotNo
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#else
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#$TestText = "Less than 500 expired user accounts were found in AD Domains. Please load and check result."
Domain Users Account Expired Test#CredCode#$TestStatus="Low"
Domain Users Account Expired Test#CredCode#$SumVal = $TotNo          
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#IF ($TotNo -eq 0)
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#$TestText = "No expired user accounts were found in AD Domains."
Domain Users Account Expired Test#CredCode#$TestStatus="Passed"
Domain Users Account Expired Test#CredCode#$SumVal = $TotNo
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Users Account Expired Test#CredCode#
Domain Users Account Expired Test#CredCode#
Domain Users Account Expired Test#CredCode#$TotNo=0
Domain Users Account Expired Test#CredCode#$ItemCount=0
Domain Users Account Expired Test#CredCode#$TestText = ""
Domain Users Account Expired Test#CredCode#$TestStatus=""
Domain Users Account Expired Test#CredCode#$SumVal = ""
Domain Users Account Expired Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#$UsersExpiredList=Search-ADAccount -Server $ThisDomain -AccountExpired -UsersOnly -ResultPageSize 2000 -resultSetSize $null| Select-Object Name, SamAccountName, DistinguishedName
Domain Users Account Expired Test#CredCode#
Domain Users Account Expired Test#CredCode#IF ($Error.count -eq 0)
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#else
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#$ErrorOrNot="Yes"
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain Users Account Expired Test#CredCode#$SumVal = ""
Domain Users Account Expired Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#else
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#$Items = $UsersExpiredList
Domain Users Account Expired Test#CredCode#$ItemCount=$UsersExpiredList.Count
Domain Users Account Expired Test#CredCode#$FinalText = ""
Domain Users Account Expired Test#CredCode#$SumVal=$ItemCount
Domain Users Account Expired Test#CredCode#
Domain Users Account Expired Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Account Expired Test#CredCode#{ 
Domain Users Account Expired Test#CredCode#$TotNo++
Domain Users Account Expired Test#CredCode#} 
Domain Users Account Expired Test#CredCode#$FinalVal="Total Expired Users: ["+$TotNo+"]"+",,,"+$ThisDomain
Domain Users Account Expired Test#CredCode#Add-Content "$TestCSVFile" $FinalVal
Domain Users Account Expired Test#CredCode#
Domain Users Account Expired Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Account Expired Test#CredCode#{ 
Domain Users Account Expired Test#CredCode#$RemovedComma = $ThisItem.DistinguishedName.replace(",", " ")
Domain Users Account Expired Test#CredCode#$FinalVal=$ThisItem.Name+","+$ThisItem.SamAccountName+","+'"'+$RemovedComma+'"'+","+$ThisDomain
Domain Users Account Expired Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#
Domain Users Account Expired Test#CredCode#IF ($TotNo -ge 500)
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#$TestText = "More than 500 expired users accounts were found in AD Domains. Please load and check result."
Domain Users Account Expired Test#CredCode#$TestStatus="High"
Domain Users Account Expired Test#CredCode#$SumVal = $TotNo
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#else
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#$TestText = "Less than 500 expired user accounts were found in AD Domains. Please load and check result."
Domain Users Account Expired Test#CredCode#$TestStatus="Low"
Domain Users Account Expired Test#CredCode#$SumVal = $TotNo          
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#IF ($TotNo -eq 0)
Domain Users Account Expired Test#CredCode#{
Domain Users Account Expired Test#CredCode#$TestText = "No expired user accounts were found in AD Domains."
Domain Users Account Expired Test#CredCode#$TestStatus="Passed"
Domain Users Account Expired Test#CredCode#$SumVal = $TotNo
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#
Domain Users Account Expired Test#CredCode#}
Domain Users Account Expired Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Users Account Expired Test#CredCode#
Domain Users Account Expired Test#CredCode#
Domain Users Accounts Locked Out Test#HeaderCode#$ThisString="User Name, SamAccountName, DistinguishedName, In AD Domain"
Domain Users Accounts Locked Out Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain Users Accounts Locked Out Test#HeaderCode#
Domain Users Accounts Locked Out Test#HeaderCode#
Domain Users Accounts Locked Out Test#HeaderCode#
Domain Users Accounts Locked Out Test#HeaderCode#
Domain Users Accounts Locked Out Test#CredCode#$TotNo=0
Domain Users Accounts Locked Out Test#CredCode#$ItemCount=0
Domain Users Accounts Locked Out Test#CredCode#$TestText = ""
Domain Users Accounts Locked Out Test#CredCode#$TestStatus=""
Domain Users Accounts Locked Out Test#CredCode#$SumVal = ""
Domain Users Accounts Locked Out Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#$UsersAccountLockOutList=Search-ADAccount -Credential $Creds -Server $ThisDomain -LockedOut -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#IF ($Error.count -eq 0)
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#else
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#$ErrorOrNot="Yes"
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain Users Accounts Locked Out Test#CredCode#$SumVal = ""
Domain Users Accounts Locked Out Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#else
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#$Items = $UsersAccountLockOutList
Domain Users Accounts Locked Out Test#CredCode#$ItemCount=$UsersAccountLockOutList.Count
Domain Users Accounts Locked Out Test#CredCode#$FinalText = ""
Domain Users Accounts Locked Out Test#CredCode#$SumVal=$ItemCount
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Accounts Locked Out Test#CredCode#{ 
Domain Users Accounts Locked Out Test#CredCode#$TotNo++
Domain Users Accounts Locked Out Test#CredCode#} 
Domain Users Accounts Locked Out Test#CredCode#$FinalVal="Total Locked Out User Accounts: ["+$TotNo+"]"+",,,"+$ThisDomain
Domain Users Accounts Locked Out Test#CredCode#Add-Content "$TestCSVFile" $FinalVal
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Accounts Locked Out Test#CredCode#{ 
Domain Users Accounts Locked Out Test#CredCode#$RemovedComma = $ThisItem.DistinguishedName.replace(",", " ")
Domain Users Accounts Locked Out Test#CredCode#$FinalVal=$ThisItem.Name+","+$ThisItem.SamAccountName+","+'"'+$RemovedComma+'"'+","+$ThisDomain
Domain Users Accounts Locked Out Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#IF ($TotNo -ge 100)
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#$TestText = "More than 100 Locked Out user accounts were found in AD Domains. Please load and check result."
Domain Users Accounts Locked Out Test#CredCode#$TestStatus="High"
Domain Users Accounts Locked Out Test#CredCode#$SumVal = $TotNo
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#else
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#$TestText = "Less than 100 Locked Out user accounts were found in AD Domains. Please load and check result."
Domain Users Accounts Locked Out Test#CredCode#$TestStatus="Low"
Domain Users Accounts Locked Out Test#CredCode#$SumVal = $TotNo          
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#IF ($TotNo -eq 0)
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#$TestText = "No Locked Out user accounts were found in AD Domains."
Domain Users Accounts Locked Out Test#CredCode#$TestStatus="Passed"
Domain Users Accounts Locked Out Test#CredCode#$SumVal = $TotNo
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#$TotNo=0
Domain Users Accounts Locked Out Test#CredCode#$ItemCount=0
Domain Users Accounts Locked Out Test#CredCode#$TestText = ""
Domain Users Accounts Locked Out Test#CredCode#$TestStatus=""
Domain Users Accounts Locked Out Test#CredCode#$SumVal = ""
Domain Users Accounts Locked Out Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#$UsersAccountLockOutList=Search-ADAccount -Server $ThisDomain -LockedOut -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#IF ($Error.count -eq 0)
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#else
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#$ErrorOrNot="Yes"
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain Users Accounts Locked Out Test#CredCode#$SumVal = ""
Domain Users Accounts Locked Out Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#else
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#$Items = $UsersAccountLockOutList
Domain Users Accounts Locked Out Test#CredCode#$ItemCount=$UsersAccountLockOutList.Count
Domain Users Accounts Locked Out Test#CredCode#$FinalText = ""
Domain Users Accounts Locked Out Test#CredCode#$SumVal=$ItemCount
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Accounts Locked Out Test#CredCode#{ 
Domain Users Accounts Locked Out Test#CredCode#$TotNo++
Domain Users Accounts Locked Out Test#CredCode#} 
Domain Users Accounts Locked Out Test#CredCode#$FinalVal="Total Locked Out User Accounts: ["+$TotNo+"]"+",,,"+$ThisDomain
Domain Users Accounts Locked Out Test#CredCode#Add-Content "$TestCSVFile" $FinalVal
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Accounts Locked Out Test#CredCode#{ 
Domain Users Accounts Locked Out Test#CredCode#$RemovedComma = $ThisItem.DistinguishedName.replace(",", " ")
Domain Users Accounts Locked Out Test#CredCode#$FinalVal=$ThisItem.Name+","+$ThisItem.SamAccountName+","+'"'+$RemovedComma+'"'+","+$ThisDomain
Domain Users Accounts Locked Out Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#IF ($TotNo -ge 100)
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#$TestText = "More than 100 Locked Out user accounts were found in AD Domains. Please load and check result."
Domain Users Accounts Locked Out Test#CredCode#$TestStatus="High"
Domain Users Accounts Locked Out Test#CredCode#$SumVal = $TotNo
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#else
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#$TestText = "Less than 100 Locked Out user accounts were found in AD Domains. Please load and check result."
Domain Users Accounts Locked Out Test#CredCode#$TestStatus="Low"
Domain Users Accounts Locked Out Test#CredCode#$SumVal = $TotNo          
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#IF ($TotNo -eq 0)
Domain Users Accounts Locked Out Test#CredCode#{
Domain Users Accounts Locked Out Test#CredCode#$TestText = "No Locked Out user accounts were found in AD Domains."
Domain Users Accounts Locked Out Test#CredCode#$TestStatus="Passed"
Domain Users Accounts Locked Out Test#CredCode#$SumVal = $TotNo
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#}
Domain Users Accounts Locked Out Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#
Domain Users Accounts Locked Out Test#CredCode#
Get AD Administrative Security Groups Count#HeaderCode#$ThisString="Security Group, Total Members, In AD Domain"
Get AD Administrative Security Groups Count#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Get AD Administrative Security Groups Count#HeaderCode#
Get AD Administrative Security Groups Count#HeaderCode#
Get AD Administrative Security Groups Count#CredCode#$TotNo=0
Get AD Administrative Security Groups Count#CredCode#$ItemCount=0
Get AD Administrative Security Groups Count#CredCode#$TestText = "Count of Security Groups defined in DomainGRPCount.DPC was retrieved successfully."
Get AD Administrative Security Groups Count#CredCode#$TestStatus="Completed"
Get AD Administrative Security Groups Count#CredCode#$SumVal = "NA"
Get AD Administrative Security Groups Count#CredCode#$ErrorOrNot = "No"
Get AD Administrative Security Groups Count#CredCode#$GrpMem="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DomainGRPCount.DPC"
Get AD Administrative Security Groups Count#CredCode#
Get AD Administrative Security Groups Count#CredCode#Foreach ($ItemName in Get-Content "$GrpMem")
Get AD Administrative Security Groups Count#CredCode#{
Get AD Administrative Security Groups Count#CredCode#IF ($ItemName -eq "")
Get AD Administrative Security Groups Count#CredCode#{
Get AD Administrative Security Groups Count#CredCode#}
Get AD Administrative Security Groups Count#CredCode#else
Get AD Administrative Security Groups Count#CredCode#{ 
Get AD Administrative Security Groups Count#CredCode#ForEach ($DomainName in Get-Content $GDomList)
Get AD Administrative Security Groups Count#CredCode#{
Get AD Administrative Security Groups Count#CredCode#$TotMems = Get-ADGroupMember -Identity "$ItemName" -Server $DomainName -Credential $Creds -ErrorAction SilentlyContinue
Get AD Administrative Security Groups Count#CredCode#$TotNowCount = $TotMems.Count
Get AD Administrative Security Groups Count#CredCode#
Get AD Administrative Security Groups Count#CredCode#$FinalVal=$ItemName+","+$TotNowCount+","+$ThisDomain
Get AD Administrative Security Groups Count#CredCode#Add-Content "$TestCSVFile" $FinalVal
Get AD Administrative Security Groups Count#CredCode#}
Get AD Administrative Security Groups Count#CredCode#}
Get AD Administrative Security Groups Count#CredCode#}
Get AD Administrative Security Groups Count#CredCode#
Get AD Administrative Security Groups Count#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Get AD Administrative Security Groups Count#CredCode#
Get AD Administrative Security Groups Count#CredCode#
Get AD Administrative Security Groups Count#CredCode#$TotNo=0
Get AD Administrative Security Groups Count#CredCode#$ItemCount=0
Get AD Administrative Security Groups Count#CredCode#$TestText = "Count of Security Groups defined in DomainGRPCount.DPC was retrieved successfully."
Get AD Administrative Security Groups Count#CredCode#$TestStatus="Completed"
Get AD Administrative Security Groups Count#CredCode#$SumVal = "NA"
Get AD Administrative Security Groups Count#CredCode#$ErrorOrNot = "No"
Get AD Administrative Security Groups Count#CredCode#$GrpMem="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DomainGRPCount.DPC"
Get AD Administrative Security Groups Count#CredCode#
Get AD Administrative Security Groups Count#CredCode#Foreach ($ItemName in Get-Content "$GrpMem")
Get AD Administrative Security Groups Count#CredCode#{
Get AD Administrative Security Groups Count#CredCode#IF ($ItemName -eq "")
Get AD Administrative Security Groups Count#CredCode#{
Get AD Administrative Security Groups Count#CredCode#}
Get AD Administrative Security Groups Count#CredCode#else
Get AD Administrative Security Groups Count#CredCode#{ 
Get AD Administrative Security Groups Count#CredCode#ForEach ($DomainName in Get-Content $GDomList)
Get AD Administrative Security Groups Count#CredCode#{
Get AD Administrative Security Groups Count#CredCode#$TotMems = Get-ADGroupMember -Identity "$ItemName" -Server $DomainName -ErrorAction SilentlyContinue
Get AD Administrative Security Groups Count#CredCode#$TotNowCount = $TotMems.Count
Get AD Administrative Security Groups Count#CredCode#
Get AD Administrative Security Groups Count#CredCode#$FinalVal=$ItemName+","+$TotNowCount+","+$ThisDomain
Get AD Administrative Security Groups Count#CredCode#Add-Content "$TestCSVFile" $FinalVal
Get AD Administrative Security Groups Count#CredCode#}
Get AD Administrative Security Groups Count#CredCode#}
Get AD Administrative Security Groups Count#CredCode#}
Get AD Administrative Security Groups Count#CredCode#
Get AD Administrative Security Groups Count#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Get AD Administrative Security Groups Count#CredCode#
Get AD Administrative Security Groups Count#CredCode#
Get AD Domain Security Group Membership#CredCode#$ThisString = "AD Domain, Group, Total Members, Data File Location"
Get AD Domain Security Group Membership#CredCode#Add-Content "$TestCSVFile" $ThisString
Get AD Domain Security Group Membership#CredCode#
Get AD Domain Security Group Membership#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Get AD Domain Security Group Membership#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Get AD Domain Security Group Membership#CredCode#
Get AD Domain Security Group Membership#CredCode#$ThisString = "AD Domain, Group, Member"
Get AD Domain Security Group Membership#CredCode#Add-Content "$DataFileLocation" $ThisString
Get AD Domain Security Group Membership#CredCode#
Get AD Domain Security Group Membership#CredCode#$TotNo = 0
Get AD Domain Security Group Membership#CredCode#$ItemCount = 0
Get AD Domain Security Group Membership#CredCode#$TestText = "Please check result"
Get AD Domain Security Group Membership#CredCode#$TestStatus = "Completed"
Get AD Domain Security Group Membership#CredCode#$SumVal = "NA"
Get AD Domain Security Group Membership#CredCode#$ErrorOrNot = "No"
Get AD Domain Security Group Membership#CredCode#$GrpMem = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DomainGRP.DPC"
Get AD Domain Security Group Membership#CredCode#
Get AD Domain Security Group Membership#CredCode#Foreach ($ItemName in Get-Content "$GrpMem")
Get AD Domain Security Group Membership#CredCode#{
Get AD Domain Security Group Membership#CredCode#	IF ($ItemName -eq "")
Get AD Domain Security Group Membership#CredCode#	{
Get AD Domain Security Group Membership#CredCode#	}
Get AD Domain Security Group Membership#CredCode#	else
Get AD Domain Security Group Membership#CredCode#	{
Get AD Domain Security Group Membership#CredCode#		ForEach ($DomainName in Get-Content $GDomList)
Get AD Domain Security Group Membership#CredCode#		{
Get AD Domain Security Group Membership#CredCode#			$AllMem = Get-ADGroupMember -Identity "$ItemName" -Server $DomainName -ErrorAction SilentlyContinue -Credential $Creds
Get AD Domain Security Group Membership#CredCode#			$TotNow = 0
Get AD Domain Security Group Membership#CredCode#			foreach ($ItemGRP in $AllMem)
Get AD Domain Security Group Membership#CredCode#			{
Get AD Domain Security Group Membership#CredCode#				$ThisName = $ItemGRP.Name
Get AD Domain Security Group Membership#CredCode#				$ThisGroupNow = $ItemName
Get AD Domain Security Group Membership#CredCode#				
Get AD Domain Security Group Membership#CredCode#				$FinalSTR = $ThisDomain + "," + $ItemName + ","+$ThisName
Get AD Domain Security Group Membership#CredCode#				Add-Content "$DataFileLocation" $FinalSTR
Get AD Domain Security Group Membership#CredCode#				$TotNow++
Get AD Domain Security Group Membership#CredCode#			}
Get AD Domain Security Group Membership#CredCode#						
Get AD Domain Security Group Membership#CredCode#			$FinalSTR = $ThisDomain + ","+$ItemName+","+ $TotNow + "," + $DataFileLocation
Get AD Domain Security Group Membership#CredCode#			Add-Content "$TestCSVFile" $FinalSTR			
Get AD Domain Security Group Membership#CredCode#		}		
Get AD Domain Security Group Membership#CredCode#	}		
Get AD Domain Security Group Membership#CredCode#}
Get AD Domain Security Group Membership#CredCode#
Get AD Domain Security Group Membership#CredCode#$STR = $ADTestName + "," + $TestStartTime + "," + $TestStatus + "," + $SumVal + "," + $TestText
Get AD Domain Security Group Membership#CredCode#$ThisString = "AD Domain, Group, Total Members, Data File Location"
Get AD Domain Security Group Membership#CredCode#Add-Content "$TestCSVFile" $ThisString
Get AD Domain Security Group Membership#CredCode#
Get AD Domain Security Group Membership#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Get AD Domain Security Group Membership#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Get AD Domain Security Group Membership#CredCode#
Get AD Domain Security Group Membership#CredCode#$ThisString = "AD Domain, Group, Member"
Get AD Domain Security Group Membership#CredCode#Add-Content "$DataFileLocation" $ThisString
Get AD Domain Security Group Membership#CredCode#
Get AD Domain Security Group Membership#CredCode#$TotNo = 0
Get AD Domain Security Group Membership#CredCode#$ItemCount = 0
Get AD Domain Security Group Membership#CredCode#$TestText = "Please check result"
Get AD Domain Security Group Membership#CredCode#$TestStatus = "Completed"
Get AD Domain Security Group Membership#CredCode#$SumVal = "NA"
Get AD Domain Security Group Membership#CredCode#$ErrorOrNot = "No"
Get AD Domain Security Group Membership#CredCode#$GrpMem = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DomainGRP.DPC"
Get AD Domain Security Group Membership#CredCode#
Get AD Domain Security Group Membership#CredCode#Foreach ($ItemName in Get-Content "$GrpMem")
Get AD Domain Security Group Membership#CredCode#{
Get AD Domain Security Group Membership#CredCode#	IF ($ItemName -eq "")
Get AD Domain Security Group Membership#CredCode#	{
Get AD Domain Security Group Membership#CredCode#	}
Get AD Domain Security Group Membership#CredCode#	else
Get AD Domain Security Group Membership#CredCode#	{
Get AD Domain Security Group Membership#CredCode#		ForEach ($DomainName in Get-Content $GDomList)
Get AD Domain Security Group Membership#CredCode#		{
Get AD Domain Security Group Membership#CredCode#			$AllMem = Get-ADGroupMember -Identity "$ItemName" -Server $DomainName -ErrorAction SilentlyContinue
Get AD Domain Security Group Membership#CredCode#			$TotNow = 0
Get AD Domain Security Group Membership#CredCode#			foreach ($ItemGRP in $AllMem)
Get AD Domain Security Group Membership#CredCode#			{
Get AD Domain Security Group Membership#CredCode#				$ThisName = $ItemGRP.Name
Get AD Domain Security Group Membership#CredCode#				$ThisGroupNow = $ItemName
Get AD Domain Security Group Membership#CredCode#				
Get AD Domain Security Group Membership#CredCode#				$FinalSTR = $ThisDomain + "," + $ItemName + ","+$ThisName
Get AD Domain Security Group Membership#CredCode#				Add-Content "$DataFileLocation" $FinalSTR
Get AD Domain Security Group Membership#CredCode#				$TotNow++
Get AD Domain Security Group Membership#CredCode#			}
Get AD Domain Security Group Membership#CredCode#						
Get AD Domain Security Group Membership#CredCode#			$FinalSTR = $ThisDomain + ","+$ItemName+","+ $TotNow + "," + $DataFileLocation
Get AD Domain Security Group Membership#CredCode#			Add-Content "$TestCSVFile" $FinalSTR			
Get AD Domain Security Group Membership#CredCode#		}		
Get AD Domain Security Group Membership#CredCode#	}		
Get AD Domain Security Group Membership#CredCode#}
Get AD Domain Security Group Membership#CredCode#
Get AD Domain Security Group Membership#CredCode#$STR = $ADTestName + "," + $TestStartTime + "," + $TestStatus + "," + $SumVal + "," + $TestText
Domain GPO Naming Test#HeaderCode#$ThisString="In AD Domain, Connected to PDC Server, GPO Name, Total Length, Final Status"
Domain GPO Naming Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain GPO Naming Test#HeaderCode#
Domain GPO Naming Test#HeaderCode#
Domain GPO Naming Test#HeaderCode#
Domain GPO Naming Test#CredCode#$TotNo=0
Domain GPO Naming Test#CredCode#$ItemCount=0
Domain GPO Naming Test#CredCode#$TestText = ""
Domain GPO Naming Test#CredCode#$TestStatus=""
Domain GPO Naming Test#CredCode#$SumVal = ""
Domain GPO Naming Test#CredCode#$IsNameOk="Yes"
Domain GPO Naming Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#
Domain GPO Naming Test#CredCode#    $PDCServerToConnect = "Unknown"
Domain GPO Naming Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain GPO Naming Test#CredCode#    {
Domain GPO Naming Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
Domain GPO Naming Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Naming Test#CredCode#        {
Domain GPO Naming Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Naming Test#CredCode#            {
Domain GPO Naming Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain GPO Naming Test#CredCode#                break
Domain GPO Naming Test#CredCode#            }
Domain GPO Naming Test#CredCode#        }    
Domain GPO Naming Test#CredCode#
Domain GPO Naming Test#CredCode#    }
Domain GPO Naming Test#CredCode#    else
Domain GPO Naming Test#CredCode#    {
Domain GPO Naming Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
Domain GPO Naming Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Naming Test#CredCode#        {
Domain GPO Naming Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Naming Test#CredCode#            {
Domain GPO Naming Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
Domain GPO Naming Test#CredCode#                break
Domain GPO Naming Test#CredCode#            }
Domain GPO Naming Test#CredCode#        }    
Domain GPO Naming Test#CredCode#    }
Domain GPO Naming Test#CredCode#   
Domain GPO Naming Test#CredCode#    $Error.Clear()
Domain GPO Naming Test#CredCode#    $AllGPODes = Invoke-Command -ComputerName $ThisDomain -Script { param($R1Now) Get-GPO -ALL -Domain $R1Now } -Credential $Creds -ArgumentList $ThisDomain
Domain GPO Naming Test#CredCode#
Domain GPO Naming Test#CredCode#IF ($Error.count -eq 0)
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#else
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#$ErrorOrNot="Yes"
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain GPO Naming Test#CredCode#$SumVal = ""
Domain GPO Naming Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#else
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#$Items = $AllGPODes
Domain GPO Naming Test#CredCode#$ItemCount=$AllGPODes.Count
Domain GPO Naming Test#CredCode#$FinalText = ""
Domain GPO Naming Test#CredCode#$SumVal=$ItemCount
Domain GPO Naming Test#CredCode#
Domain GPO Naming Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPO Naming Test#CredCode#{ 
Domain GPO Naming Test#CredCode#$RNameNow = ($ThisItem.DisplayName | Measure-Object -Character).Characters
Domain GPO Naming Test#CredCode#$StatusNow="Ok"
Domain GPO Naming Test#CredCode#IF ($RNameNow -gt 60)
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#$TotNo++
Domain GPO Naming Test#CredCode#$IsNameOk="No"
Domain GPO Naming Test#CredCode#$StatusNow="Please check if GPO name can be changed to a descriptive name"
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#$FinalVal=$ThisDomain+","+$PDCServerToConnect+","+$ThisItem.DisplayName+","+$RNameNow+","+$StatusNow
Domain GPO Naming Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain GPO Naming Test#CredCode#} 
Domain GPO Naming Test#CredCode#
Domain GPO Naming Test#CredCode#IF ($IsNameOk -eq "No")
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#$TestText = "Some GPOs names are more than 60 characters. It is recommended to have shorter GPO names."
Domain GPO Naming Test#CredCode#$TestStatus="Medium"
Domain GPO Naming Test#CredCode#$SumVal = $TotNo
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#IF ($IsNameOk -eq "Yes")
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#$TestText = "All GPOs have shorter names. GPOs have been defined under 60 characters recommended limitation."
Domain GPO Naming Test#CredCode#$TestStatus="Passed"
Domain GPO Naming Test#CredCode#$SumVal = $TotNo
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain GPO Naming Test#CredCode#
Domain GPO Naming Test#CredCode#$TotNo=0
Domain GPO Naming Test#CredCode#$ItemCount=0
Domain GPO Naming Test#CredCode#$TestText = ""
Domain GPO Naming Test#CredCode#$TestStatus=""
Domain GPO Naming Test#CredCode#$SumVal = ""
Domain GPO Naming Test#CredCode#$IsNameOk="Yes"
Domain GPO Naming Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#
Domain GPO Naming Test#CredCode#    $PDCServerToConnect = "Unknown"
Domain GPO Naming Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain GPO Naming Test#CredCode#    {
Domain GPO Naming Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
Domain GPO Naming Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Naming Test#CredCode#        {
Domain GPO Naming Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Naming Test#CredCode#            {
Domain GPO Naming Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain GPO Naming Test#CredCode#                break
Domain GPO Naming Test#CredCode#            }
Domain GPO Naming Test#CredCode#        }    
Domain GPO Naming Test#CredCode#
Domain GPO Naming Test#CredCode#    }
Domain GPO Naming Test#CredCode#    else
Domain GPO Naming Test#CredCode#    {
Domain GPO Naming Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
Domain GPO Naming Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Naming Test#CredCode#        {
Domain GPO Naming Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Naming Test#CredCode#            {
Domain GPO Naming Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
Domain GPO Naming Test#CredCode#                break
Domain GPO Naming Test#CredCode#            }
Domain GPO Naming Test#CredCode#        }    
Domain GPO Naming Test#CredCode#    }
Domain GPO Naming Test#CredCode#   
Domain GPO Naming Test#CredCode#    $Error.Clear()
Domain GPO Naming Test#CredCode#    $AllGPODes = Get-GPO -ALL -Domain $ThisDomain -Server $PDCServerToConnect
Domain GPO Naming Test#CredCode#
Domain GPO Naming Test#CredCode#IF ($Error.count -eq 0)
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#else
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#$ErrorOrNot="Yes"
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain GPO Naming Test#CredCode#$SumVal = ""
Domain GPO Naming Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#else
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#$Items = $AllGPODes
Domain GPO Naming Test#CredCode#$ItemCount=$AllGPODes.Count
Domain GPO Naming Test#CredCode#$FinalText = ""
Domain GPO Naming Test#CredCode#$SumVal=$ItemCount
Domain GPO Naming Test#CredCode#
Domain GPO Naming Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPO Naming Test#CredCode#{ 
Domain GPO Naming Test#CredCode#$RNameNow = ($ThisItem.DisplayName | Measure-Object -Character).Characters
Domain GPO Naming Test#CredCode#$StatusNow="Ok"
Domain GPO Naming Test#CredCode#IF ($RNameNow -gt 60)
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#$TotNo++
Domain GPO Naming Test#CredCode#$IsNameOk="No"
Domain GPO Naming Test#CredCode#$StatusNow="Please check if GPO name can be changed to a descriptive name"
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#$FinalVal=$ThisDomain+","+$PDCServerToConnect+","+$ThisItem.DisplayName+","+$RNameNow+","+$StatusNow
Domain GPO Naming Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain GPO Naming Test#CredCode#} 
Domain GPO Naming Test#CredCode#
Domain GPO Naming Test#CredCode#IF ($IsNameOk -eq "No")
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#$TestText = "Some GPOs names are more than 60 characters. It is recommended to have shorter GPO names."
Domain GPO Naming Test#CredCode#$TestStatus="Medium"
Domain GPO Naming Test#CredCode#$SumVal = $TotNo
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#IF ($IsNameOk -eq "Yes")
Domain GPO Naming Test#CredCode#{
Domain GPO Naming Test#CredCode#$TestText = "All GPOs have shorter names. GPOs have been defined under 60 characters recommended limitation."
Domain GPO Naming Test#CredCode#$TestStatus="Passed"
Domain GPO Naming Test#CredCode#$SumVal = $TotNo
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#
Domain GPO Naming Test#CredCode#}
Domain GPO Naming Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain GPO Naming Test#CredCode#
Domain GPO Description Test#HeaderCode#$ThisString="In AD Domain, Connected to PDC Server, GPO Name, Description, Final Status"
Domain GPO Description Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain GPO Description Test#HeaderCode#
Domain GPO Description Test#HeaderCode#
Domain GPO Description Test#CredCode#$TotNo=0
Domain GPO Description Test#CredCode#$ItemCount=0
Domain GPO Description Test#CredCode#$TestText = ""
Domain GPO Description Test#CredCode#$TestStatus=""
Domain GPO Description Test#CredCode#$SumVal = ""
Domain GPO Description Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#
Domain GPO Description Test#CredCode#    $PDCServerToConnect = "Unknown"
Domain GPO Description Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain GPO Description Test#CredCode#    {
Domain GPO Description Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
Domain GPO Description Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Description Test#CredCode#        {
Domain GPO Description Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Description Test#CredCode#            {
Domain GPO Description Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain GPO Description Test#CredCode#                break
Domain GPO Description Test#CredCode#            }
Domain GPO Description Test#CredCode#        }    
Domain GPO Description Test#CredCode#
Domain GPO Description Test#CredCode#    }
Domain GPO Description Test#CredCode#    else
Domain GPO Description Test#CredCode#    {
Domain GPO Description Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
Domain GPO Description Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Description Test#CredCode#        {
Domain GPO Description Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Description Test#CredCode#            {
Domain GPO Description Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
Domain GPO Description Test#CredCode#                break
Domain GPO Description Test#CredCode#            }
Domain GPO Description Test#CredCode#        }    
Domain GPO Description Test#CredCode#    }
Domain GPO Description Test#CredCode#   
Domain GPO Description Test#CredCode#    $Error.Clear()    
Domain GPO Description Test#CredCode#    $AllGPODes = Invoke-Command -ComputerName $PDCServerToConnect -Script { param($R1Now) Get-GPO -ALL -Domain $R1Now | where{ $_.DEscription -eq $null } } -Credential $Creds -ArgumentList $ThisDomain
Domain GPO Description Test#CredCode#
Domain GPO Description Test#CredCode#
Domain GPO Description Test#CredCode#IF ($Error.count -eq 0)
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#else
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#$ErrorOrNot="Yes"
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain GPO Description Test#CredCode#$SumVal = ""
Domain GPO Description Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#else
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#$Items = $AllGPODes
Domain GPO Description Test#CredCode#$ItemCount=$AllGPODes.Count
Domain GPO Description Test#CredCode#$FinalText = ""
Domain GPO Description Test#CredCode#$SumVal=$ItemCount
Domain GPO Description Test#CredCode#
Domain GPO Description Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPO Description Test#CredCode#{ 
Domain GPO Description Test#CredCode#$ThisDesToCheck = $ThisItem.Description
Domain GPO Description Test#CredCode#$StatusNow="Ok"
Domain GPO Description Test#CredCode#IF ($ThisDesToCheck -eq $Null)
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#$TotNo++
Domain GPO Description Test#CredCode#$StatusNow="Not Ok"
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#$FinalVal=$ThisDomain+","+$PDCServerToConnect+","+$ThisItem.DisplayName+","+$ThisItem.Description+","+$StatusNow
Domain GPO Description Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#
Domain GPO Description Test#CredCode#IF ($TotNo -ge 0)
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#$TestText = "Some GPOs do not have a description set. It is recommended to set a description for each GPO to identify function of GPO easily."
Domain GPO Description Test#CredCode#$TestStatus="Low"
Domain GPO Description Test#CredCode#$SumVal = $TotNo
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#IF ($TotNo -eq 0)
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#$TestText = "All GPOs are defined with a description text."
Domain GPO Description Test#CredCode#$TestStatus="Passed"
Domain GPO Description Test#CredCode#$SumVal = $TotNo
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain GPO Description Test#CredCode#
Domain GPO Description Test#CredCode#$TotNo=0
Domain GPO Description Test#CredCode#$ItemCount=0
Domain GPO Description Test#CredCode#$TestText = ""
Domain GPO Description Test#CredCode#$TestStatus=""
Domain GPO Description Test#CredCode#$SumVal = ""
Domain GPO Description Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#
Domain GPO Description Test#CredCode#$PDCServerToConnect = "Unknown"
Domain GPO Description Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain GPO Description Test#CredCode#    {
Domain GPO Description Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
Domain GPO Description Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Description Test#CredCode#        {
Domain GPO Description Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Description Test#CredCode#            {
Domain GPO Description Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain GPO Description Test#CredCode#                break
Domain GPO Description Test#CredCode#            }
Domain GPO Description Test#CredCode#        }    
Domain GPO Description Test#CredCode#
Domain GPO Description Test#CredCode#    }
Domain GPO Description Test#CredCode#    else
Domain GPO Description Test#CredCode#    {
Domain GPO Description Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
Domain GPO Description Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Description Test#CredCode#        {
Domain GPO Description Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Description Test#CredCode#            {
Domain GPO Description Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
Domain GPO Description Test#CredCode#                break
Domain GPO Description Test#CredCode#            }
Domain GPO Description Test#CredCode#        }    
Domain GPO Description Test#CredCode#    }
Domain GPO Description Test#CredCode#   
Domain GPO Description Test#CredCode#    $Error.Clear()    
Domain GPO Description Test#CredCode#    $AllGPODes=Get-GPO -ALL -Domain $ThisDomain -Server $PDCServerToConnect | where{ $_.DEscription -eq $null }
Domain GPO Description Test#CredCode#
Domain GPO Description Test#CredCode#IF ($Error.count -eq 0)
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#else
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#$ErrorOrNot="Yes"
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain GPO Description Test#CredCode#$SumVal = ""
Domain GPO Description Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#else
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#$Items = $AllGPODes
Domain GPO Description Test#CredCode#$ItemCount=$AllGPODes.Count
Domain GPO Description Test#CredCode#$FinalText = ""
Domain GPO Description Test#CredCode#$SumVal=$ItemCount
Domain GPO Description Test#CredCode#
Domain GPO Description Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPO Description Test#CredCode#{ 
Domain GPO Description Test#CredCode#$ThisDesToCheck = $ThisItem.Description
Domain GPO Description Test#CredCode#$StatusNow="Ok"
Domain GPO Description Test#CredCode#IF ($ThisDesToCheck -eq $Null)
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#$TotNo++
Domain GPO Description Test#CredCode#$StatusNow="Not Ok"
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#$FinalVal=$ThisDomain+","+$PDCServerToConnect+","+$ThisItem.DisplayName+","+$ThisItem.Description+","+$StatusNow
Domain GPO Description Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#
Domain GPO Description Test#CredCode#IF ($TotNo -ge 0)
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#$TestText = "Some GPOs do not have a description set. It is recommended to set a description for each GPO to identify function of GPO easily."
Domain GPO Description Test#CredCode#$TestStatus="Low"
Domain GPO Description Test#CredCode#$SumVal = $TotNo
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#IF ($TotNo -eq 0)
Domain GPO Description Test#CredCode#{
Domain GPO Description Test#CredCode#$TestText = "All GPOs are defined with a description text."
Domain GPO Description Test#CredCode#$TestStatus="Passed"
Domain GPO Description Test#CredCode#$SumVal = $TotNo
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#
Domain GPO Description Test#CredCode#}
Domain GPO Description Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain GPO Description Test#CredCode#
AD Duplicate Site Links Test#HeaderCode#$ThisString="AD Site, In Total AD Site Links, AD Site Links, Final Status"
AD Duplicate Site Links Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Duplicate Site Links Test#HeaderCode#
AD Duplicate Site Links Test#CredCode#$RPath="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\"+$CurProfNowForAll+"_RC.CSV"
AD Duplicate Site Links Test#CredCode#IF (Test-Path $RPath)
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#Remove-item $RPath
AD Duplicate Site Links Test#CredCode#Add-Content $RPath "Sites:"
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#$R=Get-ADReplicationSiteLink -filter * -Credential $Creds
AD Duplicate Site Links Test#CredCode#ForEach ($Link in $R)
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$RR=$Link.SitesIncluded
AD Duplicate Site Links Test#CredCode#ForEach ($AllS in $RR)
AD Duplicate Site Links Test#CredCode#{ 
AD Duplicate Site Links Test#CredCode#$STR = $AllS+":"
AD Duplicate Site Links Test#CredCode#Add-Content $RPath $STR
AD Duplicate Site Links Test#CredCode#} 
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#$RCSV = Import-CSV $RPath -Delimiter ":"
AD Duplicate Site Links Test#CredCode#$RPass=$Creds.GetNetworkCredential().Password
AD Duplicate Site Links Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName,$CredUserToUse,$RPass)
AD Duplicate Site Links Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Duplicate Site Links Test#CredCode#IF ($Error.count -eq 0)
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#else
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$ErrorOrNot="Yes"
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Duplicate Site Links Test#CredCode#$SumVal = ""
AD Duplicate Site Links Test#CredCode#$TestStatus="Error executing AD Test."
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#else
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$FinalTot=0
AD Duplicate Site Links Test#CredCode#$SumVal=""
AD Duplicate Site Links Test#CredCode#$TestText=""
AD Duplicate Site Links Test#CredCode#
AD Duplicate Site Links Test#CredCode#ForEach ($Site in $ADSites)
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$ThisSite = $Site.Name
AD Duplicate Site Links Test#CredCode#$ThisSiteLink = $Site.SiteLinks
AD Duplicate Site Links Test#CredCode#
AD Duplicate Site Links Test#CredCode#$CompDN=(Get-ADReplicationSite -Credential $Creds -Identity $ThisSite).DistinguishedName
AD Duplicate Site Links Test#CredCode#
AD Duplicate Site Links Test#CredCode#$TotNow=0
AD Duplicate Site Links Test#CredCode#ForEach ($AllSitesNow in $Rcsv)
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#IF ($AllSitesNow.Sites -eq $CompDN)
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$TotNow++
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#IF ($TotNow -ge 2)
AD Duplicate Site Links Test#CredCode#{ 
AD Duplicate Site Links Test#CredCode#$ThisStr=$ThisSite+","+$TotNow+","+$ThisSiteLink.Name+",NOT OK"
AD Duplicate Site Links Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Duplicate Site Links Test#CredCode#$FinalTot++
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#else
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$ThisStr=$ThisSite+","+$TotNow+","+$ThisSiteLink.Name+",OK"
AD Duplicate Site Links Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#IF ($FinalTot -eq 0)
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$TestText = "All AD Sites are appearing once in Site Links. No AD Sites appear more than once in Site Links."
AD Duplicate Site Links Test#CredCode#$SumVal = ""
AD Duplicate Site Links Test#CredCode#$TestStatus="Passed"
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#else
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$TestText = "Some AD Sites have been added to multiple AD Site Links. Please ignore AD Sites that acts as a Hub Site."
AD Duplicate Site Links Test#CredCode#$SumVal = $FinalTot
AD Duplicate Site Links Test#CredCode#$TestStatus="Medium"
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Duplicate Site Links Test#CredCode#
AD Duplicate Site Links Test#CredCode#$RPath="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\"+$CurProfNowForAll+"_RC.CSV"
AD Duplicate Site Links Test#CredCode#IF (Test-Path $RPath)
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#Remove-item $RPath
AD Duplicate Site Links Test#CredCode#Add-Content $RPath "Sites:"
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#$R=Get-ADReplicationSiteLink -filter *
AD Duplicate Site Links Test#CredCode#ForEach ($Link in $R)
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$RR=$Link.SitesIncluded
AD Duplicate Site Links Test#CredCode#ForEach ($AllS in $RR)
AD Duplicate Site Links Test#CredCode#{ 
AD Duplicate Site Links Test#CredCode#$STR = $AllS+":"
AD Duplicate Site Links Test#CredCode#Add-Content $RPath $STR
AD Duplicate Site Links Test#CredCode#} 
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#$RCSV = Import-CSV $RPath -Delimiter ":"
AD Duplicate Site Links Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName)
AD Duplicate Site Links Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Duplicate Site Links Test#CredCode#IF ($Error.count -eq 0)
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#else
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$ErrorOrNot="Yes"
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Duplicate Site Links Test#CredCode#$SumVal = ""
AD Duplicate Site Links Test#CredCode#$TestStatus="Error executing AD Test."
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#else
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$FinalTot=0
AD Duplicate Site Links Test#CredCode#$SumVal=""
AD Duplicate Site Links Test#CredCode#$TestText=""
AD Duplicate Site Links Test#CredCode#
AD Duplicate Site Links Test#CredCode#ForEach ($Site in $ADSites)
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$ThisSite = $Site.Name
AD Duplicate Site Links Test#CredCode#$ThisSiteLink = $Site.SiteLinks
AD Duplicate Site Links Test#CredCode#
AD Duplicate Site Links Test#CredCode#$CompDN=(Get-ADReplicationSite -Identity $ThisSite).DistinguishedName
AD Duplicate Site Links Test#CredCode#
AD Duplicate Site Links Test#CredCode#$TotNow=0
AD Duplicate Site Links Test#CredCode#ForEach ($AllSitesNow in $Rcsv)
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#IF ($AllSitesNow.Sites -eq $CompDN)
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$TotNow++
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#IF ($TotNow -ge 2)
AD Duplicate Site Links Test#CredCode#{ 
AD Duplicate Site Links Test#CredCode#$ThisStr=$ThisSite+","+$TotNow+","+$ThisSiteLink.Name+",NOT OK"
AD Duplicate Site Links Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Duplicate Site Links Test#CredCode#$FinalTot++
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#else
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$ThisStr=$ThisSite+","+$TotNow+","+$ThisSiteLink.Name+",OK"
AD Duplicate Site Links Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#IF ($FinalTot -eq 0)
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$TestText = "All AD Sites are appearing once in Site Links. No AD Sites appear more than once in Site Links."
AD Duplicate Site Links Test#CredCode#$SumVal = ""
AD Duplicate Site Links Test#CredCode#$TestStatus="Passed"
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#else
AD Duplicate Site Links Test#CredCode#{
AD Duplicate Site Links Test#CredCode#$TestText = "Some AD Sites have been added to multiple AD Site Links. Please ignore AD Sites that acts as a Hub Site."
AD Duplicate Site Links Test#CredCode#$SumVal = $FinalTot
AD Duplicate Site Links Test#CredCode#$TestStatus="Medium"
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#}
AD Duplicate Site Links Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Duplicate Site Links Test#CredCode#
AD Site Bridgehead Servers Test#HeaderCode#$ThisString="AD Site,Auto BH,Servers,Manual IP-BHs,IP-Servers,Manual SMTP-BHs,SMTP-Servers,Final Status"
AD Site Bridgehead Servers Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Site Bridgehead Servers Test#HeaderCode#
AD Site Bridgehead Servers Test#CredCode#$RPass=$Creds.GetNetworkCredential().Password
AD Site Bridgehead Servers Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName,$CredUserToUse,$RPass)
AD Site Bridgehead Servers Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Site Bridgehead Servers Test#CredCode#$TotNo=0
AD Site Bridgehead Servers Test#CredCode#$TestStatus=""
AD Site Bridgehead Servers Test#CredCode#$TestText=""
AD Site Bridgehead Servers Test#CredCode#
AD Site Bridgehead Servers Test#CredCode#IF ($Error.count -eq 0)
AD Site Bridgehead Servers Test#CredCode#{
AD Site Bridgehead Servers Test#CredCode#}
AD Site Bridgehead Servers Test#CredCode#else
AD Site Bridgehead Servers Test#CredCode#{
AD Site Bridgehead Servers Test#CredCode#$ErrorOrNot="Yes"
AD Site Bridgehead Servers Test#CredCode#}
AD Site Bridgehead Servers Test#CredCode#ForEach ($Site in $ADSites)
AD Site Bridgehead Servers Test#CredCode#{ 
AD Site Bridgehead Servers Test#CredCode#$SiteName = $Site.Name
AD Site Bridgehead Servers Test#CredCode#
AD Site Bridgehead Servers Test#CredCode#$FinStatusNow="Ok"
AD Site Bridgehead Servers Test#CredCode#IF ($Site.PreferredRpcBridgeheadServers.Count -ge 1 -or $Site.PreferredSmtpBridgeheadServers.Count -ge 1)
AD Site Bridgehead Servers Test#CredCode#{
AD Site Bridgehead Servers Test#CredCode#$TotNo++
AD Site Bridgehead Servers Test#CredCode#$FinStatusNow="Check why Manual Bridgehead Servers were assigned to AD Site."
AD Site Bridgehead Servers Test#CredCode#} 
AD Site Bridgehead Servers Test#CredCode#$Thisstr=$Site.Name+","+$Site.BridgeheadServers.Count+","+'"'+$Site.BridgeheadServers.Name+'"'+","+$Site.PreferredRpcBridgeheadServers.Count+","+'"'+$Site.PreferredRpcBridgeheadServers.Name+'"'+","+$Site.PreferredSmtpBridgeheadServers.Count+","+'"'+$Site.PreferredSmtpBridgeheadServers.Name+'"'+","+$FinStatusNow
AD Site Bridgehead Servers Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Bridgehead Servers Test#CredCode#
AD Site Bridgehead Servers Test#CredCode#}
AD Site Bridgehead Servers Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Bridgehead Servers Test#CredCode#{
AD Site Bridgehead Servers Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Bridgehead Servers Test#CredCode#$SumVal = ""
AD Site Bridgehead Servers Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Bridgehead Servers Test#CredCode#}
AD Site Bridgehead Servers Test#CredCode#else
AD Site Bridgehead Servers Test#CredCode#{
AD Site Bridgehead Servers Test#CredCode#IF ($TotNo -eq 0)
AD Site Bridgehead Servers Test#CredCode#{
AD Site Bridgehead Servers Test#CredCode#$TestText = "No Manual Bridgehead Servers were found in AD Sites."
AD Site Bridgehead Servers Test#CredCode#$SumVal = ""
AD Site Bridgehead Servers Test#CredCode#$TestStatus="Passed"
AD Site Bridgehead Servers Test#CredCode#}
AD Site Bridgehead Servers Test#CredCode#else
AD Site Bridgehead Servers Test#CredCode#{
AD Site Bridgehead Servers Test#CredCode#$SumVal = $TotNo
AD Site Bridgehead Servers Test#CredCode#$TestStatus = "High"
AD Site Bridgehead Servers Test#CredCode#$TestText = "Some AD Sites are configured with manual Bridgehead Servers. Since KCC can designate a domain controller as a bridgehead server automatically, it is recommended to avoid assigning manual Bridgehead Servers. "  
AD Site Bridgehead Servers Test#CredCode#}
AD Site Bridgehead Servers Test#CredCode#}
AD Site Bridgehead Servers Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Bridgehead Servers Test#CredCode#
AD Site Bridgehead Servers Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName)
AD Site Bridgehead Servers Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Site Bridgehead Servers Test#CredCode#$TotNo=0
AD Site Bridgehead Servers Test#CredCode#$TestStatus=""
AD Site Bridgehead Servers Test#CredCode#$TestText=""
AD Site Bridgehead Servers Test#CredCode#
AD Site Bridgehead Servers Test#CredCode#IF ($Error.count -eq 0)
AD Site Bridgehead Servers Test#CredCode#{
AD Site Bridgehead Servers Test#CredCode#}
AD Site Bridgehead Servers Test#CredCode#else
AD Site Bridgehead Servers Test#CredCode#{
AD Site Bridgehead Servers Test#CredCode#$ErrorOrNot="Yes"
AD Site Bridgehead Servers Test#CredCode#}
AD Site Bridgehead Servers Test#CredCode#ForEach ($Site in $ADSites)
AD Site Bridgehead Servers Test#CredCode#{ 
AD Site Bridgehead Servers Test#CredCode#$SiteName = $Site.Name
AD Site Bridgehead Servers Test#CredCode#$FinStatusNow="Ok"
AD Site Bridgehead Servers Test#CredCode#IF ($Site.PreferredRpcBridgeheadServers.Count -ge 1 -or $Site.PreferredSmtpBridgeheadServers.Count -ge 1)
AD Site Bridgehead Servers Test#CredCode#{
AD Site Bridgehead Servers Test#CredCode#$TotNo++
AD Site Bridgehead Servers Test#CredCode#$FinStatusNow="Check why Manual Bridgehead Servers were assigned to AD Site."
AD Site Bridgehead Servers Test#CredCode#} 
AD Site Bridgehead Servers Test#CredCode#$Thisstr=$Site.Name+","+$Site.BridgeheadServers.Count+","+'"'+$Site.BridgeheadServers.Name+'"'+","+$Site.PreferredRpcBridgeheadServers.Count+","+'"'+$Site.PreferredRpcBridgeheadServers.Name+'"'+","+$Site.PreferredSmtpBridgeheadServers.Count+","+'"'+$Site.PreferredSmtpBridgeheadServers.Name+'"'+","+$FinStatusNow
AD Site Bridgehead Servers Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Bridgehead Servers Test#CredCode#
AD Site Bridgehead Servers Test#CredCode#}
AD Site Bridgehead Servers Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Bridgehead Servers Test#CredCode#{
AD Site Bridgehead Servers Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Bridgehead Servers Test#CredCode#$SumVal = ""
AD Site Bridgehead Servers Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Bridgehead Servers Test#CredCode#}
AD Site Bridgehead Servers Test#CredCode#else
AD Site Bridgehead Servers Test#CredCode#{
AD Site Bridgehead Servers Test#CredCode#IF ($TotNo -eq 0)
AD Site Bridgehead Servers Test#CredCode#{
AD Site Bridgehead Servers Test#CredCode#$TestText = "No Manual Bridgehead Servers were found in AD Sites."
AD Site Bridgehead Servers Test#CredCode#$SumVal = ""
AD Site Bridgehead Servers Test#CredCode#$TestStatus="Passed"
AD Site Bridgehead Servers Test#CredCode#}
AD Site Bridgehead Servers Test#CredCode#else
AD Site Bridgehead Servers Test#CredCode#{
AD Site Bridgehead Servers Test#CredCode#$SumVal = $TotNo
AD Site Bridgehead Servers Test#CredCode#$TestStatus = "High"
AD Site Bridgehead Servers Test#CredCode#$TestText = "Some AD Sites are configured with manual Bridgehead Servers. Since KCC can designate a domain controller as a bridgehead server automatically, it is recommended to avoid assigning manual Bridgehead Servers. "    
AD Site Bridgehead Servers Test#CredCode#}
AD Site Bridgehead Servers Test#CredCode#}
AD Site Bridgehead Servers Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Bridgehead Servers Test#CredCode#
AD Site Link Topology Test#HeaderCode#$ThisString="AD Site Link, Total Sites in Link, Replication Interval,Final Status"
AD Site Link Topology Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Site Link Topology Test#HeaderCode#
AD Site Link Topology Test#CredCode#$TotNo=0
AD Site Link Topology Test#CredCode#$TestStatus=""
AD Site Link Topology Test#CredCode#$TestText=""
AD Site Link Topology Test#CredCode#$SumVal=0
AD Site Link Topology Test#CredCode#$R=Get-ADReplicationSiteLink -Credential $Creds -Filter *
AD Site Link Topology Test#CredCode#IF ($Error.count -eq 0)
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#else
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#$ErrorOrNot="Yes"
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#ForEach ($All in $R)
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#$TotSites=$All.SitesIncluded.Count
AD Site Link Topology Test#CredCode#$SiteLinkName = $All.Name
AD Site Link Topology Test#CredCode#$RpInt = $All.ReplicationFrequencyInMinutes
AD Site Link Topology Test#CredCode#IF ($All.SitesIncluded.Count -ge 3)
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#
AD Site Link Topology Test#CredCode#$TotNo++
AD Site Link Topology Test#CredCode#$ThisStr=$SiteLinkName+","+$TotSites+","+$RpInt+",Not Ok"
AD Site Link Topology Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#else
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#$ThisStr=$SiteLinkName+","+$TotSites+","+$RpInt+",Ok"
AD Site Link Topology Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Link Topology Test#CredCode#$SumVal = ""
AD Site Link Topology Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#else
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#IF ($TotNo -eq 0)
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#$TestText = "All Active Directory Site Links contain two or lesser Active Directory Sites."
AD Site Link Topology Test#CredCode#$SumVal = ""
AD Site Link Topology Test#CredCode#$TestStatus="Passed"
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#else
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#$SumVal = $TotNo
AD Site Link Topology Test#CredCode#$TestStatus = "High"
AD Site Link Topology Test#CredCode#$TestText = "Some Active Directory Site Links contain three or more Active Directory Sites. It is recommended to keep only two sites in a Site Link."
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Link Topology Test#CredCode#
AD Site Link Topology Test#CredCode#
AD Site Link Topology Test#CredCode#$TotNo=0
AD Site Link Topology Test#CredCode#$TestStatus=""
AD Site Link Topology Test#CredCode#$TestText=""
AD Site Link Topology Test#CredCode#$SumVal=0
AD Site Link Topology Test#CredCode#$R=Get-ADReplicationSiteLink -Filter *
AD Site Link Topology Test#CredCode#IF ($Error.count -eq 0)
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#else
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#$ErrorOrNot="Yes"
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#ForEach ($All in $R)
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#$TotSites=$All.SitesIncluded.Count
AD Site Link Topology Test#CredCode#$SiteLinkName = $All.Name
AD Site Link Topology Test#CredCode#$RpInt = $All.ReplicationFrequencyInMinutes
AD Site Link Topology Test#CredCode#IF ($All.SitesIncluded.Count -ge 3)
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#
AD Site Link Topology Test#CredCode#$TotNo++
AD Site Link Topology Test#CredCode#$ThisStr=$SiteLinkName+","+$TotSites+","+$RpInt+",Not Ok"
AD Site Link Topology Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#else
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#$ThisStr=$SiteLinkName+","+$TotSites+","+$RpInt+",Ok"
AD Site Link Topology Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Link Topology Test#CredCode#$SumVal = ""
AD Site Link Topology Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#else
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#IF ($TotNo -eq 0)
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#$TestText = "All Active Directory Site Links contain two Active Directory Sites."
AD Site Link Topology Test#CredCode#$SumVal = ""
AD Site Link Topology Test#CredCode#$TestStatus="Passed"
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#else
AD Site Link Topology Test#CredCode#{
AD Site Link Topology Test#CredCode#$SumVal = $TotNo
AD Site Link Topology Test#CredCode#$TestStatus = "High"
AD Site Link Topology Test#CredCode#$TestText = "Some Active Directory Site Links contain three or more Active Directory Sites. It is recommended to keep only two sites in a Site Link."
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#}
AD Site Link Topology Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Link Topology Test#CredCode#
AD Site Link Topology Test#CredCode#
AD Site Replication Interval Test#HeaderCode#$ThisString="AD Site Link, Total Sites In Link, Replication Interval, Final Status"
AD Site Replication Interval Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Site Replication Interval Test#HeaderCode#
AD Site Replication Interval Test#CredCode#$TotNo=0
AD Site Replication Interval Test#CredCode#$TestStatus=""
AD Site Replication Interval Test#CredCode#$TestText=""
AD Site Replication Interval Test#CredCode#$SumVal=0
AD Site Replication Interval Test#CredCode#$R=Get-ADReplicationSiteLink -Filter * -Credential $Creds
AD Site Replication Interval Test#CredCode#IF ($Error.count -eq 0)
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#else
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#$ErrorOrNot="Yes"
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#ForEach ($All in $R)
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#$RepInt=$All.ReplicationFrequencyInMinutes
AD Site Replication Interval Test#CredCode#IF ($RepInt -ge 180)
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#$TotSites=$All.SitesIncluded.Count
AD Site Replication Interval Test#CredCode#$SiteLinkName = $All.Name
AD Site Replication Interval Test#CredCode#$RpInt = $All.ReplicationFrequencyInMinutes
AD Site Replication Interval Test#CredCode#
AD Site Replication Interval Test#CredCode#$TotNo++
AD Site Replication Interval Test#CredCode#$ThisStr=$SiteLinkName+","+$TotSites+","+$RpInt+", Not Ok"
AD Site Replication Interval Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#else
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#$ThisStr=$SiteLinkName+","+$TotSites+","+$RpInt+", Ok"
AD Site Replication Interval Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Replication Interval Test#CredCode#$SumVal = ""
AD Site Replication Interval Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#else
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#IF ($TotNo -eq 0)
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#$TestText = "All Active Directory Site Links are configured to replicate changes frequently."
AD Site Replication Interval Test#CredCode#$SumVal = ""
AD Site Replication Interval Test#CredCode#$TestStatus="Passed"
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#else
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#$SumVal = $TotNo
AD Site Replication Interval Test#CredCode#$TestStatus = "High"
AD Site Replication Interval Test#CredCode#$TestText = "Some Active Directory Site Links are using non-standard Replication Intervals. AD Sites have been configured to use 180 as the replication interval. It is recommended to configure a lower replication internval for sites that process changes frequently. "
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Replication Interval Test#CredCode#
AD Site Replication Interval Test#CredCode#$TotNo=0
AD Site Replication Interval Test#CredCode#$TestStatus=""
AD Site Replication Interval Test#CredCode#$TestText=""
AD Site Replication Interval Test#CredCode#$SumVal=0
AD Site Replication Interval Test#CredCode#$R=Get-ADReplicationSiteLink -Filter *
AD Site Replication Interval Test#CredCode#IF ($Error.count -eq 0)
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#else
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#$ErrorOrNot="Yes"
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#ForEach ($All in $R)
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#$RepInt=$All.ReplicationFrequencyInMinutes
AD Site Replication Interval Test#CredCode#IF ($RepInt -ge 180)
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#$TotSites=$All.SitesIncluded.Count
AD Site Replication Interval Test#CredCode#$SiteLinkName = $All.Name
AD Site Replication Interval Test#CredCode#$RpInt = $All.ReplicationFrequencyInMinutes
AD Site Replication Interval Test#CredCode#
AD Site Replication Interval Test#CredCode#$TotNo++
AD Site Replication Interval Test#CredCode#$ThisStr=$SiteLinkName+","+$TotSites+","+$RpInt+", Not Ok"
AD Site Replication Interval Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#else
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#$ThisStr=$SiteLinkName+","+$TotSites+","+$RpInt+", Ok"
AD Site Replication Interval Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Replication Interval Test#CredCode#$SumVal = ""
AD Site Replication Interval Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#else
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#IF ($TotNo -eq 0)
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#$TestText = "All Active Directory Site Links are configured to replicate changes frequently."
AD Site Replication Interval Test#CredCode#$SumVal = ""
AD Site Replication Interval Test#CredCode#$TestStatus="Passed"
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#else
AD Site Replication Interval Test#CredCode#{
AD Site Replication Interval Test#CredCode#$SumVal = $TotNo
AD Site Replication Interval Test#CredCode#$TestStatus = "High"
AD Site Replication Interval Test#CredCode#$TestText = "Some Active Directory Site Links are using non-standard Replication Intervals. AD Sites have been configured to use 180 as the replication interval. It is recommended to configure a lower replication internval for sites that process changes frequently. "
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#}
AD Site Replication Interval Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Replication Interval Test#CredCode#
AD Site Redundancy Test#HeaderCode#$ThisString="AD Site, Total Servers,Location, Final Status"
AD Site Redundancy Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Site Redundancy Test#HeaderCode#
AD Site Redundancy Test#CredCode#$RPass=$Creds.GetNetworkCredential().Password
AD Site Redundancy Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName,$CredUserToUse,$RPass)
AD Site Redundancy Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Site Redundancy Test#CredCode#$TotNo=0
AD Site Redundancy Test#CredCode#$TestStatus=""
AD Site Redundancy Test#CredCode#$TestText=""
AD Site Redundancy Test#CredCode#$SumVal=""
AD Site Redundancy Test#CredCode#IF ($Error.count -eq 0)
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#}
AD Site Redundancy Test#CredCode#else
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#$ErrorOrNot="Yes"
AD Site Redundancy Test#CredCode#}
AD Site Redundancy Test#CredCode#ForEach ($Site in $ADSites)
AD Site Redundancy Test#CredCode#{ 
AD Site Redundancy Test#CredCode#[array] $SiteServers = $Site.Servers
AD Site Redundancy Test#CredCode#$SiteName = $Site.Name
AD Site Redundancy Test#CredCode#$SiteLocation = $Site.Location
AD Site Redundancy Test#CredCode#
AD Site Redundancy Test#CredCode#IF ($SiteServers.Count -eq 0 -or $SiteServers.Count -le 1)
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#$TotNo++
AD Site Redundancy Test#CredCode#$Thisstr=$Site.Name+","+$SiteServers.Count+","+'"'+$SiteLocation+'"'+", Not Ok"
AD Site Redundancy Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Redundancy Test#CredCode#} 
AD Site Redundancy Test#CredCode#else
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#$Thisstr=$Site.Name+","+$SiteServers.Count+","+'"'+$SiteLocation+'"'+", Ok"
AD Site Redundancy Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Redundancy Test#CredCode#}
AD Site Redundancy Test#CredCode#}
AD Site Redundancy Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Redundancy Test#CredCode#$SumVal = ""
AD Site Redundancy Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Redundancy Test#CredCode#}
AD Site Redundancy Test#CredCode#else
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#IF ($TotNo -eq 0)
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#$TestText = "All AD Sites have at least two or more Domain Controllers for redundency and load balancing."    
AD Site Redundancy Test#CredCode#$TestStatus="Passed"
AD Site Redundancy Test#CredCode#$SumVal=""
AD Site Redundancy Test#CredCode#}
AD Site Redundancy Test#CredCode#else
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#$SumVal = $TotNo
AD Site Redundancy Test#CredCode#$TestStatus="High"
AD Site Redundancy Test#CredCode#$TestText = "Some AD Sites have only one Domain Controller deployed. It is recommended to have at least two domain controllers deployed in an AD Site to avoid clients reaching out to remote domain controllers for authentication."}
AD Site Redundancy Test#CredCode#}
AD Site Redundancy Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Redundancy Test#CredCode#
AD Site Redundancy Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName)
AD Site Redundancy Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Site Redundancy Test#CredCode#$TotNo=0
AD Site Redundancy Test#CredCode#$TestStatus=""
AD Site Redundancy Test#CredCode#$TestText=""
AD Site Redundancy Test#CredCode#$SumVal=""
AD Site Redundancy Test#CredCode#IF ($Error.count -eq 0)
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#}
AD Site Redundancy Test#CredCode#else
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#$ErrorOrNot="Yes"
AD Site Redundancy Test#CredCode#}
AD Site Redundancy Test#CredCode#ForEach ($Site in $ADSites)
AD Site Redundancy Test#CredCode#{ 
AD Site Redundancy Test#CredCode#[array] $SiteServers = $Site.Servers
AD Site Redundancy Test#CredCode#$SiteName = $Site.Name
AD Site Redundancy Test#CredCode#$SiteLocation = $Site.Location
AD Site Redundancy Test#CredCode#
AD Site Redundancy Test#CredCode#IF ($SiteServers.Count -eq 0 -or $SiteServers.Count -le 1)
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#$TotNo++
AD Site Redundancy Test#CredCode#$Thisstr=$Site.Name+","+$SiteServers.Count+","+'"'+$SiteLocation+'"'+", Not Ok"
AD Site Redundancy Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Redundancy Test#CredCode#} 
AD Site Redundancy Test#CredCode#else
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#$Thisstr=$Site.Name+","+$SiteServers.Count+","+'"'+$SiteLocation+'"'+", Ok"
AD Site Redundancy Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Redundancy Test#CredCode#}
AD Site Redundancy Test#CredCode#}
AD Site Redundancy Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Redundancy Test#CredCode#$SumVal = ""
AD Site Redundancy Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Redundancy Test#CredCode#}
AD Site Redundancy Test#CredCode#else
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#IF ($TotNo -eq 0)
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#$TestText = "All AD Sites have at least two or more Domain Controllers for redundency and load balancing."    
AD Site Redundancy Test#CredCode#$TestStatus="Passed"
AD Site Redundancy Test#CredCode#$SumVal=""
AD Site Redundancy Test#CredCode#}
AD Site Redundancy Test#CredCode#else
AD Site Redundancy Test#CredCode#{
AD Site Redundancy Test#CredCode#$SumVal = $TotNo
AD Site Redundancy Test#CredCode#$TestStatus="High"
AD Site Redundancy Test#CredCode#$TestText = "Some AD Sites have only one Domain Controller deployed. It is recommended to have at least two domain controllers deployed in an AD Site to avoid clients reaching out to remote domain controllers for authentication."}
AD Site Redundancy Test#CredCode#}
AD Site Redundancy Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Redundancy Test#CredCode#
AD Site Not In Site Link Test#HeaderCode#$ThisString="AD Site Link, Current Site Links, Site Location, Final Status"
AD Site Not In Site Link Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Site Not In Site Link Test#HeaderCode#
AD Site Not In Site Link Test#CredCode#$RPass=$Creds.GetNetworkCredential().Password
AD Site Not In Site Link Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName,$CredUserToUse,$RPass)
AD Site Not In Site Link Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Site Not In Site Link Test#CredCode#IF ($Error.count -eq 0)
AD Site Not In Site Link Test#CredCode#{
AD Site Not In Site Link Test#CredCode#}
AD Site Not In Site Link Test#CredCode#else
AD Site Not In Site Link Test#CredCode#{
AD Site Not In Site Link Test#CredCode#$ErrorOrNot="Yes"
AD Site Not In Site Link Test#CredCode#}
AD Site Not In Site Link Test#CredCode#$TotNo=0
AD Site Not In Site Link Test#CredCode#$TestStatus=""
AD Site Not In Site Link Test#CredCode#$TestText=""
AD Site Not In Site Link Test#CredCode#$SumVal=""
AD Site Not In Site Link Test#CredCode#ForEach ($Site in $ADSites)
AD Site Not In Site Link Test#CredCode#{ 
AD Site Not In Site Link Test#CredCode#$SiteName = $Site.Name
AD Site Not In Site Link Test#CredCode#$SiteLocation = $Site.Location
AD Site Not In Site Link Test#CredCode#[array] $SiteLinks = $Site.SiteLinks    
AD Site Not In Site Link Test#CredCode#
AD Site Not In Site Link Test#CredCode#IF (!$SiteLinks)
AD Site Not In Site Link Test#CredCode#{
AD Site Not In Site Link Test#CredCode#$TotNo++
AD Site Not In Site Link Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+",, Not Ok"
AD Site Not In Site Link Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Not In Site Link Test#CredCode#} 
AD Site Not In Site Link Test#CredCode#else
AD Site Not In Site Link Test#CredCode#{
AD Site Not In Site Link Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLinks+'"'+'"'+$SiteLocation+'"'+", Ok"
AD Site Not In Site Link Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Not In Site Link Test#CredCode#}
AD Site Not In Site Link Test#CredCode#}
AD Site Not In Site Link Test#CredCode#IF ($TotNo -eq 0)
AD Site Not In Site Link Test#CredCode#{
AD Site Not In Site Link Test#CredCode#$TestText = "All AD Sites are associated with a Site Link."
AD Site Not In Site Link Test#CredCode#$TestStatus="Passed"
AD Site Not In Site Link Test#CredCode#}
AD Site Not In Site Link Test#CredCode#else
AD Site Not In Site Link Test#CredCode#{
AD Site Not In Site Link Test#CredCode#$SumVal = $TotNo
AD Site Not In Site Link Test#CredCode#$TestStatus="High"
AD Site Not In Site Link Test#CredCode#$TestText="Some AD Sites are not associated with a Site Link. Before KCC can generate a replication topology for Active Directory Forest all AD Sites must be associated with a Site Link. Not associating an AD Site with a Site Link may isolate AD Site domain controllers from replication."}
AD Site Not In Site Link Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Not In Site Link Test#CredCode#{
AD Site Not In Site Link Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Not In Site Link Test#CredCode#$SumVal = ""
AD Site Not In Site Link Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Not In Site Link Test#CredCode#}
AD Site Not In Site Link Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Not In Site Link Test#CredCode#
AD Site Not In Site Link Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName)
AD Site Not In Site Link Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Site Not In Site Link Test#CredCode#IF ($Error.count -eq 0)
AD Site Not In Site Link Test#CredCode#{
AD Site Not In Site Link Test#CredCode#}
AD Site Not In Site Link Test#CredCode#else
AD Site Not In Site Link Test#CredCode#{
AD Site Not In Site Link Test#CredCode#$ErrorOrNot="Yes"
AD Site Not In Site Link Test#CredCode#}
AD Site Not In Site Link Test#CredCode#$TotNo=0
AD Site Not In Site Link Test#CredCode#$TestStatus=""
AD Site Not In Site Link Test#CredCode#$TestText=""
AD Site Not In Site Link Test#CredCode#$SumVal=""
AD Site Not In Site Link Test#CredCode#ForEach ($Site in $ADSites)
AD Site Not In Site Link Test#CredCode#{ 
AD Site Not In Site Link Test#CredCode#$SiteName = $Site.Name
AD Site Not In Site Link Test#CredCode#$SiteLocation = $Site.Location
AD Site Not In Site Link Test#CredCode#[array] $SiteLinks = $Site.SiteLinks    
AD Site Not In Site Link Test#CredCode#
AD Site Not In Site Link Test#CredCode#IF (!$SiteLinks)
AD Site Not In Site Link Test#CredCode#{
AD Site Not In Site Link Test#CredCode#$TotNo++
AD Site Not In Site Link Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+",, Not Ok"
AD Site Not In Site Link Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Not In Site Link Test#CredCode#} 
AD Site Not In Site Link Test#CredCode#else
AD Site Not In Site Link Test#CredCode#{
AD Site Not In Site Link Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLinks+'"'+'"'+$SiteLocation+'"'+", Ok"
AD Site Not In Site Link Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Not In Site Link Test#CredCode#}
AD Site Not In Site Link Test#CredCode#}
AD Site Not In Site Link Test#CredCode#IF ($TotNo -eq 0)
AD Site Not In Site Link Test#CredCode#{
AD Site Not In Site Link Test#CredCode#$TestText = "All AD Sites are associated with a Site Link."
AD Site Not In Site Link Test#CredCode#$TestStatus="Passed"
AD Site Not In Site Link Test#CredCode#}
AD Site Not In Site Link Test#CredCode#else
AD Site Not In Site Link Test#CredCode#{
AD Site Not In Site Link Test#CredCode#$SumVal = $TotNo
AD Site Not In Site Link Test#CredCode#$TestStatus="High"
AD Site Not In Site Link Test#CredCode#$TestText="Some AD Sites are not associated with a Site Link. Before KCC can generate a replication topology for Active Directory Forest all AD Sites must be associated with a Site Link. Not associating an AD Site with a Site Link may isolate AD Site domain controllers from replication."
AD Site Not In Site Link Test#CredCode#}
AD Site Not In Site Link Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Not In Site Link Test#CredCode#{
AD Site Not In Site Link Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Not In Site Link Test#CredCode#$SumVal = ""
AD Site Not In Site Link Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Not In Site Link Test#CredCode#}
AD Site Not In Site Link Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Not In Site Link Test#CredCode#
Get GPO Applied Info#HeaderCode#$ThisStr="GPO Name, Applies To"
Get GPO Applied Info#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
Get GPO Applied Info#HeaderCode#
Get GPO Applied Info#CredCode#Import-Module GroupPolicy
Get GPO Applied Info#CredCode#
Get GPO Applied Info#CredCode#Get-GPO -All | %{
Get GPO Applied Info#CredCode#    $gpoName = $_.displayName
Get GPO Applied Info#CredCode#    [int]$counter = 0
Get GPO Applied Info#CredCode#    $security = $_.GetSecurityInfo()
Get GPO Applied Info#CredCode#
Get GPO Applied Info#CredCode#    ForEach ($Item in $security)
Get GPO Applied Info#CredCode#    {
Get GPO Applied Info#CredCode#        $DoingWhat = $Item.Permission
Get GPO Applied Info#CredCode#        IF ($Doingwhat -eq "GpoApply")
Get GPO Applied Info#CredCode#        {
Get GPO Applied Info#CredCode#            $ToAppObj = $Item.Trustee.Name
Get GPO Applied Info#CredCode#
Get GPO Applied Info#CredCode#            $STRNow = $gpoName+","+$ToAppObj
Get GPO Applied Info#CredCode#            Add-Content $TestCSVFile $STRNow
Get GPO Applied Info#CredCode#        }
Get GPO Applied Info#CredCode#    }    
Get GPO Applied Info#CredCode#}
Get GPO Applied Info#CredCode#
Get GPO Applied Info#CredCode#$TestText = "GPO Application report was retrieved."
Get GPO Applied Info#CredCode#$TestStatus="Completed"
Get GPO Applied Info#CredCode#$SumVal = ""
Get GPO Applied Info#CredCode#
Get GPO Applied Info#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Get GPO Applied Info#CredCode#
Get GPO Applied Info#CredCode#Import-Module GroupPolicy
Get GPO Applied Info#CredCode#$AnyGap = "No"
Get GPO Applied Info#CredCode#Get-GPO -All | %{
Get GPO Applied Info#CredCode#    $gpoName = $_.displayName
Get GPO Applied Info#CredCode#    [int]$counter = 0
Get GPO Applied Info#CredCode#    $security = $_.GetSecurityInfo()
Get GPO Applied Info#CredCode#
Get GPO Applied Info#CredCode#    ForEach ($Item in $security)
Get GPO Applied Info#CredCode#    {
Get GPO Applied Info#CredCode#        $DoingWhat = $Item.Permission
Get GPO Applied Info#CredCode#        IF ($Doingwhat -eq "GpoApply")
Get GPO Applied Info#CredCode#        {
Get GPO Applied Info#CredCode#            $ToAppObj = $Item.Trustee.Name
Get GPO Applied Info#CredCode#
Get GPO Applied Info#CredCode#            IF ($ToAppObj -eq $null -or $ToAppObj -eq "")
Get GPO Applied Info#CredCode#            {
Get GPO Applied Info#CredCode#                $AnyGap = "Yes"
Get GPO Applied Info#CredCode#            }
Get GPO Applied Info#CredCode#            $STRNow = $gpoName+","+$ToAppObj
Get GPO Applied Info#CredCode#            Add-Content $TestCSVFile $STRNow
Get GPO Applied Info#CredCode#        }
Get GPO Applied Info#CredCode#    }    
Get GPO Applied Info#CredCode#}
Get GPO Applied Info#CredCode#
Get GPO Applied Info#CredCode#IF ($AnyGap -eq "Yes")
Get GPO Applied Info#CredCode#{
Get GPO Applied Info#CredCode#  $TestStatus="High"
Get GPO Applied Info#CredCode#}
Get GPO Applied Info#CredCode#else
Get GPO Applied Info#CredCode#{
Get GPO Applied Info#CredCode#  $TestStatus="Passed"
Get GPO Applied Info#CredCode#}
Get GPO Applied Info#CredCode#
Get GPO Applied Info#CredCode#
Get GPO Applied Info#CredCode#$TestText = "GPO Application report was retrieved."
Get GPO Applied Info#CredCode#$TestStatus="Completed"
Get GPO Applied Info#CredCode#$SumVal = ""
Get GPO Applied Info#CredCode#
Get GPO Applied Info#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Get GPO Applied Info#CredCode#
AD Forest and Domain Functional Level Test#HeaderCode#$ThisStr="Item, Value,Final Status"
AD Forest and Domain Functional Level Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
AD Forest and Domain Functional Level Test#HeaderCode#
AD Forest and Domain Functional Level Test#HeaderCode#
AD Forest and Domain Functional Level Test#HeaderCode#
AD Forest and Domain Functional Level Test#CredCode#$TestStatus="Passed"
AD Forest and Domain Functional Level Test#CredCode#$TestText = ""
AD Forest and Domain Functional Level Test#CredCode#$sumVal=0
AD Forest and Domain Functional Level Test#CredCode#$ReachOrNot = "Yes"
AD Forest and Domain Functional Level Test#CredCode#$AnyGap = "No"
AD Forest and Domain Functional Level Test#CredCode#$TotNo = 0
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#$RForestNow=Get-ADForest -Identity $CurForestName -Credential $Creds
AD Forest and Domain Functional Level Test#CredCode#$RForestMode = $RForestNow.ForestMode
AD Forest and Domain Functional Level Test#CredCode#$STRNew = "Forest Functional Level: $CurForestName"+","+$RForestMode+",Ok"
AD Forest and Domain Functional Level Test#CredCode#Add-Content "$TestCSVFile" $STRNew
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
AD Forest and Domain Functional Level Test#CredCode#{
AD Forest and Domain Functional Level Test#CredCode#$ThisItemNow = Get-ADDomain -Identity $ThisDomain -Credential $Creds
AD Forest and Domain Functional Level Test#CredCode#$DomainModeNow = $ThisItemNow.DomainMode
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#$FinStatus="Ok"
AD Forest and Domain Functional Level Test#CredCode#IF ($DomainModeNow -eq "Windows2003Domain")
AD Forest and Domain Functional Level Test#CredCode#{
AD Forest and Domain Functional Level Test#CredCode#$AnyGap = "Yes"
AD Forest and Domain Functional Level Test#CredCode#$FinStatus = "Please raise Domain Functional Level to Windows Server 2008 R2 or Windows Server 2012."
AD Forest and Domain Functional Level Test#CredCode#}
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#$FinalVal = "Domain Functional Level: $ThisDomain"+","+$DomainModeNow+","+$FinStatus
AD Forest and Domain Functional Level Test#CredCode#Add-Content "$TestCSVFile" $FinalVal
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#}
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#IF ($AnyGap -eq "Yes")
AD Forest and Domain Functional Level Test#CredCode#{
AD Forest and Domain Functional Level Test#CredCode#$TestStatus="Medium"
AD Forest and Domain Functional Level Test#CredCode#$TestText = "Forest and Domain Functional Levels are still operating at Windows 2003."
AD Forest and Domain Functional Level Test#CredCode#$SumVal = $TotNo
AD Forest and Domain Functional Level Test#CredCode#}
AD Forest and Domain Functional Level Test#CredCode#IF ($AnyGap -eq "No")
AD Forest and Domain Functional Level Test#CredCode#{
AD Forest and Domain Functional Level Test#CredCode#$TestStatus="Passed"
AD Forest and Domain Functional Level Test#CredCode#$TestText = "Forest and Domain Functional Levels are operating Windows Server 2008 or higher levels."
AD Forest and Domain Functional Level Test#CredCode#$SumVal = ""
AD Forest and Domain Functional Level Test#CredCode#}
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#$TestStatus="Passed"
AD Forest and Domain Functional Level Test#CredCode#$TestText = ""
AD Forest and Domain Functional Level Test#CredCode#$sumVal=0
AD Forest and Domain Functional Level Test#CredCode#$ReachOrNot = "Yes"
AD Forest and Domain Functional Level Test#CredCode#$AnyGap = "No"
AD Forest and Domain Functional Level Test#CredCode#$TotNo = 0
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#$RForestNow=Get-ADForest -Identity $CurForestName
AD Forest and Domain Functional Level Test#CredCode#$RForestMode = $RForestNow.ForestMode
AD Forest and Domain Functional Level Test#CredCode#$STRNew = "Forest Functional Level: $CurForestName"+","+$RForestMode+",Ok"
AD Forest and Domain Functional Level Test#CredCode#Add-Content "$TestCSVFile" $STRNew
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
AD Forest and Domain Functional Level Test#CredCode#{
AD Forest and Domain Functional Level Test#CredCode#$ThisItemNow = Get-ADDomain -Identity $ThisDomain
AD Forest and Domain Functional Level Test#CredCode#$DomainModeNow = $ThisItemNow.DomainMode
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#$FinStatus="Ok"
AD Forest and Domain Functional Level Test#CredCode#IF ($DomainModeNow -eq "Windows2003Domain")
AD Forest and Domain Functional Level Test#CredCode#{
AD Forest and Domain Functional Level Test#CredCode#$AnyGap = "Yes"
AD Forest and Domain Functional Level Test#CredCode#$FinStatus = "Please raise Domain Functional Level to Windows Server 2008 R2 or Windows Server 2012."
AD Forest and Domain Functional Level Test#CredCode#}
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#$FinalVal = "Domain Functional Level: $ThisDomain"+","+$DomainModeNow+","+$FinStatus
AD Forest and Domain Functional Level Test#CredCode#Add-Content "$TestCSVFile" $FinalVal
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#}
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#IF ($AnyGap -eq "Yes")
AD Forest and Domain Functional Level Test#CredCode#{
AD Forest and Domain Functional Level Test#CredCode#$TestStatus="Medium"
AD Forest and Domain Functional Level Test#CredCode#$TestText = "Forest and Domain Functional Levels are still operating at Windows 2003."
AD Forest and Domain Functional Level Test#CredCode#$SumVal = $TotNo
AD Forest and Domain Functional Level Test#CredCode#}
AD Forest and Domain Functional Level Test#CredCode#IF ($AnyGap -eq "No")
AD Forest and Domain Functional Level Test#CredCode#{
AD Forest and Domain Functional Level Test#CredCode#$TestStatus="Passed"
AD Forest and Domain Functional Level Test#CredCode#$TestText = "Forest and Domain Functional Levels are operating Windows Server 2008 or higher levels."
AD Forest and Domain Functional Level Test#CredCode#$SumVal = ""
AD Forest and Domain Functional Level Test#CredCode#}
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#
AD Forest and Domain Functional Level Test#CredCode#
Domain OU Protection Test#HeaderCode#$ThisStr="OU Name, OU Path, In AD Domain, Final Status"
Domain OU Protection Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
Domain OU Protection Test#HeaderCode#
Domain OU Protection Test#HeaderCode#
Domain OU Protection Test#HeaderCode#
Domain OU Protection Test#HeaderCode#
Domain OU Protection Test#HeaderCode#
Domain OU Protection Test#CredCode#$TotNo=0
Domain OU Protection Test#CredCode#$ItemCount=0
Domain OU Protection Test#CredCode#$TestText = ""
Domain OU Protection Test#CredCode#$TestStatus=""
Domain OU Protection Test#CredCode#$SumVal = ""
Domain OU Protection Test#CredCode#$AnyGap = "No"
Domain OU Protection Test#CredCode#$ErrorOrNot = "No"
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain OU Protection Test#CredCode#{ 
Domain OU Protection Test#CredCode#$Error.Clear()
Domain OU Protection Test#CredCode#$RAllOU = Get-ADOrganizationalUnit -Credential $creds -Server $ThisDomain -filter * -Properties * | where {$_.ProtectedFromAccidentalDeletion -eq $false}
Domain OU Protection Test#CredCode#IF ($Error.count -eq 0)
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#$TotOUNow = $RAllOU.Count
Domain OU Protection Test#CredCode#IF ($TotOUNow -ne 0)
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#$AnyGap = "Yes"
Domain OU Protection Test#CredCode#ForEach ($Item in $RAllOU)
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#$FinalSTR = '"'+$Item.Name+'"'+","+'"'+$Item.DistinguishedName+'"'+","+$ThisDomain+",Not Ok"
Domain OU Protection Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#else
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#$ErrorOrNot = "Yes"
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#$TestText = "Some errors occured when executing Dynamic Pack."
Domain OU Protection Test#CredCode#$SumVal = ""
Domain OU Protection Test#CredCode#$TestStatus="Completed with Errors"
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#else
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#IF ($AnyGap -eq "Yes")
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#$TestText = "Some Organizational Units have not been protected from Accidental deletion. Please ensure Accidental Deletion is configured for all OUs."
Domain OU Protection Test#CredCode#$SumVal = $TotOUNow
Domain OU Protection Test#CredCode#$TestStatus="High"
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#IF ($AnyGap -eq "No")
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#$TestText = "All Organizational units have been configured with Accidental Deletion setting."
Domain OU Protection Test#CredCode#$SumVal = ""
Domain OU Protection Test#CredCode#$TestStatus="Passed"
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#$TotNo=0
Domain OU Protection Test#CredCode#$ItemCount=0
Domain OU Protection Test#CredCode#$TestText = ""
Domain OU Protection Test#CredCode#$TestStatus=""
Domain OU Protection Test#CredCode#$SumVal = ""
Domain OU Protection Test#CredCode#$AnyGap = "No"
Domain OU Protection Test#CredCode#$ErrorOrNot = "No"
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain OU Protection Test#CredCode#{ 
Domain OU Protection Test#CredCode#$Error.Clear()
Domain OU Protection Test#CredCode#$RAllOU = Get-ADOrganizationalUnit -Server $ThisDomain -filter * -Properties * | where {$_.ProtectedFromAccidentalDeletion -eq $false}
Domain OU Protection Test#CredCode#IF ($Error.count -eq 0)
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#$TotOUNow = $RAllOU.Count
Domain OU Protection Test#CredCode#IF ($TotOUNow -ne 0)
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#$AnyGap = "Yes"
Domain OU Protection Test#CredCode#ForEach ($Item in $RAllOU)
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#$FinalSTR = '"'+$Item.Name+'"'+","+'"'+$Item.DistinguishedName+'"'+","+$ThisDomain+",Not Ok"
Domain OU Protection Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#else
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#$ErrorOrNot = "Yes"
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#$TestText = "Some errors occured when executing Dynamic Pack."
Domain OU Protection Test#CredCode#$SumVal = ""
Domain OU Protection Test#CredCode#$TestStatus="Completed with Errors"
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#else
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#IF ($AnyGap -eq "Yes")
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#$TestText = "Some Organizational Units have not been protected from Accidental deletion. Please ensure Accidental Deletion is configured for all OUs."
Domain OU Protection Test#CredCode#$SumVal = $TotOUNow
Domain OU Protection Test#CredCode#$TestStatus="High"
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#IF ($AnyGap -eq "No")
Domain OU Protection Test#CredCode#{
Domain OU Protection Test#CredCode#$TestText = "All Organizational units have been configured with Accidental Deletion setting."
Domain OU Protection Test#CredCode#$SumVal = ""
Domain OU Protection Test#CredCode#$TestStatus="Passed"
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#}
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#
Domain OU Protection Test#CredCode#
Domain Controller DNS Loopback Test#HeaderCode#$ThisString="Domain Controller,Connection,Command Status, Network Adapter Description, IP Address,Subnet,Default Gateway,DNS Servers, Final Status"
Domain Controller DNS Loopback Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain Controller DNS Loopback Test#HeaderCode#
Domain Controller DNS Loopback Test#HeaderCode#
Domain Controller DNS Loopback Test#HeaderCode#
Domain Controller DNS Loopback Test#CredCode#$TotNo=0
Domain Controller DNS Loopback Test#CredCode#$ItemCount=0
Domain Controller DNS Loopback Test#CredCode#$TestText = ""
Domain Controller DNS Loopback Test#CredCode#$TestStatus=""
Domain Controller DNS Loopback Test#CredCode#$SumVal = ""
Domain Controller DNS Loopback Test#CredCode#$AnyGap = "No"
Domain Controller DNS Loopback Test#CredCode#$ErrorOrNot = "No"
Domain Controller DNS Loopback Test#CredCode#$AnyOneOk = "No"
Domain Controller DNS Loopback Test#CredCode#$TotDCsInError = 0
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller DNS Loopback Test#CredCode#{
Domain Controller DNS Loopback Test#CredCode#    $DCConError = "Ok"
Domain Controller DNS Loopback Test#CredCode#    $DCConStatus = "Ok"
Domain Controller DNS Loopback Test#CredCode#    $ProceedOrNot = "Yes"
Domain Controller DNS Loopback Test#CredCode#    $Error.Clear()
Domain Controller DNS Loopback Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller DNS Loopback Test#CredCode#    IF ($Error.Count -ne 0)
Domain Controller DNS Loopback Test#CredCode#    {
Domain Controller DNS Loopback Test#CredCode#        $ProceedOrNot = "No"
Domain Controller DNS Loopback Test#CredCode#        $TotDCsInError++
Domain Controller DNS Loopback Test#CredCode#        $DCConError = $Error[0].Exception.Message
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller DNS Loopback Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Loopback Test#CredCode#    }
Domain Controller DNS Loopback Test#CredCode#    
Domain Controller DNS Loopback Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
Domain Controller DNS Loopback Test#CredCode#    {
Domain Controller DNS Loopback Test#CredCode#        $ComConError="Ok"
Domain Controller DNS Loopback Test#CredCode#        $Error.Clear()
Domain Controller DNS Loopback Test#CredCode#        $nwINFO = Get-WmiObject -Credential $Creds -ComputerName $ItemName Win32_NetworkAdapterConfiguration | Where-Object { $_.IPAddress -ne $null }
Domain Controller DNS Loopback Test#CredCode#        IF ($Error.count -eq 0)
Domain Controller DNS Loopback Test#CredCode#        {
Domain Controller DNS Loopback Test#CredCode#            $AnyOneOk="Yes"
Domain Controller DNS Loopback Test#CredCode#            foreach ($NIC in $nwINFO)
Domain Controller DNS Loopback Test#CredCode#            {
Domain Controller DNS Loopback Test#CredCode#                $nwServerName = $NIC.DNSHostName 
Domain Controller DNS Loopback Test#CredCode#                $nwDescrip = $NIC.Description 
Domain Controller DNS Loopback Test#CredCode#                $nwIPADDR = $NIC.IPAddress 
Domain Controller DNS Loopback Test#CredCode#                $nwSUBNET = $NIC.IpSubnet 
Domain Controller DNS Loopback Test#CredCode#                $nwGateWay = $NIC.DefaultIPGateway 
Domain Controller DNS Loopback Test#CredCode#                $nwMacADD = $NIC.MACAddress 
Domain Controller DNS Loopback Test#CredCode#                $nwDNS = $NIC.DNSServerSearchOrder 
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#                $FinStatus="Ok"
Domain Controller DNS Loopback Test#CredCode#                $IsLConf = "No"
Domain Controller DNS Loopback Test#CredCode#                ForEach ($AllDNS in $nwDNS)
Domain Controller DNS Loopback Test#CredCode#                {
Domain Controller DNS Loopback Test#CredCode#                    IF ($AllDNS -eq "127.0.0.1")
Domain Controller DNS Loopback Test#CredCode#                    {
Domain Controller DNS Loopback Test#CredCode#                        $IsLConf = "Yes"
Domain Controller DNS Loopback Test#CredCode#                        break
Domain Controller DNS Loopback Test#CredCode#                    } 
Domain Controller DNS Loopback Test#CredCode#                }
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#                IF ($IsLConf -eq "No")
Domain Controller DNS Loopback Test#CredCode#                {
Domain Controller DNS Loopback Test#CredCode#                    $FinStatus ="Not Ok - Domain Controller DNS Server settings does not have loopback - 127.0.0.1 address configured."
Domain Controller DNS Loopback Test#CredCode#                    $AnyGap = "Yes"                
Domain Controller DNS Loopback Test#CredCode#                }
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#                $FinalSTR = $ItemName+","+$DCConError+","+$ComConError+","+$nwDescrip+","+$nwIPADDR+","+$nwSUBNET+","+$nwGateWay+","+'"'+$NWDNS+'"'+","+$FinStatus
Domain Controller DNS Loopback Test#CredCode#                Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Loopback Test#CredCode#            }
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#            IF ($AnyGap -eq "Yes")
Domain Controller DNS Loopback Test#CredCode#            {
Domain Controller DNS Loopback Test#CredCode#                $TotNo++
Domain Controller DNS Loopback Test#CredCode#            }
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#        }
Domain Controller DNS Loopback Test#CredCode#        else
Domain Controller DNS Loopback Test#CredCode#        {
Domain Controller DNS Loopback Test#CredCode#            $ComConError = $Error[0].Exception.Message
Domain Controller DNS Loopback Test#CredCode#            $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller DNS Loopback Test#CredCode#            Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Loopback Test#CredCode#        }
Domain Controller DNS Loopback Test#CredCode#    }
Domain Controller DNS Loopback Test#CredCode#}
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#$OthText = ""
Domain Controller DNS Loopback Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller DNS Loopback Test#CredCode#{
Domain Controller DNS Loopback Test#CredCode#   $OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller DNS Loopback Test#CredCode#}
Domain Controller DNS Loopback Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller DNS Loopback Test#CredCode#{
Domain Controller DNS Loopback Test#CredCode#    $TestText = "Some Domain Controllers do not have Loopback Address configured. It is recommended to configure 127.0.0.1 as DNS Server on each domain controller to avoid delay in loading DNS Zone database. $OthText"
Domain Controller DNS Loopback Test#CredCode#    $SumVal = $TotNo
Domain Controller DNS Loopback Test#CredCode#    $TestStatus="High"
Domain Controller DNS Loopback Test#CredCode#}
Domain Controller DNS Loopback Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller DNS Loopback Test#CredCode#{
Domain Controller DNS Loopback Test#CredCode#    $TestText = "All Domain Controllers have been configured with loopback 127.0.0.1 address. $OthText"
Domain Controller DNS Loopback Test#CredCode#    $SumVal = ""
Domain Controller DNS Loopback Test#CredCode#    $TestStatus="Passed"
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#    IF ($AnyOneOk -eq "No")
Domain Controller DNS Loopback Test#CredCode#    {
Domain Controller DNS Loopback Test#CredCode#        $TestText = "Error Executing Dynamic Pack."
Domain Controller DNS Loopback Test#CredCode#        $SumVal = ""
Domain Controller DNS Loopback Test#CredCode#        $TestStatus="Completed with Errors."
Domain Controller DNS Loopback Test#CredCode#    }
Domain Controller DNS Loopback Test#CredCode#}
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#$TotNo=0
Domain Controller DNS Loopback Test#CredCode#$ItemCount=0
Domain Controller DNS Loopback Test#CredCode#$TestText = ""
Domain Controller DNS Loopback Test#CredCode#$TestStatus=""
Domain Controller DNS Loopback Test#CredCode#$SumVal = ""
Domain Controller DNS Loopback Test#CredCode#$AnyGap = "No"
Domain Controller DNS Loopback Test#CredCode#$ErrorOrNot = "No"
Domain Controller DNS Loopback Test#CredCode#$AnyOneOk = "No"
Domain Controller DNS Loopback Test#CredCode#$TotDCsInError = 0
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller DNS Loopback Test#CredCode#{
Domain Controller DNS Loopback Test#CredCode#    $DCConError = "Ok"
Domain Controller DNS Loopback Test#CredCode#    $DCConStatus = "Ok"
Domain Controller DNS Loopback Test#CredCode#    $ProceedOrNot = "Yes"
Domain Controller DNS Loopback Test#CredCode#    $Error.Clear()
Domain Controller DNS Loopback Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller DNS Loopback Test#CredCode#    IF ($Error.Count -ne 0)
Domain Controller DNS Loopback Test#CredCode#    {
Domain Controller DNS Loopback Test#CredCode#        $ProceedOrNot = "No"
Domain Controller DNS Loopback Test#CredCode#        $TotDCsInError++
Domain Controller DNS Loopback Test#CredCode#        $DCConError = $Error[0].Exception.Message
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller DNS Loopback Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Loopback Test#CredCode#    }
Domain Controller DNS Loopback Test#CredCode#    
Domain Controller DNS Loopback Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
Domain Controller DNS Loopback Test#CredCode#    {
Domain Controller DNS Loopback Test#CredCode#        $ComConError="Ok"
Domain Controller DNS Loopback Test#CredCode#        $Error.Clear()
Domain Controller DNS Loopback Test#CredCode#        $nwINFO = Get-WmiObject -ComputerName $ItemName Win32_NetworkAdapterConfiguration | Where-Object { $_.IPAddress -ne $null }
Domain Controller DNS Loopback Test#CredCode#        IF ($Error.count -eq 0)
Domain Controller DNS Loopback Test#CredCode#        {
Domain Controller DNS Loopback Test#CredCode#            $AnyOneOk="Yes"
Domain Controller DNS Loopback Test#CredCode#            foreach ($NIC in $nwINFO)
Domain Controller DNS Loopback Test#CredCode#            {
Domain Controller DNS Loopback Test#CredCode#                $nwServerName = $NIC.DNSHostName 
Domain Controller DNS Loopback Test#CredCode#                $nwDescrip = $NIC.Description 
Domain Controller DNS Loopback Test#CredCode#                $nwIPADDR = $NIC.IPAddress 
Domain Controller DNS Loopback Test#CredCode#                $nwSUBNET = $NIC.IpSubnet 
Domain Controller DNS Loopback Test#CredCode#                $nwGateWay = $NIC.DefaultIPGateway 
Domain Controller DNS Loopback Test#CredCode#                $nwMacADD = $NIC.MACAddress 
Domain Controller DNS Loopback Test#CredCode#                $nwDNS = $NIC.DNSServerSearchOrder 
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#                $FinStatus="Ok"
Domain Controller DNS Loopback Test#CredCode#                $IsLConf = "No"
Domain Controller DNS Loopback Test#CredCode#                ForEach ($AllDNS in $nwDNS)
Domain Controller DNS Loopback Test#CredCode#                {
Domain Controller DNS Loopback Test#CredCode#                    IF ($AllDNS -eq "127.0.0.1")
Domain Controller DNS Loopback Test#CredCode#                    {
Domain Controller DNS Loopback Test#CredCode#                        $IsLConf = "Yes"
Domain Controller DNS Loopback Test#CredCode#                        break
Domain Controller DNS Loopback Test#CredCode#                    } 
Domain Controller DNS Loopback Test#CredCode#                }
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#                IF ($IsLConf -eq "No")
Domain Controller DNS Loopback Test#CredCode#                {
Domain Controller DNS Loopback Test#CredCode#                    $FinStatus ="Not Ok - Domain Controller DNS Server settings does not have loopback - 127.0.0.1 address configured."
Domain Controller DNS Loopback Test#CredCode#                    $AnyGap = "Yes"                
Domain Controller DNS Loopback Test#CredCode#                }
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#                $FinalSTR = $ItemName+","+$DCConError+","+$ComConError+","+$nwDescrip+","+$nwIPADDR+","+$nwSUBNET+","+$nwGateWay+","+'"'+$NWDNS+'"'+","+$FinStatus
Domain Controller DNS Loopback Test#CredCode#                Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Loopback Test#CredCode#            }
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#            IF ($AnyGap -eq "Yes")
Domain Controller DNS Loopback Test#CredCode#            {
Domain Controller DNS Loopback Test#CredCode#                $TotNo++
Domain Controller DNS Loopback Test#CredCode#            }
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#        }
Domain Controller DNS Loopback Test#CredCode#        else
Domain Controller DNS Loopback Test#CredCode#        {
Domain Controller DNS Loopback Test#CredCode#            $ComConError = $Error[0].Exception.Message
Domain Controller DNS Loopback Test#CredCode#            $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller DNS Loopback Test#CredCode#            Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Loopback Test#CredCode#        }
Domain Controller DNS Loopback Test#CredCode#    }
Domain Controller DNS Loopback Test#CredCode#}
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#$OthText = ""
Domain Controller DNS Loopback Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller DNS Loopback Test#CredCode#{
Domain Controller DNS Loopback Test#CredCode#   $OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller DNS Loopback Test#CredCode#}
Domain Controller DNS Loopback Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller DNS Loopback Test#CredCode#{
Domain Controller DNS Loopback Test#CredCode#    $TestText = "Some Domain Controllers do not have Loopback Address configured. It is recommended to configure 127.0.0.1 as DNS Server on each domain controller to avoid delay in loading DNS Zone database. $OthText"
Domain Controller DNS Loopback Test#CredCode#    $SumVal = $TotNo
Domain Controller DNS Loopback Test#CredCode#    $TestStatus="High"
Domain Controller DNS Loopback Test#CredCode#}
Domain Controller DNS Loopback Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller DNS Loopback Test#CredCode#{
Domain Controller DNS Loopback Test#CredCode#    $TestText = "All Domain Controllers have been configured with loopback 127.0.0.1 address. $OthText"
Domain Controller DNS Loopback Test#CredCode#    $SumVal = ""
Domain Controller DNS Loopback Test#CredCode#    $TestStatus="Passed"
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#    IF ($AnyOneOk -eq "No")
Domain Controller DNS Loopback Test#CredCode#    {
Domain Controller DNS Loopback Test#CredCode#        $TestText = "Error Executing Dynamic Pack."
Domain Controller DNS Loopback Test#CredCode#        $SumVal = ""
Domain Controller DNS Loopback Test#CredCode#        $TestStatus="Completed with Errors."
Domain Controller DNS Loopback Test#CredCode#    }
Domain Controller DNS Loopback Test#CredCode#}
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Loopback Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller DNS Loopback Test#CredCode#
Domain Controller DNS Resolver Test#HeaderCode#$ThisString="Domain Controller,Connection,Command Status, NIC registers DNS Records Dynamically?,Final Status"
Domain Controller DNS Resolver Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain Controller DNS Resolver Test#HeaderCode#
Domain Controller DNS Resolver Test#HeaderCode#
Domain Controller DNS Resolver Test#HeaderCode#
Domain Controller DNS Resolver Test#HeaderCode#
Domain Controller DNS Resolver Test#CredCode#$TotNo=0
Domain Controller DNS Resolver Test#CredCode#$ItemCount=0
Domain Controller DNS Resolver Test#CredCode#$TestText = ""
Domain Controller DNS Resolver Test#CredCode#$TestStatus=""
Domain Controller DNS Resolver Test#CredCode#$SumVal = ""
Domain Controller DNS Resolver Test#CredCode#$AnyGap = "No"
Domain Controller DNS Resolver Test#CredCode#$ErrorOrNot = "No"
Domain Controller DNS Resolver Test#CredCode#$AnyOneOk = "No"
Domain Controller DNS Resolver Test#CredCode#$TotDCsInError = 0
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller DNS Resolver Test#CredCode#{
Domain Controller DNS Resolver Test#CredCode#    $DCConError = "Ok"
Domain Controller DNS Resolver Test#CredCode#    $DCConStatus = "Ok"
Domain Controller DNS Resolver Test#CredCode#    $ProceedOrNot = "Yes"
Domain Controller DNS Resolver Test#CredCode#    $Error.Clear()
Domain Controller DNS Resolver Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller DNS Resolver Test#CredCode#    IF ($Error.Count -ne 0)
Domain Controller DNS Resolver Test#CredCode#    {
Domain Controller DNS Resolver Test#CredCode#        $ProceedOrNot = "No"
Domain Controller DNS Resolver Test#CredCode#        $TotDCsInError++
Domain Controller DNS Resolver Test#CredCode#        $DCConError = $Error[0].Exception.Message
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller DNS Resolver Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Resolver Test#CredCode#    }
Domain Controller DNS Resolver Test#CredCode#    
Domain Controller DNS Resolver Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
Domain Controller DNS Resolver Test#CredCode#    {
Domain Controller DNS Resolver Test#CredCode#        $ComConError="Ok"        
Domain Controller DNS Resolver Test#CredCode#        $Error.Clear()
Domain Controller DNS Resolver Test#CredCode#        $nwINFO = Get-WmiObject -Credential $Creds -ComputerName $ItemName Win32_NetworkAdapterConfiguration | Where-Object { $_.IPAddress -ne $null }
Domain Controller DNS Resolver Test#CredCode#        IF ($Error.count -eq 0)
Domain Controller DNS Resolver Test#CredCode#        { 
Domain Controller DNS Resolver Test#CredCode#            $AnyOneOk="Yes"
Domain Controller DNS Resolver Test#CredCode#            foreach ($NIC in $nwINFO)
Domain Controller DNS Resolver Test#CredCode#            {
Domain Controller DNS Resolver Test#CredCode#                $FinStatus = "Ok"
Domain Controller DNS Resolver Test#CredCode#                IF ($Nic.FullDNSRegistrationEnabled -eq $False)
Domain Controller DNS Resolver Test#CredCode#                {
Domain Controller DNS Resolver Test#CredCode#                    $AnyGap = "Yes"
Domain Controller DNS Resolver Test#CredCode#                    $FinStatus ="WARNING : Domain Controller Dynamic DNS Registration is Disabled for this Network Card."
Domain Controller DNS Resolver Test#CredCode#                }
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#                $DNStatus=$Nic.FullDNSRegistrationEnabled                
Domain Controller DNS Resolver Test#CredCode#                $FinalSTR = $ItemName+","+$DCConError+","+$ComConError+","+$DNStatus+","+$FinStatus
Domain Controller DNS Resolver Test#CredCode#                Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Resolver Test#CredCode#            }
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#            IF ($AnyGap -eq "Yes")
Domain Controller DNS Resolver Test#CredCode#            {
Domain Controller DNS Resolver Test#CredCode#                $TotNo++
Domain Controller DNS Resolver Test#CredCode#            }
Domain Controller DNS Resolver Test#CredCode#        }
Domain Controller DNS Resolver Test#CredCode#        else
Domain Controller DNS Resolver Test#CredCode#        {
Domain Controller DNS Resolver Test#CredCode#            $ComConError = $Error[0].Exception.Message
Domain Controller DNS Resolver Test#CredCode#            $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller DNS Resolver Test#CredCode#            Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Resolver Test#CredCode#        }
Domain Controller DNS Resolver Test#CredCode#    }
Domain Controller DNS Resolver Test#CredCode#    else
Domain Controller DNS Resolver Test#CredCode#    {
Domain Controller DNS Resolver Test#CredCode#       $ComConError = $Error[0].Exception.Message
Domain Controller DNS Resolver Test#CredCode#       $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller DNS Resolver Test#CredCode#       Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Resolver Test#CredCode#    }
Domain Controller DNS Resolver Test#CredCode#}
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#$OthText = ""
Domain Controller DNS Resolver Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller DNS Resolver Test#CredCode#{
Domain Controller DNS Resolver Test#CredCode#   $OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller DNS Resolver Test#CredCode#}
Domain Controller DNS Resolver Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller DNS Resolver Test#CredCode#{
Domain Controller DNS Resolver Test#CredCode#    $TestText = "Domain Controllers have Dynamic DNS Registration disabled for active NICs. Please ensure it is enabled. Disabling Dynamic DNS Registration will disable the ability for domain controller to register its resource records dynamically to configured DNS Servers. $OthText"
Domain Controller DNS Resolver Test#CredCode#    $SumVal = $TotNo
Domain Controller DNS Resolver Test#CredCode#    $TestStatus="High"
Domain Controller DNS Resolver Test#CredCode#}
Domain Controller DNS Resolver Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller DNS Resolver Test#CredCode#{
Domain Controller DNS Resolver Test#CredCode#    $TestText = "Dynamic Pack DNS Registration is enabled for all domain controllers. $OthText"
Domain Controller DNS Resolver Test#CredCode#    $SumVal = ""
Domain Controller DNS Resolver Test#CredCode#    $TestStatus="Passed"
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#    IF ($AnyOneOk -eq "No")
Domain Controller DNS Resolver Test#CredCode#    {
Domain Controller DNS Resolver Test#CredCode#        $TestText = "Error Executing Dynamic Pack."
Domain Controller DNS Resolver Test#CredCode#        $SumVal = ""
Domain Controller DNS Resolver Test#CredCode#        $TestStatus="Completed with Errors."
Domain Controller DNS Resolver Test#CredCode#    }
Domain Controller DNS Resolver Test#CredCode#}
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#$TotNo=0
Domain Controller DNS Resolver Test#CredCode#$ItemCount=0
Domain Controller DNS Resolver Test#CredCode#$TestText = ""
Domain Controller DNS Resolver Test#CredCode#$TestStatus=""
Domain Controller DNS Resolver Test#CredCode#$SumVal = ""
Domain Controller DNS Resolver Test#CredCode#$AnyGap = "No"
Domain Controller DNS Resolver Test#CredCode#$ErrorOrNot = "No"
Domain Controller DNS Resolver Test#CredCode#$AnyOneOk = "No"
Domain Controller DNS Resolver Test#CredCode#$TotDCsInError = 0
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller DNS Resolver Test#CredCode#{
Domain Controller DNS Resolver Test#CredCode#    $DCConError = "Ok"
Domain Controller DNS Resolver Test#CredCode#    $DCConStatus = "Ok"
Domain Controller DNS Resolver Test#CredCode#    $ProceedOrNot = "Yes"
Domain Controller DNS Resolver Test#CredCode#    $Error.Clear()
Domain Controller DNS Resolver Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller DNS Resolver Test#CredCode#    IF ($Error.Count -ne 0)
Domain Controller DNS Resolver Test#CredCode#    {
Domain Controller DNS Resolver Test#CredCode#        $ProceedOrNot = "No"
Domain Controller DNS Resolver Test#CredCode#        $TotDCsInError++
Domain Controller DNS Resolver Test#CredCode#        $DCConError = $Error[0].Exception.Message
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller DNS Resolver Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Resolver Test#CredCode#    }
Domain Controller DNS Resolver Test#CredCode#    
Domain Controller DNS Resolver Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
Domain Controller DNS Resolver Test#CredCode#    {
Domain Controller DNS Resolver Test#CredCode#        $ComConError="Ok"        
Domain Controller DNS Resolver Test#CredCode#        $Error.Clear()
Domain Controller DNS Resolver Test#CredCode#        $nwINFO = Get-WmiObject -ComputerName $ItemName Win32_NetworkAdapterConfiguration | Where-Object { $_.IPAddress -ne $null }
Domain Controller DNS Resolver Test#CredCode#        IF ($Error.count -eq 0)
Domain Controller DNS Resolver Test#CredCode#        { 
Domain Controller DNS Resolver Test#CredCode#            $AnyOneOk="Yes"
Domain Controller DNS Resolver Test#CredCode#            foreach ($NIC in $nwINFO)
Domain Controller DNS Resolver Test#CredCode#            {
Domain Controller DNS Resolver Test#CredCode#                $FinStatus = "Ok"
Domain Controller DNS Resolver Test#CredCode#                IF ($Nic.FullDNSRegistrationEnabled -eq $False)
Domain Controller DNS Resolver Test#CredCode#                {
Domain Controller DNS Resolver Test#CredCode#                    $AnyGap = "Yes"
Domain Controller DNS Resolver Test#CredCode#                    $FinStatus ="WARNING : Domain Controller Dynamic DNS Registration is Disabled for this Network Card."
Domain Controller DNS Resolver Test#CredCode#                }
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#                $DNStatus=$Nic.FullDNSRegistrationEnabled                
Domain Controller DNS Resolver Test#CredCode#                $FinalSTR = $ItemName+","+$DCConError+","+$ComConError+","+$DNStatus+","+$FinStatus
Domain Controller DNS Resolver Test#CredCode#                Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Resolver Test#CredCode#            }
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#            IF ($AnyGap -eq "Yes")
Domain Controller DNS Resolver Test#CredCode#            {
Domain Controller DNS Resolver Test#CredCode#                $TotNo++
Domain Controller DNS Resolver Test#CredCode#            }
Domain Controller DNS Resolver Test#CredCode#        }
Domain Controller DNS Resolver Test#CredCode#        else
Domain Controller DNS Resolver Test#CredCode#        {
Domain Controller DNS Resolver Test#CredCode#            $ComConError = $Error[0].Exception.Message
Domain Controller DNS Resolver Test#CredCode#            $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller DNS Resolver Test#CredCode#            Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Resolver Test#CredCode#        }
Domain Controller DNS Resolver Test#CredCode#    }
Domain Controller DNS Resolver Test#CredCode#    else
Domain Controller DNS Resolver Test#CredCode#    {
Domain Controller DNS Resolver Test#CredCode#       $ComConError = $Error[0].Exception.Message
Domain Controller DNS Resolver Test#CredCode#       $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller DNS Resolver Test#CredCode#       Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Resolver Test#CredCode#    }
Domain Controller DNS Resolver Test#CredCode#}
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#$OthText = ""
Domain Controller DNS Resolver Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller DNS Resolver Test#CredCode#{
Domain Controller DNS Resolver Test#CredCode#   $OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller DNS Resolver Test#CredCode#}
Domain Controller DNS Resolver Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller DNS Resolver Test#CredCode#{
Domain Controller DNS Resolver Test#CredCode#    $TestText = "Domain Controllers have Dynamic DNS Registration disabled for active NICs. Please ensure it is enabled. Disabling Dynamic DNS Registration will disable the ability for domain controller to register its resource records dynamically to configured DNS Servers. $OthText"
Domain Controller DNS Resolver Test#CredCode#    $SumVal = $TotNo
Domain Controller DNS Resolver Test#CredCode#    $TestStatus="High"
Domain Controller DNS Resolver Test#CredCode#}
Domain Controller DNS Resolver Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller DNS Resolver Test#CredCode#{
Domain Controller DNS Resolver Test#CredCode#    $TestText = "Dynamic Pack DNS Registration is enabled for all domain controllers. $OthText"
Domain Controller DNS Resolver Test#CredCode#    $SumVal = ""
Domain Controller DNS Resolver Test#CredCode#    $TestStatus="Passed"
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#    IF ($AnyOneOk -eq "No")
Domain Controller DNS Resolver Test#CredCode#    {
Domain Controller DNS Resolver Test#CredCode#        $TestText = "Error Executing Dynamic Pack."
Domain Controller DNS Resolver Test#CredCode#        $SumVal = ""
Domain Controller DNS Resolver Test#CredCode#        $TestStatus="Completed with Errors."
Domain Controller DNS Resolver Test#CredCode#    }
Domain Controller DNS Resolver Test#CredCode#}
Domain Controller DNS Resolver Test#CredCode#
Domain Controller DNS Resolver Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller DNS Resolver Test#CredCode#
Domain Controller Multihomed Test#HeaderCode#$ThisString="Domain Controller,Connection,Command Status, Numebr of Active NICs,Final Status"
Domain Controller Multihomed Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain Controller Multihomed Test#HeaderCode#
Domain Controller Multihomed Test#HeaderCode#
Domain Controller Multihomed Test#HeaderCode#
Domain Controller Multihomed Test#HeaderCode#
Domain Controller Multihomed Test#CredCode#$TotNo=0
Domain Controller Multihomed Test#CredCode#$ItemCount=0
Domain Controller Multihomed Test#CredCode#$TestText = ""
Domain Controller Multihomed Test#CredCode#$TestStatus=""
Domain Controller Multihomed Test#CredCode#$SumVal = ""
Domain Controller Multihomed Test#CredCode#$AnyGap = "No"
Domain Controller Multihomed Test#CredCode#$ErrorOrNot = "No"
Domain Controller Multihomed Test#CredCode#$AnyOneOk = "No"
Domain Controller Multihomed Test#CredCode#$TotDCsInError = 0
Domain Controller Multihomed Test#CredCode#
Domain Controller Multihomed Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Multihomed Test#CredCode#{
Domain Controller Multihomed Test#CredCode#    $DCConError = "Ok"
Domain Controller Multihomed Test#CredCode#    $DCConStatus = "Ok"
Domain Controller Multihomed Test#CredCode#    $ProceedOrNot = "Yes"
Domain Controller Multihomed Test#CredCode#    $Error.Clear()
Domain Controller Multihomed Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller Multihomed Test#CredCode#    IF ($Error.Count -ne 0)
Domain Controller Multihomed Test#CredCode#    {
Domain Controller Multihomed Test#CredCode#        $ProceedOrNot = "No"
Domain Controller Multihomed Test#CredCode#        $TotDCsInError++
Domain Controller Multihomed Test#CredCode#        $DCConError = $Error[0].Exception.Message
Domain Controller Multihomed Test#CredCode#
Domain Controller Multihomed Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Multihomed Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Multihomed Test#CredCode#    }
Domain Controller Multihomed Test#CredCode#    
Domain Controller Multihomed Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
Domain Controller Multihomed Test#CredCode#    {
Domain Controller Multihomed Test#CredCode#        $ComConError="Ok"        
Domain Controller Multihomed Test#CredCode#                
Domain Controller Multihomed Test#CredCode#        $Error.Clear()
Domain Controller Multihomed Test#CredCode#        $nwINFO = Get-WmiObject -Credential $Creds -ComputerName $ItemName Win32_NetworkAdapterConfiguration | Where-Object { $_.IPAddress -ne $null }
Domain Controller Multihomed Test#CredCode#        IF ($Error.count -eq 0)
Domain Controller Multihomed Test#CredCode#        {
Domain Controller Multihomed Test#CredCode#            $AnyOneOk="Yes"
Domain Controller Multihomed Test#CredCode#            $TotActNIC=0
Domain Controller Multihomed Test#CredCode#            ForEach ($RAllNow in $nwINFO)
Domain Controller Multihomed Test#CredCode#            {
Domain Controller Multihomed Test#CredCode#                $TotActNIC++
Domain Controller Multihomed Test#CredCode#            }
Domain Controller Multihomed Test#CredCode#	       $FinStatus="Ok"
Domain Controller Multihomed Test#CredCode#            IF ($TotActNIC -gt 1)
Domain Controller Multihomed Test#CredCode#            {
Domain Controller Multihomed Test#CredCode#                $FinStatus ="Domain Controller has two or more Network Cards active. This might result in DNS loopkup failures."
Domain Controller Multihomed Test#CredCode#                $AnyGap = "Yes"                
Domain Controller Multihomed Test#CredCode#                $TotNo++ 
Domain Controller Multihomed Test#CredCode#            }
Domain Controller Multihomed Test#CredCode#
Domain Controller Multihomed Test#CredCode#            $FinalSTR = $ItemName+","+$DCConError+","+$ComConError+","+$TotActNIC+","+$FinStatus    
Domain Controller Multihomed Test#CredCode#            Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Multihomed Test#CredCode#        }
Domain Controller Multihomed Test#CredCode#        else
Domain Controller Multihomed Test#CredCode#        {
Domain Controller Multihomed Test#CredCode#            $ComConError = $Error[0].Exception.Message
Domain Controller Multihomed Test#CredCode#            $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Multihomed Test#CredCode#            Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Multihomed Test#CredCode#        }
Domain Controller Multihomed Test#CredCode#    }
Domain Controller Multihomed Test#CredCode#    else
Domain Controller Multihomed Test#CredCode#    {
Domain Controller Multihomed Test#CredCode#       $ComConError = $Error[0].Exception.Message
Domain Controller Multihomed Test#CredCode#       $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Multihomed Test#CredCode#       Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Multihomed Test#CredCode#    }
Domain Controller Multihomed Test#CredCode#}
Domain Controller Multihomed Test#CredCode#
Domain Controller Multihomed Test#CredCode#$OthText = ""
Domain Controller Multihomed Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Multihomed Test#CredCode#{
Domain Controller Multihomed Test#CredCode#   $OthText = "However some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Multihomed Test#CredCode#}
Domain Controller Multihomed Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Multihomed Test#CredCode#{
Domain Controller Multihomed Test#CredCode#    $TestText = "Some Domain Controllers acting as multihomed Server. A Multihomed Domain Controller might result in DNS lookup failures. Please ensure only one NIC is active and NIC is configured to register its IP Address in the conifgured DNS Server. $OthText"
Domain Controller Multihomed Test#CredCode#    $SumVal = $TotNo
Domain Controller Multihomed Test#CredCode#    $TestStatus="High"
Domain Controller Multihomed Test#CredCode#}
Domain Controller Multihomed Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Multihomed Test#CredCode#{
Domain Controller Multihomed Test#CredCode#    $TestText = "No Multihomed Domain Controllers were found. All Domain Controllers have only one NIC active. $OthText"
Domain Controller Multihomed Test#CredCode#    $SumVal = ""
Domain Controller Multihomed Test#CredCode#    $TestStatus="Passed"
Domain Controller Multihomed Test#CredCode#
Domain Controller Multihomed Test#CredCode#    IF ($AnyOneOk -eq "No")
Domain Controller Multihomed Test#CredCode#    {
Domain Controller Multihomed Test#CredCode#        $TestText = "Error Executing Dynamic Pack."
Domain Controller Multihomed Test#CredCode#        $SumVal = ""
Domain Controller Multihomed Test#CredCode#        $TestStatus="Completed with Errors."
Domain Controller Multihomed Test#CredCode#    }
Domain Controller Multihomed Test#CredCode#}
Domain Controller Multihomed Test#CredCode#
Domain Controller Multihomed Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Multihomed Test#CredCode#
Domain Controller Multihomed Test#CredCode#$TotNo=0
Domain Controller Multihomed Test#CredCode#$ItemCount=0
Domain Controller Multihomed Test#CredCode#$TestText = ""
Domain Controller Multihomed Test#CredCode#$TestStatus=""
Domain Controller Multihomed Test#CredCode#$SumVal = ""
Domain Controller Multihomed Test#CredCode#$AnyGap = "No"
Domain Controller Multihomed Test#CredCode#$ErrorOrNot = "No"
Domain Controller Multihomed Test#CredCode#$AnyOneOk = "No"
Domain Controller Multihomed Test#CredCode#$TotDCsInError = 0
Domain Controller Multihomed Test#CredCode#
Domain Controller Multihomed Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Multihomed Test#CredCode#{
Domain Controller Multihomed Test#CredCode#    $DCConError = "Ok"
Domain Controller Multihomed Test#CredCode#    $DCConStatus = "Ok"
Domain Controller Multihomed Test#CredCode#    $ProceedOrNot = "Yes"
Domain Controller Multihomed Test#CredCode#    $Error.Clear()
Domain Controller Multihomed Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller Multihomed Test#CredCode#    IF ($Error.Count -ne 0)
Domain Controller Multihomed Test#CredCode#    {
Domain Controller Multihomed Test#CredCode#        $ProceedOrNot = "No"
Domain Controller Multihomed Test#CredCode#        $TotDCsInError++
Domain Controller Multihomed Test#CredCode#        $DCConError = $Error[0].Exception.Message
Domain Controller Multihomed Test#CredCode#
Domain Controller Multihomed Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Multihomed Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Multihomed Test#CredCode#    }
Domain Controller Multihomed Test#CredCode#    
Domain Controller Multihomed Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
Domain Controller Multihomed Test#CredCode#    {
Domain Controller Multihomed Test#CredCode#        $ComConError="Ok"        
Domain Controller Multihomed Test#CredCode#                
Domain Controller Multihomed Test#CredCode#        $Error.Clear()
Domain Controller Multihomed Test#CredCode#        $nwINFO = Get-WmiObject -ComputerName $ItemName Win32_NetworkAdapterConfiguration | Where-Object { $_.IPAddress -ne $null }
Domain Controller Multihomed Test#CredCode#        IF ($Error.count -eq 0)
Domain Controller Multihomed Test#CredCode#        {
Domain Controller Multihomed Test#CredCode#            $AnyOneOk="Yes"
Domain Controller Multihomed Test#CredCode#            $TotActNIC=0
Domain Controller Multihomed Test#CredCode#            ForEach ($RAllNow in $nwINFO)
Domain Controller Multihomed Test#CredCode#            {
Domain Controller Multihomed Test#CredCode#                $TotActNIC++
Domain Controller Multihomed Test#CredCode#            }
Domain Controller Multihomed Test#CredCode#	         $FinStatus="Ok"
Domain Controller Multihomed Test#CredCode#            IF ($TotActNIC -gt 1)
Domain Controller Multihomed Test#CredCode#            {
Domain Controller Multihomed Test#CredCode#                $FinStatus ="Domain Controller has two or more Network Cards active. This might result in DNS loopkup failures."
Domain Controller Multihomed Test#CredCode#                $AnyGap = "Yes"                
Domain Controller Multihomed Test#CredCode#                $TotNo++ 
Domain Controller Multihomed Test#CredCode#            }
Domain Controller Multihomed Test#CredCode#
Domain Controller Multihomed Test#CredCode#            $FinalSTR = $ItemName+","+$DCConError+","+$ComConError+","+$TotActNIC+","+$FinStatus    
Domain Controller Multihomed Test#CredCode#            Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Multihomed Test#CredCode#        }
Domain Controller Multihomed Test#CredCode#        else
Domain Controller Multihomed Test#CredCode#        {
Domain Controller Multihomed Test#CredCode#            $ComConError = $Error[0].Exception.Message
Domain Controller Multihomed Test#CredCode#            $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Multihomed Test#CredCode#            Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Multihomed Test#CredCode#        }
Domain Controller Multihomed Test#CredCode#    }
Domain Controller Multihomed Test#CredCode#    else
Domain Controller Multihomed Test#CredCode#    {
Domain Controller Multihomed Test#CredCode#       $ComConError = $Error[0].Exception.Message
Domain Controller Multihomed Test#CredCode#       $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Multihomed Test#CredCode#       Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Multihomed Test#CredCode#    }
Domain Controller Multihomed Test#CredCode#}
Domain Controller Multihomed Test#CredCode#
Domain Controller Multihomed Test#CredCode#$OthText = ""
Domain Controller Multihomed Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Multihomed Test#CredCode#{
Domain Controller Multihomed Test#CredCode#   $OthText = "However some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Multihomed Test#CredCode#}
Domain Controller Multihomed Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Multihomed Test#CredCode#{
Domain Controller Multihomed Test#CredCode#    $TestText = "Some Domain Controllers acting as multihomed Server. A Multihomed Domain Controller might result in DNS lookup failures. Please ensure only one NIC is active and NIC is configured to register its IP Address in the conifgured DNS Server. $OthText"
Domain Controller Multihomed Test#CredCode#    $SumVal = $TotNo
Domain Controller Multihomed Test#CredCode#    $TestStatus="High"
Domain Controller Multihomed Test#CredCode#}
Domain Controller Multihomed Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Multihomed Test#CredCode#{
Domain Controller Multihomed Test#CredCode#    $TestText = "No Multihomed Domain Controllers were found. All Domain Controllers have only one NIC active. $OthText"
Domain Controller Multihomed Test#CredCode#    $SumVal = ""
Domain Controller Multihomed Test#CredCode#    $TestStatus="Passed"
Domain Controller Multihomed Test#CredCode#
Domain Controller Multihomed Test#CredCode#    IF ($AnyOneOk -eq "No")
Domain Controller Multihomed Test#CredCode#    {
Domain Controller Multihomed Test#CredCode#        $TestText = "Error Executing Dynamic Pack."
Domain Controller Multihomed Test#CredCode#        $SumVal = ""
Domain Controller Multihomed Test#CredCode#        $TestStatus="Completed with Errors."
Domain Controller Multihomed Test#CredCode#    }
Domain Controller Multihomed Test#CredCode#}
Domain Controller Multihomed Test#CredCode#
Domain Controller Multihomed Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Multihomed Test#CredCode#
Domain Controller Recent Updates Test#HeaderCode#$ThisStr="Domain Controller,Connection,Command Status, Number of Updates Applied Since last 45 Days, Last Update Date,Final Status"
Domain Controller Recent Updates Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Recent Updates Test#HeaderCode#
Domain Controller Recent Updates Test#HeaderCode#
Domain Controller Recent Updates Test#HeaderCode#
Domain Controller Recent Updates Test#HeaderCode#
Domain Controller Recent Updates Test#HeaderCode#
Domain Controller Recent Updates Test#HeaderCode#
Domain Controller Recent Updates Test#CredCode#$TotNo=0
Domain Controller Recent Updates Test#CredCode#$ItemCount=0
Domain Controller Recent Updates Test#CredCode#$TestText = ""
Domain Controller Recent Updates Test#CredCode#$TestStatus=""
Domain Controller Recent Updates Test#CredCode#$SumVal = ""
Domain Controller Recent Updates Test#CredCode#$AnyGap = "No"
Domain Controller Recent Updates Test#CredCode#$ErrorOrNot = "No"
Domain Controller Recent Updates Test#CredCode#$AnyOneOk = "No"
Domain Controller Recent Updates Test#CredCode#$TotDCsInError = 0
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Recent Updates Test#CredCode#{
Domain Controller Recent Updates Test#CredCode#    $DCConError = "Ok"
Domain Controller Recent Updates Test#CredCode#    $DCConStatus = "Ok"
Domain Controller Recent Updates Test#CredCode#    $ProceedOrNot = "Yes"
Domain Controller Recent Updates Test#CredCode#    $Error.Clear()
Domain Controller Recent Updates Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller Recent Updates Test#CredCode#    IF ($Error.Count -ne 0)
Domain Controller Recent Updates Test#CredCode#    {
Domain Controller Recent Updates Test#CredCode#        $ProceedOrNot = "No"
Domain Controller Recent Updates Test#CredCode#        $TotDCsInError++
Domain Controller Recent Updates Test#CredCode#        $DCConError = $Error[0].Exception.Message
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Recent Updates Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Recent Updates Test#CredCode#    }
Domain Controller Recent Updates Test#CredCode#    
Domain Controller Recent Updates Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
Domain Controller Recent Updates Test#CredCode#    {
Domain Controller Recent Updates Test#CredCode#        $ComConError="Ok"        
Domain Controller Recent Updates Test#CredCode#        $Error.Clear()
Domain Controller Recent Updates Test#CredCode#        $TotHotFixes = Get-HotFix -ComputerName $ItemName -credential $Creds | Where-Object {$_.Installedon -gt ((Get-Date).Adddays(-45))}
Domain Controller Recent Updates Test#CredCode#         IF ($Error.count -eq 0)
Domain Controller Recent Updates Test#CredCode#         { 
Domain Controller Recent Updates Test#CredCode#            $AnyOneOk="Yes"
Domain Controller Recent Updates Test#CredCode#            $TotHF = $TotHotFixes.Count
Domain Controller Recent Updates Test#CredCode#            $FinalStatusNow = "OK"
Domain Controller Recent Updates Test#CredCode#            IF ($TotHF -eq 0)
Domain Controller Recent Updates Test#CredCode#            {
Domain Controller Recent Updates Test#CredCode#                $IsHFOk = "No"
Domain Controller Recent Updates Test#CredCode#                $AnyGap = "Yes"
Domain Controller Recent Updates Test#CredCode#                $FinalStatusNow = "WARNING: Domain Controller has not been patched since last 45 days."
Domain Controller Recent Updates Test#CredCode#            }
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#            $TotHotFixes = Get-HotFix -ComputerName $ItemName -Credential $Creds | ?{ $_.installedon } | sort @{e={[datetime]$_.InstalledOn}} | select -last 1 
Domain Controller Recent Updates Test#CredCode#            $LastNowAll = $TotHotFixes.InstalledOn.DateTime
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#            IF ($AnyGap -eq "Yes")
Domain Controller Recent Updates Test#CredCode#            {
Domain Controller Recent Updates Test#CredCode#                $TotNo++
Domain Controller Recent Updates Test#CredCode#            }
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#            $ThisSTr = $ItemName+","+$DCConError+","+$ComConError+","+$TotHF+","+'"'+$LastNowAll+'"'+","+$FinalStatusNow
Domain Controller Recent Updates Test#CredCode#            Add-Content "$TestCSVFile" $ThisStr
Domain Controller Recent Updates Test#CredCode#         }
Domain Controller Recent Updates Test#CredCode#         else
Domain Controller Recent Updates Test#CredCode#         {
Domain Controller Recent Updates Test#CredCode#             $ComConError = $Error[0].Exception.Message
Domain Controller Recent Updates Test#CredCode#             $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Recent Updates Test#CredCode#             Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Recent Updates Test#CredCode#         }
Domain Controller Recent Updates Test#CredCode#    }
Domain Controller Recent Updates Test#CredCode#    else
Domain Controller Recent Updates Test#CredCode#    {
Domain Controller Recent Updates Test#CredCode#       $ComConError = $Error[0].Exception.Message
Domain Controller Recent Updates Test#CredCode#       $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Recent Updates Test#CredCode#       Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Recent Updates Test#CredCode#    }
Domain Controller Recent Updates Test#CredCode#}
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#$OthText = ""
Domain Controller Recent Updates Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Recent Updates Test#CredCode#{
Domain Controller Recent Updates Test#CredCode#   $OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Recent Updates Test#CredCode#}
Domain Controller Recent Updates Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Recent Updates Test#CredCode#{
Domain Controller Recent Updates Test#CredCode#    $TestText = "Some domain controllers have not been patched since last 45 days. $OthText"
Domain Controller Recent Updates Test#CredCode#    $SumVal = $TotNo
Domain Controller Recent Updates Test#CredCode#    $TestStatus="High"
Domain Controller Recent Updates Test#CredCode#}
Domain Controller Recent Updates Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Recent Updates Test#CredCode#{
Domain Controller Recent Updates Test#CredCode#    $TestText = "All Domain Controllers have been patching since last 45 days. Please load and check result to ensure Last Pathing Date is current. $OthText"
Domain Controller Recent Updates Test#CredCode#    $SumVal = ""
Domain Controller Recent Updates Test#CredCode#    $TestStatus="Passed"
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#    IF ($AnyOneOk -eq "No")
Domain Controller Recent Updates Test#CredCode#    {
Domain Controller Recent Updates Test#CredCode#        $TestText = "Error Executing Dynamic Pack."
Domain Controller Recent Updates Test#CredCode#        $SumVal = ""
Domain Controller Recent Updates Test#CredCode#        $TestStatus="Completed with Errors."
Domain Controller Recent Updates Test#CredCode#    }
Domain Controller Recent Updates Test#CredCode#}
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#$TotNo=0
Domain Controller Recent Updates Test#CredCode#$ItemCount=0
Domain Controller Recent Updates Test#CredCode#$TestText = ""
Domain Controller Recent Updates Test#CredCode#$TestStatus=""
Domain Controller Recent Updates Test#CredCode#$SumVal = ""
Domain Controller Recent Updates Test#CredCode#$AnyGap = "No"
Domain Controller Recent Updates Test#CredCode#$ErrorOrNot = "No"
Domain Controller Recent Updates Test#CredCode#$AnyOneOk = "No"
Domain Controller Recent Updates Test#CredCode#$TotDCsInError = 0
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Recent Updates Test#CredCode#{
Domain Controller Recent Updates Test#CredCode#    $DCConError = "Ok"
Domain Controller Recent Updates Test#CredCode#    $DCConStatus = "Ok"
Domain Controller Recent Updates Test#CredCode#    $ProceedOrNot = "Yes"
Domain Controller Recent Updates Test#CredCode#    $Error.Clear()
Domain Controller Recent Updates Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller Recent Updates Test#CredCode#    IF ($Error.Count -ne 0)
Domain Controller Recent Updates Test#CredCode#    {
Domain Controller Recent Updates Test#CredCode#        $ProceedOrNot = "No"
Domain Controller Recent Updates Test#CredCode#        $TotDCsInError++
Domain Controller Recent Updates Test#CredCode#        $DCConError = $Error[0].Exception.Message
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Recent Updates Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Recent Updates Test#CredCode#    }
Domain Controller Recent Updates Test#CredCode#    
Domain Controller Recent Updates Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
Domain Controller Recent Updates Test#CredCode#    {
Domain Controller Recent Updates Test#CredCode#        $ComConError="Ok"        
Domain Controller Recent Updates Test#CredCode#        $Error.Clear()
Domain Controller Recent Updates Test#CredCode#        $TotHotFixes = Get-HotFix -ComputerName $ItemName | Where-Object {$_.Installedon -gt ((Get-Date).Adddays(-45))}
Domain Controller Recent Updates Test#CredCode#         IF ($Error.count -eq 0)
Domain Controller Recent Updates Test#CredCode#         { 
Domain Controller Recent Updates Test#CredCode#            $AnyOneOk="Yes"
Domain Controller Recent Updates Test#CredCode#            $TotHF = $TotHotFixes.Count
Domain Controller Recent Updates Test#CredCode#            $FinalStatusNow = "OK"
Domain Controller Recent Updates Test#CredCode#            IF ($TotHF -eq 0)
Domain Controller Recent Updates Test#CredCode#            {
Domain Controller Recent Updates Test#CredCode#                $IsHFOk = "No"
Domain Controller Recent Updates Test#CredCode#                $AnyGap = "Yes"
Domain Controller Recent Updates Test#CredCode#                $FinalStatusNow = "WARNING: Domain Controller has not been patched since last 45 days."
Domain Controller Recent Updates Test#CredCode#            }
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#            $TotHotFixes = Get-HotFix -ComputerName $ItemName | ?{ $_.installedon } | sort @{e={[datetime]$_.InstalledOn}} | select -last 1 
Domain Controller Recent Updates Test#CredCode#            $LastNowAll = $TotHotFixes.InstalledOn.DateTime
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#            IF ($AnyGap -eq "Yes")
Domain Controller Recent Updates Test#CredCode#            {
Domain Controller Recent Updates Test#CredCode#                $TotNo++
Domain Controller Recent Updates Test#CredCode#            }
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#            $ThisSTr = $ItemName+","+$DCConError+","+$ComConError+","+$TotHF+","+'"'+$LastNowAll+'"'+","+$FinalStatusNow
Domain Controller Recent Updates Test#CredCode#            Add-Content "$TestCSVFile" $ThisStr
Domain Controller Recent Updates Test#CredCode#         }
Domain Controller Recent Updates Test#CredCode#         else
Domain Controller Recent Updates Test#CredCode#         {
Domain Controller Recent Updates Test#CredCode#             $ComConError = $Error[0].Exception.Message
Domain Controller Recent Updates Test#CredCode#             $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Recent Updates Test#CredCode#             Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Recent Updates Test#CredCode#         }
Domain Controller Recent Updates Test#CredCode#    }
Domain Controller Recent Updates Test#CredCode#    else
Domain Controller Recent Updates Test#CredCode#    {
Domain Controller Recent Updates Test#CredCode#       $ComConError = $Error[0].Exception.Message
Domain Controller Recent Updates Test#CredCode#       $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Recent Updates Test#CredCode#       Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Recent Updates Test#CredCode#    }
Domain Controller Recent Updates Test#CredCode#}
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#$OthText = ""
Domain Controller Recent Updates Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Recent Updates Test#CredCode#{
Domain Controller Recent Updates Test#CredCode#   $OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Recent Updates Test#CredCode#}
Domain Controller Recent Updates Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Recent Updates Test#CredCode#{
Domain Controller Recent Updates Test#CredCode#    $TestText = "Some domain controllers have not been patched since last 45 days. $OthText"
Domain Controller Recent Updates Test#CredCode#    $SumVal = $TotNo
Domain Controller Recent Updates Test#CredCode#    $TestStatus="High"
Domain Controller Recent Updates Test#CredCode#}
Domain Controller Recent Updates Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Recent Updates Test#CredCode#{
Domain Controller Recent Updates Test#CredCode#    $TestText = "All Domain Controllers have been patching since last 45 days. Please load and check result to ensure Last Pathing Date is current. $OthText"
Domain Controller Recent Updates Test#CredCode#    $SumVal = ""
Domain Controller Recent Updates Test#CredCode#    $TestStatus="Passed"
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#    IF ($AnyOneOk -eq "No")
Domain Controller Recent Updates Test#CredCode#    {
Domain Controller Recent Updates Test#CredCode#        $TestText = "Error Executing Dynamic Pack."
Domain Controller Recent Updates Test#CredCode#        $SumVal = ""
Domain Controller Recent Updates Test#CredCode#        $TestStatus="Completed with Errors."
Domain Controller Recent Updates Test#CredCode#    }
Domain Controller Recent Updates Test#CredCode#}
Domain Controller Recent Updates Test#CredCode#
Domain Controller Recent Updates Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Recent Updates Test#CredCode#
AD Partitions Backup Test#HeaderCode#$ThisString="AD Partition, Last Backup Date,Final Status"
AD Partitions Backup Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Partitions Backup Test#HeaderCode#
AD Partitions Backup Test#HeaderCode#
AD Partitions Backup Test#HeaderCode#
AD Partitions Backup Test#CredCode#$TotNo=0
AD Partitions Backup Test#CredCode#$TestStatus="Passed"
AD Partitions Backup Test#CredCode#$TestText=""
AD Partitions Backup Test#CredCode#$TodaysDate = Get-Date
AD Partitions Backup Test#CredCode#$IssueOrNot="No"
AD Partitions Backup Test#CredCode#$AnyGap = "No"
AD Partitions Backup Test#CredCode#$AnyOneOk = "No"
AD Partitions Backup Test#CredCode#
AD Partitions Backup Test#CredCode#$Error.Clear()
AD Partitions Backup Test#CredCode#[string]$dnsRoot = (Get-ADDomain).DNSRoot
AD Partitions Backup Test#CredCode#[string[]]$Partitions = (Get-ADRootDSE).namingContexts
AD Partitions Backup Test#CredCode#$contextType = [System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain
AD Partitions Backup Test#CredCode#$context = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext($contextType,$dnsRoot)
AD Partitions Backup Test#CredCode#$domainController = [System.DirectoryServices.ActiveDirectory.DomainController]::findOne($context)
AD Partitions Backup Test#CredCode#IF ($Error.count -eq 0)
AD Partitions Backup Test#CredCode#{
AD Partitions Backup Test#CredCode#    $AnyOneOk = "Yes"
AD Partitions Backup Test#CredCode#    ForEach($partition in $partitions)
AD Partitions Backup Test#CredCode#    {
AD Partitions Backup Test#CredCode#        $domainControllerMetadata = $domainController.GetReplicationMetadata($partition)
AD Partitions Backup Test#CredCode#        $dsaSignature = $domainControllerMetadata.Item("dsaSignature")
AD Partitions Backup Test#CredCode#
AD Partitions Backup Test#CredCode#        $R = $($dsaSignature.LastOriginatingChangeTime.DateTime)
AD Partitions Backup Test#CredCode#        $Z = $TodaysDate
AD Partitions Backup Test#CredCode#        $FinCom = "Ok"
AD Partitions Backup Test#CredCode#        $DaysNotBack = (New-TimeSpan -Start $R -End $Z).Days
AD Partitions Backup Test#CredCode#        IF ($DaysNotBack -ge 7)
AD Partitions Backup Test#CredCode#        {
AD Partitions Backup Test#CredCode#            $FinCom = "Partition has NOT been baked up since last 7 days."
AD Partitions Backup Test#CredCode#            $TestStatus="Failed"
AD Partitions Backup Test#CredCode#            $AnyGap = "Yes"
AD Partitions Backup Test#CredCode#        }
AD Partitions Backup Test#CredCode#        $RemovedComma = $Partition.replace(",", " ")
AD Partitions Backup Test#CredCode#        $ThisSTr = '"'+$RemovedComma+'"'+","+'"'+$($dsaSignature.LastOriginatingChangeTime.DateTime)+'"'+","+$FinCom
AD Partitions Backup Test#CredCode#        Add-Content "$TestCSVFile" $ThisStr
AD Partitions Backup Test#CredCode#        $ThisSTR
AD Partitions Backup Test#CredCode#    }
AD Partitions Backup Test#CredCode#}
AD Partitions Backup Test#CredCode#
AD Partitions Backup Test#CredCode#IF ($AnyGap -eq "Yes")
AD Partitions Backup Test#CredCode#{
AD Partitions Backup Test#CredCode#    $TestStatus = "High"
AD Partitions Backup Test#CredCode#    $SumVal = ""
AD Partitions Backup Test#CredCode#    $TestText = "Some AD Partitions have not been backed up since last 7 days."
AD Partitions Backup Test#CredCode#}
AD Partitions Backup Test#CredCode#
AD Partitions Backup Test#CredCode#IF ($AnyGap -eq "No")
AD Partitions Backup Test#CredCode#{
AD Partitions Backup Test#CredCode#    $TestStatus = "Passed"
AD Partitions Backup Test#CredCode#    $SumVal = ""
AD Partitions Backup Test#CredCode#    $TestText = "All AD Partitions were backed up recently."
AD Partitions Backup Test#CredCode#
AD Partitions Backup Test#CredCode#    IF ($AnyOneOk -eq "No")
AD Partitions Backup Test#CredCode#    {
AD Partitions Backup Test#CredCode#        $TestStatus="Error"
AD Partitions Backup Test#CredCode#        $TestText = "Error Executing Dynamic Pack"
AD Partitions Backup Test#CredCode#        $SumVal = ""
AD Partitions Backup Test#CredCode#    }
AD Partitions Backup Test#CredCode#}
AD Partitions Backup Test#CredCode#
AD Partitions Backup Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Partitions Backup Test#CredCode#
AD Partitions Backup Test#CredCode#$TotNo=0
AD Partitions Backup Test#CredCode#$TestStatus="Passed"
AD Partitions Backup Test#CredCode#$TestText=""
AD Partitions Backup Test#CredCode#$TodaysDate = Get-Date
AD Partitions Backup Test#CredCode#$IssueOrNot="No"
AD Partitions Backup Test#CredCode#$AnyGap = "No"
AD Partitions Backup Test#CredCode#$AnyOneOk = "No"
AD Partitions Backup Test#CredCode#
AD Partitions Backup Test#CredCode#$Error.Clear()
AD Partitions Backup Test#CredCode#[string]$dnsRoot = (Get-ADDomain).DNSRoot
AD Partitions Backup Test#CredCode#[string[]]$Partitions = (Get-ADRootDSE).namingContexts
AD Partitions Backup Test#CredCode#$contextType = [System.DirectoryServices.ActiveDirectory.DirectoryContextType]::Domain
AD Partitions Backup Test#CredCode#$context = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext($contextType,$dnsRoot)
AD Partitions Backup Test#CredCode#$domainController = [System.DirectoryServices.ActiveDirectory.DomainController]::findOne($context)
AD Partitions Backup Test#CredCode#IF ($Error.count -eq 0)
AD Partitions Backup Test#CredCode#{
AD Partitions Backup Test#CredCode#    $AnyOneOk = "Yes"
AD Partitions Backup Test#CredCode#    ForEach($partition in $partitions)
AD Partitions Backup Test#CredCode#    {
AD Partitions Backup Test#CredCode#        $domainControllerMetadata = $domainController.GetReplicationMetadata($partition)
AD Partitions Backup Test#CredCode#        $dsaSignature = $domainControllerMetadata.Item("dsaSignature")
AD Partitions Backup Test#CredCode#
AD Partitions Backup Test#CredCode#        $R = $($dsaSignature.LastOriginatingChangeTime.DateTime)
AD Partitions Backup Test#CredCode#        $Z = $TodaysDate
AD Partitions Backup Test#CredCode#        $FinCom = "Ok"
AD Partitions Backup Test#CredCode#        $DaysNotBack = (New-TimeSpan -Start $R -End $Z).Days
AD Partitions Backup Test#CredCode#        IF ($DaysNotBack -ge 7)
AD Partitions Backup Test#CredCode#        {
AD Partitions Backup Test#CredCode#            $FinCom = "Partition has NOT been baked up since last 7 days."
AD Partitions Backup Test#CredCode#            $TestStatus="Failed"
AD Partitions Backup Test#CredCode#            $AnyGap = "Yes"
AD Partitions Backup Test#CredCode#        }
AD Partitions Backup Test#CredCode#
AD Partitions Backup Test#CredCode#        $RemovedComma = $Partition.replace(",", " ")
AD Partitions Backup Test#CredCode#        $ThisSTr = '"'+$RemovedComma+'"'+","+'"'+$($dsaSignature.LastOriginatingChangeTime.DateTime)+'"'+","+$FinCom
AD Partitions Backup Test#CredCode#        Add-Content "$TestCSVFile" $ThisStr
AD Partitions Backup Test#CredCode#        $ThisSTR
AD Partitions Backup Test#CredCode#    }
AD Partitions Backup Test#CredCode#}
AD Partitions Backup Test#CredCode#
AD Partitions Backup Test#CredCode#IF ($AnyGap -eq "Yes")
AD Partitions Backup Test#CredCode#{
AD Partitions Backup Test#CredCode#    $TestStatus = "High"
AD Partitions Backup Test#CredCode#    $SumVal = ""
AD Partitions Backup Test#CredCode#    $TestText = "Some AD Partitions have not been backed up since last 7 days."
AD Partitions Backup Test#CredCode#}
AD Partitions Backup Test#CredCode#
AD Partitions Backup Test#CredCode#IF ($AnyGap -eq "No")
AD Partitions Backup Test#CredCode#{
AD Partitions Backup Test#CredCode#    $TestStatus = "Passed"
AD Partitions Backup Test#CredCode#    $SumVal = ""
AD Partitions Backup Test#CredCode#    $TestText = "All AD Partitions were backed up recently."
AD Partitions Backup Test#CredCode#
AD Partitions Backup Test#CredCode#    IF ($AnyOneOk -eq "No")
AD Partitions Backup Test#CredCode#    {
AD Partitions Backup Test#CredCode#        $TestStatus="Error"
AD Partitions Backup Test#CredCode#        $TestText = "Error Executing Dynamic Pack"
AD Partitions Backup Test#CredCode#        $SumVal = ""
AD Partitions Backup Test#CredCode#    }
AD Partitions Backup Test#CredCode#}
AD Partitions Backup Test#CredCode#
AD Partitions Backup Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Partitions Backup Test#CredCode#
Domain OU with No GPO Linked Test#HeaderCode#$ThisString="Name, DistinguishedName, In AD Domain"
Domain OU with No GPO Linked Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain OU with No GPO Linked Test#HeaderCode#
Domain OU with No GPO Linked Test#HeaderCode#
Domain OU with No GPO Linked Test#HeaderCode#
Domain OU with No GPO Linked Test#HeaderCode#
Domain OU with No GPO Linked Test#HeaderCode#
Domain OU with No GPO Linked Test#CredCode#$TotNo=0
Domain OU with No GPO Linked Test#CredCode#$ItemCount=0
Domain OU with No GPO Linked Test#CredCode#$TestText = ""
Domain OU with No GPO Linked Test#CredCode#$TestStatus=""
Domain OU with No GPO Linked Test#CredCode#$SumVal = ""
Domain OU with No GPO Linked Test#CredCode#$AnyOneOk = "No"
Domain OU with No GPO Linked Test#CredCode#$ErrorOrNot = "No"
Domain OU with No GPO Linked Test#CredCode#$AnyGap = "No"
Domain OU with No GPO Linked Test#CredCode#
Domain OU with No GPO Linked Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain OU with No GPO Linked Test#CredCode#{ 
Domain OU with No GPO Linked Test#CredCode#
Domain OU with No GPO Linked Test#CredCode#$RDC=Get-ADDomain -Identity $ThisDomain
Domain OU with No GPO Linked Test#CredCode#$PDCDomain = $RDC.PDCEmulator    
Domain OU with No GPO Linked Test#CredCode#
Domain OU with No GPO Linked Test#CredCode#$Error.Clear()
Domain OU with No GPO Linked Test#CredCode#$OUsNoGPOCount=Get-ADOrganizationalUnit -ResultPageSize 200 -ResultSetSize 200 -Filter * -Server $PDCDomain -Credential $Creds
Domain OU with No GPO Linked Test#CredCode#$TotNoGPO=0
Domain OU with No GPO Linked Test#CredCode#
Domain OU with No GPO Linked Test#CredCode#IF ($Error.count -ne 0)
Domain OU with No GPO Linked Test#CredCode#{
Domain OU with No GPO Linked Test#CredCode#$ErrorOrNot = "Yes"       
Domain OU with No GPO Linked Test#CredCode#}
Domain OU with No GPO Linked Test#CredCode#else
Domain OU with No GPO Linked Test#CredCode#{
Domain OU with No GPO Linked Test#CredCode#$AnyOneOk = "Yes"     
Domain OU with No GPO Linked Test#CredCode#ForEach ($AllGPOs in $OUsNoGPOCount)
Domain OU with No GPO Linked Test#CredCode#        {
Domain OU with No GPO Linked Test#CredCode#            $RValue=$AllGPOs.LinkedGroupPolicyObjects
Domain OU with No GPO Linked Test#CredCode#            $RValue.Count
Domain OU with No GPO Linked Test#CredCode#            IF ($RValue.Count -eq 0)
Domain OU with No GPO Linked Test#CredCode#            {
Domain OU with No GPO Linked Test#CredCode#                $TotNo++
Domain OU with No GPO Linked Test#CredCode#                $AnyGap = "Yes"
Domain OU with No GPO Linked Test#CredCode#            } 
Domain OU with No GPO Linked Test#CredCode#        }
Domain OU with No GPO Linked Test#CredCode#        
Domain OU with No GPO Linked Test#CredCode#        ForEach ($ThisItem in $OUsNoGPOCount)
Domain OU with No GPO Linked Test#CredCode#        {
Domain OU with No GPO Linked Test#CredCode#            $RValue=$ThisItem.LinkedGroupPolicyObjects
Domain OU with No GPO Linked Test#CredCode#            $RValue.Count
Domain OU with No GPO Linked Test#CredCode#            IF ($RValue.Count -eq 0)
Domain OU with No GPO Linked Test#CredCode#            {
Domain OU with No GPO Linked Test#CredCode#                $ThisStr=$ThisItem.Name+","+'"'+$ThisItem.DistinguishedName+'"'+","+$ThisDomain
Domain OU with No GPO Linked Test#CredCode#                Add-Content "$TestCSVFile" $ThisStr
Domain OU with No GPO Linked Test#CredCode#            } 
Domain OU with No GPO Linked Test#CredCode#        }
Domain OU with No GPO Linked Test#CredCode#    }
Domain OU with No GPO Linked Test#CredCode#}
Domain OU with No GPO Linked Test#CredCode#IF ($AnyOneOk -eq "Yes")
Domain OU with No GPO Linked Test#CredCode#{
Domain OU with No GPO Linked Test#CredCode#IF ($AnyGap -eq "Yes")
Domain OU with No GPO Linked Test#CredCode#    {
Domain OU with No GPO Linked Test#CredCode#        $TestText = "Some Organizational Units have no GPO linked in AD Domains. Please note list might include child OUs for which GPO is applied at the Parent OU."
Domain OU with No GPO Linked Test#CredCode#        $SumVal = $TotNo
Domain OU with No GPO Linked Test#CredCode#        $TestStatus="High"
Domain OU with No GPO Linked Test#CredCode#    }
Domain OU with No GPO Linked Test#CredCode#    IF ($AnyGap -eq "No")
Domain OU with No GPO Linked Test#CredCode#    {
Domain OU with No GPO Linked Test#CredCode#        $TestText = "All Organizational Units have atleast one GPO defined."
Domain OU with No GPO Linked Test#CredCode#        $SumVal = ""
Domain OU with No GPO Linked Test#CredCode#        $TestStatus="Passed"    
Domain OU with No GPO Linked Test#CredCode#    }
Domain OU with No GPO Linked Test#CredCode#}
Domain OU with No GPO Linked Test#CredCode#else
Domain OU with No GPO Linked Test#CredCode#{
Domain OU with No GPO Linked Test#CredCode#    $TestText = "Error Executing Dynamic Pack."
Domain OU with No GPO Linked Test#CredCode#    $SumVal = ""
Domain OU with No GPO Linked Test#CredCode#    $TestStatus="Completed with Errors."
Domain OU with No GPO Linked Test#CredCode#}
Domain OU with No GPO Linked Test#CredCode#
Domain OU with No GPO Linked Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain OU with No GPO Linked Test#CredCode#$TotNo=0
Domain OU with No GPO Linked Test#CredCode#$ItemCount=0
Domain OU with No GPO Linked Test#CredCode#$TestText = ""
Domain OU with No GPO Linked Test#CredCode#$TestStatus=""
Domain OU with No GPO Linked Test#CredCode#$SumVal = ""
Domain OU with No GPO Linked Test#CredCode#$AnyOneOk = "No"
Domain OU with No GPO Linked Test#CredCode#$ErrorOrNot = "No"
Domain OU with No GPO Linked Test#CredCode#$AnyGap = "No"
Domain OU with No GPO Linked Test#CredCode#
Domain OU with No GPO Linked Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain OU with No GPO Linked Test#CredCode#{ 
Domain OU with No GPO Linked Test#CredCode#
Domain OU with No GPO Linked Test#CredCode#$RDC=Get-ADDomain -Identity $ThisDomain
Domain OU with No GPO Linked Test#CredCode#    $PDCDomain = $RDC.PDCEmulator    
Domain OU with No GPO Linked Test#CredCode#
Domain OU with No GPO Linked Test#CredCode#$Error.Clear()
Domain OU with No GPO Linked Test#CredCode#$OUsNoGPOCount=Get-ADOrganizationalUnit -ResultPageSize 200 -ResultSetSize 200 -Filter * -Server $PDCDomain
Domain OU with No GPO Linked Test#CredCode#$TotNoGPO=0
Domain OU with No GPO Linked Test#CredCode#
Domain OU with No GPO Linked Test#CredCode#IF ($Error.count -ne 0)
Domain OU with No GPO Linked Test#CredCode#{
Domain OU with No GPO Linked Test#CredCode#$ErrorOrNot = "Yes"       
Domain OU with No GPO Linked Test#CredCode#}
Domain OU with No GPO Linked Test#CredCode#else
Domain OU with No GPO Linked Test#CredCode#{
Domain OU with No GPO Linked Test#CredCode#$AnyOneOk = "Yes"     
Domain OU with No GPO Linked Test#CredCode#ForEach ($AllGPOs in $OUsNoGPOCount)
Domain OU with No GPO Linked Test#CredCode#        {
Domain OU with No GPO Linked Test#CredCode#            $RValue=$AllGPOs.LinkedGroupPolicyObjects
Domain OU with No GPO Linked Test#CredCode#            $RValue.Count
Domain OU with No GPO Linked Test#CredCode#            IF ($RValue.Count -eq 0)
Domain OU with No GPO Linked Test#CredCode#            {
Domain OU with No GPO Linked Test#CredCode#                $TotNo++
Domain OU with No GPO Linked Test#CredCode#                $AnyGap = "Yes"
Domain OU with No GPO Linked Test#CredCode#            } 
Domain OU with No GPO Linked Test#CredCode#        }
Domain OU with No GPO Linked Test#CredCode#        
Domain OU with No GPO Linked Test#CredCode#        ForEach ($ThisItem in $OUsNoGPOCount)
Domain OU with No GPO Linked Test#CredCode#        {
Domain OU with No GPO Linked Test#CredCode#            $RValue=$ThisItem.LinkedGroupPolicyObjects
Domain OU with No GPO Linked Test#CredCode#            $RValue.Count
Domain OU with No GPO Linked Test#CredCode#            IF ($RValue.Count -eq 0)
Domain OU with No GPO Linked Test#CredCode#            {
Domain OU with No GPO Linked Test#CredCode#                $ThisStr=$ThisItem.Name+","+'"'+$ThisItem.DistinguishedName+'"'+","+$ThisDomain
Domain OU with No GPO Linked Test#CredCode#                Add-Content "$TestCSVFile" $ThisStr
Domain OU with No GPO Linked Test#CredCode#            } 
Domain OU with No GPO Linked Test#CredCode#        }
Domain OU with No GPO Linked Test#CredCode#    }
Domain OU with No GPO Linked Test#CredCode#}
Domain OU with No GPO Linked Test#CredCode#IF ($AnyOneOk -eq "Yes")
Domain OU with No GPO Linked Test#CredCode#{
Domain OU with No GPO Linked Test#CredCode#IF ($AnyGap -eq "Yes")
Domain OU with No GPO Linked Test#CredCode#    {
Domain OU with No GPO Linked Test#CredCode#        $TestText = "Some Organizational Units have no GPO linked in AD Domains. Please note list might include child OUs for which GPO is applied at the Parent OU."
Domain OU with No GPO Linked Test#CredCode#        $SumVal = $TotNo
Domain OU with No GPO Linked Test#CredCode#        $TestStatus="High"
Domain OU with No GPO Linked Test#CredCode#    }
Domain OU with No GPO Linked Test#CredCode#    IF ($AnyGap -eq "No")
Domain OU with No GPO Linked Test#CredCode#    {
Domain OU with No GPO Linked Test#CredCode#        $TestText = "All Organizational Units have atleast one GPO defined."
Domain OU with No GPO Linked Test#CredCode#        $SumVal = ""
Domain OU with No GPO Linked Test#CredCode#        $TestStatus="Passed"    
Domain OU with No GPO Linked Test#CredCode#    }
Domain OU with No GPO Linked Test#CredCode#}
Domain OU with No GPO Linked Test#CredCode#else
Domain OU with No GPO Linked Test#CredCode#{
Domain OU with No GPO Linked Test#CredCode#    $TestText = "Error Executing Dynamic Pack."
Domain OU with No GPO Linked Test#CredCode#    $SumVal = ""
Domain OU with No GPO Linked Test#CredCode#    $TestStatus="Completed with Errors."
Domain OU with No GPO Linked Test#CredCode#}
Domain OU with No GPO Linked Test#CredCode#
Domain OU with No GPO Linked Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Empty Site Test#HeaderCode#$ThisString="AD Site, Site Location, Total Domain Controllers, Final Status"
AD Empty Site Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Empty Site Test#HeaderCode#
AD Empty Site Test#CredCode#$RPass=$Creds.GetNetworkCredential().Password
AD Empty Site Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName,$CredUserToUse,$RPass)
AD Empty Site Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Empty Site Test#CredCode#IF ($Error.count -eq 0)
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#else
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#$ErrorOrNot="Yes"
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#$TotNo=0
AD Empty Site Test#CredCode#$TestStatus=""
AD Empty Site Test#CredCode#$TestText=""
AD Empty Site Test#CredCode#ForEach ($Site in $ADSites)
AD Empty Site Test#CredCode#{ 
AD Empty Site Test#CredCode#$SiteName = $Site.Name
AD Empty Site Test#CredCode#$SiteLocation = $Site.Location
AD Empty Site Test#CredCode#[array] $SiteServers = $Site.Servers
AD Empty Site Test#CredCode#$TotDCs = $SiteServers.Count
AD Empty Site Test#CredCode#IF (!$SiteServers)
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#$TotNo++
AD Empty Site Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotDCs+",Not Ok"
AD Empty Site Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Empty Site Test#CredCode#} 
AD Empty Site Test#CredCode#else
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotDCs+",Ok"
AD Empty Site Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#
AD Empty Site Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Empty Site Test#CredCode#$SumVal = ""
AD Empty Site Test#CredCode#$TestStatus="Error executing AD Test."
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#else
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode# IF ($TotNo -eq 0)
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#$TestText = "No Empty AD Sites found."
AD Empty Site Test#CredCode#$TestStatus="Passed"
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#else
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#$SumVal = $TotNo
AD Empty Site Test#CredCode#$TestStatus = "High"
AD Empty Site Test#CredCode#$TestText = "AD Health Profiler found Empty AD Sites. These AD Sites do not have a domain controller running. Please check why these AD Sites do not have a domain controller."
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Empty Site Test#CredCode#
AD Empty Site Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName)
AD Empty Site Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Empty Site Test#CredCode#IF ($Error.count -eq 0)
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#else
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#$ErrorOrNot="Yes"
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#$TotNo=0
AD Empty Site Test#CredCode#$TestStatus=""
AD Empty Site Test#CredCode#$TestText=""
AD Empty Site Test#CredCode#ForEach ($Site in $ADSites)
AD Empty Site Test#CredCode#{ 
AD Empty Site Test#CredCode#$SiteName = $Site.Name
AD Empty Site Test#CredCode#$SiteLocation = $Site.Location
AD Empty Site Test#CredCode#[array] $SiteServers = $Site.Servers
AD Empty Site Test#CredCode#$TotDCs = $SiteServers.Count
AD Empty Site Test#CredCode#IF (!$SiteServers)
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#$TotNo++
AD Empty Site Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotDCs+",Not Ok"
AD Empty Site Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Empty Site Test#CredCode#} 
AD Empty Site Test#CredCode#else
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotDCs+", Ok"
AD Empty Site Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Empty Site Test#CredCode#$SumVal = ""
AD Empty Site Test#CredCode#$TestStatus="Error executing AD Test."
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#else
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#IF ($TotNo -eq 0)
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#$TestText = "No Empty AD Sites found."
AD Empty Site Test#CredCode#$TestStatus="Passed"
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#else
AD Empty Site Test#CredCode#{
AD Empty Site Test#CredCode#$SumVal = $TotNo
AD Empty Site Test#CredCode#$TestStatus = "High"
AD Empty Site Test#CredCode#$TestText = "AD Health Profiler found Empty AD Sites. These AD Sites do not have a domain controller running. Please check why these AD Sites do not have a domain controller."
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#}
AD Empty Site Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Empty Site Test#CredCode#
Domain Controller Up Time Test#HeaderCode#$ThisString="Domain Controller,Connection,Command Status, Up Time, Local Time, Time Zone, Days Not Rebooted,Final Status"
Domain Controller Up Time Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain Controller Up Time Test#HeaderCode#
Domain Controller Up Time Test#HeaderCode#
Domain Controller Up Time Test#HeaderCode#
Domain Controller Up Time Test#HeaderCode#
Domain Controller Up Time Test#HeaderCode#
Domain Controller Up Time Test#CredCode#$TotNo=0
Domain Controller Up Time Test#CredCode#$ItemCount=0
Domain Controller Up Time Test#CredCode#$TestText = ""
Domain Controller Up Time Test#CredCode#$TestStatus=""
Domain Controller Up Time Test#CredCode#$SumVal = ""
Domain Controller Up Time Test#CredCode#$AnyGap = "No"
Domain Controller Up Time Test#CredCode#$ErrorOrNot = "No"
Domain Controller Up Time Test#CredCode#$AnyOneOk = "No"
Domain Controller Up Time Test#CredCode#$TotDCsInError = 0
Domain Controller Up Time Test#CredCode#$TodaysDate = Get-Date
Domain Controller Up Time Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Up Time Test#CredCode#{
Domain Controller Up Time Test#CredCode#    $DCConError = "Ok"
Domain Controller Up Time Test#CredCode#    $DCConStatus = "Ok"
Domain Controller Up Time Test#CredCode#    $ProceedOrNot = "Yes"
Domain Controller Up Time Test#CredCode#    $Error.Clear()
Domain Controller Up Time Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller Up Time Test#CredCode#    IF ($Error.Count -ne 0)
Domain Controller Up Time Test#CredCode#    {
Domain Controller Up Time Test#CredCode#        $ProceedOrNot = "No"
Domain Controller Up Time Test#CredCode#        $TotDCsInError++
Domain Controller Up Time Test#CredCode#        $DCConError = $Error[0].Exception.Message
Domain Controller Up Time Test#CredCode#
Domain Controller Up Time Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Up Time Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Up Time Test#CredCode#    }
Domain Controller Up Time Test#CredCode#    
Domain Controller Up Time Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
Domain Controller Up Time Test#CredCode#    {
Domain Controller Up Time Test#CredCode#        $ComConError="Ok"        
Domain Controller Up Time Test#CredCode#              
Domain Controller Up Time Test#CredCode#$Error.Clear()
Domain Controller Up Time Test#CredCode#$operatingSystem = Get-WmiObject Win32_OperatingSystem -ComputerName $ItemName -Credential $Creds
Domain Controller Up Time Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Up Time Test#CredCode#{
Domain Controller Up Time Test#CredCode#    $AnyOneOk="Yes"
Domain Controller Up Time Test#CredCode#    $RTime=[Management.ManagementDateTimeConverter]::ToDateTime($operatingSystem.LastBootUpTime)
Domain Controller Up Time Test#CredCode#    $LocalTime=[Management.ManagementDateTimeConverter]::ToDateTime($operatingSystem.LocalDateTime)
Domain Controller Up Time Test#CredCode#    $CurTimeZone=$operatingSystem.CurrentTimeZone
Domain Controller Up Time Test#CredCode#
Domain Controller Up Time Test#CredCode#    $StatusNow = "Ok"
Domain Controller Up Time Test#CredCode#    $R = $RTime
Domain Controller Up Time Test#CredCode#    $Z = $TodaysDate
Domain Controller Up Time Test#CredCode#    $DayNotRebooted = (New-TimeSpan -Start $R -End $Z).Days
Domain Controller Up Time Test#CredCode#    IF ($DayNotRebooted -ge 30)
Domain Controller Up Time Test#CredCode#    {
Domain Controller Up Time Test#CredCode#        $StatusNow = "WARNING: Not rebooted since last 30 days"
Domain Controller Up Time Test#CredCode#        $AnyGap="Yes"
Domain Controller Up Time Test#CredCode#        $TotNo++
Domain Controller Up Time Test#CredCode#    }
Domain Controller Up Time Test#CredCode#    $ThisStr=$ItemName+","+$DCConError+","+$ComConError+","+$RTime+","+$LocalTime+","+$CurTimeZone+","+$DayNotRebooted+","+$StatusNow
Domain Controller Up Time Test#CredCode#    Add-Content "$TestCSVFile" $ThisStr    
Domain Controller Up Time Test#CredCode#}
Domain Controller Up Time Test#CredCode#        else
Domain Controller Up Time Test#CredCode#        {
Domain Controller Up Time Test#CredCode#            $ComConError = $Error[0].Exception.Message
Domain Controller Up Time Test#CredCode#            $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Up Time Test#CredCode#            Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Up Time Test#CredCode#        }      
Domain Controller Up Time Test#CredCode#    }
Domain Controller Up Time Test#CredCode#    else
Domain Controller Up Time Test#CredCode#    {
Domain Controller Up Time Test#CredCode#       $ComConError = $Error[0].Exception.Message
Domain Controller Up Time Test#CredCode#       $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Up Time Test#CredCode#       Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Up Time Test#CredCode#    }
Domain Controller Up Time Test#CredCode#}
Domain Controller Up Time Test#CredCode#
Domain Controller Up Time Test#CredCode#$OthText = ""
Domain Controller Up Time Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Up Time Test#CredCode#{
Domain Controller Up Time Test#CredCode#   $OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Up Time Test#CredCode#}
Domain Controller Up Time Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Up Time Test#CredCode#{
Domain Controller Up Time Test#CredCode#    $TestText = "Some domain controllers have not been rebooted since last 30 days. It is recommended to reboot domain controllers monthly. $OthText"
Domain Controller Up Time Test#CredCode#    $SumVal = $TotNo
Domain Controller Up Time Test#CredCode#    $TestStatus="High"
Domain Controller Up Time Test#CredCode#}
Domain Controller Up Time Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Up Time Test#CredCode#{
Domain Controller Up Time Test#CredCode#    $TestText = "All Domain controllers have been rebooting regularly. $OthText"
Domain Controller Up Time Test#CredCode#    $SumVal = ""
Domain Controller Up Time Test#CredCode#    $TestStatus="Passed"
Domain Controller Up Time Test#CredCode#
Domain Controller Up Time Test#CredCode#    IF ($AnyOneOk -eq "No")
Domain Controller Up Time Test#CredCode#    {
Domain Controller Up Time Test#CredCode#        $TestText = "Error Executing Dynamic Pack."
Domain Controller Up Time Test#CredCode#        $SumVal = ""
Domain Controller Up Time Test#CredCode#        $TestStatus="Completed with Errors."
Domain Controller Up Time Test#CredCode#    }
Domain Controller Up Time Test#CredCode#}
Domain Controller Up Time Test#CredCode#
Domain Controller Up Time Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Up Time Test#CredCode#
Domain Controller Up Time Test#CredCode#$TotNo=0
Domain Controller Up Time Test#CredCode#$ItemCount=0
Domain Controller Up Time Test#CredCode#$TestText = ""
Domain Controller Up Time Test#CredCode#$TestStatus=""
Domain Controller Up Time Test#CredCode#$SumVal = ""
Domain Controller Up Time Test#CredCode#$AnyGap = "No"
Domain Controller Up Time Test#CredCode#$ErrorOrNot = "No"
Domain Controller Up Time Test#CredCode#$AnyOneOk = "No"
Domain Controller Up Time Test#CredCode#$TotDCsInError = 0
Domain Controller Up Time Test#CredCode#$TodaysDate = Get-Date
Domain Controller Up Time Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Up Time Test#CredCode#{
Domain Controller Up Time Test#CredCode#    $DCConError = "Ok"
Domain Controller Up Time Test#CredCode#    $DCConStatus = "Ok"
Domain Controller Up Time Test#CredCode#    $ProceedOrNot = "Yes"
Domain Controller Up Time Test#CredCode#    $Error.Clear()
Domain Controller Up Time Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller Up Time Test#CredCode#    IF ($Error.Count -ne 0)
Domain Controller Up Time Test#CredCode#    {
Domain Controller Up Time Test#CredCode#        $ProceedOrNot = "No"
Domain Controller Up Time Test#CredCode#        $TotDCsInError++
Domain Controller Up Time Test#CredCode#        $DCConError = $Error[0].Exception.Message
Domain Controller Up Time Test#CredCode#
Domain Controller Up Time Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Up Time Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Up Time Test#CredCode#    }
Domain Controller Up Time Test#CredCode#    
Domain Controller Up Time Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
Domain Controller Up Time Test#CredCode#    {
Domain Controller Up Time Test#CredCode#        $ComConError="Ok"        
Domain Controller Up Time Test#CredCode#              
Domain Controller Up Time Test#CredCode#$Error.Clear()
Domain Controller Up Time Test#CredCode#$operatingSystem = Get-WmiObject Win32_OperatingSystem -ComputerName $ItemName
Domain Controller Up Time Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Up Time Test#CredCode#{
Domain Controller Up Time Test#CredCode#    $AnyOneOk="Yes"
Domain Controller Up Time Test#CredCode#    $RTime=[Management.ManagementDateTimeConverter]::ToDateTime($operatingSystem.LastBootUpTime)
Domain Controller Up Time Test#CredCode#    $LocalTime=[Management.ManagementDateTimeConverter]::ToDateTime($operatingSystem.LocalDateTime)
Domain Controller Up Time Test#CredCode#    $CurTimeZone=$operatingSystem.CurrentTimeZone
Domain Controller Up Time Test#CredCode#
Domain Controller Up Time Test#CredCode#    $StatusNow = "Ok"
Domain Controller Up Time Test#CredCode#    $R = $RTime
Domain Controller Up Time Test#CredCode#    $Z = $TodaysDate
Domain Controller Up Time Test#CredCode#    $DayNotRebooted = (New-TimeSpan -Start $R -End $Z).Days
Domain Controller Up Time Test#CredCode#    IF ($DayNotRebooted -ge 30)
Domain Controller Up Time Test#CredCode#    {
Domain Controller Up Time Test#CredCode#        $StatusNow = "WARNING: Not rebooted since last 30 days"
Domain Controller Up Time Test#CredCode#        $AnyGap="Yes"
Domain Controller Up Time Test#CredCode#        $TotNo++
Domain Controller Up Time Test#CredCode#    }
Domain Controller Up Time Test#CredCode#    $ThisStr=$ItemName+","+$DCConError+","+$ComConError+","+$RTime+","+$LocalTime+","+$CurTimeZone+","+$DayNotRebooted+","+$StatusNow
Domain Controller Up Time Test#CredCode#    Add-Content "$TestCSVFile" $ThisStr    
Domain Controller Up Time Test#CredCode#}
Domain Controller Up Time Test#CredCode#        else
Domain Controller Up Time Test#CredCode#        {
Domain Controller Up Time Test#CredCode#            $ComConError = $Error[0].Exception.Message
Domain Controller Up Time Test#CredCode#            $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Up Time Test#CredCode#            Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Up Time Test#CredCode#        }      
Domain Controller Up Time Test#CredCode#    }
Domain Controller Up Time Test#CredCode#    else
Domain Controller Up Time Test#CredCode#    {
Domain Controller Up Time Test#CredCode#       $ComConError = $Error[0].Exception.Message
Domain Controller Up Time Test#CredCode#       $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Up Time Test#CredCode#       Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Up Time Test#CredCode#    }
Domain Controller Up Time Test#CredCode#}
Domain Controller Up Time Test#CredCode#
Domain Controller Up Time Test#CredCode#$OthText = ""
Domain Controller Up Time Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Up Time Test#CredCode#{
Domain Controller Up Time Test#CredCode#   $OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Up Time Test#CredCode#}
Domain Controller Up Time Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Up Time Test#CredCode#{
Domain Controller Up Time Test#CredCode#    $TestText = "Some domain controllers have not been rebooted since last 30 days. It is recommended to reboot domain controllers monthly. $OthText"
Domain Controller Up Time Test#CredCode#    $SumVal = $TotNo
Domain Controller Up Time Test#CredCode#    $TestStatus="High"
Domain Controller Up Time Test#CredCode#}
Domain Controller Up Time Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Up Time Test#CredCode#{
Domain Controller Up Time Test#CredCode#    $TestText = "All Domain controllers have been rebooting regularly. $OthText"
Domain Controller Up Time Test#CredCode#    $SumVal = ""
Domain Controller Up Time Test#CredCode#    $TestStatus="Passed"
Domain Controller Up Time Test#CredCode#
Domain Controller Up Time Test#CredCode#    IF ($AnyOneOk -eq "No")
Domain Controller Up Time Test#CredCode#    {
Domain Controller Up Time Test#CredCode#        $TestText = "Error Executing Dynamic Pack."
Domain Controller Up Time Test#CredCode#        $SumVal = ""
Domain Controller Up Time Test#CredCode#        $TestStatus="Completed with Errors."
Domain Controller Up Time Test#CredCode#    }
Domain Controller Up Time Test#CredCode#}
Domain Controller Up Time Test#CredCode#
Domain Controller Up Time Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Up Time Test#CredCode#
AD Forest TombstoneLifetime Test#HeaderCode#$ThisStr="Item, Value,Final Status"
AD Forest TombstoneLifetime Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
AD Forest TombstoneLifetime Test#HeaderCode#
AD Forest TombstoneLifetime Test#HeaderCode#
AD Forest TombstoneLifetime Test#HeaderCode#
AD Forest TombstoneLifetime Test#CredCode#$TestStatus="Passed"
AD Forest TombstoneLifetime Test#CredCode#$TestText = ""
AD Forest TombstoneLifetime Test#CredCode#$sumVal=0
AD Forest TombstoneLifetime Test#CredCode#$ReachOrNot = "Yes"
AD Forest TombstoneLifetime Test#CredCode#$AnyGap = "No"
AD Forest TombstoneLifetime Test#CredCode#$TotNo = 0
AD Forest TombstoneLifetime Test#CredCode#
AD Forest TombstoneLifetime Test#CredCode#$RTombLife=(get-adobject -Credential $Creds "cn=Directory Service,cn=Windows NT,cn=Services,$(([adsi]("LDAP://RootDSE")).configurationNamingContext)" -properties "tombstonelifetime").tombstonelifetime
AD Forest TombstoneLifetime Test#CredCode#$FinStatus="Ok"
AD Forest TombstoneLifetime Test#CredCode#
AD Forest TombstoneLifetime Test#CredCode#IF ($RTombLife -eq 180)
AD Forest TombstoneLifetime Test#CredCode#{
AD Forest TombstoneLifetime Test#CredCode#$TestStatus="Passed"
AD Forest TombstoneLifetime Test#CredCode#$TestText = "TombstoneLifetime value is set to 180 days."
AD Forest TombstoneLifetime Test#CredCode#$SumVal = ""
AD Forest TombstoneLifetime Test#CredCode#$FinStatus = "Ok"
AD Forest TombstoneLifetime Test#CredCode#}
AD Forest TombstoneLifetime Test#CredCode#else
AD Forest TombstoneLifetime Test#CredCode#{
AD Forest TombstoneLifetime Test#CredCode#$TestStatus="High"
AD Forest TombstoneLifetime Test#CredCode#$TestText = "TombstoneLifetime value is set to $RTombLife days. Please ensure to set to a value that is acceptable."
AD Forest TombstoneLifetime Test#CredCode#$SumVal = $RTombLife
AD Forest TombstoneLifetime Test#CredCode#$FinStatus = "TombstoneLifetime value is set to $RTombLife days. Please ensure to set to a value that is acceptable."
AD Forest TombstoneLifetime Test#CredCode#}
AD Forest TombstoneLifetime Test#CredCode#
AD Forest TombstoneLifetime Test#CredCode#$STRNew = "TombstoneLifetime Period: $CurForestName"+","+$RTombLife+","+$FinStatus
AD Forest TombstoneLifetime Test#CredCode#Add-Content "$TestCSVFile" $STRNew
AD Forest TombstoneLifetime Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Forest TombstoneLifetime Test#CredCode#
AD Forest TombstoneLifetime Test#CredCode#
AD Forest TombstoneLifetime Test#CredCode#
AD Forest TombstoneLifetime Test#CredCode#$TestStatus="Passed"
AD Forest TombstoneLifetime Test#CredCode#$TestText = ""
AD Forest TombstoneLifetime Test#CredCode#$sumVal=0
AD Forest TombstoneLifetime Test#CredCode#$ReachOrNot = "Yes"
AD Forest TombstoneLifetime Test#CredCode#$AnyGap = "No"
AD Forest TombstoneLifetime Test#CredCode#$TotNo = 0
AD Forest TombstoneLifetime Test#CredCode#
AD Forest TombstoneLifetime Test#CredCode#$RTombLife=(get-adobject "cn=Directory Service,cn=Windows NT,cn=Services,$(([adsi]("LDAP://RootDSE")).configurationNamingContext)" -properties "tombstonelifetime").tombstonelifetime
AD Forest TombstoneLifetime Test#CredCode#$FinStatus="Ok"
AD Forest TombstoneLifetime Test#CredCode#
AD Forest TombstoneLifetime Test#CredCode#IF ($RTombLife -eq 180)
AD Forest TombstoneLifetime Test#CredCode#{
AD Forest TombstoneLifetime Test#CredCode#$TestStatus="Passed"
AD Forest TombstoneLifetime Test#CredCode#$TestText = "TombstoneLifetime value is set to 180 days."
AD Forest TombstoneLifetime Test#CredCode#$SumVal = ""
AD Forest TombstoneLifetime Test#CredCode#$FinStatus = "Ok"
AD Forest TombstoneLifetime Test#CredCode#}
AD Forest TombstoneLifetime Test#CredCode#else
AD Forest TombstoneLifetime Test#CredCode#{
AD Forest TombstoneLifetime Test#CredCode#$TestStatus="High"
AD Forest TombstoneLifetime Test#CredCode#$TestText = "TombstoneLifetime value is set to $RTombLife days. Please ensure to set to a value that is acceptable."
AD Forest TombstoneLifetime Test#CredCode#$SumVal = $RTombLife
AD Forest TombstoneLifetime Test#CredCode#$FinStatus = "TombstoneLifetime value is set to $RTombLife days. Please ensure to set to a value that is acceptable."
AD Forest TombstoneLifetime Test#CredCode#}
AD Forest TombstoneLifetime Test#CredCode#
AD Forest TombstoneLifetime Test#CredCode#$STRNew = "TombstoneLifetime Period: $CurForestName"+","+$RTombLife+","+$FinStatus
AD Forest TombstoneLifetime Test#CredCode#Add-Content "$TestCSVFile" $STRNew
AD Forest TombstoneLifetime Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Forest Replication Test#CredCode#$TotNo=""
AD Forest Replication Test#CredCode#$TestStatus="Passed"
AD Forest Replication Test#CredCode#$TestText=""
AD Forest Replication Test#CredCode#$IssueOrNot="No"
AD Forest Replication Test#CredCode#$AnyGap = "No"
AD Forest Replication Test#CredCode#$AnyOneOk = "No"
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#$PDCInForest =Get-ADForest $CurForestName -Credential $Creds | Select-Object -ExpandProperty RootDomain | Get-ADDomain | Select-Object -Property PDCEmulator
AD Forest Replication Test#CredCode#$PDCServer = $PDCInForest.PDCEmulator
AD Forest Replication Test#CredCode#Get-ADReplicationPartnerMetadata -Credential $Creds -Target * -Partition * -EnumerationServer $PDCServer -Filter {(LastReplicationResult -ne "0")} | Select-Object LastReplicationAttempt, LastReplicationResult, LastReplicationSuccess, Partition, Partner, Server | Export-CSV "$TestCSVFile" -NoType -Append -ErrorAction SilentlyContinue
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#$TotNow = GC $TestCSVFile
AD Forest Replication Test#CredCode#$TotCountNow = $TotNow.Count
AD Forest Replication Test#CredCode#IF ($TotCountNow -gt 2)
AD Forest Replication Test#CredCode#{
AD Forest Replication Test#CredCode#$AnyOneOk = "Yes"
AD Forest Replication Test#CredCode#$RCSV = Import-CSV $TestCSVFile
AD Forest Replication Test#CredCode#ForEach ($AllItems in $RCSV)
AD Forest Replication Test#CredCode#{
AD Forest Replication Test#CredCode#IF ($AllItems.LastReplicationResult -eq "0")
AD Forest Replication Test#CredCode#{
AD Forest Replication Test#CredCode#$TestStatus="Passed"
AD Forest Replication Test#CredCode#$SumVal=""
AD Forest Replication Test#CredCode#$TestText="Active Directory Replication is Working."
AD Forest Replication Test#CredCode#}
AD Forest Replication Test#CredCode#else
AD Forest Replication Test#CredCode#{
AD Forest Replication Test#CredCode#$AnyGap = "Yes"
AD Forest Replication Test#CredCode#$SumVal = ""
AD Forest Replication Test#CredCode#$TestStatus = "Critical"
AD Forest Replication Test#CredCode#$TestText="Replication Errors. A few Domain Controllers are causing Replication errors"
AD Forest Replication Test#CredCode#break
AD Forest Replication Test#CredCode#}
AD Forest Replication Test#CredCode#}
AD Forest Replication Test#CredCode#}
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#IF ($AnyGap -eq "Yes")
AD Forest Replication Test#CredCode#{
AD Forest Replication Test#CredCode#$TestStatus = "Critical"
AD Forest Replication Test#CredCode#$SumVal = ""
AD Forest Replication Test#CredCode#$TestText = "A few Domain Controllers are causing replication errors in Active Directory."
AD Forest Replication Test#CredCode#}
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#IF ($AnyGap -eq "No")
AD Forest Replication Test#CredCode#{
AD Forest Replication Test#CredCode#$TestStatus = "Passed"
AD Forest Replication Test#CredCode#$SumVal = ""
AD Forest Replication Test#CredCode#$TestText = "Active Directory Replication is working normally."
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#IF ($AnyOneOk -eq "No")
AD Forest Replication Test#CredCode#{
AD Forest Replication Test#CredCode#$TestStatus="Error"
AD Forest Replication Test#CredCode#$TestText = "Error Executing Dynamic Pack"
AD Forest Replication Test#CredCode#$SumVal = ""
AD Forest Replication Test#CredCode#}
AD Forest Replication Test#CredCode#}
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#$TotNo=""
AD Forest Replication Test#CredCode#$TestStatus="Passed"
AD Forest Replication Test#CredCode#$TestText=""
AD Forest Replication Test#CredCode#$IssueOrNot="No"
AD Forest Replication Test#CredCode#$AnyGap = "No"
AD Forest Replication Test#CredCode#$AnyOneOk = "No"
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#$PDCInForest =Get-ADForest $CurForestName | Select-Object -ExpandProperty RootDomain | Get-ADDomain | Select-Object -Property PDCEmulator
AD Forest Replication Test#CredCode#$PDCServer = $PDCInForest.PDCEmulator
AD Forest Replication Test#CredCode#Get-ADReplicationPartnerMetadata -Target * -Partition * -EnumerationServer $PDCServer -Filter {(LastReplicationResult -ne "0")} | Select-Object LastReplicationAttempt, LastReplicationResult, LastReplicationSuccess, Partition, Partner, Server | Export-CSV "$TestCSVFile" -NoType -Append -ErrorAction SilentlyContinue
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#$TotNow = GC $TestCSVFile
AD Forest Replication Test#CredCode#$TotCountNow = $TotNow.Count
AD Forest Replication Test#CredCode#IF ($TotCountNow -eq 0)
AD Forest Replication Test#CredCode#{
AD Forest Replication Test#CredCode#    $AnyOneOk = "Yes"
AD Forest Replication Test#CredCode#}    
AD Forest Replication Test#CredCode#else    
AD Forest Replication Test#CredCode#{    
AD Forest Replication Test#CredCode#    $RCSV = Import-CSV $TestCSVFile
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#    ForEach ($AllItems in $RCSV)
AD Forest Replication Test#CredCode#    {
AD Forest Replication Test#CredCode#        IF ($AllItems.LastReplicationResult -eq "0")
AD Forest Replication Test#CredCode#        {
AD Forest Replication Test#CredCode#            $TestStatus="Passed"
AD Forest Replication Test#CredCode#            $SumVal=""
AD Forest Replication Test#CredCode#            $TestText="Active Directory Replication is Working."
AD Forest Replication Test#CredCode#        }
AD Forest Replication Test#CredCode#        else
AD Forest Replication Test#CredCode#        {
AD Forest Replication Test#CredCode#            $AnyGap = "Yes"
AD Forest Replication Test#CredCode#            $SumVal = ""
AD Forest Replication Test#CredCode#            $TestStatus = "Critical"
AD Forest Replication Test#CredCode#            $TestText="Replication Errors. A few Domain Controllers are causing Replication errors"
AD Forest Replication Test#CredCode#            break
AD Forest Replication Test#CredCode#        }
AD Forest Replication Test#CredCode#    }
AD Forest Replication Test#CredCode#}
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#IF ($AnyGap -eq "Yes")
AD Forest Replication Test#CredCode#{
AD Forest Replication Test#CredCode#$TestStatus = "Critical"
AD Forest Replication Test#CredCode#$SumVal = ""
AD Forest Replication Test#CredCode#$TestText = "A few Domain Controllers are causing replication errors in Active Directory."
AD Forest Replication Test#CredCode#}
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#IF ($AnyGap -eq "No")
AD Forest Replication Test#CredCode#{
AD Forest Replication Test#CredCode#$TestStatus = "Passed"
AD Forest Replication Test#CredCode#$SumVal = ""
AD Forest Replication Test#CredCode#$TestText = "Active Directory Replication is working normally."
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#IF ($AnyOneOk -eq "No")
AD Forest Replication Test#CredCode#{
AD Forest Replication Test#CredCode#$TestStatus="Error"
AD Forest Replication Test#CredCode#$TestText = "Error Executing Dynamic Pack"
AD Forest Replication Test#CredCode#$SumVal = ""
AD Forest Replication Test#CredCode#}
AD Forest Replication Test#CredCode#}
AD Forest Replication Test#CredCode#
AD Forest Replication Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Forest Replication Test#CredCode#
AD Domain Zone Scavenging Test#HeaderCode#$ThisString="Domain Zone, Connected to PDC, Is Aging Enabled?, Refresh Interval, No Refresh Interval,Final Status"
AD Domain Zone Scavenging Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Domain Zone Scavenging Test#HeaderCode#
AD Domain Zone Scavenging Test#HeaderCode#
AD Domain Zone Scavenging Test#HeaderCode#
AD Domain Zone Scavenging Test#HeaderCode#
AD Domain Zone Scavenging Test#HeaderCode#
AD Domain Zone Scavenging Test#CredCode#$TotNo=0
AD Domain Zone Scavenging Test#CredCode#$ItemCount=0
AD Domain Zone Scavenging Test#CredCode#$TestText = ""
AD Domain Zone Scavenging Test#CredCode#$TestStatus=""
AD Domain Zone Scavenging Test#CredCode#$SumVal = ""
AD Domain Zone Scavenging Test#CredCode#$AnyGap = "No"
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
AD Domain Zone Scavenging Test#CredCode#{
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#    $PDCServerToConnect = "Unknown"
AD Domain Zone Scavenging Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
AD Domain Zone Scavenging Test#CredCode#    {
AD Domain Zone Scavenging Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
AD Domain Zone Scavenging Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
AD Domain Zone Scavenging Test#CredCode#        {
AD Domain Zone Scavenging Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
AD Domain Zone Scavenging Test#CredCode#            {
AD Domain Zone Scavenging Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
AD Domain Zone Scavenging Test#CredCode#                break
AD Domain Zone Scavenging Test#CredCode#            }
AD Domain Zone Scavenging Test#CredCode#        }    
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#    }
AD Domain Zone Scavenging Test#CredCode#    else
AD Domain Zone Scavenging Test#CredCode#    {
AD Domain Zone Scavenging Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
AD Domain Zone Scavenging Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
AD Domain Zone Scavenging Test#CredCode#        {
AD Domain Zone Scavenging Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
AD Domain Zone Scavenging Test#CredCode#            {
AD Domain Zone Scavenging Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
AD Domain Zone Scavenging Test#CredCode#                break
AD Domain Zone Scavenging Test#CredCode#            }
AD Domain Zone Scavenging Test#CredCode#        }    
AD Domain Zone Scavenging Test#CredCode#    }
AD Domain Zone Scavenging Test#CredCode#   
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#$Error.Clear() 
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#$AgingSettings = Invoke-Command -ComputerName $PDCServerToConnect -Script { param($R1Now) Get-DNSServerZoneAging -name $R1Now } -Credential $Creds -ArgumentList $ThisDomain
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#IF ($Error.count -eq 0)
AD Domain Zone Scavenging Test#CredCode#{
AD Domain Zone Scavenging Test#CredCode#$IsAgingEnabled = $AgingSettings.AgingEnabled        
AD Domain Zone Scavenging Test#CredCode#$OkOrNot="Ok"
AD Domain Zone Scavenging Test#CredCode#IF ($IsAgingEnabled -eq $True)
AD Domain Zone Scavenging Test#CredCode#{
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#else
AD Domain Zone Scavenging Test#CredCode#{
AD Domain Zone Scavenging Test#CredCode#$AnyGap = "Yes"
AD Domain Zone Scavenging Test#CredCode#$OkOrNot = "NO"
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#$RefInt = $AgingSettings.RefreshInterval
AD Domain Zone Scavenging Test#CredCode#$NoRefInt = $AgingSettings.NoRefreshInterval
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#$FinStatus="Ok"
AD Domain Zone Scavenging Test#CredCode#IF ($OkOrNot -eq "NO")
AD Domain Zone Scavenging Test#CredCode#{
AD Domain Zone Scavenging Test#CredCode#$FinStatus ="DNS Scavenging is not enabled for Domain Zone."           
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#$FinalSTR = $ThisDomain+","+$PDCServerToConnect+","+$IsAgingEnabled+","+$RefInt+","+$NoRefInt+","+$FinStatus
AD Domain Zone Scavenging Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR 
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#else
AD Domain Zone Scavenging Test#CredCode#{
AD Domain Zone Scavenging Test#CredCode#$ErrExp = $Error[0]
AD Domain Zone Scavenging Test#CredCode#$FinalSTR = $ThisDomain+",Error Occured: "+'"'+$ErrExp+'"'
AD Domain Zone Scavenging Test#CredCode#Add-Content "$TestCSVFile" $FinalStr
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#IF ($AnyGap -eq "Yes")
AD Domain Zone Scavenging Test#CredCode#{ 
AD Domain Zone Scavenging Test#CredCode#$TestStatus = "High"
AD Domain Zone Scavenging Test#CredCode#$SumVal=""
AD Domain Zone Scavenging Test#CredCode#$TestText = "Domain Zones do not have DNS Aging enabled. It is important to note that if you do not enable Aging for a Domain Zone DNS Server may result inot huge number of stale DNS records. It is recommended to enable DNS Aging for each Domain Zone."
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#IF ($AnyGap -eq "No")
AD Domain Zone Scavenging Test#CredCode#{ 
AD Domain Zone Scavenging Test#CredCode#$TestStatus = "Passed"
AD Domain Zone Scavenging Test#CredCode#$SumVal=""
AD Domain Zone Scavenging Test#CredCode#$TestText = "Domain Zones have Aging enabled."
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#IF ($AnyOneOk -eq "No")
AD Domain Zone Scavenging Test#CredCode#{ 
AD Domain Zone Scavenging Test#CredCode#$TestStatus = "Error"
AD Domain Zone Scavenging Test#CredCode#$SumVal=""
AD Domain Zone Scavenging Test#CredCode#$ErrExp = $Error[0]
AD Domain Zone Scavenging Test#CredCode#$TestText = "Error Executing Dynamic Pack."+'"'+$ErrExp+'"'
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#$TotNo=0
AD Domain Zone Scavenging Test#CredCode#$ItemCount=0
AD Domain Zone Scavenging Test#CredCode#$TestText = ""
AD Domain Zone Scavenging Test#CredCode#$TestStatus=""
AD Domain Zone Scavenging Test#CredCode#$SumVal = ""
AD Domain Zone Scavenging Test#CredCode#$AnyGap = "No"
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
AD Domain Zone Scavenging Test#CredCode#{
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#    $PDCServerToConnect = "Unknown"
AD Domain Zone Scavenging Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
AD Domain Zone Scavenging Test#CredCode#    {
AD Domain Zone Scavenging Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
AD Domain Zone Scavenging Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
AD Domain Zone Scavenging Test#CredCode#        {
AD Domain Zone Scavenging Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
AD Domain Zone Scavenging Test#CredCode#            {
AD Domain Zone Scavenging Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
AD Domain Zone Scavenging Test#CredCode#                break
AD Domain Zone Scavenging Test#CredCode#            }
AD Domain Zone Scavenging Test#CredCode#        }    
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#    }
AD Domain Zone Scavenging Test#CredCode#    else
AD Domain Zone Scavenging Test#CredCode#    {
AD Domain Zone Scavenging Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
AD Domain Zone Scavenging Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
AD Domain Zone Scavenging Test#CredCode#        {
AD Domain Zone Scavenging Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
AD Domain Zone Scavenging Test#CredCode#            {
AD Domain Zone Scavenging Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
AD Domain Zone Scavenging Test#CredCode#                break
AD Domain Zone Scavenging Test#CredCode#            }
AD Domain Zone Scavenging Test#CredCode#        }    
AD Domain Zone Scavenging Test#CredCode#    }
AD Domain Zone Scavenging Test#CredCode#   
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#$Error.Clear() 
AD Domain Zone Scavenging Test#CredCode#$AgingSettings = Get-DNSServerZoneAging -name $ThisDomain -ComputerName $PDCServerToConnect
AD Domain Zone Scavenging Test#CredCode#IF ($Error.count -eq 0)
AD Domain Zone Scavenging Test#CredCode#{
AD Domain Zone Scavenging Test#CredCode#$IsAgingEnabled = $AgingSettings.AgingEnabled        
AD Domain Zone Scavenging Test#CredCode#$OkOrNot="Ok"
AD Domain Zone Scavenging Test#CredCode#IF ($IsAgingEnabled -eq $True)
AD Domain Zone Scavenging Test#CredCode#{
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#else
AD Domain Zone Scavenging Test#CredCode#{
AD Domain Zone Scavenging Test#CredCode#$AnyGap = "Yes"
AD Domain Zone Scavenging Test#CredCode#$OkOrNot = "NO"
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#$RefInt = $AgingSettings.RefreshInterval
AD Domain Zone Scavenging Test#CredCode#$NoRefInt = $AgingSettings.NoRefreshInterval
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#$FinStatus="Ok"
AD Domain Zone Scavenging Test#CredCode#IF ($OkOrNot -eq "NO")
AD Domain Zone Scavenging Test#CredCode#{
AD Domain Zone Scavenging Test#CredCode#$FinStatus ="DNS Scavenging is not enabled for Domain Zone."           
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#$FinalSTR = $ThisDomain+","+$PDCServerToConnect+","+$IsAgingEnabled+","+$RefInt+","+$NoRefInt+","+$FinStatus
AD Domain Zone Scavenging Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR 
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#else
AD Domain Zone Scavenging Test#CredCode#{
AD Domain Zone Scavenging Test#CredCode#$ErrExp = $Error[0]
AD Domain Zone Scavenging Test#CredCode#$FinalSTR = $ThisDomain+",Error Occured: "+'"'+$ErrExp+'"'
AD Domain Zone Scavenging Test#CredCode#Add-Content "$TestCSVFile" $FinalStr
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#IF ($AnyGap -eq "Yes")
AD Domain Zone Scavenging Test#CredCode#{ 
AD Domain Zone Scavenging Test#CredCode#$TestStatus = "High"
AD Domain Zone Scavenging Test#CredCode#$SumVal=""
AD Domain Zone Scavenging Test#CredCode#$TestText = "Domain Zones do not have DNS Aging enabled. It is important to note that if you do not enable Aging for a Domain Zone DNS Server may result inot huge number of stale DNS records. It is recommended to enable DNS Aging for each Domain Zone."
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#IF ($AnyGap -eq "No")
AD Domain Zone Scavenging Test#CredCode#{ 
AD Domain Zone Scavenging Test#CredCode#$TestStatus = "Passed"
AD Domain Zone Scavenging Test#CredCode#$SumVal=""
AD Domain Zone Scavenging Test#CredCode#$TestText = "Domain Zones have Aging enabled."
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#IF ($AnyOneOk -eq "No")
AD Domain Zone Scavenging Test#CredCode#{ 
AD Domain Zone Scavenging Test#CredCode#$TestStatus = "Error"
AD Domain Zone Scavenging Test#CredCode#$SumVal=""
AD Domain Zone Scavenging Test#CredCode#$ErrExp = $Error[0]
AD Domain Zone Scavenging Test#CredCode#$TestText = "Error Executing Dynamic Pack."+'"'+$ErrExp+'"'
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#}
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Scavenging Test#CredCode#
AD Domain Zone Secure Test#HeaderCode#$ThisString="Domain Zone, Connected to PDC, Dynamic Updates to Zone,Final Status"
AD Domain Zone Secure Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Domain Zone Secure Test#HeaderCode#
AD Domain Zone Secure Test#HeaderCode#
AD Domain Zone Secure Test#CredCode#$TotNo=0
AD Domain Zone Secure Test#CredCode#$ItemCount=0
AD Domain Zone Secure Test#CredCode#$TestText = ""
AD Domain Zone Secure Test#CredCode#$TestStatus=""
AD Domain Zone Secure Test#CredCode#$SumVal = ""
AD Domain Zone Secure Test#CredCode#$AnyGap = "No"
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
AD Domain Zone Secure Test#CredCode#{
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#$PDCServerToConnect = "Unknown"
AD Domain Zone Secure Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
AD Domain Zone Secure Test#CredCode#    {
AD Domain Zone Secure Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
AD Domain Zone Secure Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
AD Domain Zone Secure Test#CredCode#        {
AD Domain Zone Secure Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
AD Domain Zone Secure Test#CredCode#            {
AD Domain Zone Secure Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
AD Domain Zone Secure Test#CredCode#                break
AD Domain Zone Secure Test#CredCode#            }
AD Domain Zone Secure Test#CredCode#        }    
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#    }
AD Domain Zone Secure Test#CredCode#    else
AD Domain Zone Secure Test#CredCode#    {
AD Domain Zone Secure Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
AD Domain Zone Secure Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
AD Domain Zone Secure Test#CredCode#        {
AD Domain Zone Secure Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
AD Domain Zone Secure Test#CredCode#            {
AD Domain Zone Secure Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
AD Domain Zone Secure Test#CredCode#                break
AD Domain Zone Secure Test#CredCode#            }
AD Domain Zone Secure Test#CredCode#        }    
AD Domain Zone Secure Test#CredCode#    }
AD Domain Zone Secure Test#CredCode#   
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#$Error.Clear() 
AD Domain Zone Secure Test#CredCode#$ZoneNow = Invoke-Command -ComputerName $PDCServerToConnect -Script { param($R1Now) Get-DnsServerZone -name $R1Now } -Credential $Creds -ArgumentList $ThisDomain
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#IF ($Error.count -eq 0)
AD Domain Zone Secure Test#CredCode#{
AD Domain Zone Secure Test#CredCode#$UpdToZone = $ZoneNow.DynamicUpdate
AD Domain Zone Secure Test#CredCode#$OkOrNot="Ok"
AD Domain Zone Secure Test#CredCode#IF ($UpdToZone -eq "Secure")
AD Domain Zone Secure Test#CredCode#{
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#else
AD Domain Zone Secure Test#CredCode#{
AD Domain Zone Secure Test#CredCode#$AnyGap = "Yes"
AD Domain Zone Secure Test#CredCode#$OkOrNot = "NO"
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#$FinStatus="Ok"
AD Domain Zone Secure Test#CredCode#IF ($OkOrNot -eq "NO")
AD Domain Zone Secure Test#CredCode#{
AD Domain Zone Secure Test#CredCode#$FinStatus ="Domain Zone is configured to accept updates insecurely. Please configure it to Secure."           
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#$FinalSTR = $ThisDomain+","+$PDCServerToConnect+","+$UpdToZone+","+$FinStatus
AD Domain Zone Secure Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR 
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#else
AD Domain Zone Secure Test#CredCode#{
AD Domain Zone Secure Test#CredCode#$ErrExp = $Error[0]
AD Domain Zone Secure Test#CredCode#$FinalSTR = $ThisDomain+",Error Occured: "+'"'+$ErrExp+'"'
AD Domain Zone Secure Test#CredCode#Add-Content "$TestCSVFile" $FinalStr
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#IF ($AnyGap -eq "Yes")
AD Domain Zone Secure Test#CredCode#{ 
AD Domain Zone Secure Test#CredCode#$TestStatus = "High"
AD Domain Zone Secure Test#CredCode#$SumVal=""
AD Domain Zone Secure Test#CredCode#$TestText = "Domain DNS Zones are not configured to accept dynamic updates securely. This is a security risk."
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#IF ($AnyGap -eq "No")
AD Domain Zone Secure Test#CredCode#{ 
AD Domain Zone Secure Test#CredCode#$TestStatus = "Passed"
AD Domain Zone Secure Test#CredCode#$SumVal=""
AD Domain Zone Secure Test#CredCode#$TestText = "Domain DNS Zones are configured to accept dynamic updates securely."
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#IF ($AnyOneOk -eq "No")
AD Domain Zone Secure Test#CredCode#{ 
AD Domain Zone Secure Test#CredCode#$TestStatus = "Error"
AD Domain Zone Secure Test#CredCode#$SumVal=""
AD Domain Zone Secure Test#CredCode#$ErrExp = $Error[0]
AD Domain Zone Secure Test#CredCode#$TestText = "Error Executing Dynamic Pack."+'"'+$ErrExp+'"'
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#$TotNo=0
AD Domain Zone Secure Test#CredCode#$ItemCount=0
AD Domain Zone Secure Test#CredCode#$TestText = ""
AD Domain Zone Secure Test#CredCode#$TestStatus=""
AD Domain Zone Secure Test#CredCode#$SumVal = ""
AD Domain Zone Secure Test#CredCode#$AnyGap = "No"
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
AD Domain Zone Secure Test#CredCode#{
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#$PDCServerToConnect = "Unknown"
AD Domain Zone Secure Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
AD Domain Zone Secure Test#CredCode#    {
AD Domain Zone Secure Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
AD Domain Zone Secure Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
AD Domain Zone Secure Test#CredCode#        {
AD Domain Zone Secure Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
AD Domain Zone Secure Test#CredCode#            {
AD Domain Zone Secure Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
AD Domain Zone Secure Test#CredCode#                break
AD Domain Zone Secure Test#CredCode#            }
AD Domain Zone Secure Test#CredCode#        }    
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#    }
AD Domain Zone Secure Test#CredCode#    else
AD Domain Zone Secure Test#CredCode#    {
AD Domain Zone Secure Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
AD Domain Zone Secure Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
AD Domain Zone Secure Test#CredCode#        {
AD Domain Zone Secure Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
AD Domain Zone Secure Test#CredCode#            {
AD Domain Zone Secure Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
AD Domain Zone Secure Test#CredCode#                break
AD Domain Zone Secure Test#CredCode#            }
AD Domain Zone Secure Test#CredCode#        }    
AD Domain Zone Secure Test#CredCode#    }   
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#$Error.Clear() 
AD Domain Zone Secure Test#CredCode#$ZoneNow = Get-DnsServerZone -ComputerName $PDCServerToConnect -name $ThisDomain
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#IF ($Error.count -eq 0)
AD Domain Zone Secure Test#CredCode#{
AD Domain Zone Secure Test#CredCode#$UpdToZone = $ZoneNow.DynamicUpdate
AD Domain Zone Secure Test#CredCode#$OkOrNot="Ok"
AD Domain Zone Secure Test#CredCode#IF ($UpdToZone -eq "Secure")
AD Domain Zone Secure Test#CredCode#{
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#else
AD Domain Zone Secure Test#CredCode#{
AD Domain Zone Secure Test#CredCode#$AnyGap = "Yes"
AD Domain Zone Secure Test#CredCode#$OkOrNot = "NO"
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#$FinStatus="Ok"
AD Domain Zone Secure Test#CredCode#IF ($OkOrNot -eq "NO")
AD Domain Zone Secure Test#CredCode#{
AD Domain Zone Secure Test#CredCode#$FinStatus ="Domain Zone is configured to accept updates insecurely. Please configure it to Secure."           
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#$FinalSTR = $ThisDomain+","+$PDCServerToConnect+","+$UpdToZone+","+$FinStatus
AD Domain Zone Secure Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR 
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#else
AD Domain Zone Secure Test#CredCode#{
AD Domain Zone Secure Test#CredCode#$ErrExp = $Error[0]
AD Domain Zone Secure Test#CredCode#$FinalSTR = $ThisDomain+",Error Occured: "+'"'+$ErrExp+'"'
AD Domain Zone Secure Test#CredCode#Add-Content "$TestCSVFile" $FinalStr
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#IF ($AnyGap -eq "Yes")
AD Domain Zone Secure Test#CredCode#{ 
AD Domain Zone Secure Test#CredCode#$TestStatus = "High"
AD Domain Zone Secure Test#CredCode#$SumVal=""
AD Domain Zone Secure Test#CredCode#$TestText = "Domain DNS Zones are not configured to accept dynamic updates securely. This is a security risk."
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#IF ($AnyGap -eq "No")
AD Domain Zone Secure Test#CredCode#{ 
AD Domain Zone Secure Test#CredCode#$TestStatus = "Passed"
AD Domain Zone Secure Test#CredCode#$SumVal=""
AD Domain Zone Secure Test#CredCode#$TestText = "Domain DNS Zones are configured to accept dynamic updates securely."
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#IF ($AnyOneOk -eq "No")
AD Domain Zone Secure Test#CredCode#{ 
AD Domain Zone Secure Test#CredCode#$TestStatus = "Error"
AD Domain Zone Secure Test#CredCode#$SumVal=""
AD Domain Zone Secure Test#CredCode#$ErrExp = $Error[0]
AD Domain Zone Secure Test#CredCode#$TestText = "Error Executing Dynamic Pack."+'"'+$ErrExp+'"'
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#}
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Secure Test#CredCode#
AD Domain Zone Static Records Test#HeaderCode#$ThisString="Domain Zone, Connected to PDC, Number of Static CNAME Entries, Number of Static A DNS Entries, Static Record File,Final Status"
AD Domain Zone Static Records Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Domain Zone Static Records Test#HeaderCode#
AD Domain Zone Static Records Test#HeaderCode#
AD Domain Zone Static Records Test#HeaderCode#
AD Domain Zone Static Records Test#HeaderCode#
AD Domain Zone Static Records Test#CredCode#$IntDirNow = "$LocAppDataNow\DynamicPAcksTechnologies\ADHealthProfiler\Data\DNSStaticRecordsTest"
AD Domain Zone Static Records Test#CredCode#mkdir $IntDirNow -Force
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$TotNo=0
AD Domain Zone Static Records Test#CredCode#$ItemCount=0
AD Domain Zone Static Records Test#CredCode#$TestText = ""
AD Domain Zone Static Records Test#CredCode#$TestStatus=""
AD Domain Zone Static Records Test#CredCode#$SumVal = ""
AD Domain Zone Static Records Test#CredCode#$AnyGap = "No"
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#    $PDCServerToConnect = "Unknown"
AD Domain Zone Static Records Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
AD Domain Zone Static Records Test#CredCode#    {
AD Domain Zone Static Records Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
AD Domain Zone Static Records Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
AD Domain Zone Static Records Test#CredCode#        {
AD Domain Zone Static Records Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
AD Domain Zone Static Records Test#CredCode#            {
AD Domain Zone Static Records Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
AD Domain Zone Static Records Test#CredCode#                break
AD Domain Zone Static Records Test#CredCode#            }
AD Domain Zone Static Records Test#CredCode#        }    
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#    }
AD Domain Zone Static Records Test#CredCode#    else
AD Domain Zone Static Records Test#CredCode#    {
AD Domain Zone Static Records Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
AD Domain Zone Static Records Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
AD Domain Zone Static Records Test#CredCode#        {
AD Domain Zone Static Records Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
AD Domain Zone Static Records Test#CredCode#            {
AD Domain Zone Static Records Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
AD Domain Zone Static Records Test#CredCode#                break
AD Domain Zone Static Records Test#CredCode#            }
AD Domain Zone Static Records Test#CredCode#        }    
AD Domain Zone Static Records Test#CredCode#    }
AD Domain Zone Static Records Test#CredCode#   
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$Error.Clear() 
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$StaticARecords = Invoke-Command -ComputerName $PDCServerToConnect -Script { param($R1Now) Get-DnsServerResourceRecord -ZoneName $R1Now -RRType A | Where Timestamp -eq $Null | Select -Property HostName,RecordType -ExpandProperty RecordData } -Credential $Creds -ArgumentList $ThisDomain
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#IF ($Error.count -eq 0)
AD Domain Zone Static Records Test#CredCode#{ 
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$StaticCNAMERecords = Invoke-Command -ComputerName $PDCServerToConnect -Script { param($R1Now) Get-DnsServerResourceRecord -ZoneName $R1Now -RRType CNAME | Where Timestamp -eq $Null | Select -Property HostName,RecordType -ExpandProperty RecordData } -Credential $Creds -ArgumentList $ThisDomain
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$StaticACount = $StaticARecords.HostName.Count
AD Domain Zone Static Records Test#CredCode#$StaticCNAMECount = $StaticCNAMERecords.HostName.Count
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$OkOrNot="Ok"
AD Domain Zone Static Records Test#CredCode#IF ($StaticACount -ne 0 -or $StaticCNAMECount -ne 0)
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#$AnyGap = "Yes"
AD Domain Zone Static Records Test#CredCode#$OkOrNot = "NO"
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$StaticZoneAFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\DNSStaticRecordsTest\"+$CurProfNowForAll+"_StaticRecords_A"+$ThisDomain+".CSV"
AD Domain Zone Static Records Test#CredCode#IF (Test-path $StaticZoneAFile)
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#Remove-item $StaticZoneAFile
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$StaticZoneCNAMEFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\DNSStaticRecordsTest\"+$CurProfNowForAll+"_StaticRecords_CNAME"+$ThisDomain+".CSV"
AD Domain Zone Static Records Test#CredCode#IF (Test-path $StaticZoneCNAMEFile)
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#Remove-item $StaticZoneCNAMEFile
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$StaticARecords | Export-CSV $StaticZoneAFile -Append -NoTypeInfo
AD Domain Zone Static Records Test#CredCode#$StaticCNAMERecords | Export-CSV $StaticZoneCNAMEFile -Append -NoTypeInfo
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$FinStatus=""
AD Domain Zone Static Records Test#CredCode#IF ($OkOrNot -eq "NO")
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#$FinStatus ="Found Static Records in Domain Zones."           
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$FinalSTR =$ThisDomain+","+$PDCServerToConnect+","+$StaticCNAMECount+","+$StaticACount+","+$StaticZoneAFile+";"+$StaticZoneCNAMEFile+","+$FinStatus
AD Domain Zone Static Records Test#CredCode#Add-Content "$TestCSVFile" $FinalStr
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#else
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#$ErrorOrNot="Yes"
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
AD Domain Zone Static Records Test#CredCode#$SumVal = ""
AD Domain Zone Static Records Test#CredCode#$TestStatus="Error executing Dynamic Pack"
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#else
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#IF ($AnyGap -eq "Yes")
AD Domain Zone Static Records Test#CredCode#{ 
AD Domain Zone Static Records Test#CredCode#$TestStatus = "High"
AD Domain Zone Static Records Test#CredCode#$SumVal=""
AD Domain Zone Static Records Test#CredCode#$TestText = "Static DNS Records found in Domain Zones. Please ensure no DNS Static Records have been created for client computers other than servers that require a DNS Static record to be created in the Domain Zones. Static Record files are located at $StaticZoneAFile and $StaticZoneCNAMEFile"
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#IF ($AnyGap -eq "No")
AD Domain Zone Static Records Test#CredCode#{ 
AD Domain Zone Static Records Test#CredCode#$TestStatus = "Passed"
AD Domain Zone Static Records Test#CredCode#$SumVal=""
AD Domain Zone Static Records Test#CredCode#$TestText = "No DNS Static Records were found in Domain Zones."
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$IntDirNow = "$LocAppDataNow\DynamicPAcksTechnologies\ADHealthProfiler\Data\DNSStaticRecordsTest"
AD Domain Zone Static Records Test#CredCode#mkdir $IntDirNow -Force
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$TotNo=0
AD Domain Zone Static Records Test#CredCode#$ItemCount=0
AD Domain Zone Static Records Test#CredCode#$TestText = ""
AD Domain Zone Static Records Test#CredCode#$TestStatus=""
AD Domain Zone Static Records Test#CredCode#$SumVal = ""
AD Domain Zone Static Records Test#CredCode#$AnyGap = "No"
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#    $PDCServerToConnect = "Unknown"
AD Domain Zone Static Records Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
AD Domain Zone Static Records Test#CredCode#    {
AD Domain Zone Static Records Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
AD Domain Zone Static Records Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
AD Domain Zone Static Records Test#CredCode#        {
AD Domain Zone Static Records Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
AD Domain Zone Static Records Test#CredCode#            {
AD Domain Zone Static Records Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
AD Domain Zone Static Records Test#CredCode#                break
AD Domain Zone Static Records Test#CredCode#            }
AD Domain Zone Static Records Test#CredCode#        }    
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#    }
AD Domain Zone Static Records Test#CredCode#    else
AD Domain Zone Static Records Test#CredCode#    {
AD Domain Zone Static Records Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
AD Domain Zone Static Records Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
AD Domain Zone Static Records Test#CredCode#        {
AD Domain Zone Static Records Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
AD Domain Zone Static Records Test#CredCode#            {
AD Domain Zone Static Records Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
AD Domain Zone Static Records Test#CredCode#                break
AD Domain Zone Static Records Test#CredCode#            }
AD Domain Zone Static Records Test#CredCode#        }    
AD Domain Zone Static Records Test#CredCode#    }
AD Domain Zone Static Records Test#CredCode#   
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$Error.Clear() 
AD Domain Zone Static Records Test#CredCode#$StaticARecords = Get-DnsServerResourceRecord -ZoneName $ThisDomain -ComputerName $PDCServerToConnect -RRType A | Where Timestamp -eq $Null | Select -Property HostName,RecordType -ExpandProperty RecordData
AD Domain Zone Static Records Test#CredCode#IF ($Error.count -eq 0)
AD Domain Zone Static Records Test#CredCode#{ 
AD Domain Zone Static Records Test#CredCode#$StaticCNAMERecords = Get-DnsServerResourceRecord -ZoneName $ThisDomain -ComputerName $PDCServerToConnect -RRType CNAME | Where Timestamp -eq $Null | Select -Property HostName,RecordType -ExpandProperty RecordData
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$StaticACount = $StaticARecords.HostName.Count
AD Domain Zone Static Records Test#CredCode#$StaticCNAMECount = $StaticCNAMERecords.HostName.Count
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$OkOrNot="Ok"
AD Domain Zone Static Records Test#CredCode#IF ($StaticACount -ne 0 -or $StaticCNAMECount -ne 0)
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#$AnyGap = "Yes"
AD Domain Zone Static Records Test#CredCode#$OkOrNot = "NO"
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$StaticZoneAFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\DNSStaticRecordsTest\"+$CurProfNowForAll+"_StaticRecords_A"+$ThisDomain+".CSV"
AD Domain Zone Static Records Test#CredCode#IF (Test-path $StaticZoneAFile)
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#Remove-item $StaticZoneAFile
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$StaticZoneCNAMEFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\DNSStaticRecordsTest\"+$CurProfNowForAll+"_StaticRecords_CNAME"+$ThisDomain+".CSV"
AD Domain Zone Static Records Test#CredCode#IF (Test-path $StaticZoneCNAMEFile)
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#Remove-item $StaticZoneCNAMEFile
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$StaticARecords | Export-CSV $StaticZoneAFile -Append -NoTypeInfo
AD Domain Zone Static Records Test#CredCode#$StaticCNAMERecords | Export-CSV $StaticZoneCNAMEFile -Append -NoTypeInfo
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$FinStatus=""
AD Domain Zone Static Records Test#CredCode#IF ($OkOrNot -eq "NO")
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#$FinStatus ="Found Static Records in Domain Zones."           
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#$FinalSTR =$ThisDomain+","+$PDCServerToConnect+","+$StaticCNAMECount+","+$StaticACount+","+$StaticZoneAFile+";"+$StaticZoneCNAMEFile+","+$FinStatus
AD Domain Zone Static Records Test#CredCode#Add-Content "$TestCSVFile" $FinalStr
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#else
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#$ErrorOrNot="Yes"
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
AD Domain Zone Static Records Test#CredCode#$SumVal = ""
AD Domain Zone Static Records Test#CredCode#$TestStatus="Error executing Dynamic Pack"
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#else
AD Domain Zone Static Records Test#CredCode#{
AD Domain Zone Static Records Test#CredCode#IF ($AnyGap -eq "Yes")
AD Domain Zone Static Records Test#CredCode#{ 
AD Domain Zone Static Records Test#CredCode#$TestStatus = "High"
AD Domain Zone Static Records Test#CredCode#$SumVal=""
AD Domain Zone Static Records Test#CredCode#$TestText = "Static DNS Records found in Domain Zones. Please ensure no DNS Static Records have been created for client computers other than servers that require a DNS Static record to be created in the Domain Zones. Static Record files are located at $StaticZoneAFile and $StaticZoneCNAMEFile"
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#IF ($AnyGap -eq "No")
AD Domain Zone Static Records Test#CredCode#{ 
AD Domain Zone Static Records Test#CredCode#$TestStatus = "Passed"
AD Domain Zone Static Records Test#CredCode#$SumVal=""
AD Domain Zone Static Records Test#CredCode#$TestText = "No DNS Static Records were found in Domain Zones."
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#}
AD Domain Zone Static Records Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#
AD Domain Zone Static Records Test#CredCode#
DNS Forwarders Test#HeaderCode#$ThisString="DNS Server,Connection,Command Status, Number of DNS Forwarders, Configured DNS Forwarders, Forwarder Query Timeout,Final Status"
DNS Forwarders Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
DNS Forwarders Test#HeaderCode#
DNS Forwarders Test#HeaderCode#
DNS Forwarders Test#HeaderCode#
DNS Forwarders Test#HeaderCode#
DNS Forwarders Test#CredCode#$TotNo=0
DNS Forwarders Test#CredCode#$ItemCount=0
DNS Forwarders Test#CredCode#$TestText = ""
DNS Forwarders Test#CredCode#$TestStatus=""
DNS Forwarders Test#CredCode#$SumVal = ""
DNS Forwarders Test#CredCode#$AnyGap = "No"
DNS Forwarders Test#CredCode#$ErrorOrNot = "No"
DNS Forwarders Test#CredCode#$AnyOneOk="No"
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
DNS Forwarders Test#CredCode#{
DNS Forwarders Test#CredCode#$Error.Clear()
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#$RCNow = Invoke-Command -ComputerName $ItemName -Script { param($R1Now) Get-DNSServer -ComputerName $R1Now } -Credential $Creds -ArgumentList $ItemName
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#IF ($Error.count -eq 0)
DNS Forwarders Test#CredCode#{
DNS Forwarders Test#CredCode#$AnyOneOk="Yes"
DNS Forwarders Test#CredCode#$TotCFNow = $RCNow.ServerForwarder
DNS Forwarders Test#CredCode#$FordTimeout = $RCNow.ServerForwarder.Timeout
DNS Forwarders Test#CredCode#$TotForwarders=$RCNow.ServerForwarder.IpAddress.Count
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#$FinStatus=""
DNS Forwarders Test#CredCode#IF ($TotForwarders -eq 0)
DNS Forwarders Test#CredCode#{
DNS Forwarders Test#CredCode#$TotNo++
DNS Forwarders Test#CredCode#$AnyGap = "Yes"
DNS Forwarders Test#CredCode#$FinStatus ="This DNS Server does not have any DNS Forwarders configured."
DNS Forwarders Test#CredCode#}
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#$FinalVal=""
DNS Forwarders Test#CredCode#ForEach ($Item in $TotCFNow)
DNS Forwarders Test#CredCode#{
DNS Forwarders Test#CredCode#$SName = $Item.IPAddress.ipaddresstostring
DNS Forwarders Test#CredCode#$FinalVal += $SName+" "
DNS Forwarders Test#CredCode#}
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#$FinalSTR = $ItemName+",Reachable,"+$TotForwarders+","+$FinalVal+","+$FordTimeout+","+$FinStatus
DNS Forwarders Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#}
DNS Forwarders Test#CredCode#else
DNS Forwarders Test#CredCode#{
DNS Forwarders Test#CredCode#$ErrorOrNot = "Yes"
DNS Forwarders Test#CredCode#$ErrExp = $Error[0]
DNS Forwarders Test#CredCode#$FinalSTR = $ItemName+",Error Occured: "+'"'+$ErrExp+'"'
DNS Forwarders Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#}
DNS Forwarders Test#CredCode#}
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#IF ($AnyGap -eq "Yes")
DNS Forwarders Test#CredCode#{
DNS Forwarders Test#CredCode#$TestText = "Some DNS Servers are not configured with DNS Forwarders. It is important to configure DNS Forwarders on production DNS Servers to be able to resolve DNS queries throughout Active Directory."
DNS Forwarders Test#CredCode#$SumVal = $TotNo
DNS Forwarders Test#CredCode#$TestStatus="High"
DNS Forwarders Test#CredCode#}
DNS Forwarders Test#CredCode#IF ($AnyGap -eq "No")
DNS Forwarders Test#CredCode#{
DNS Forwarders Test#CredCode#$TestText = "All DNS Servers have one or more DNS Forwarders configured."
DNS Forwarders Test#CredCode#$SumVal = ""
DNS Forwarders Test#CredCode#$TestStatus="Passed"
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#IF ($AnyOneOk -eq "No")
DNS Forwarders Test#CredCode#{
DNS Forwarders Test#CredCode#$ErrExp = $Error[0]
DNS Forwarders Test#CredCode#$TestText = "Error Executing Dynamic Pack."+'"'+$ErrExp+'"' 
DNS Forwarders Test#CredCode#$SumVal = ""
DNS Forwarders Test#CredCode#$TestStatus="Error"
DNS Forwarders Test#CredCode#}
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#}
DNS Forwarders Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#$TotNo=0
DNS Forwarders Test#CredCode#$ItemCount=0
DNS Forwarders Test#CredCode#$TestText = ""
DNS Forwarders Test#CredCode#$TestStatus=""
DNS Forwarders Test#CredCode#$SumVal = ""
DNS Forwarders Test#CredCode#$AnyGap = "No"
DNS Forwarders Test#CredCode#$ErrorOrNot = "No"
DNS Forwarders Test#CredCode#$AnyOneOk = "No"
DNS Forwarders Test#CredCode#$TotDCsInError = 0
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
DNS Forwarders Test#CredCode#{
DNS Forwarders Test#CredCode#    $DCConError = "Ok"
DNS Forwarders Test#CredCode#    $DCConStatus = "Ok"
DNS Forwarders Test#CredCode#    $ProceedOrNot = "Yes"
DNS Forwarders Test#CredCode#    $Error.Clear()
DNS Forwarders Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName
DNS Forwarders Test#CredCode#    IF ($Error.Count -ne 0)
DNS Forwarders Test#CredCode#    {
DNS Forwarders Test#CredCode#        $ProceedOrNot = "No"
DNS Forwarders Test#CredCode#        $TotDCsInError++
DNS Forwarders Test#CredCode#        $DCConError = $Error[0].Exception.Message
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
DNS Forwarders Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
DNS Forwarders Test#CredCode#    }
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
DNS Forwarders Test#CredCode#    {
DNS Forwarders Test#CredCode#        $ComConError="Ok"        
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#    $Error.Clear()
DNS Forwarders Test#CredCode#    $RCNow = Get-DNSServer -ComputerName $ItemName
DNS Forwarders Test#CredCode#    IF ($Error.count -eq 0)
DNS Forwarders Test#CredCode#    {
DNS Forwarders Test#CredCode#        $AnyOneOk="Yes"
DNS Forwarders Test#CredCode#        $TotCFNow = $RCNow.ServerForwarder
DNS Forwarders Test#CredCode#        $FordTimeout = $RCNow.ServerForwarder.Timeout
DNS Forwarders Test#CredCode#        $TotForwarders=$RCNow.ServerForwarder.IPAddress.Count
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#        $FinStatus="Ok"
DNS Forwarders Test#CredCode#        IF ($TotForwarders -eq 0)
DNS Forwarders Test#CredCode#        {
DNS Forwarders Test#CredCode#            $TotNo++
DNS Forwarders Test#CredCode#            $AnyGap = "Yes"
DNS Forwarders Test#CredCode#            $FinStatus ="This DNS Server does not have any DNS Forwarders configured."
DNS Forwarders Test#CredCode#        }
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#        $FinalVal=""
DNS Forwarders Test#CredCode#        ForEach ($Item in $TotCFNow)
DNS Forwarders Test#CredCode#        {
DNS Forwarders Test#CredCode#            $SName = $Item.IPAddress.ipaddresstostring
DNS Forwarders Test#CredCode#            $FinalVal += $SName+" "
DNS Forwarders Test#CredCode#        }
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#        $FinalSTR = $ItemName+",$DCConError,"+$ComConError+","+$TotForwarders+","+$FinalVal+","+$FordTimeout+","+$FinStatus
DNS Forwarders Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
DNS Forwarders Test#CredCode#    }
DNS Forwarders Test#CredCode#    else
DNS Forwarders Test#CredCode#    {
DNS Forwarders Test#CredCode#        $ComConError = $Error[0].Exception.Message
DNS Forwarders Test#CredCode#        $FinalSTR = $ItemName+",$DCConError,"+$ComConError
DNS Forwarders Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
DNS Forwarders Test#CredCode#    }
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#    }
DNS Forwarders Test#CredCode#    
DNS Forwarders Test#CredCode#}
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#$OthText = ""
DNS Forwarders Test#CredCode#IF ($TotDCsInError -ne 0)
DNS Forwarders Test#CredCode#{
DNS Forwarders Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
DNS Forwarders Test#CredCode#}
DNS Forwarders Test#CredCode#IF ($AnyGap -eq "Yes")
DNS Forwarders Test#CredCode#{
DNS Forwarders Test#CredCode#$TestText = "Some DNS Servers are not configured with DNS Forwarders. It is important to configure DNS Forwarders on production DNS Servers to be able to resolve DNS queries throughout Active Directory. $OthText"
DNS Forwarders Test#CredCode#$SumVal = $TotNo
DNS Forwarders Test#CredCode#$TestStatus="Critical"
DNS Forwarders Test#CredCode#}
DNS Forwarders Test#CredCode#IF ($AnyGap -eq "No")
DNS Forwarders Test#CredCode#{
DNS Forwarders Test#CredCode#$TestText = "DNS Servers have one or more DNS Forwarders configured. $OthText"
DNS Forwarders Test#CredCode#$SumVal = ""
DNS Forwarders Test#CredCode#$TestStatus="Passed"
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#IF ($AnyOneOk -eq "No")
DNS Forwarders Test#CredCode#{
DNS Forwarders Test#CredCode#$TestText = "Error Executing Dynamic Pack."
DNS Forwarders Test#CredCode#$SumVal = ""
DNS Forwarders Test#CredCode#$TestStatus="Completed with Errors."
DNS Forwarders Test#CredCode#}
DNS Forwarders Test#CredCode#}
DNS Forwarders Test#CredCode#
DNS Forwarders Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DNS Root Hints Test#HeaderCode#$ThisString="DNS Server,Connection,Command Status, Number of Root Hints Configured, Configured Root Hints, Use Root Hints?,Final Status"
DNS Root Hints Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
DNS Root Hints Test#HeaderCode#
DNS Root Hints Test#HeaderCode#
DNS Root Hints Test#HeaderCode#
DNS Root Hints Test#HeaderCode#
DNS Root Hints Test#CredCode#$TotNo=0
DNS Root Hints Test#CredCode#$ItemCount=0
DNS Root Hints Test#CredCode#$TestText = ""
DNS Root Hints Test#CredCode#$TestStatus=""
DNS Root Hints Test#CredCode#$SumVal = ""
DNS Root Hints Test#CredCode#$AnyGap = "No"
DNS Root Hints Test#CredCode#$ErrorOrNot = "No"
DNS Root Hints Test#CredCode#$AnyOneOk="No"
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#$Error.Clear()
DNS Root Hints Test#CredCode#$RCNow = Invoke-Command -ComputerName $ItemName -Script { param($R1Now) Get-DNSServer -ComputerName $R1Now } -Credential $Creds -ArgumentList $ItemName
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#IF ($Error.count -eq 0)
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#$RCNow.ServerRootHint
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#$AnyOneOk="Yes"
DNS Root Hints Test#CredCode#$TotCFNow = $RCNow.ServerRootHint
DNS Root Hints Test#CredCode#$TotRHints=$RCNow.ServerRootHint.Count
DNS Root Hints Test#CredCode#$UseRHints = $RCNow.ServerForwarder.UseRootHint
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#$FinStatus=""
DNS Root Hints Test#CredCode#IF ($TotRHints -eq 0)
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#$TotNo++
DNS Root Hints Test#CredCode#$AnyGap = "Yes"
DNS Root Hints Test#CredCode#$FinStatus ="This DNS Server does not have Root Hints configured."
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#$ThisMsgNow = $UseRHints
DNS Root Hints Test#CredCode#IF ($UseRHints -eq $false)
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#$ThisMsgNow = "WARNING: This DNS Server will not use Root Hints as use of Root Hints on Fowarders Tab of DNS Server is disabled."
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#$FinalVal=""
DNS Root Hints Test#CredCode#ForEach ($Item in $TotCFNow)
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#$SName = $Item.NameServer.RecordData.NameServer
DNS Root Hints Test#CredCode#$SPAddress = $Item.IPAddress.recorddata.IPv4Address.IPAddressToString
DNS Root Hints Test#CredCode#$FinalVal += $SName+" ; "+$SPAddress
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#$FinalSTR = $ItemName+",Reachable,"+$TotRHints+","+$FinalVal+","+$ThisMsgNow+","+$FinStatus
DNS Root Hints Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#else
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#$ErrorOrNot = "Yes"
DNS Root Hints Test#CredCode#$ErrExp = $Error[0]
DNS Root Hints Test#CredCode#$FinalSTR = $ItemName+",Error Occured: "+'"'+$ErrExp+'"'
DNS Root Hints Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#IF ($AnyGap -eq "Yes")
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#$TestText = "Some DNS Servers do not have Root Hints configured. It is recommended to configured Root Hints as Root Hints are used when DNS Forwarders are not able to resolve DNS Queries."
DNS Root Hints Test#CredCode#$SumVal = $TotNo
DNS Root Hints Test#CredCode#$TestStatus="High"
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#IF ($AnyGap -eq "No")
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#$TestText = "All DNS Servers have one or more Root Hints configured."
DNS Root Hints Test#CredCode#$SumVal = ""
DNS Root Hints Test#CredCode#$TestStatus="Passed"
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#IF ($AnyOneOk -eq "No")
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#$ErrExp = $Error[0]
DNS Root Hints Test#CredCode#$TestText = "Error Executing Dynamic Pack."+'"'+$ErrExp+'"'
DNS Root Hints Test#CredCode#$SumVal = ""
DNS Root Hints Test#CredCode#$TestStatus="Error"
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#$TotNo=0
DNS Root Hints Test#CredCode#$ItemCount=0
DNS Root Hints Test#CredCode#$TestText = ""
DNS Root Hints Test#CredCode#$TestStatus=""
DNS Root Hints Test#CredCode#$SumVal = ""
DNS Root Hints Test#CredCode#$AnyGap = "No"
DNS Root Hints Test#CredCode#$ErrorOrNot = "No"
DNS Root Hints Test#CredCode#$AnyOneOk = "No"
DNS Root Hints Test#CredCode#$TotDCsInError = 0
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#    $DCConError = "Ok"
DNS Root Hints Test#CredCode#    $DCConStatus = "Ok"
DNS Root Hints Test#CredCode#    $ProceedOrNot = "Yes"
DNS Root Hints Test#CredCode#    $Error.Clear()
DNS Root Hints Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName 
DNS Root Hints Test#CredCode#    IF ($Error.Count -ne 0)
DNS Root Hints Test#CredCode#    {
DNS Root Hints Test#CredCode#        $ProceedOrNot = "No"
DNS Root Hints Test#CredCode#        $TotDCsInError++
DNS Root Hints Test#CredCode#        $DCConError = $Error[0].Exception.Message
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
DNS Root Hints Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
DNS Root Hints Test#CredCode#    }
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
DNS Root Hints Test#CredCode#    {
DNS Root Hints Test#CredCode#        $ComConError="Ok"        
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#        $Error.Clear()
DNS Root Hints Test#CredCode#$RCNow = Get-DNSServer -ComputerName $ItemName
DNS Root Hints Test#CredCode#IF ($Error.count -eq 0)
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#    $RCNow.ServerRootHint
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#    $AnyOneOk="Yes"
DNS Root Hints Test#CredCode#    $TotCFNow = $RCNow.ServerRootHint
DNS Root Hints Test#CredCode#    $TotRHints=$RCNow.ServerRootHint.Count
DNS Root Hints Test#CredCode#    $UseRHints = $RCNow.ServerForwarder.UseRootHint
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#    $FinStatus="Ok"
DNS Root Hints Test#CredCode#    IF ($TotRHints -eq 0)
DNS Root Hints Test#CredCode#    {
DNS Root Hints Test#CredCode#        $TotNo++
DNS Root Hints Test#CredCode#        $AnyGap = "Yes"
DNS Root Hints Test#CredCode#        $FinStatus ="This DNS Server does not have Root Hints configured."
DNS Root Hints Test#CredCode#    }
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#    $ThisMsgNow = $UseRHints
DNS Root Hints Test#CredCode#    IF ($UseRHints -eq $false)
DNS Root Hints Test#CredCode#    {
DNS Root Hints Test#CredCode#        $AnyGap = "Yes"
DNS Root Hints Test#CredCode#        $FinStatus = "Not Ok"
DNS Root Hints Test#CredCode#        $ThisMsgNow = "WARNING: This DNS Server will not use Root Hints as use of Root Hints on Fowarders Tab is disabled."
DNS Root Hints Test#CredCode#    }
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#    $FinalVal=""
DNS Root Hints Test#CredCode#    ForEach ($Item in $TotCFNow)
DNS Root Hints Test#CredCode#    {
DNS Root Hints Test#CredCode#        $SName = $Item.NameServer.RecordData.NameServer
DNS Root Hints Test#CredCode#        $SPAddress = $Item.IPAddress.recorddata.IPv4Address.IPAddressToString
DNS Root Hints Test#CredCode#        $FinalVal += $SName+" ; "+$SPAddress
DNS Root Hints Test#CredCode#    }
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#    $FinalSTR = $ItemName+",$DCConError,"+$ComConError+","+$TotRHints+","+$FinalVal+","+$ThisMsgNow+","+$FinStatus
DNS Root Hints Test#CredCode#    Add-Content "$TestCSVFile" $FinalSTR
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#else
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#    $ComConError = $Error[0].Exception.Message
DNS Root Hints Test#CredCode#    $FinalSTR = $ItemName+",$DCConError,"+$ComConError
DNS Root Hints Test#CredCode#    Add-Content "$TestCSVFile" $FinalSTR        
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#    
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#$OthText = ""
DNS Root Hints Test#CredCode#IF ($TotDCsInError -ne 0)
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#IF ($AnyGap -eq "Yes")
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#$TestText = "Some DNS Servers do not have Root Hints configured. It is recommended to configured Root Hints as Root Hints are used when DNS Forwarders are not able to resolve DNS Queries. $OthText"
DNS Root Hints Test#CredCode#$SumVal = $TotNo
DNS Root Hints Test#CredCode#$TestStatus="Critical"
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#IF ($AnyGap -eq "No")
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#$TestText = "All DNS Servers have one or more Root Hints configured. $OthText"
DNS Root Hints Test#CredCode#$SumVal = ""
DNS Root Hints Test#CredCode#$TestStatus="Passed"
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#IF ($AnyOneOk -eq "No")
DNS Root Hints Test#CredCode#{
DNS Root Hints Test#CredCode#$TestText = "Error Executing Dynamic Pack."
DNS Root Hints Test#CredCode#$SumVal = ""
DNS Root Hints Test#CredCode#$TestStatus="Completed with Errors."
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#}
DNS Root Hints Test#CredCode#
DNS Root Hints Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DNS Round Robin Test#HeaderCode#$ThisString="DNS Server,Connection,Command Status, Is Round Robin Enabled?,Final Status"
DNS Round Robin Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
DNS Round Robin Test#HeaderCode#
DNS Round Robin Test#HeaderCode#
DNS Round Robin Test#CredCode#$TotNo=0
DNS Round Robin Test#CredCode#$ItemCount=0
DNS Round Robin Test#CredCode#$TestText = ""
DNS Round Robin Test#CredCode#$TestStatus=""
DNS Round Robin Test#CredCode#$SumVal = ""
DNS Round Robin Test#CredCode#$AnyGap = "No"
DNS Round Robin Test#CredCode#$ErrorOrNot = "No"
DNS Round Robin Test#CredCode#$AnyOneOk="No"
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
DNS Round Robin Test#CredCode#{
DNS Round Robin Test#CredCode#$Error.Clear()
DNS Round Robin Test#CredCode#$RCNow = Invoke-Command -ComputerName $ItemName -Script { param($R1Now) Get-DNSServer -ComputerName $R1Now } -Credential $Creds -ArgumentList $ItemName
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#IF ($Error.count -eq 0)
DNS Round Robin Test#CredCode#{ 
DNS Round Robin Test#CredCode#$AnyOneOk="Yes"
DNS Round Robin Test#CredCode#$IsREnabled=$RCNow.ServerSetting.RoundRobin
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#$FinStatus=""
DNS Round Robin Test#CredCode#IF ($IsREnabled -eq $false)
DNS Round Robin Test#CredCode#{
DNS Round Robin Test#CredCode#$TotNo++
DNS Round Robin Test#CredCode#$AnyGap = "Yes"
DNS Round Robin Test#CredCode#$FinStatus ="CRITICAL: This DNS Server does not have DNS Round Robin Enabled."
DNS Round Robin Test#CredCode#}
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#$FinalSTR = $ItemName+",Reachable,"+$IsREnabled+","+$FinStatus
DNS Round Robin Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
DNS Round Robin Test#CredCode#}
DNS Round Robin Test#CredCode#else
DNS Round Robin Test#CredCode#{
DNS Round Robin Test#CredCode#$ErrorOrNot = "Yes"
DNS Round Robin Test#CredCode#$FinalSTR = $ItemName+",Not Reachable"
DNS Round Robin Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
DNS Round Robin Test#CredCode#}
DNS Round Robin Test#CredCode#}
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#IF ($AnyGap -eq "Yes")
DNS Round Robin Test#CredCode#{
DNS Round Robin Test#CredCode#$TestText = "Some DNS Servers do not have DNS Round Robin enabled."
DNS Round Robin Test#CredCode#$SumVal = $TotNo
DNS Round Robin Test#CredCode#$TestStatus="Critical"
DNS Round Robin Test#CredCode#}
DNS Round Robin Test#CredCode#IF ($AnyGap -eq "No")
DNS Round Robin Test#CredCode#{
DNS Round Robin Test#CredCode#$TestText = "All DNS Servers DNS Round Robin Enabled."
DNS Round Robin Test#CredCode#$SumVal = ""
DNS Round Robin Test#CredCode#$TestStatus="Passed"
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#IF ($AnyOneOk -eq "No")
DNS Round Robin Test#CredCode#{
DNS Round Robin Test#CredCode#$TestText = "Error Executing Dynamic Pack."
DNS Round Robin Test#CredCode#$SumVal = ""
DNS Round Robin Test#CredCode#$TestStatus="Completed with Errors."
DNS Round Robin Test#CredCode#}
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#}
DNS Round Robin Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#$TotNo=0
DNS Round Robin Test#CredCode#$ItemCount=0
DNS Round Robin Test#CredCode#$TestText = ""
DNS Round Robin Test#CredCode#$TestStatus=""
DNS Round Robin Test#CredCode#$SumVal = ""
DNS Round Robin Test#CredCode#$AnyGap = "No"
DNS Round Robin Test#CredCode#$ErrorOrNot = "No"
DNS Round Robin Test#CredCode#$AnyOneOk = "No"
DNS Round Robin Test#CredCode#$TotDCsInError = 0
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
DNS Round Robin Test#CredCode#{
DNS Round Robin Test#CredCode#    $DCConError = "Ok"
DNS Round Robin Test#CredCode#    $DCConStatus = "Ok"
DNS Round Robin Test#CredCode#    $ProceedOrNot = "Yes"
DNS Round Robin Test#CredCode#    $Error.Clear()
DNS Round Robin Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName
DNS Round Robin Test#CredCode#    IF ($Error.Count -ne 0)
DNS Round Robin Test#CredCode#    {
DNS Round Robin Test#CredCode#        $ProceedOrNot = "No"
DNS Round Robin Test#CredCode#        $TotDCsInError++
DNS Round Robin Test#CredCode#        $DCConError = $Error[0].Exception.Message
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
DNS Round Robin Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
DNS Round Robin Test#CredCode#    }
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
DNS Round Robin Test#CredCode#    {
DNS Round Robin Test#CredCode#        $ComConError="Ok"        
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#        $Error.Clear()
DNS Round Robin Test#CredCode#$RCNow = Get-DNSServer -ComputerName $ItemName
DNS Round Robin Test#CredCode#IF ($Error.count -eq 0)
DNS Round Robin Test#CredCode#{ 
DNS Round Robin Test#CredCode#    $AnyOneOk="Yes"
DNS Round Robin Test#CredCode#    $IsREnabled=$RCNow.ServerSetting.RoundRobin
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#    $FinStatus="Ok"
DNS Round Robin Test#CredCode#    IF ($IsREnabled -eq $false)
DNS Round Robin Test#CredCode#    {
DNS Round Robin Test#CredCode#        $TotNo++
DNS Round Robin Test#CredCode#        $AnyGap = "Yes"
DNS Round Robin Test#CredCode#        $FinStatus ="CRITICAL: This DNS Server does not have DNS Round Robin Enabled."
DNS Round Robin Test#CredCode#    }
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#    $FinalSTR = $ItemName+",$DCConError,"+$ComConError+","+$IsREnabled+","+$FinStatus
DNS Round Robin Test#CredCode#    Add-Content "$TestCSVFile" $FinalSTR
DNS Round Robin Test#CredCode#}
DNS Round Robin Test#CredCode#else
DNS Round Robin Test#CredCode#{
DNS Round Robin Test#CredCode#    $ComConError = $Error[0].Exception.Message
DNS Round Robin Test#CredCode#    $FinalSTR = $ItemName+",$DCConError,"+$ComConError
DNS Round Robin Test#CredCode#    Add-Content "$TestCSVFile" $FinalSTR        
DNS Round Robin Test#CredCode#}
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#        
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#    }
DNS Round Robin Test#CredCode#    
DNS Round Robin Test#CredCode#}
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#$OthText = ""
DNS Round Robin Test#CredCode#IF ($TotDCsInError -ne 0)
DNS Round Robin Test#CredCode#{
DNS Round Robin Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
DNS Round Robin Test#CredCode#}
DNS Round Robin Test#CredCode#IF ($AnyGap -eq "Yes")
DNS Round Robin Test#CredCode#{
DNS Round Robin Test#CredCode#$TestText = "Some DNS Servers do not have DNS Round Robin enabled. $OthText"
DNS Round Robin Test#CredCode#$SumVal = $TotNo
DNS Round Robin Test#CredCode#$TestStatus="Critical"
DNS Round Robin Test#CredCode#}
DNS Round Robin Test#CredCode#IF ($AnyGap -eq "No")
DNS Round Robin Test#CredCode#{
DNS Round Robin Test#CredCode#$TestText = "All DNS Servers have DNS Round Robin Enabled. $OthText"
DNS Round Robin Test#CredCode#$SumVal = ""
DNS Round Robin Test#CredCode#$TestStatus="Passed"
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#IF ($AnyOneOk -eq "No")
DNS Round Robin Test#CredCode#{
DNS Round Robin Test#CredCode#$TestText = "Error Executing Dynamic Pack."
DNS Round Robin Test#CredCode#$SumVal = ""
DNS Round Robin Test#CredCode#$TestStatus="Completed with Errors."
DNS Round Robin Test#CredCode#}
DNS Round Robin Test#CredCode#}
DNS Round Robin Test#CredCode#
DNS Round Robin Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DNS Server _msdcs Zone Test#HeaderCode#$ThisString="DNS Server,Connection,Command Status, Is _msdcs hosted?,Final Status"
DNS Server _msdcs Zone Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
DNS Server _msdcs Zone Test#HeaderCode#
DNS Server _msdcs Zone Test#HeaderCode#
DNS Server _msdcs Zone Test#CredCode#$TotNo=0
DNS Server _msdcs Zone Test#CredCode#$ItemCount=0
DNS Server _msdcs Zone Test#CredCode#$TestText = ""
DNS Server _msdcs Zone Test#CredCode#$TestStatus=""
DNS Server _msdcs Zone Test#CredCode#$SumVal = ""
DNS Server _msdcs Zone Test#CredCode#$AnyGap = "No"
DNS Server _msdcs Zone Test#CredCode#$ErrorOrNot = "No"
DNS Server _msdcs Zone Test#CredCode#$AnyOneOk="No"
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
DNS Server _msdcs Zone Test#CredCode#{
DNS Server _msdcs Zone Test#CredCode#$Error.Clear()
DNS Server _msdcs Zone Test#CredCode#$RCNow = Invoke-Command -ComputerName $ItemName -Script { param($R1Now) Get-DNSServer -ComputerName $R1Now } -Credential $Creds -ArgumentList $ItemName
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#IF ($Error.count -eq 0)
DNS Server _msdcs Zone Test#CredCode#{ 
DNS Server _msdcs Zone Test#CredCode#$AnyOneOk="Yes"
DNS Server _msdcs Zone Test#CredCode#$l=$RCNow.ServerZone
DNS Server _msdcs Zone Test#CredCode#$HostedOrNot="No"
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#ForEach ($Item in $L)
DNS Server _msdcs Zone Test#CredCode#{
DNS Server _msdcs Zone Test#CredCode#$ThisZoneName = $Item.ZoneName
DNS Server _msdcs Zone Test#CredCode#$T1, $T2 = $ThisZoneName.split(".")
DNS Server _msdcs Zone Test#CredCode#$T3 = $t1.ToLower()
DNS Server _msdcs Zone Test#CredCode#IF ($T3 -eq "_msdcs")
DNS Server _msdcs Zone Test#CredCode#{
DNS Server _msdcs Zone Test#CredCode#$HostedOrNot="Yes"
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#$FinStatus=""
DNS Server _msdcs Zone Test#CredCode#IF ($HostedOrNot -eq "No")
DNS Server _msdcs Zone Test#CredCode#{
DNS Server _msdcs Zone Test#CredCode#$TotNo++
DNS Server _msdcs Zone Test#CredCode#$AnyGap = "Yes"
DNS Server _msdcs Zone Test#CredCode#$FinStatus ="CRITICAL: This DNS Server does not host _msdcs Zone."
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#$FinalSTR = $ItemName+",Reachable,"+$HostedOrNot+","+$FinStatus
DNS Server _msdcs Zone Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#else
DNS Server _msdcs Zone Test#CredCode#{
DNS Server _msdcs Zone Test#CredCode#$ErrorOrNot = "Yes"
DNS Server _msdcs Zone Test#CredCode#$FinalSTR = $ItemName+",Not Reachable"
DNS Server _msdcs Zone Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#IF ($AnyGap -eq "Yes")
DNS Server _msdcs Zone Test#CredCode#{
DNS Server _msdcs Zone Test#CredCode#$TestText = "Some DNS Servers do not host _msdcs zone which is required by the Active Directory."
DNS Server _msdcs Zone Test#CredCode#$SumVal = $TotNo
DNS Server _msdcs Zone Test#CredCode#$TestStatus="High"
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#IF ($AnyGap -eq "No")
DNS Server _msdcs Zone Test#CredCode#{
DNS Server _msdcs Zone Test#CredCode#$TestText = "All DNS Servers host _msdcs zone."
DNS Server _msdcs Zone Test#CredCode#$SumVal = ""
DNS Server _msdcs Zone Test#CredCode#$TestStatus="Passed"
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#IF ($AnyOneOk -eq "No")
DNS Server _msdcs Zone Test#CredCode#{
DNS Server _msdcs Zone Test#CredCode#$TestText = "Error Executing Dynamic Pack."
DNS Server _msdcs Zone Test#CredCode#$SumVal = ""
DNS Server _msdcs Zone Test#CredCode#$TestStatus="Completed with Errors."
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#$TotNo=0
DNS Server _msdcs Zone Test#CredCode#$ItemCount=0
DNS Server _msdcs Zone Test#CredCode#$TestText = ""
DNS Server _msdcs Zone Test#CredCode#$TestStatus=""
DNS Server _msdcs Zone Test#CredCode#$SumVal = ""
DNS Server _msdcs Zone Test#CredCode#$AnyGap = "No"
DNS Server _msdcs Zone Test#CredCode#$ErrorOrNot = "No"
DNS Server _msdcs Zone Test#CredCode#$AnyOneOk = "No"
DNS Server _msdcs Zone Test#CredCode#$TotDCsInError = 0
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
DNS Server _msdcs Zone Test#CredCode#{
DNS Server _msdcs Zone Test#CredCode#    $DCConError = "Ok"
DNS Server _msdcs Zone Test#CredCode#    $DCConStatus = "Ok"
DNS Server _msdcs Zone Test#CredCode#    $ProceedOrNot = "Yes"
DNS Server _msdcs Zone Test#CredCode#    $Error.Clear()
DNS Server _msdcs Zone Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName
DNS Server _msdcs Zone Test#CredCode#    IF ($Error.Count -ne 0)
DNS Server _msdcs Zone Test#CredCode#    {
DNS Server _msdcs Zone Test#CredCode#        $ProceedOrNot = "No"
DNS Server _msdcs Zone Test#CredCode#        $TotDCsInError++
DNS Server _msdcs Zone Test#CredCode#        $DCConError = $Error[0].Exception.Message
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
DNS Server _msdcs Zone Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
DNS Server _msdcs Zone Test#CredCode#    }
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
DNS Server _msdcs Zone Test#CredCode#    {
DNS Server _msdcs Zone Test#CredCode#        $ComConError="Ok"        
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#        $Error.Clear()
DNS Server _msdcs Zone Test#CredCode#$RCNow = Get-DNSServer -ComputerName $ItemName
DNS Server _msdcs Zone Test#CredCode#IF ($Error.count -eq 0)
DNS Server _msdcs Zone Test#CredCode#{ 
DNS Server _msdcs Zone Test#CredCode#    $AnyOneOk="Yes"
DNS Server _msdcs Zone Test#CredCode#    $l=$RCNow.ServerZone
DNS Server _msdcs Zone Test#CredCode#    $HostedOrNot="No"
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#    ForEach ($Item in $L)
DNS Server _msdcs Zone Test#CredCode#    {
DNS Server _msdcs Zone Test#CredCode#        $ThisZoneName = $Item.ZoneName
DNS Server _msdcs Zone Test#CredCode#        $T1, $T2 = $ThisZoneName.split(".")
DNS Server _msdcs Zone Test#CredCode#        $T3 = $t1.ToLower()
DNS Server _msdcs Zone Test#CredCode#        IF ($T3 -eq "_msdcs")
DNS Server _msdcs Zone Test#CredCode#        {
DNS Server _msdcs Zone Test#CredCode#            $HostedOrNot="Yes"
DNS Server _msdcs Zone Test#CredCode#        }
DNS Server _msdcs Zone Test#CredCode#    }
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#    $FinStatus="Ok"
DNS Server _msdcs Zone Test#CredCode#    IF ($HostedOrNot -eq "No")
DNS Server _msdcs Zone Test#CredCode#    {
DNS Server _msdcs Zone Test#CredCode#        $TotNo++
DNS Server _msdcs Zone Test#CredCode#        $AnyGap = "Yes"
DNS Server _msdcs Zone Test#CredCode#        $FinStatus ="CRITICAL: This DNS Server does not host _msdcs Zone."
DNS Server _msdcs Zone Test#CredCode#    }
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#    $FinalSTR = $ItemName+",$DCConError,"+$ComConError+","+$HostedOrNot+","+$FinStatus
DNS Server _msdcs Zone Test#CredCode#    Add-Content "$TestCSVFile" $FinalSTR
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#else
DNS Server _msdcs Zone Test#CredCode#{
DNS Server _msdcs Zone Test#CredCode#    $ComConError = $Error[0].Exception.Message
DNS Server _msdcs Zone Test#CredCode#    $FinalSTR = $ItemName+",$DCConError,"+$ComConError
DNS Server _msdcs Zone Test#CredCode#    Add-Content "$TestCSVFile" $FinalSTR        
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#        
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#    }
DNS Server _msdcs Zone Test#CredCode#    
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#$OthText = ""
DNS Server _msdcs Zone Test#CredCode#IF ($TotDCsInError -ne 0)
DNS Server _msdcs Zone Test#CredCode#{
DNS Server _msdcs Zone Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#IF ($AnyGap -eq "Yes")
DNS Server _msdcs Zone Test#CredCode#{
DNS Server _msdcs Zone Test#CredCode#$TestText = "Some DNS Servers do not host _msdcs zone which is required by the Active Directory. $OthText"
DNS Server _msdcs Zone Test#CredCode#$SumVal = $TotNo
DNS Server _msdcs Zone Test#CredCode#$TestStatus="Critical"
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#IF ($AnyGap -eq "No")
DNS Server _msdcs Zone Test#CredCode#{
DNS Server _msdcs Zone Test#CredCode#$TestText = "DNS Servers host _msdcs zone. $OthText"
DNS Server _msdcs Zone Test#CredCode#$SumVal = ""
DNS Server _msdcs Zone Test#CredCode#$TestStatus="Passed"
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#IF ($AnyOneOk -eq "No")
DNS Server _msdcs Zone Test#CredCode#{
DNS Server _msdcs Zone Test#CredCode#$TestText = "Error Executing Dynamic Pack."
DNS Server _msdcs Zone Test#CredCode#$SumVal = ""
DNS Server _msdcs Zone Test#CredCode#$TestStatus="Completed with Errors."
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#}
DNS Server _msdcs Zone Test#CredCode#
DNS Server _msdcs Zone Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DNS Server Conditional Forwarders Test#HeaderCode#$ThisString="DNS Server,Connection,Command Status, DNS Domain, Master Server Addresses, Resolution Status,Final Status"
DNS Server Conditional Forwarders Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
DNS Server Conditional Forwarders Test#HeaderCode#
DNS Server Conditional Forwarders Test#HeaderCode#
DNS Server Conditional Forwarders Test#HeaderCode#
DNS Server Conditional Forwarders Test#HeaderCode#
DNS Server Conditional Forwarders Test#CredCode#$TotNo=0
DNS Server Conditional Forwarders Test#CredCode#$ItemCount=0
DNS Server Conditional Forwarders Test#CredCode#$TestText = ""
DNS Server Conditional Forwarders Test#CredCode#$TestStatus=""
DNS Server Conditional Forwarders Test#CredCode#$SumVal = ""
DNS Server Conditional Forwarders Test#CredCode#$AnyGap = "No"
DNS Server Conditional Forwarders Test#CredCode#$ErrorOrNot = "No"
DNS Server Conditional Forwarders Test#CredCode#$AnyOneOk="No"
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#$Error.Clear()
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#$RCNow = Invoke-Command -ComputerName $ItemName -Script { param($R1Now) Get-DNSServer -ComputerName $R1Now | where-object {$_.ZoneType -eq "Forwarder"} | select-object ZoneName, MasterServers, ZoneType } -Credential $Creds -ArgumentList $ItemName
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#IF ($Error.count -eq 0)
DNS Server Conditional Forwarders Test#CredCode#{ 
DNS Server Conditional Forwarders Test#CredCode#$AnyOneOk="Yes"
DNS Server Conditional Forwarders Test#CredCode#$TotcFD=$RCNow.Count
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#$FinStatus = ""
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#IF ($TotCFD -ne 0)
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#ForEach ($Item in $RCNow)
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#$ThisZoneName = $Item.ZoneName
DNS Server Conditional Forwarders Test#CredCode#$ThisZoneIP = $Item.MasterServers.IPAddressToString
DNS Server Conditional Forwarders Test#CredCode#$FinalSTR = $ItemName+",Reachable,"+$ThisZoneName+","+'"'+$ThisZoneIP+'"'+",Unknown,"
DNS Server Conditional Forwarders Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#else
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#$FinalSTR = $ItemName+",Reachable,No Conditional Forwarders found on this DNS Server"
DNS Server Conditional Forwarders Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#IF ($TotcFD -ne 0)
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#$TotNo++
DNS Server Conditional Forwarders Test#CredCode#$AnyGap = "Yes"            
DNS Server Conditional Forwarders Test#CredCode#} 
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#else
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#$ErrorOrNot = "Yes"
DNS Server Conditional Forwarders Test#CredCode#$FinalSTR = $ItemName+",Not Reachable"
DNS Server Conditional Forwarders Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#IF ($AnyGap -eq "Yes")
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#$TestText = "Some DNS Servers have conditional forwarders configured. Please ensure they are correctly configured and use the correct Master Servers. Test does not check Conditional Forwarders due to firewall issues"
DNS Server Conditional Forwarders Test#CredCode#$SumVal = $TotNo
DNS Server Conditional Forwarders Test#CredCode#$TestStatus="Medium"
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#IF ($AnyGap -eq "No")
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#$TestText = "DNS Servers do not host any Conditional Forwarders."
DNS Server Conditional Forwarders Test#CredCode#$SumVal = ""
DNS Server Conditional Forwarders Test#CredCode#$TestStatus="Passed"
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#IF ($AnyOneOk -eq "No")
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#$TestText = "Error Executing Dynamic Pack."
DNS Server Conditional Forwarders Test#CredCode#$SumVal = ""
DNS Server Conditional Forwarders Test#CredCode#$TestStatus="Completed with Errors."
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#$TotNo=0
DNS Server Conditional Forwarders Test#CredCode#$ItemCount=0
DNS Server Conditional Forwarders Test#CredCode#$TestText = ""
DNS Server Conditional Forwarders Test#CredCode#$TestStatus=""
DNS Server Conditional Forwarders Test#CredCode#$SumVal = ""
DNS Server Conditional Forwarders Test#CredCode#$AnyGap = "No"
DNS Server Conditional Forwarders Test#CredCode#$ErrorOrNot = "No"
DNS Server Conditional Forwarders Test#CredCode#$AnyOneOk = "No"
DNS Server Conditional Forwarders Test#CredCode#$TotDCsInError = 0
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#    $DCConError = "Ok"
DNS Server Conditional Forwarders Test#CredCode#    $DCConStatus = "Ok"
DNS Server Conditional Forwarders Test#CredCode#    $ProceedOrNot = "Yes"
DNS Server Conditional Forwarders Test#CredCode#    $Error.Clear()
DNS Server Conditional Forwarders Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName
DNS Server Conditional Forwarders Test#CredCode#    IF ($Error.Count -ne 0)
DNS Server Conditional Forwarders Test#CredCode#    {
DNS Server Conditional Forwarders Test#CredCode#        $ProceedOrNot = "No"
DNS Server Conditional Forwarders Test#CredCode#        $TotDCsInError++
DNS Server Conditional Forwarders Test#CredCode#        $DCConError = $Error[0].Exception.Message
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
DNS Server Conditional Forwarders Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
DNS Server Conditional Forwarders Test#CredCode#    }
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
DNS Server Conditional Forwarders Test#CredCode#    {
DNS Server Conditional Forwarders Test#CredCode#        $ComConError="Ok"        
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#        $Error.Clear()
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#$Error.Clear()
DNS Server Conditional Forwarders Test#CredCode#$RCNow = Get-DnsServerZone -ComputerName $ItemName | where-object {$_.ZoneType -eq "Forwarder"} | select-object ZoneName, MasterServers, ZoneType 
DNS Server Conditional Forwarders Test#CredCode#IF ($Error.count -eq 0)
DNS Server Conditional Forwarders Test#CredCode#{ 
DNS Server Conditional Forwarders Test#CredCode#    $AnyOneOk="Yes"
DNS Server Conditional Forwarders Test#CredCode#    $TotcFD=$RCNow.Count
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#    $FinStatus = "Ok"
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#    IF ($TotCFD -ne 0)
DNS Server Conditional Forwarders Test#CredCode#    {
DNS Server Conditional Forwarders Test#CredCode#        ForEach ($Item in $RCNow)
DNS Server Conditional Forwarders Test#CredCode#        {
DNS Server Conditional Forwarders Test#CredCode#            $ThisZoneName = $Item.ZoneName
DNS Server Conditional Forwarders Test#CredCode#            $ThisZoneIP = $Item.MasterServers.IPAddressToString
DNS Server Conditional Forwarders Test#CredCode#            $FinalSTR = $ItemName+",$DCConError,"+$ComConError+","+$ThisZoneName+","+'"'+$ThisZoneIP+'"'+",Unknown,"+$FinStatus
DNS Server Conditional Forwarders Test#CredCode#            Add-Content "$TestCSVFile" $FinalSTR
DNS Server Conditional Forwarders Test#CredCode#        }
DNS Server Conditional Forwarders Test#CredCode#    }
DNS Server Conditional Forwarders Test#CredCode#    else
DNS Server Conditional Forwarders Test#CredCode#    {
DNS Server Conditional Forwarders Test#CredCode#        $FinalSTR = $ItemName+",$DCConError,"+$ComConError+",No Conditional Forwarders found on this DNS Server."
DNS Server Conditional Forwarders Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
DNS Server Conditional Forwarders Test#CredCode#    }
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#    IF ($TotcFD -ne 0)
DNS Server Conditional Forwarders Test#CredCode#    {
DNS Server Conditional Forwarders Test#CredCode#        $TotNo++
DNS Server Conditional Forwarders Test#CredCode#        $AnyGap = "Yes"            
DNS Server Conditional Forwarders Test#CredCode#    } 
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#else
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#    $ComConError = $Error[0].Exception.Message
DNS Server Conditional Forwarders Test#CredCode#    $FinalSTR = $ItemName+",$DCConError,"+$ComConError
DNS Server Conditional Forwarders Test#CredCode#    Add-Content "$TestCSVFile" $FinalSTR        
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#        
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#    }
DNS Server Conditional Forwarders Test#CredCode#    
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#$OthText = ""
DNS Server Conditional Forwarders Test#CredCode#IF ($TotDCsInError -ne 0)
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#IF ($AnyGap -eq "Yes")
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#$TestText = "Some DNS Servers have conditional forwarders configured. Please ensure they are correctly configured and use the correct Master Servers. $OthText"
DNS Server Conditional Forwarders Test#CredCode#$SumVal = $TotNo
DNS Server Conditional Forwarders Test#CredCode#$TestStatus="Critical"
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#IF ($AnyGap -eq "No")
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#$TestText = "DNS Servers do not host any Conditional Forwarders. $OthText"
DNS Server Conditional Forwarders Test#CredCode#$SumVal = ""
DNS Server Conditional Forwarders Test#CredCode#$TestStatus="Passed"
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#IF ($AnyOneOk -eq "No")
DNS Server Conditional Forwarders Test#CredCode#{
DNS Server Conditional Forwarders Test#CredCode#$TestText = "Error Executing Dynamic Pack."
DNS Server Conditional Forwarders Test#CredCode#$SumVal = ""
DNS Server Conditional Forwarders Test#CredCode#$TestStatus="Completed with Errors."
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#}
DNS Server Conditional Forwarders Test#CredCode#
DNS Server Conditional Forwarders Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DNS Server Server Level Scavenging Test#HeaderCode#$ThisString="DNS Server,Connection,Command Status, Is Scavenging Enabled?, No Refresh Interval, Refresh Interval, Scavenging Interval, Last Scavenging Time,Final Status"
DNS Server Server Level Scavenging Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
DNS Server Server Level Scavenging Test#HeaderCode#
DNS Server Server Level Scavenging Test#HeaderCode#
DNS Server Server Level Scavenging Test#HeaderCode#
DNS Server Server Level Scavenging Test#CredCode#$TotNo=0
DNS Server Server Level Scavenging Test#CredCode#$ItemCount=0
DNS Server Server Level Scavenging Test#CredCode#$TestText = ""
DNS Server Server Level Scavenging Test#CredCode#$TestStatus=""
DNS Server Server Level Scavenging Test#CredCode#$SumVal = ""
DNS Server Server Level Scavenging Test#CredCode#$AnyGap = "No"
DNS Server Server Level Scavenging Test#CredCode#$ErrorOrNot = "No"
DNS Server Server Level Scavenging Test#CredCode#$AnyOneOk="No"
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
DNS Server Server Level Scavenging Test#CredCode#{
DNS Server Server Level Scavenging Test#CredCode#$Error.Clear()
DNS Server Server Level Scavenging Test#CredCode#$RCNow = Invoke-Command -ComputerName $ItemName -Script { param($R1Now) Get-DNSServer -ComputerName $R1Now } -Credential $Creds -ArgumentList $ItemName
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#IF ($Error.count -eq 0)
DNS Server Server Level Scavenging Test#CredCode#{ 
DNS Server Server Level Scavenging Test#CredCode#$AnyOneOk="Yes"
DNS Server Server Level Scavenging Test#CredCode#$SSStatus = $RCNow.ServerScavenging.ScavengingState
DNS Server Server Level Scavenging Test#CredCode#$SNoRef = $RCNow.ServerScavenging.NoRefreshInterval
DNS Server Server Level Scavenging Test#CredCode#$SRef=$RCNow.ServerRootHint.RefreshInterval
DNS Server Server Level Scavenging Test#CredCode#$SInterval = $RCNow.ServerRootHint.ScavengingInterval
DNS Server Server Level Scavenging Test#CredCode#$UseRHints = $RCNow.ServerForwarder.UseRootHint
DNS Server Server Level Scavenging Test#CredCode#$LastSTime = $RCNow.ServerForwarder.LastScavengeTime
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#$FinStatus=""
DNS Server Server Level Scavenging Test#CredCode#IF ($SSStatus -eq $false)
DNS Server Server Level Scavenging Test#CredCode#{
DNS Server Server Level Scavenging Test#CredCode#$TotNo++
DNS Server Server Level Scavenging Test#CredCode#$AnyGap = "Yes"
DNS Server Server Level Scavenging Test#CredCode#$FinStatus ="This DNS Server is not configured to scavenge stale DNS Records automatically."
DNS Server Server Level Scavenging Test#CredCode#}
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#$FinalSTR = $ItemName+",Reachable,"+$SSStatus+","+$SNoRef+","+$SRef+","+$SInterval+","+$LastSTime+","+$FinStatus
DNS Server Server Level Scavenging Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
DNS Server Server Level Scavenging Test#CredCode#}
DNS Server Server Level Scavenging Test#CredCode#else
DNS Server Server Level Scavenging Test#CredCode#{
DNS Server Server Level Scavenging Test#CredCode#$ErrorOrNot = "Yes"
DNS Server Server Level Scavenging Test#CredCode#$FinalSTR = $ItemName+",Not Reachable"
DNS Server Server Level Scavenging Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
DNS Server Server Level Scavenging Test#CredCode#}
DNS Server Server Level Scavenging Test#CredCode#}
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#IF ($AnyGap -eq "Yes")
DNS Server Server Level Scavenging Test#CredCode#{
DNS Server Server Level Scavenging Test#CredCode#$TestText = "Some DNS Servers do not have automatic scavenging enabled which might result in huge number of stale DNS Entries. Note that if all of your Domain Zones are AD Integrated it is recommended to keep Scavenging enabled only on one DNS Server. Enabling scavenging for all DNS Servers if all DNS Servers host AD-Integrated hosts will result in unnecessary processing by the DNS Servers."
DNS Server Server Level Scavenging Test#CredCode#$SumVal = $TotNo
DNS Server Server Level Scavenging Test#CredCode#$TestStatus="High"
DNS Server Server Level Scavenging Test#CredCode#}
DNS Server Server Level Scavenging Test#CredCode#IF ($AnyGap -eq "No")
DNS Server Server Level Scavenging Test#CredCode#{
DNS Server Server Level Scavenging Test#CredCode#$TestText = "All DNS Servers have automatic Scavenging enabled."
DNS Server Server Level Scavenging Test#CredCode#$SumVal = ""
DNS Server Server Level Scavenging Test#CredCode#$TestStatus="Passed"
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#IF ($AnyOneOk -eq "No")
DNS Server Server Level Scavenging Test#CredCode#{
DNS Server Server Level Scavenging Test#CredCode#$TestText = "Error Executing Dynamic Pack."
DNS Server Server Level Scavenging Test#CredCode#$SumVal = ""
DNS Server Server Level Scavenging Test#CredCode#$TestStatus="Completed with Errors."
DNS Server Server Level Scavenging Test#CredCode#}
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#}
DNS Server Server Level Scavenging Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#$TotNo=0
DNS Server Server Level Scavenging Test#CredCode#$ItemCount=0
DNS Server Server Level Scavenging Test#CredCode#$TestText = ""
DNS Server Server Level Scavenging Test#CredCode#$TestStatus=""
DNS Server Server Level Scavenging Test#CredCode#$SumVal = ""
DNS Server Server Level Scavenging Test#CredCode#$AnyGap = "No"
DNS Server Server Level Scavenging Test#CredCode#$ErrorOrNot = "No"
DNS Server Server Level Scavenging Test#CredCode#$AnyOneOk = "No"
DNS Server Server Level Scavenging Test#CredCode#$TotDCsInError = 0
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
DNS Server Server Level Scavenging Test#CredCode#{
DNS Server Server Level Scavenging Test#CredCode#    $DCConError = "Ok"
DNS Server Server Level Scavenging Test#CredCode#    $DCConStatus = "Ok"
DNS Server Server Level Scavenging Test#CredCode#    $ProceedOrNot = "Yes"
DNS Server Server Level Scavenging Test#CredCode#    $Error.Clear()
DNS Server Server Level Scavenging Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName
DNS Server Server Level Scavenging Test#CredCode#    IF ($Error.Count -ne 0)
DNS Server Server Level Scavenging Test#CredCode#    {
DNS Server Server Level Scavenging Test#CredCode#        $ProceedOrNot = "No"
DNS Server Server Level Scavenging Test#CredCode#        $TotDCsInError++
DNS Server Server Level Scavenging Test#CredCode#        $DCConError = $Error[0].Exception.Message
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
DNS Server Server Level Scavenging Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
DNS Server Server Level Scavenging Test#CredCode#    }
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
DNS Server Server Level Scavenging Test#CredCode#    {
DNS Server Server Level Scavenging Test#CredCode#        $ComConError="Ok"        
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#        $Error.Clear()
DNS Server Server Level Scavenging Test#CredCode#$RCNow = Get-DNSServer -ComputerName $ItemName
DNS Server Server Level Scavenging Test#CredCode#IF ($Error.count -eq 0)
DNS Server Server Level Scavenging Test#CredCode#{ 
DNS Server Server Level Scavenging Test#CredCode#    $AnyOneOk="Yes"
DNS Server Server Level Scavenging Test#CredCode#    $SSStatus = $RCNow.ServerScavenging.ScavengingState
DNS Server Server Level Scavenging Test#CredCode#    $SNoRef = $RCNow.ServerScavenging.NoRefreshInterval
DNS Server Server Level Scavenging Test#CredCode#    $SRef=$RCNow.ServerRootHint.RefreshInterval
DNS Server Server Level Scavenging Test#CredCode#    $SInterval = $RCNow.ServerRootHint.ScavengingInterval
DNS Server Server Level Scavenging Test#CredCode#    $UseRHints = $RCNow.ServerForwarder.UseRootHint
DNS Server Server Level Scavenging Test#CredCode#    $LastSTime = $RCNow.ServerForwarder.LastScavengeTime
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#    $FinStatus="Ok"
DNS Server Server Level Scavenging Test#CredCode#    IF ($SSStatus -eq $false)
DNS Server Server Level Scavenging Test#CredCode#    {
DNS Server Server Level Scavenging Test#CredCode#        $TotNo++
DNS Server Server Level Scavenging Test#CredCode#        $AnyGap = "Yes"
DNS Server Server Level Scavenging Test#CredCode#        $FinStatus ="This DNS Server is not configured to scavenge stale DNS Records automatically."
DNS Server Server Level Scavenging Test#CredCode#    }
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#    $FinalSTR = $ItemName+",$DCConError,"+$ComConError+","+$SSStatus+","+$SNoRef+","+$SRef+","+$SInterval+","+$LastSTime+","+$FinStatus
DNS Server Server Level Scavenging Test#CredCode#    Add-Content "$TestCSVFile" $FinalSTR
DNS Server Server Level Scavenging Test#CredCode#}
DNS Server Server Level Scavenging Test#CredCode#else
DNS Server Server Level Scavenging Test#CredCode#{
DNS Server Server Level Scavenging Test#CredCode#    $ComConError = $Error[0].Exception.Message
DNS Server Server Level Scavenging Test#CredCode#    $FinalSTR = $ItemName+",$DCConError,"+$ComConError
DNS Server Server Level Scavenging Test#CredCode#    Add-Content "$TestCSVFile" $FinalSTR        
DNS Server Server Level Scavenging Test#CredCode#}
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#        
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#    }
DNS Server Server Level Scavenging Test#CredCode#    
DNS Server Server Level Scavenging Test#CredCode#}
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#$OthText = ""
DNS Server Server Level Scavenging Test#CredCode#IF ($TotDCsInError -ne 0)
DNS Server Server Level Scavenging Test#CredCode#{
DNS Server Server Level Scavenging Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
DNS Server Server Level Scavenging Test#CredCode#}
DNS Server Server Level Scavenging Test#CredCode#IF ($AnyGap -eq "Yes")
DNS Server Server Level Scavenging Test#CredCode#{
DNS Server Server Level Scavenging Test#CredCode#$TestText = "Some DNS Servers do not have automatic scavenging enabled which might result in huge number of stale DNS Entries. Note that if all of your Domain Zones are AD Integrated it is recommended to keep Scavenging enabled only on one DNS Server. Enabling scavenging for all DNS Servers if all DNS Servers host AD-Integrated hosts will result in unnecessary processing by the DNS Servers. $OthText"
DNS Server Server Level Scavenging Test#CredCode#$SumVal = $TotNo
DNS Server Server Level Scavenging Test#CredCode#$TestStatus="Critical"
DNS Server Server Level Scavenging Test#CredCode#}
DNS Server Server Level Scavenging Test#CredCode#IF ($AnyGap -eq "No")
DNS Server Server Level Scavenging Test#CredCode#{
DNS Server Server Level Scavenging Test#CredCode#$TestText = "All DNS Servers have automatic Scavenging enabled. $OthText"
DNS Server Server Level Scavenging Test#CredCode#$SumVal = ""
DNS Server Server Level Scavenging Test#CredCode#$TestStatus="Passed"
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#IF ($AnyOneOk -eq "No")
DNS Server Server Level Scavenging Test#CredCode#{
DNS Server Server Level Scavenging Test#CredCode#$TestText = "Error Executing Dynamic Pack."
DNS Server Server Level Scavenging Test#CredCode#$SumVal = ""
DNS Server Server Level Scavenging Test#CredCode#$TestStatus="Completed with Errors."
DNS Server Server Level Scavenging Test#CredCode#}
DNS Server Server Level Scavenging Test#CredCode#}
DNS Server Server Level Scavenging Test#CredCode#
DNS Server Server Level Scavenging Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Host Record Test#HeaderCode#$ThisString="Domain Name, Domain Controller, A Host Record Name, Registered with IP Address,Final Status"
Domain Controller Host Record Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain Controller Host Record Test#HeaderCode#
Domain Controller Host Record Test#HeaderCode#
Domain Controller Host Record Test#HeaderCode#
Domain Controller Host Record Test#HeaderCode#
Domain Controller Host Record Test#CredCode#$TestStatus="Passed"
Domain Controller Host Record Test#CredCode#$TestText = ""
Domain Controller Host Record Test#CredCode#$sumVal=0
Domain Controller Host Record Test#CredCode#$ReachOrNot = "Yes"
Domain Controller Host Record Test#CredCode#$AnyGap = "No"
Domain Controller Host Record Test#CredCode#$TotNo = 0
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#$CNAMEFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\"+$CurProfNowForAll+"_CNAMETempCRC.DPC"
Domain Controller Host Record Test#CredCode#Remove-item $CNAMEFile -ErrorAction SilentlyContinue
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#$PDCServerToConnect = "Unknown"
Domain Controller Host Record Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain Controller Host Record Test#CredCode#    {
Domain Controller Host Record Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
Domain Controller Host Record Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain Controller Host Record Test#CredCode#        {
Domain Controller Host Record Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain Controller Host Record Test#CredCode#            {
Domain Controller Host Record Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain Controller Host Record Test#CredCode#                break
Domain Controller Host Record Test#CredCode#            }
Domain Controller Host Record Test#CredCode#        }    
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#    }
Domain Controller Host Record Test#CredCode#    else
Domain Controller Host Record Test#CredCode#    {
Domain Controller Host Record Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
Domain Controller Host Record Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain Controller Host Record Test#CredCode#        {
Domain Controller Host Record Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain Controller Host Record Test#CredCode#            {
Domain Controller Host Record Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
Domain Controller Host Record Test#CredCode#                break
Domain Controller Host Record Test#CredCode#            }
Domain Controller Host Record Test#CredCode#        }    
Domain Controller Host Record Test#CredCode#    }
Domain Controller Host Record Test#CredCode#   
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#$ThisZoneNow = $ThisDomain
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#$Error.Clear()
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#Invoke-Command -ComputerName $PDCServerToConnect -Script { param($R1Now) Get-DnsServerResourceRecord -ZoneName $R1Now | ? {($_.recordtype -eq 'A')} | Select -Property HostName,RecordType -ExpandProperty RecordData} -Credential $Creds -ArgumentList $ThisZoneNow | export-csv $CNameFile -NoTypeInformation
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#IF ($Error.Count -eq 0)
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$AllCNAMEs = Import-CSV $CNAMEFile
Domain Controller Host Record Test#CredCode#$AllDCS = Get-ADDomainController -Filter * -Server $ThisDomain -Credential $Creds
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#ForEach ($AllDCsNow in $AllDCS)
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$ThisDCToCheck=$AllDCsNow.Hostname
Domain Controller Host Record Test#CredCode#$ThisDCIPAddress = $AllDCsNow.IPv4Address
Domain Controller Host Record Test#CredCode#$FoundOrNotNow = "No"    
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#ForEach ($InFileNow in $AllCNAMEs)
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$ThisNameNow = $InFileNow.HostName
Domain Controller Host Record Test#CredCode#$ThisIPInFile = $InFileNow.IPv4Address                
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#$CUT1, $CUT2 = $ThisDCToCheck.Split(".") 
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#IF ($ThisNameNow.ToLower() -eq $CUT1.ToLower() -and $ThisIPInFile -eq $ThisDCIPAddress)
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$FoundOrNotNow = "Yes"
Domain Controller Host Record Test#CredCode#break
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#IF ($FoundOrNotNow -eq "No")
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$FinalSTR = $ThisDomain+","+$ThisDCToCheck+", Not Registered, "+$ThisDCIPAddress+", Warning: Host record Not found in DNS Server for this domain controller."
Domain Controller Host Record Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR                        
Domain Controller Host Record Test#CredCode#$AnyGap = "Yes"
Domain Controller Host Record Test#CredCode#$TotNo++
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#IF ($FoundOrNotNow -eq "Yes")
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$FinalSTR = $ThisDomain+","+$ThisDCToCheck+","+$ThisNameNow+","+$ThisIPInFile+", Ok"
Domain Controller Host Record Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR                        
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#else
Domain Controller Host Record Test#CredCode#{ 
Domain Controller Host Record Test#CredCode#$ThisSTR = $ThisDomain+",Error Connecting to PDC in this domain."
Domain Controller Host Record Test#CredCode#$ErrorOrNot = "Yes"
Domain Controller Host Record Test#CredCode#Add-Content "$TestCSVFile" $ThisStr   
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$TestStatus="Critical"
Domain Controller Host Record Test#CredCode#$TestText = "There are a few domain controllers for which A Host Record in DNS Server is not registered. Please ensure A Host records are registered for all Domain Controllers in the DNS Server."
Domain Controller Host Record Test#CredCode#$SumVal = $TotNo
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$TestStatus="Passed"
Domain Controller Host Record Test#CredCode#$TestText = "A Host Records for all domain controllers are registered in the DNS Server."
Domain Controller Host Record Test#CredCode#$SumVal = ""
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Host Record Test#CredCode#Remove-item $CNAMEFile -ErrorAction SilentlyContinue
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#$TestStatus="Passed"
Domain Controller Host Record Test#CredCode#$TestText = ""
Domain Controller Host Record Test#CredCode#$sumVal=0
Domain Controller Host Record Test#CredCode#$ReachOrNot = "Yes"
Domain Controller Host Record Test#CredCode#$AnyGap = "No"
Domain Controller Host Record Test#CredCode#$TotNo = 0
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#$CNAMEFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\"+$CurProfNowForAll+"_CNAMETempCRC.DPC"
Domain Controller Host Record Test#CredCode#Remove-item $CNAMEFile -ErrorAction SilentlyContinue
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#$PDCServerToConnect = "Unknown"
Domain Controller Host Record Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain Controller Host Record Test#CredCode#    {
Domain Controller Host Record Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
Domain Controller Host Record Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain Controller Host Record Test#CredCode#        {
Domain Controller Host Record Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain Controller Host Record Test#CredCode#            {
Domain Controller Host Record Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain Controller Host Record Test#CredCode#                break
Domain Controller Host Record Test#CredCode#            }
Domain Controller Host Record Test#CredCode#        }    
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#    }
Domain Controller Host Record Test#CredCode#    else
Domain Controller Host Record Test#CredCode#    {
Domain Controller Host Record Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
Domain Controller Host Record Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain Controller Host Record Test#CredCode#        {
Domain Controller Host Record Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain Controller Host Record Test#CredCode#            {
Domain Controller Host Record Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
Domain Controller Host Record Test#CredCode#                break
Domain Controller Host Record Test#CredCode#            }
Domain Controller Host Record Test#CredCode#        }    
Domain Controller Host Record Test#CredCode#    }
Domain Controller Host Record Test#CredCode#   
Domain Controller Host Record Test#CredCode#$ThisZoneNow = $ThisDomain
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#$Error.Clear()
Domain Controller Host Record Test#CredCode#$RSNow = Get-DnsServerResourceRecord -ComputerName $PDCServerToConnect -ZoneName $ThisZoneNow | ? {($_.recordtype -eq 'A')} 
Domain Controller Host Record Test#CredCode#IF ($Error.Count -eq 0)
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$AllDCS = Get-ADDomainController -Filter * -Server $ThisDomain
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#ForEach ($AllDCsNow in $AllDCS)
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$ThisDCToCheck=$AllDCsNow.Hostname
Domain Controller Host Record Test#CredCode#$ThisDCIPAddress = $AllDCsNow.IPv4Address
Domain Controller Host Record Test#CredCode#$FoundOrNotNow = "No"    
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#ForEach ($InFileNow in $RSNow)
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$ThisNameNow = $InFileNow.HostName
Domain Controller Host Record Test#CredCode#$ThisIPInFile = $InFileNow.recordData.IPv4Address.IPAddressToString
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#$CUT1, $CUT2 = $ThisDCToCheck.Split(".") 
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#IF ($ThisNameNow.ToLower() -eq $CUT1.ToLower() -and $ThisIPInFile -eq $ThisDCIPAddress)
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$FoundOrNotNow = "Yes"
Domain Controller Host Record Test#CredCode#break
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#IF ($FoundOrNotNow -eq "No")
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$FinalSTR = $ThisDomain+","+$ThisDCToCheck+", Not Registered, "+$ThisDCIPAddress+", Warning: Host record Not found in DNS Server for this domain controller."
Domain Controller Host Record Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR                        
Domain Controller Host Record Test#CredCode#$AnyGap = "Yes"
Domain Controller Host Record Test#CredCode#$TotNo++
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#IF ($FoundOrNotNow -eq "Yes")
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$FinalSTR = $ThisDomain+","+$ThisDCToCheck+","+$ThisNameNow+","+$ThisIPInFile+", Ok"
Domain Controller Host Record Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR                        
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#else
Domain Controller Host Record Test#CredCode#{ 
Domain Controller Host Record Test#CredCode#$ThisSTR = $ThisDomain+",Error Connecting to PDC in this domain."
Domain Controller Host Record Test#CredCode#$ErrorOrNot = "Yes"
Domain Controller Host Record Test#CredCode#Add-Content "$TestCSVFile" $ThisStr   
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$TestStatus="Critical"
Domain Controller Host Record Test#CredCode#$TestText = "There are a few domain controllers for which A Host Record in DNS Server is not registered. Please ensure A Host records are registered for all Domain Controllers in the DNS Server."
Domain Controller Host Record Test#CredCode#$SumVal = $TotNo
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Host Record Test#CredCode#{
Domain Controller Host Record Test#CredCode#$TestStatus="Passed"
Domain Controller Host Record Test#CredCode#$TestText = "A Host Records for all domain controllers are registered in the DNS Server."
Domain Controller Host Record Test#CredCode#$SumVal = ""
Domain Controller Host Record Test#CredCode#}
Domain Controller Host Record Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Host Record Test#CredCode#Remove-item $CNAMEFile -ErrorAction SilentlyContinue
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#
Domain Controller Host Record Test#CredCode#
Domain GPO WMI Filters Test#HeaderCode#$ThisString="GPO Name, GPO Status, WMI Filter Description, WMI Filter Name, WMI Filter Path, In AD Domain"
Domain GPO WMI Filters Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain GPO WMI Filters Test#HeaderCode#
Domain GPO WMI Filters Test#HeaderCode#
Domain GPO WMI Filters Test#HeaderCode#
Domain GPO WMI Filters Test#HeaderCode#
Domain GPO WMI Filters Test#HeaderCode#
Domain GPO WMI Filters Test#CredCode#$TotNo=0
Domain GPO WMI Filters Test#CredCode#$ItemCount=0
Domain GPO WMI Filters Test#CredCode#$TestText = ""
Domain GPO WMI Filters Test#CredCode#$TestStatus=""
Domain GPO WMI Filters Test#CredCode#$SumVal = ""
Domain GPO WMI Filters Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain GPO WMI Filters Test#CredCode#{
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#    $PDCServerToConnect = "Unknown"
Domain GPO WMI Filters Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain GPO WMI Filters Test#CredCode#    {
Domain GPO WMI Filters Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
Domain GPO WMI Filters Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO WMI Filters Test#CredCode#        {
Domain GPO WMI Filters Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO WMI Filters Test#CredCode#            {
Domain GPO WMI Filters Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain GPO WMI Filters Test#CredCode#                break
Domain GPO WMI Filters Test#CredCode#            }
Domain GPO WMI Filters Test#CredCode#        }    
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#    }
Domain GPO WMI Filters Test#CredCode#    else
Domain GPO WMI Filters Test#CredCode#    {
Domain GPO WMI Filters Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
Domain GPO WMI Filters Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO WMI Filters Test#CredCode#        {
Domain GPO WMI Filters Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO WMI Filters Test#CredCode#            {
Domain GPO WMI Filters Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
Domain GPO WMI Filters Test#CredCode#                break
Domain GPO WMI Filters Test#CredCode#            }
Domain GPO WMI Filters Test#CredCode#        }    
Domain GPO WMI Filters Test#CredCode#    }
Domain GPO WMI Filters Test#CredCode#   
Domain GPO WMI Filters Test#CredCode#    $Error.Clear()
Domain GPO WMI Filters Test#CredCode#    
Domain GPO WMI Filters Test#CredCode#    $AllGPOWMI = Invoke-Command -ComputerName $PDCServerToConnect -Script { param($R1Now) Get-GPO -ALL -Domain $R1Now | where{ $_.WMIFilter -ne $null } | Select-Object DisplayName,GPOStatus -ExpandProperty WMIFilter } -Credential $Creds -ArgumentList $ThisDomain
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#IF ($Error.count -eq 0)
Domain GPO WMI Filters Test#CredCode#{
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#else
Domain GPO WMI Filters Test#CredCode#{
Domain GPO WMI Filters Test#CredCode#$ErrorOrNot="Yes"
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain GPO WMI Filters Test#CredCode#{
Domain GPO WMI Filters Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain GPO WMI Filters Test#CredCode#$SumVal = ""
Domain GPO WMI Filters Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#else
Domain GPO WMI Filters Test#CredCode#{
Domain GPO WMI Filters Test#CredCode#$Items = $AllGPOWMI
Domain GPO WMI Filters Test#CredCode#$ItemCount=$AllGPOWMI.Count
Domain GPO WMI Filters Test#CredCode#$FinalText = ""
Domain GPO WMI Filters Test#CredCode#$SumVal=$ItemCount
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPO WMI Filters Test#CredCode#{ 
Domain GPO WMI Filters Test#CredCode#$TotNo++
Domain GPO WMI Filters Test#CredCode#} 
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPO WMI Filters Test#CredCode#{ 
Domain GPO WMI Filters Test#CredCode#$FiltDes = '"'+$ThisItem.Description+'"'
Domain GPO WMI Filters Test#CredCode#$FiltName = '"'+$ThisItem.Name+'"'
Domain GPO WMI Filters Test#CredCode#$FiltPath = '"'+$ThisItem.Path+'"'
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#$FinalVal=$ThisItem.DisplayName+","+$ThisItem.GPOStatus.Value+","+$FiltDes+","+$FiltName+","+'"'+$FiltPath+'"'+","+$ThisDomain
Domain GPO WMI Filters Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#IF ($TotNo -ge 0)
Domain GPO WMI Filters Test#CredCode#{
Domain GPO WMI Filters Test#CredCode#$TestText = "Some GPOs have been configured with WMI Filter. Pleae ensure WMI filters have been configured correctly."
Domain GPO WMI Filters Test#CredCode#$TestStatus="Low"
Domain GPO WMI Filters Test#CredCode#$SumVal = $TotNo
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#IF ($TotNo -eq 0)
Domain GPO WMI Filters Test#CredCode#{
Domain GPO WMI Filters Test#CredCode#$TestText = "No GPOs have been configured with WMI Filters."
Domain GPO WMI Filters Test#CredCode#$TestStatus="Passed"
Domain GPO WMI Filters Test#CredCode#$SumVal = $TotNo
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#$TotNo=0
Domain GPO WMI Filters Test#CredCode#$ItemCount=0
Domain GPO WMI Filters Test#CredCode#$TestText = ""
Domain GPO WMI Filters Test#CredCode#$TestStatus=""
Domain GPO WMI Filters Test#CredCode#$SumVal = ""
Domain GPO WMI Filters Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain GPO WMI Filters Test#CredCode#{
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#    $PDCServerToConnect = "Unknown"
Domain GPO WMI Filters Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain GPO WMI Filters Test#CredCode#    {
Domain GPO WMI Filters Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
Domain GPO WMI Filters Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO WMI Filters Test#CredCode#        {
Domain GPO WMI Filters Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO WMI Filters Test#CredCode#            {
Domain GPO WMI Filters Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain GPO WMI Filters Test#CredCode#                break
Domain GPO WMI Filters Test#CredCode#            }
Domain GPO WMI Filters Test#CredCode#        }    
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#    }
Domain GPO WMI Filters Test#CredCode#    else
Domain GPO WMI Filters Test#CredCode#    {
Domain GPO WMI Filters Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
Domain GPO WMI Filters Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO WMI Filters Test#CredCode#        {
Domain GPO WMI Filters Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO WMI Filters Test#CredCode#            {
Domain GPO WMI Filters Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
Domain GPO WMI Filters Test#CredCode#                break
Domain GPO WMI Filters Test#CredCode#            }
Domain GPO WMI Filters Test#CredCode#        }    
Domain GPO WMI Filters Test#CredCode#    }
Domain GPO WMI Filters Test#CredCode#   
Domain GPO WMI Filters Test#CredCode#    $Error.Clear()   
Domain GPO WMI Filters Test#CredCode#    $AllGPOWMI=Get-GPO -ALL -Server $PDCServerToConnect -Domain $ThisDomain | where{ $_.WMIFilter -ne $null }
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#IF ($Error.count -eq 0)
Domain GPO WMI Filters Test#CredCode#{
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#else
Domain GPO WMI Filters Test#CredCode#{
Domain GPO WMI Filters Test#CredCode#$ErrorOrNot="Yes"
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain GPO WMI Filters Test#CredCode#{
Domain GPO WMI Filters Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain GPO WMI Filters Test#CredCode#$SumVal = ""
Domain GPO WMI Filters Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#else
Domain GPO WMI Filters Test#CredCode#{
Domain GPO WMI Filters Test#CredCode#$Items = $AllGPOWMI
Domain GPO WMI Filters Test#CredCode#$ItemCount=$AllGPOWMI.Count
Domain GPO WMI Filters Test#CredCode#$FinalText = ""
Domain GPO WMI Filters Test#CredCode#$SumVal=$ItemCount
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPO WMI Filters Test#CredCode#{ 
Domain GPO WMI Filters Test#CredCode#$TotNo++
Domain GPO WMI Filters Test#CredCode#} 
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPO WMI Filters Test#CredCode#{ 
Domain GPO WMI Filters Test#CredCode#$FiltDes = '"'+$ThisItem.WMIFilter.Description+'"'
Domain GPO WMI Filters Test#CredCode#$FiltName = '"'+$ThisItem.WMIFilter.Name+'"'
Domain GPO WMI Filters Test#CredCode#$FiltPath = '"'+$ThisItem.WMIFilter.Path+'"'
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#$FinalVal=$ThisItem.DisplayName+","+$ThisItem.GPOStatus+","+$FiltDes+","+$FiltName+","+'"'+$FiltPath+'"'+","+$ThisDomain
Domain GPO WMI Filters Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#IF ($TotNo -ge 0)
Domain GPO WMI Filters Test#CredCode#{
Domain GPO WMI Filters Test#CredCode#$TestText = "Some GPOs have been configured with WMI Filter. Pleae ensure WMI filters have been configured correctly."
Domain GPO WMI Filters Test#CredCode#$TestStatus="Low"
Domain GPO WMI Filters Test#CredCode#$SumVal = $TotNo
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#IF ($TotNo -eq 0)
Domain GPO WMI Filters Test#CredCode#{
Domain GPO WMI Filters Test#CredCode#$TestText = "No GPOs have been configured with WMI Filters."
Domain GPO WMI Filters Test#CredCode#$TestStatus="Passed"
Domain GPO WMI Filters Test#CredCode#$SumVal = $TotNo
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#}
Domain GPO WMI Filters Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#
Domain GPO WMI Filters Test#CredCode#
AD Site Undefined Subnets Test#HeaderCode#$ThisStr="Domain Controller,Connection,Command Status, Total Unknown Subnets Authenticated,Final Status"
AD Site Undefined Subnets Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Undefined Subnets Test#HeaderCode#
AD Site Undefined Subnets Test#HeaderCode#
AD Site Undefined Subnets Test#HeaderCode#
AD Site Undefined Subnets Test#HeaderCode#
AD Site Undefined Subnets Test#HeaderCode#
AD Site Undefined Subnets Test#CredCode#$TotNo=0
AD Site Undefined Subnets Test#CredCode#$ItemCount=0
AD Site Undefined Subnets Test#CredCode#$TestText = ""
AD Site Undefined Subnets Test#CredCode#$TestStatus=""
AD Site Undefined Subnets Test#CredCode#$SumVal = ""
AD Site Undefined Subnets Test#CredCode#$AnyGap = "No"
AD Site Undefined Subnets Test#CredCode#$ErrorOrNot = "No"
AD Site Undefined Subnets Test#CredCode#$AnyOneOk = "No"
AD Site Undefined Subnets Test#CredCode#$TotDCsInError = 0
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#$IntDirNow = "$LocAppDataNow\DynamicPAcksTechnologies\ADHealthProfiler\Data\ADUndefinedSubnetsTest"
AD Site Undefined Subnets Test#CredCode#mkdir $IntDirNow -Force
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
AD Site Undefined Subnets Test#CredCode#{
AD Site Undefined Subnets Test#CredCode#    $DCConError = "Ok"
AD Site Undefined Subnets Test#CredCode#    $DCConStatus = "Ok"
AD Site Undefined Subnets Test#CredCode#    $ProceedOrNot = "Yes"
AD Site Undefined Subnets Test#CredCode#    $Error.Clear()
AD Site Undefined Subnets Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
AD Site Undefined Subnets Test#CredCode#    IF ($Error.Count -ne 0)
AD Site Undefined Subnets Test#CredCode#    {
AD Site Undefined Subnets Test#CredCode#        $ProceedOrNot = "No"
AD Site Undefined Subnets Test#CredCode#        $TotDCsInError++
AD Site Undefined Subnets Test#CredCode#        $DCConError = $Error[0].Exception.Message
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
AD Site Undefined Subnets Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
AD Site Undefined Subnets Test#CredCode#    }
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
AD Site Undefined Subnets Test#CredCode#    {
AD Site Undefined Subnets Test#CredCode#        $ComConError="Ok"        
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#        $DCNetLogonFileNow = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ADUndefinedSubnetsTest\"+$CurProfNowForAll+$ItemName+"NetLogon.DPC"
AD Site Undefined Subnets Test#CredCode#Remove-item $DCNetLogonFileNow -ErrorAction SilentlyContinue
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#$SubNetfile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ADUndefinedSubnetsTest\"+$CurProfNowForAll+$ItemName+"_UndefinedSubnets.DPC"
AD Site Undefined Subnets Test#CredCode#Remove-item $SubNetfile -ErrorAction SilentlyContinue
AD Site Undefined Subnets Test#CredCode#$STR = "DCName, Subnet"
AD Site Undefined Subnets Test#CredCode#Add-Content $SubNetfile $STR
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#$SubNetClientsFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ADUndefinedSubnetsTest\"+$CurProfNowForAll+$ItemName+"_UndefinedSubnet_Clients.DPC"
AD Site Undefined Subnets Test#CredCode#Remove-item $SubNetClientsFile -ErrorAction SilentlyContinue
AD Site Undefined Subnets Test#CredCode#$STR = "Client, IP Address"
AD Site Undefined Subnets Test#CredCode#Add-Content $SubNetClientsFile $STR
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#$Error.Clear() 
AD Site Undefined Subnets Test#CredCode#$Dest = "\\$ItemName\c"+'$'+"\Windows\Debug"
AD Site Undefined Subnets Test#CredCode#Remove-PSDrive -Name Y -Force
AD Site Undefined Subnets Test#CredCode#New-PSDrive -Name Y -PSProvider FileSystem -Root $Dest -Credential $creds -Persist
AD Site Undefined Subnets Test#CredCode#Copy-Item -Path Y:\netlogon.log -destination $DCNetLogonFileNow
AD Site Undefined Subnets Test#CredCode#IF ($Error.count -eq 0)
AD Site Undefined Subnets Test#CredCode#{
AD Site Undefined Subnets Test#CredCode#    ForEach ($AllDataNow in $DataNow)
AD Site Undefined Subnets Test#CredCode#    {
AD Site Undefined Subnets Test#CredCode#        Add-Content $DCNetLogonFileNow $AllDataNow
AD Site Undefined Subnets Test#CredCode#    }
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#    $ThisNetLogonFile = $DCNetLogonFileNow
AD Site Undefined Subnets Test#CredCode#    $ForDCSubnetCount=0
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#    ForEach ($Item in GC $ThisNetLogonFile)
AD Site Undefined Subnets Test#CredCode#    {
AD Site Undefined Subnets Test#CredCode#        $T1,$T2 = $Item.Split(":")
AD Site Undefined Subnets Test#CredCode#        $RTRT = $T2
AD Site Undefined Subnets Test#CredCode#        $C1,$C2,$C3,$C4,$C5,$C6, $C7, $C8 = $RTRT.Split(" ")
AD Site Undefined Subnets Test#CredCode#        $ComputerName = $C7
AD Site Undefined Subnets Test#CredCode#        $ComputerSubnet = $C8
AD Site Undefined Subnets Test#CredCode#        $PCName = $ComputerName
AD Site Undefined Subnets Test#CredCode#        $PCIP = $ComputerSubnet
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#        $SUB1, $SUB2, $SUB3, $SUB4 = $ComputerSubnet.Split(".")
AD Site Undefined Subnets Test#CredCode#        $FinalSubNetcheck=$Sub1+"."+$Sub2+"."+$Sub3+".0"
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#        IF ($C5 -eq "NO_CLIENT_SITE")
AD Site Undefined Subnets Test#CredCode#        { 
AD Site Undefined Subnets Test#CredCode#            $STRPC = $PCName+","+$PCIP
AD Site Undefined Subnets Test#CredCode#            Add-Content $SubNetClientsFile $STRPC
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#            $FoundOrNot = "No"
AD Site Undefined Subnets Test#CredCode#            $RCSVNow = Import-CSV $SubNetfile
AD Site Undefined Subnets Test#CredCode#            ForEach ($ItemNow in $RCSVNow)
AD Site Undefined Subnets Test#CredCode#            {
AD Site Undefined Subnets Test#CredCode#                IF ($ItemNow.Subnet -eq $FinalSubNetCheck -and $ItemNow.DCName -eq $ItemName)
AD Site Undefined Subnets Test#CredCode#                {
AD Site Undefined Subnets Test#CredCode#                    $FoundOrNot = "Yes"
AD Site Undefined Subnets Test#CredCode#                    Break
AD Site Undefined Subnets Test#CredCode#                }
AD Site Undefined Subnets Test#CredCode#            }
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#            IF ($FoundOrNot -eq "No")
AD Site Undefined Subnets Test#CredCode#            {
AD Site Undefined Subnets Test#CredCode#                $STRNow = $ItemName+","+$FinalSubNetCheck
AD Site Undefined Subnets Test#CredCode#                Add-Content $SubNetfile $STRNow
AD Site Undefined Subnets Test#CredCode#                $ForDCSubnetCount++
AD Site Undefined Subnets Test#CredCode#                $AnyGap = "Yes"
AD Site Undefined Subnets Test#CredCode#                $FinStatus = "This domain controller authenticated clients from $ForDCSubnetCount subnets that have not been defined in AD."
AD Site Undefined Subnets Test#CredCode#            }
AD Site Undefined Subnets Test#CredCode#        } 
AD Site Undefined Subnets Test#CredCode#    }
AD Site Undefined Subnets Test#CredCode#    
AD Site Undefined Subnets Test#CredCode#    $ThisStr=$ItemName+","+$DCConError+","+$ComConError+","+$ForDCSubnetCount+","+$FinStatus
AD Site Undefined Subnets Test#CredCode#    Add-Content "$TestCSVFile" $ThisStr             
AD Site Undefined Subnets Test#CredCode#}
AD Site Undefined Subnets Test#CredCode#else
AD Site Undefined Subnets Test#CredCode#{
AD Site Undefined Subnets Test#CredCode#    $ComConError = $Error[0].Exception.Message        
AD Site Undefined Subnets Test#CredCode#    $ThisSTr = $ItemName+","+$DCConError+","+$ComConError
AD Site Undefined Subnets Test#CredCode#    Add-Content "$TestCSVFile" $ThisStr
AD Site Undefined Subnets Test#CredCode#}
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#    }
AD Site Undefined Subnets Test#CredCode#    else
AD Site Undefined Subnets Test#CredCode#    {
AD Site Undefined Subnets Test#CredCode#        $ComConError = $Error[0].Exception.Message
AD Site Undefined Subnets Test#CredCode#        $FinalSTR = $ItemName+",$DCConError,"+$ComConError
AD Site Undefined Subnets Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
AD Site Undefined Subnets Test#CredCode#    }
AD Site Undefined Subnets Test#CredCode#}
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#$OthText = ""
AD Site Undefined Subnets Test#CredCode#IF ($TotDCsInError -ne 0)
AD Site Undefined Subnets Test#CredCode#{
AD Site Undefined Subnets Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
AD Site Undefined Subnets Test#CredCode#}
AD Site Undefined Subnets Test#CredCode#IF ($AnyGap -eq "Yes")
AD Site Undefined Subnets Test#CredCode#{
AD Site Undefined Subnets Test#CredCode#$TestText = "There are AD Subnets that have not been defined in AD. Please load and check result to see the number of unknown subnets authenticated by each domain controller. $OthText"
AD Site Undefined Subnets Test#CredCode#$SumVal = $TotNo
AD Site Undefined Subnets Test#CredCode#$TestStatus="Critical"
AD Site Undefined Subnets Test#CredCode#}
AD Site Undefined Subnets Test#CredCode#IF ($AnyGap -eq "No")
AD Site Undefined Subnets Test#CredCode#{
AD Site Undefined Subnets Test#CredCode#$TestText = "AD Health Profiler has not found any subnet that comes under unknown category. $OthText"
AD Site Undefined Subnets Test#CredCode#$SumVal = ""
AD Site Undefined Subnets Test#CredCode#$TestStatus="Passed"
AD Site Undefined Subnets Test#CredCode#$AnyOneOk = "Yes"
AD Site Undefined Subnets Test#CredCode#IF ($AnyOneOk -eq "No")
AD Site Undefined Subnets Test#CredCode#{
AD Site Undefined Subnets Test#CredCode#$TestText = "Error Executing Dynamic Pack."
AD Site Undefined Subnets Test#CredCode#$SumVal = ""
AD Site Undefined Subnets Test#CredCode#$TestStatus="Completed with Errors."
AD Site Undefined Subnets Test#CredCode#}
AD Site Undefined Subnets Test#CredCode#}
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#$TotNo=0
AD Site Undefined Subnets Test#CredCode#$ItemCount=0
AD Site Undefined Subnets Test#CredCode#$TestText = ""
AD Site Undefined Subnets Test#CredCode#$TestStatus=""
AD Site Undefined Subnets Test#CredCode#$SumVal = ""
AD Site Undefined Subnets Test#CredCode#$AnyGap = "No"
AD Site Undefined Subnets Test#CredCode#$ErrorOrNot = "No"
AD Site Undefined Subnets Test#CredCode#$AnyOneOk = "No"
AD Site Undefined Subnets Test#CredCode#$TotDCsInError = 0
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#$IntDirNow = "$LocAppDataNow\DynamicPAcksTechnologies\ADHealthProfiler\Data\ADUndefinedSubnetsTest"
AD Site Undefined Subnets Test#CredCode#mkdir $IntDirNow -Force
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
AD Site Undefined Subnets Test#CredCode#{
AD Site Undefined Subnets Test#CredCode#    $DCConError = "Ok"
AD Site Undefined Subnets Test#CredCode#    $DCConStatus = "Ok"
AD Site Undefined Subnets Test#CredCode#    $ProceedOrNot = "Yes"
AD Site Undefined Subnets Test#CredCode#    $Error.Clear()
AD Site Undefined Subnets Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName
AD Site Undefined Subnets Test#CredCode#    IF ($Error.Count -ne 0)
AD Site Undefined Subnets Test#CredCode#    {
AD Site Undefined Subnets Test#CredCode#        $ProceedOrNot = "No"
AD Site Undefined Subnets Test#CredCode#        $TotDCsInError++
AD Site Undefined Subnets Test#CredCode#        $DCConError = $Error[0].Exception.Message
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
AD Site Undefined Subnets Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
AD Site Undefined Subnets Test#CredCode#    }
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
AD Site Undefined Subnets Test#CredCode#    {
AD Site Undefined Subnets Test#CredCode#        $ComConError="Ok"        
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#        $DCNetLogonFileNow = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ADUndefinedSubnetsTest\"+$CurProfNowForAll+$ItemName+"NetLogon.DPC"
AD Site Undefined Subnets Test#CredCode#Remove-item $DCNetLogonFileNow -ErrorAction SilentlyContinue
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#$SubNetfile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ADUndefinedSubnetsTest\"+$CurProfNowForAll+$ItemName+"_UndefinedSubnets.DPC"
AD Site Undefined Subnets Test#CredCode#Remove-item $SubNetfile -ErrorAction SilentlyContinue
AD Site Undefined Subnets Test#CredCode#$STR = "DCName, Subnet"
AD Site Undefined Subnets Test#CredCode#Add-Content $SubNetfile $STR
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#$SubNetClientsFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ADUndefinedSubnetsTest\"+$CurProfNowForAll+$ItemName+"_UndefinedSubnet_Clients.DPC"
AD Site Undefined Subnets Test#CredCode#Remove-item $SubNetClientsFile -ErrorAction SilentlyContinue
AD Site Undefined Subnets Test#CredCode#$STR = "Client, IP Address"
AD Site Undefined Subnets Test#CredCode#Add-Content $SubNetClientsFile $STR
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#$Error.Clear() 
AD Site Undefined Subnets Test#CredCode#Copy-Item -Path "\\$ItemName\C$\Windows\debug\netlogon.log" -destination $DCNetLogonFileNow 
AD Site Undefined Subnets Test#CredCode#IF ($Error.count -eq 0)
AD Site Undefined Subnets Test#CredCode#{
AD Site Undefined Subnets Test#CredCode#    $ThisNetLogonFile = $DCNetLogonFileNow
AD Site Undefined Subnets Test#CredCode#    $ForDCSubnetCount=0
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#    ForEach ($Item in GC $ThisNetLogonFile)
AD Site Undefined Subnets Test#CredCode#    {
AD Site Undefined Subnets Test#CredCode#        $T1,$T2 = $Item.Split(":")
AD Site Undefined Subnets Test#CredCode#        $RTRT = $T2
AD Site Undefined Subnets Test#CredCode#        $C1,$C2,$C3,$C4,$C5,$C6, $C7, $C8 = $RTRT.Split(" ")
AD Site Undefined Subnets Test#CredCode#        $ComputerName = $C7
AD Site Undefined Subnets Test#CredCode#        $ComputerSubnet = $C8
AD Site Undefined Subnets Test#CredCode#        $PCName = $ComputerName
AD Site Undefined Subnets Test#CredCode#        $PCIP = $ComputerSubnet
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#        $SUB1, $SUB2, $SUB3, $SUB4 = $ComputerSubnet.Split(".")
AD Site Undefined Subnets Test#CredCode#        $FinalSubNetcheck=$Sub1+"."+$Sub2+"."+$Sub3+".0"
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#        IF ($C5 -eq "NO_CLIENT_SITE")
AD Site Undefined Subnets Test#CredCode#        { 
AD Site Undefined Subnets Test#CredCode#            $STRPC = $PCName+","+$PCIP
AD Site Undefined Subnets Test#CredCode#            Add-Content $SubNetClientsFile $STRPC
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#            $FoundOrNot = "No"
AD Site Undefined Subnets Test#CredCode#            $RCSVNow = Import-CSV $SubNetfile
AD Site Undefined Subnets Test#CredCode#            ForEach ($ItemNow in $RCSVNow)
AD Site Undefined Subnets Test#CredCode#            {
AD Site Undefined Subnets Test#CredCode#                IF ($ItemNow.Subnet -eq $FinalSubNetCheck -and $ItemNow.DCName -eq $ItemName)
AD Site Undefined Subnets Test#CredCode#                {
AD Site Undefined Subnets Test#CredCode#                    $FoundOrNot = "Yes"
AD Site Undefined Subnets Test#CredCode#                    Break
AD Site Undefined Subnets Test#CredCode#                }
AD Site Undefined Subnets Test#CredCode#            }
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#            IF ($FoundOrNot -eq "No")
AD Site Undefined Subnets Test#CredCode#            {
AD Site Undefined Subnets Test#CredCode#                $STRNow = $ItemName+","+$FinalSubNetCheck
AD Site Undefined Subnets Test#CredCode#                Add-Content $SubNetfile $STRNow
AD Site Undefined Subnets Test#CredCode#                $ForDCSubnetCount++
AD Site Undefined Subnets Test#CredCode#                $AnyGap = "Yes"
AD Site Undefined Subnets Test#CredCode#                $FinStatus = "This domain controller authenticated clients from $ForDCSubnetCount subnets that have not been defined in AD."
AD Site Undefined Subnets Test#CredCode#            }
AD Site Undefined Subnets Test#CredCode#        } 
AD Site Undefined Subnets Test#CredCode#    }
AD Site Undefined Subnets Test#CredCode#    
AD Site Undefined Subnets Test#CredCode#    $ThisStr=$ItemName+","+$DCConError+","+$ComConError+","+$ForDCSubnetCount+","+$FinStatus
AD Site Undefined Subnets Test#CredCode#    Add-Content "$TestCSVFile" $ThisStr             
AD Site Undefined Subnets Test#CredCode#}
AD Site Undefined Subnets Test#CredCode#else
AD Site Undefined Subnets Test#CredCode#{
AD Site Undefined Subnets Test#CredCode#    $ComConError = $Error[0].Exception.Message        
AD Site Undefined Subnets Test#CredCode#    $ThisSTr = $ItemName+","+$DCConError+","+$ComConError
AD Site Undefined Subnets Test#CredCode#    Add-Content "$TestCSVFile" $ThisStr
AD Site Undefined Subnets Test#CredCode#}
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#    }
AD Site Undefined Subnets Test#CredCode#    else
AD Site Undefined Subnets Test#CredCode#    {
AD Site Undefined Subnets Test#CredCode#        $ComConError = $Error[0].Exception.Message
AD Site Undefined Subnets Test#CredCode#        $FinalSTR = $ItemName+",$DCConError,"+$ComConError
AD Site Undefined Subnets Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
AD Site Undefined Subnets Test#CredCode#    }
AD Site Undefined Subnets Test#CredCode#}
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#$OthText = ""
AD Site Undefined Subnets Test#CredCode#IF ($TotDCsInError -ne 0)
AD Site Undefined Subnets Test#CredCode#{
AD Site Undefined Subnets Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
AD Site Undefined Subnets Test#CredCode#}
AD Site Undefined Subnets Test#CredCode#IF ($AnyGap -eq "Yes")
AD Site Undefined Subnets Test#CredCode#{
AD Site Undefined Subnets Test#CredCode#$TestText = "There are AD Subnets that have not been defined in AD. Please load and check result to see the number of unknown subnets authenticated by each domain controller. $OthText"
AD Site Undefined Subnets Test#CredCode#$SumVal = $TotNo
AD Site Undefined Subnets Test#CredCode#$TestStatus="Critical"
AD Site Undefined Subnets Test#CredCode#}
AD Site Undefined Subnets Test#CredCode#IF ($AnyGap -eq "No")
AD Site Undefined Subnets Test#CredCode#{
AD Site Undefined Subnets Test#CredCode#$TestText = "AD Health Profiler has not found any subnet that comes under unknown category. $OthText"
AD Site Undefined Subnets Test#CredCode#$SumVal = ""
AD Site Undefined Subnets Test#CredCode#$TestStatus="Passed"
AD Site Undefined Subnets Test#CredCode#$AnyOneOk = "Yes"
AD Site Undefined Subnets Test#CredCode#IF ($AnyOneOk -eq "No")
AD Site Undefined Subnets Test#CredCode#{
AD Site Undefined Subnets Test#CredCode#$TestText = "Error Executing Dynamic Pack."
AD Site Undefined Subnets Test#CredCode#$SumVal = ""
AD Site Undefined Subnets Test#CredCode#$TestStatus="Completed with Errors."
AD Site Undefined Subnets Test#CredCode#}
AD Site Undefined Subnets Test#CredCode#}
AD Site Undefined Subnets Test#CredCode#
AD Site Undefined Subnets Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Undefined Subnets Test#CredCode#
Domain GPO Not Applied Test#HeaderCode#$ThisString="GPO Name, GPO Status, In AD Domain"
Domain GPO Not Applied Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain GPO Not Applied Test#HeaderCode#
Domain GPO Not Applied Test#HeaderCode#
Domain GPO Not Applied Test#HeaderCode#
Domain GPO Not Applied Test#HeaderCode#
Domain GPO Not Applied Test#HeaderCode#
Domain GPO Not Applied Test#HeaderCode#
Domain GPO Not Applied Test#HeaderCode#
Domain GPO Not Applied Test#CredCode#$TotNo=0
Domain GPO Not Applied Test#CredCode#$ItemCount=0
Domain GPO Not Applied Test#CredCode#$TestText = ""
Domain GPO Not Applied Test#CredCode#$TestStatus=""
Domain GPO Not Applied Test#CredCode#$SumVal = ""
Domain GPO Not Applied Test#CredCode#$ErrorOrNot = "No"
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain GPO Not Applied Test#CredCode#{ 
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#    $PDCServerToConnect = "Unknown"
Domain GPO Not Applied Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain GPO Not Applied Test#CredCode#    {
Domain GPO Not Applied Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
Domain GPO Not Applied Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Not Applied Test#CredCode#        {
Domain GPO Not Applied Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Not Applied Test#CredCode#            {
Domain GPO Not Applied Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain GPO Not Applied Test#CredCode#                break
Domain GPO Not Applied Test#CredCode#            }
Domain GPO Not Applied Test#CredCode#        } 
Domain GPO Not Applied Test#CredCode#    }
Domain GPO Not Applied Test#CredCode#    else
Domain GPO Not Applied Test#CredCode#    {
Domain GPO Not Applied Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
Domain GPO Not Applied Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Not Applied Test#CredCode#        {
Domain GPO Not Applied Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Not Applied Test#CredCode#            {
Domain GPO Not Applied Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
Domain GPO Not Applied Test#CredCode#                break
Domain GPO Not Applied Test#CredCode#            }
Domain GPO Not Applied Test#CredCode#        } 
Domain GPO Not Applied Test#CredCode#    }
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#    $Error.Clear()
Domain GPO Not Applied Test#CredCode#    $TotNotAppliedGPO = Invoke-Command -ComputerName $PDCServerToConnect -Script { param($R1Now) Get-GPO -All -Domain $R1Now | %{$gpoName = $_.displayName; $GPOStatusNow = $_.GPOStatus; [int]$counter = 0; $security = $_.GetSecurityInfo(); $security | where{ $_.Permission -eq "GpoApply" } | %{ $counter += 1; } } } -ArgumentList $ThisDomain -Credential $Creds    
Domain GPO Not Applied Test#CredCode#    IF ($Error.count -eq 0)
Domain GPO Not Applied Test#CredCode#    {
Domain GPO Not Applied Test#CredCode#        if ($counter -eq 0)
Domain GPO Not Applied Test#CredCode#        {
Domain GPO Not Applied Test#CredCode#            $FinalVal=$Gponame+","+$GPOStatusNow+","+$ThisDomain
Domain GPO Not Applied Test#CredCode#            Add-Content "$TestCSVFile" $FinalVal            
Domain GPO Not Applied Test#CredCode#            $TotNo++
Domain GPO Not Applied Test#CredCode#        }
Domain GPO Not Applied Test#CredCode#    }
Domain GPO Not Applied Test#CredCode#    else
Domain GPO Not Applied Test#CredCode#    {
Domain GPO Not Applied Test#CredCode#        $ErrorOrNot="Yes"
Domain GPO Not Applied Test#CredCode#    }
Domain GPO Not Applied Test#CredCode#}
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain GPO Not Applied Test#CredCode#{
Domain GPO Not Applied Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain GPO Not Applied Test#CredCode#$SumVal = ""
Domain GPO Not Applied Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain GPO Not Applied Test#CredCode#}
Domain GPO Not Applied Test#CredCode#else
Domain GPO Not Applied Test#CredCode#{
Domain GPO Not Applied Test#CredCode#$FinalText = ""
Domain GPO Not Applied Test#CredCode#$SumVal=$ItemCount
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#IF ($TotNo -eq 0)
Domain GPO Not Applied Test#CredCode#{
Domain GPO Not Applied Test#CredCode#$TestText = "All GPOs have been configured to apply to required objects."
Domain GPO Not Applied Test#CredCode#$SumVal = $TotNo
Domain GPO Not Applied Test#CredCode#$TestStatus="Passed"
Domain GPO Not Applied Test#CredCode#}
Domain GPO Not Applied Test#CredCode#else
Domain GPO Not Applied Test#CredCode#{
Domain GPO Not Applied Test#CredCode#$TestText = "Some GPOs are NOT applying to any objects. Please check why these GPOs are not applying to any objects. These GPOs might have some policy settings that you are expecting to apply to users and computers."
Domain GPO Not Applied Test#CredCode#$TestStatus="High"
Domain GPO Not Applied Test#CredCode#$SumVal = $TotNo
Domain GPO Not Applied Test#CredCode#}
Domain GPO Not Applied Test#CredCode#}
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#$TotNo=0
Domain GPO Not Applied Test#CredCode#$ItemCount=0
Domain GPO Not Applied Test#CredCode#$TestText = ""
Domain GPO Not Applied Test#CredCode#$TestStatus=""
Domain GPO Not Applied Test#CredCode#$SumVal = ""
Domain GPO Not Applied Test#CredCode#$ErrorOrNot = "No"
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain GPO Not Applied Test#CredCode#{ 
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#    $PDCServerToConnect = "Unknown"
Domain GPO Not Applied Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain GPO Not Applied Test#CredCode#    {
Domain GPO Not Applied Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
Domain GPO Not Applied Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Not Applied Test#CredCode#        {
Domain GPO Not Applied Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Not Applied Test#CredCode#            {
Domain GPO Not Applied Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain GPO Not Applied Test#CredCode#                break
Domain GPO Not Applied Test#CredCode#            }
Domain GPO Not Applied Test#CredCode#        } 
Domain GPO Not Applied Test#CredCode#    }
Domain GPO Not Applied Test#CredCode#    else
Domain GPO Not Applied Test#CredCode#    {
Domain GPO Not Applied Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
Domain GPO Not Applied Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Not Applied Test#CredCode#        {
Domain GPO Not Applied Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Not Applied Test#CredCode#            {
Domain GPO Not Applied Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
Domain GPO Not Applied Test#CredCode#                break
Domain GPO Not Applied Test#CredCode#            }
Domain GPO Not Applied Test#CredCode#        } 
Domain GPO Not Applied Test#CredCode#    }
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#    $Error.Clear()
Domain GPO Not Applied Test#CredCode#    
Domain GPO Not Applied Test#CredCode#    $TotNotAppliedGPO=Get-GPO -All -Domain $ThisDomain -Server $PDCServerToConnect | %{
Domain GPO Not Applied Test#CredCode#$gpoName = $_.displayName
Domain GPO Not Applied Test#CredCode#$GPOStatusNow = $_.GPOStatus
Domain GPO Not Applied Test#CredCode#[int]$counter = 0
Domain GPO Not Applied Test#CredCode#$security = $_.GetSecurityInfo()
Domain GPO Not Applied Test#CredCode#$security | where{ $_.Permission -eq "GpoApply" } | %{
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#$counter += 1
Domain GPO Not Applied Test#CredCode#} }
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#    IF ($Error.count -eq 0)
Domain GPO Not Applied Test#CredCode#    {
Domain GPO Not Applied Test#CredCode#        if ($counter -eq 0)
Domain GPO Not Applied Test#CredCode#        {
Domain GPO Not Applied Test#CredCode#            $FinalVal=$Gponame+","+$GPOStatusNow+","+$ThisDomain
Domain GPO Not Applied Test#CredCode#            Add-Content "$TestCSVFile" $FinalVal            
Domain GPO Not Applied Test#CredCode#            $TotNo++
Domain GPO Not Applied Test#CredCode#        }
Domain GPO Not Applied Test#CredCode#    }
Domain GPO Not Applied Test#CredCode#    else
Domain GPO Not Applied Test#CredCode#    {
Domain GPO Not Applied Test#CredCode#        $ErrorOrNot="Yes"
Domain GPO Not Applied Test#CredCode#    }
Domain GPO Not Applied Test#CredCode#}
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain GPO Not Applied Test#CredCode#{
Domain GPO Not Applied Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain GPO Not Applied Test#CredCode#$SumVal = ""
Domain GPO Not Applied Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain GPO Not Applied Test#CredCode#}
Domain GPO Not Applied Test#CredCode#else
Domain GPO Not Applied Test#CredCode#{
Domain GPO Not Applied Test#CredCode#$FinalText = ""
Domain GPO Not Applied Test#CredCode#$SumVal=$ItemCount
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#IF ($TotNo -eq 0)
Domain GPO Not Applied Test#CredCode#{
Domain GPO Not Applied Test#CredCode#$TestText = "All GPOs have been configured to apply to required objects."
Domain GPO Not Applied Test#CredCode#$SumVal = $TotNo
Domain GPO Not Applied Test#CredCode#$TestStatus="Passed"
Domain GPO Not Applied Test#CredCode#}
Domain GPO Not Applied Test#CredCode#else
Domain GPO Not Applied Test#CredCode#{
Domain GPO Not Applied Test#CredCode#$TestText = "Some GPOs are NOT applying to any objects. Please check why these GPOs are not applying to any objects. These GPOs might have some policy settings that you are expecting to apply to users and computers."
Domain GPO Not Applied Test#CredCode#$TestStatus="High"
Domain GPO Not Applied Test#CredCode#$SumVal = $TotNo
Domain GPO Not Applied Test#CredCode#}
Domain GPO Not Applied Test#CredCode#}
Domain GPO Not Applied Test#CredCode#
Domain GPO Not Applied Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain GPO Disabled Test#HeaderCode#$ThisString="GPO Name, Modified On, In AD Domain, Final Status"
Domain GPO Disabled Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain GPO Disabled Test#HeaderCode#
Domain GPO Disabled Test#HeaderCode#
Domain GPO Disabled Test#HeaderCode#
Domain GPO Disabled Test#HeaderCode#
Domain GPO Disabled Test#HeaderCode#
Domain GPO Disabled Test#CredCode#$TotNo=0
Domain GPO Disabled Test#CredCode#$ItemCount=0
Domain GPO Disabled Test#CredCode#$TestText = ""
Domain GPO Disabled Test#CredCode#$TestStatus=""
Domain GPO Disabled Test#CredCode#$SumVal = ""
Domain GPO Disabled Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain GPO Disabled Test#CredCode#{
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#    $PDCServerToConnect = "Unknown"
Domain GPO Disabled Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain GPO Disabled Test#CredCode#    {
Domain GPO Disabled Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
Domain GPO Disabled Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Disabled Test#CredCode#        {
Domain GPO Disabled Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Disabled Test#CredCode#            {
Domain GPO Disabled Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain GPO Disabled Test#CredCode#                break
Domain GPO Disabled Test#CredCode#            }
Domain GPO Disabled Test#CredCode#        }    
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#    }
Domain GPO Disabled Test#CredCode#    else
Domain GPO Disabled Test#CredCode#    {
Domain GPO Disabled Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
Domain GPO Disabled Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Disabled Test#CredCode#        {
Domain GPO Disabled Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Disabled Test#CredCode#            {
Domain GPO Disabled Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
Domain GPO Disabled Test#CredCode#                break
Domain GPO Disabled Test#CredCode#            }
Domain GPO Disabled Test#CredCode#        }    
Domain GPO Disabled Test#CredCode#    }
Domain GPO Disabled Test#CredCode#   
Domain GPO Disabled Test#CredCode#    $Error.Clear()    
Domain GPO Disabled Test#CredCode#    $AllGPODisabled = Invoke-Command -ComputerName $PDCServerToConnect -Script { param($R1Now,$R2Now) Get-GPO -All -Domain $R1Now | where { $_.GpoStatus -eq "AllSettingsDisabled" } } -Credential $Creds -ArgumentList $ThisDomain
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#IF ($Error.count -eq 0)
Domain GPO Disabled Test#CredCode#{
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#else
Domain GPO Disabled Test#CredCode#{
Domain GPO Disabled Test#CredCode#$ErrorOrNot="Yes"
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain GPO Disabled Test#CredCode#{
Domain GPO Disabled Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain GPO Disabled Test#CredCode#$SumVal = ""
Domain GPO Disabled Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#else
Domain GPO Disabled Test#CredCode#{
Domain GPO Disabled Test#CredCode#$Items = $AllGPODisabled
Domain GPO Disabled Test#CredCode#$ItemCount=$AllGPODisabled.Count
Domain GPO Disabled Test#CredCode#$FinalText = ""
Domain GPO Disabled Test#CredCode#$SumVal=$ItemCount
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPO Disabled Test#CredCode#{ 
Domain GPO Disabled Test#CredCode#$TotNo++
Domain GPO Disabled Test#CredCode#} 
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPO Disabled Test#CredCode#{ 
Domain GPO Disabled Test#CredCode#$FinalVal=$ThisItem.DisplayName+","+$ThisItem.ModificationTime+","+$ThisDomain+", Not Ok - Please check why this GPO is disabled."
Domain GPO Disabled Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#IF ($TotNo -ge 0)
Domain GPO Disabled Test#CredCode#{
Domain GPO Disabled Test#CredCode#$TestText = "Some GPOs are completely disabled in the AD domain. Please check why these GPOs have been disabled. GPOs that are created for testing purposes are kept disabled. If these GPOs fall under testing category please ignore."
Domain GPO Disabled Test#CredCode#$TestStatus="High"
Domain GPO Disabled Test#CredCode#$SumVal = $TotNo
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#IF ($TotNo -eq 0)
Domain GPO Disabled Test#CredCode#{
Domain GPO Disabled Test#CredCode#$TestText = "No Disabled GPOs found in AD Domains."
Domain GPO Disabled Test#CredCode#$TestStatus="Passed"
Domain GPO Disabled Test#CredCode#$SumVal = $TotNo
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#$TotNo=0
Domain GPO Disabled Test#CredCode#$ItemCount=0
Domain GPO Disabled Test#CredCode#$TestText = ""
Domain GPO Disabled Test#CredCode#$TestStatus=""
Domain GPO Disabled Test#CredCode#$SumVal = ""
Domain GPO Disabled Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain GPO Disabled Test#CredCode#{
Domain GPO Disabled Test#CredCode#    $PDCServerToConnect = "Unknown"
Domain GPO Disabled Test#CredCode#    IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain GPO Disabled Test#CredCode#    {
Domain GPO Disabled Test#CredCode#        $PDCCSV = Import-CSV $PrefDCFile
Domain GPO Disabled Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Disabled Test#CredCode#        {
Domain GPO Disabled Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Disabled Test#CredCode#            {
Domain GPO Disabled Test#CredCode#                $PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain GPO Disabled Test#CredCode#                break
Domain GPO Disabled Test#CredCode#            }
Domain GPO Disabled Test#CredCode#        }    
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#    }
Domain GPO Disabled Test#CredCode#    else
Domain GPO Disabled Test#CredCode#    {
Domain GPO Disabled Test#CredCode#        $PDCCSV = Import-CSV $PDCListFile
Domain GPO Disabled Test#CredCode#        ForEach ($ItemNow in $PDCCSV)
Domain GPO Disabled Test#CredCode#        {
Domain GPO Disabled Test#CredCode#            IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPO Disabled Test#CredCode#            {
Domain GPO Disabled Test#CredCode#                $PDCServerToConnect = $ItemNow.PDCServer
Domain GPO Disabled Test#CredCode#                break
Domain GPO Disabled Test#CredCode#            }
Domain GPO Disabled Test#CredCode#        }    
Domain GPO Disabled Test#CredCode#    }
Domain GPO Disabled Test#CredCode#   
Domain GPO Disabled Test#CredCode#    $Error.Clear()    
Domain GPO Disabled Test#CredCode#    $AllGPODisabled=Get-GPO -All -Domain $ThisDomain -Server $PDCServerToConnect | where{ $_.GpoStatus -eq "AllSettingsDisabled" } 
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#IF ($Error.count -eq 0)
Domain GPO Disabled Test#CredCode#{
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#else
Domain GPO Disabled Test#CredCode#{
Domain GPO Disabled Test#CredCode#$ErrorOrNot="Yes"
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain GPO Disabled Test#CredCode#{
Domain GPO Disabled Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain GPO Disabled Test#CredCode#$SumVal = ""
Domain GPO Disabled Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#else
Domain GPO Disabled Test#CredCode#{
Domain GPO Disabled Test#CredCode#$Items = $AllGPODisabled
Domain GPO Disabled Test#CredCode#$ItemCount=$AllGPODisabled.Count
Domain GPO Disabled Test#CredCode#$FinalText = ""
Domain GPO Disabled Test#CredCode#$SumVal=$ItemCount
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPO Disabled Test#CredCode#{ 
Domain GPO Disabled Test#CredCode#$TotNo++
Domain GPO Disabled Test#CredCode#} 
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPO Disabled Test#CredCode#{ 
Domain GPO Disabled Test#CredCode#$FinalVal=$ThisItem.DisplayName+","+$ThisItem.ModificationTime+","+$ThisDomain+", Not Ok - Please check why this GPO is disabled."
Domain GPO Disabled Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#IF ($TotNo -ge 0)
Domain GPO Disabled Test#CredCode#{
Domain GPO Disabled Test#CredCode#$TestText = "Some GPOs are completely disabled in the AD domain. Please check why these GPOs have been disabled. GPOs that are created for testing purposes are kept disabled. If these GPOs fall under testing category please ignore."
Domain GPO Disabled Test#CredCode#$TestStatus="High"
Domain GPO Disabled Test#CredCode#$SumVal = $TotNo
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#IF ($TotNo -eq 0)
Domain GPO Disabled Test#CredCode#{
Domain GPO Disabled Test#CredCode#$TestText = "No Disabled GPOs found in AD Domains."
Domain GPO Disabled Test#CredCode#$TestStatus="Passed"
Domain GPO Disabled Test#CredCode#$SumVal = $TotNo
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#}
Domain GPO Disabled Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#
Domain GPO Disabled Test#CredCode#
AD Site Without Subnets Test#HeaderCode#$ThisString="Active Directory Site, Site Location, Total Subnets, Final Status"
AD Site Without Subnets Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Site Without Subnets Test#HeaderCode#
AD Site Without Subnets Test#HeaderCode#
AD Site Without Subnets Test#CredCode#$RPass=$Creds.GetNetworkCredential().Password
AD Site Without Subnets Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName,$CredUserToUse,$RPass)
AD Site Without Subnets Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Site Without Subnets Test#CredCode#IF ($Error.count -eq 0)
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#else
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#$ErrorOrNot="Yes"
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#$TotNo=0
AD Site Without Subnets Test#CredCode#$TestStatus=""
AD Site Without Subnets Test#CredCode#$TestText=""
AD Site Without Subnets Test#CredCode#ForEach ($Site in $ADSites)
AD Site Without Subnets Test#CredCode#{ 
AD Site Without Subnets Test#CredCode#$SiteName = $Site.Name
AD Site Without Subnets Test#CredCode#$SiteLocation = $Site.Location
AD Site Without Subnets Test#CredCode#[array] $SiteSubnets = $Site.Subnets    
AD Site Without Subnets Test#CredCode#$TotSNets = $SiteSubnets.Count
AD Site Without Subnets Test#CredCode#IF (!$SiteSubnets)     
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#$TotNo++
AD Site Without Subnets Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotSNets+", Not Ok"
AD Site Without Subnets Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#else
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotSNets+", Ok"
AD Site Without Subnets Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Without Subnets Test#CredCode#$SumVal = ""
AD Site Without Subnets Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#else
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#IF ($TotNo -eq 0)
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#$TestText = "All AD Sites have at least one Subnet Associated."
AD Site Without Subnets Test#CredCode#$TestStatus="Passed"
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#else
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#$SumVal = $TotNo
AD Site Without Subnets Test#CredCode#$TestStatus="High"
AD Site Without Subnets Test#CredCode#$TestText="Some AD Sites do not have Subnets associated. It is highly recommended to associate required user/application subnets with AD Sites. If subnets are not associated with AD Sites users in the AD Sites might choose a remote domain controller for authentication which in turn might result in excessive use of a remote domain controller."
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Without Subnets Test#CredCode#
AD Site Without Subnets Test#CredCode#
AD Site Without Subnets Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName)
AD Site Without Subnets Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Site Without Subnets Test#CredCode#IF ($Error.count -eq 0)
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#else
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#$ErrorOrNot="Yes"
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#$TotNo=0
AD Site Without Subnets Test#CredCode#$TestStatus=""
AD Site Without Subnets Test#CredCode#$TestText=""
AD Site Without Subnets Test#CredCode#ForEach ($Site in $ADSites)
AD Site Without Subnets Test#CredCode#{ 
AD Site Without Subnets Test#CredCode#$SiteName = $Site.Name
AD Site Without Subnets Test#CredCode#$SiteLocation = $Site.Location
AD Site Without Subnets Test#CredCode#[array] $SiteSubnets = $Site.Subnets    
AD Site Without Subnets Test#CredCode#IF (!$SiteSubnets)     
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#$TotNo++
AD Site Without Subnets Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotSNets+", Not Ok"
AD Site Without Subnets Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#else
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotSNets+", Ok"
AD Site Without Subnets Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Without Subnets Test#CredCode#$SumVal = ""
AD Site Without Subnets Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#else
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#IF ($TotNo -eq 0)
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#$TestText = "All AD Sites have at least one Subnet Associated."
AD Site Without Subnets Test#CredCode#$TestStatus="Passed"
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#else
AD Site Without Subnets Test#CredCode#{
AD Site Without Subnets Test#CredCode#$SumVal = $TotNo
AD Site Without Subnets Test#CredCode#$TestStatus="High"
AD Site Without Subnets Test#CredCode#$TestText="Some AD Sites do not have Subnets associated. It is highly recommended to associate required user/application subnets with AD Sites. If subnets are not associated with AD Sites users in the AD Sites might choose a remote domain controller for authentication which in turn might result in excessive use of a remote domain controller."
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#}
AD Site Without Subnets Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Without Subnets Test#CredCode#
AD Site Without Subnets Test#CredCode#
Domain Computers Disabled Test#HeaderCode#$ThisString="Computer Name, SamAccountName, DistinguishedName, OperatingSystem, In AD Domain"
Domain Computers Disabled Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain Computers Disabled Test#HeaderCode#
Domain Computers Disabled Test#HeaderCode#
Domain Computers Disabled Test#CredCode#$TotNo=0
Domain Computers Disabled Test#CredCode#$ItemCount=0
Domain Computers Disabled Test#CredCode#$TestText = ""
Domain Computers Disabled Test#CredCode#$TestStatus=""
Domain Computers Disabled Test#CredCode#$SumVal = ""
Domain Computers Disabled Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#$PDCServerToConnect = "Unknown"
Domain Computers Disabled Test#CredCode#IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$PDCCSV = Import-CSV $PrefDCFile
Domain Computers Disabled Test#CredCode#ForEach ($ItemNow in $PDCCSV)
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#IF ($ItemNow.Domain -eq $ThisDomain)
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain Computers Disabled Test#CredCode#break
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#} 
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#else
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$PDCCSV = Import-CSV $PDCListFile
Domain Computers Disabled Test#CredCode#ForEach ($ItemNow in $PDCCSV)
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#IF ($ItemNow.Domain -eq $ThisDomain)
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$PDCServerToConnect = $ItemNow.PDCServer
Domain Computers Disabled Test#CredCode#break
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#} 
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#$Error.Clear() 
Domain Computers Disabled Test#CredCode#$CompsDisabledCount=Get-ADComputer -Filter {(enabled -eq $false)} -ResultPageSize 2000 -resultSetSize $null -Server $PDCServerToConnect -Credential $Creds -Properties Name,OperatingSystem,SamAccountName,DistinguishedName
Domain Computers Disabled Test#CredCode#IF ($Error.count -eq 0)
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#else
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$ErrorOrNot="Yes"
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
Domain Computers Disabled Test#CredCode#$SumVal = ""
Domain Computers Disabled Test#CredCode#$TestStatus="Error executing AD Test."
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#else
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$Items = $CompsDisabledCount
Domain Computers Disabled Test#CredCode#$ItemCount=$CompsDisabledCount.Count
Domain Computers Disabled Test#CredCode#$FinalText = ""
Domain Computers Disabled Test#CredCode#$SumVal=$ItemCount
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#ForEach ($ThisItem in $Items)
Domain Computers Disabled Test#CredCode#{ 
Domain Computers Disabled Test#CredCode#$TotNo++
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#$FinalVal="Total Disabled Computers: ["+$TotNo+"]"+",,,,"+$ThisDomain
Domain Computers Disabled Test#CredCode#Add-Content "$TestCSVFile" $FinalVal                    
Domain Computers Disabled Test#CredCode#$TotSrv=0	
Domain Computers Disabled Test#CredCode#ForEach ($ThisItem in $Items)
Domain Computers Disabled Test#CredCode#{ 
Domain Computers Disabled Test#CredCode#IF ($ThisItem.OperatingSystem -like "*Server*")
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$TotSrv++
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#$FinalVal="Total Disabled Servers: ["+$TotSrv+"]"+",,,,"+$ThisDomain
Domain Computers Disabled Test#CredCode#Add-Content "$TestCSVFile" $FinalVal
Domain Computers Disabled Test#CredCode#ForEach ($ThisItem in $Items)
Domain Computers Disabled Test#CredCode#{ 
Domain Computers Disabled Test#CredCode#$FinalVal=$ThisItem.Name+","+$ThisItem.SamAccountName+","+'"'+$ThisItem.DistinguishedName+'"'+","+$ThisItem.OperatingSystem+","+$ThisDomain
Domain Computers Disabled Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#IF ($TotNo -ge 500)
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$TestText = "More than 500 disabled computer accounts were found in AD Domains. Please check why these computer accounts are disabled. If they are disabled and not in use then these accounts either must be removed or moved to a disabled OU."
Domain Computers Disabled Test#CredCode#$TestStatus="High"
Domain Computers Disabled Test#CredCode#$SumVal = $TotNo
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#else
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$TestText = "Less than 500 disabled computer accounts were found in AD Domains. Please check why these computer accounts are disabled. If they are disabled and not in use then these accounts either must be removed or moved to a disabled OU."
Domain Computers Disabled Test#CredCode#$TestStatus="Low"
Domain Computers Disabled Test#CredCode#$SumVal = $TotNo          
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#IF ($TotNo -eq 0)
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$TestText = "No Disabled computers were found in AD Domains."
Domain Computers Disabled Test#CredCode#$TestStatus="Passed"
Domain Computers Disabled Test#CredCode#$SumVal = $TotNo
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#$TotNo=0
Domain Computers Disabled Test#CredCode#$ItemCount=0
Domain Computers Disabled Test#CredCode#$TestText = ""
Domain Computers Disabled Test#CredCode#$TestStatus=""
Domain Computers Disabled Test#CredCode#$SumVal = ""
Domain Computers Disabled Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#$PDCServerToConnect = "Unknown"
Domain Computers Disabled Test#CredCode#IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$PDCCSV = Import-CSV $PrefDCFile
Domain Computers Disabled Test#CredCode#ForEach ($ItemNow in $PDCCSV)
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#IF ($ItemNow.Domain -eq $ThisDomain)
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain Computers Disabled Test#CredCode#break
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#} 
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#else
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$PDCCSV = Import-CSV $PDCListFile
Domain Computers Disabled Test#CredCode#ForEach ($ItemNow in $PDCCSV)
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#IF ($ItemNow.Domain -eq $ThisDomain)
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$PDCServerToConnect = $ItemNow.PDCServer
Domain Computers Disabled Test#CredCode#break
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#} 
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#$Error.Clear()
Domain Computers Disabled Test#CredCode#$CompsDisabledCount=Get-ADComputer -Filter {(enabled -eq $false)} -ResultPageSize 2000 -resultSetSize $null -Server $PDCServerToConnect -Properties Name,OperatingSystem,SamAccountName,DistinguishedName
Domain Computers Disabled Test#CredCode#IF ($Error.count -eq 0)
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#else
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$ErrorOrNot="Yes"
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
Domain Computers Disabled Test#CredCode#$SumVal = ""
Domain Computers Disabled Test#CredCode#$TestStatus="Error executing AD Test."
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#else
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$Items = $CompsDisabledCount
Domain Computers Disabled Test#CredCode#$ItemCount=$CompsDisabledCount.Count
Domain Computers Disabled Test#CredCode#$FinalText = ""
Domain Computers Disabled Test#CredCode#$SumVal=$ItemCount
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#ForEach ($ThisItem in $Items)
Domain Computers Disabled Test#CredCode#{ 
Domain Computers Disabled Test#CredCode#$TotNo++
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#$FinalVal="Total Disabled Computers: ["+$TotNo+"]"+",,,,"+$ThisDomain
Domain Computers Disabled Test#CredCode#Add-Content "$TestCSVFile" $FinalVal
Domain Computers Disabled Test#CredCode#$TotSrv=0	
Domain Computers Disabled Test#CredCode#ForEach ($ThisItem in $Items)
Domain Computers Disabled Test#CredCode#{ 
Domain Computers Disabled Test#CredCode#IF ($ThisItem.OperatingSystem -like "*Server*")
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$TotSrv++
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#$FinalVal="Total Disabled Servers: ["+$TotSrv+"]"+",,,,"+$ThisDomain
Domain Computers Disabled Test#CredCode#Add-Content "$TestCSVFile" $FinalVal
Domain Computers Disabled Test#CredCode#ForEach ($ThisItem in $Items)
Domain Computers Disabled Test#CredCode#{ 
Domain Computers Disabled Test#CredCode#$FinalVal=$ThisItem.Name+","+$ThisItem.SamAccountName+","+'"'+$ThisItem.DistinguishedName+'"'+","+$ThisItem.OperatingSystem+","+$ThisDomain
Domain Computers Disabled Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#IF ($TotNo -ge 500)
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$TestText = "More than 500 disabled computer accounts were found in AD Domains. Please check why these computer accounts are disabled. If they are disabled and not in use then these accounts either must be removed or moved to a disabled OU."
Domain Computers Disabled Test#CredCode#$TestStatus="High"
Domain Computers Disabled Test#CredCode#$SumVal = $TotNo
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#else
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$TestText = "Less than 500 disabled computer accounts were found in AD Domains. Please check why these computer accounts are disabled. If they are disabled and not in use then these accounts either must be removed or moved to a disabled OU."
Domain Computers Disabled Test#CredCode#$TestStatus="Low"
Domain Computers Disabled Test#CredCode#$SumVal = $TotNo          
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#IF ($TotNo -eq 0)
Domain Computers Disabled Test#CredCode#{
Domain Computers Disabled Test#CredCode#$TestText = "No Disabled computers were found in AD Domains."
Domain Computers Disabled Test#CredCode#$TestStatus="Passed"
Domain Computers Disabled Test#CredCode#$SumVal = $TotNo
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#}
Domain Computers Disabled Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Computers Disabled Test#CredCode#
Domain Computers Disabled Test#CredCode#
AD Site Location Test#HeaderCode#$ThisString="AD Site, Location Text,Final Status"
AD Site Location Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Site Location Test#HeaderCode#
AD Site Location Test#CredCode#$RPass=$Creds.GetNetworkCredential().Password
AD Site Location Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName,$CredUserToUse,$RPass)
AD Site Location Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Site Location Test#CredCode#$TotNo=0
AD Site Location Test#CredCode#$TestStatus=""
AD Site Location Test#CredCode#$TestText=""
AD Site Location Test#CredCode#IF ($Error.count -eq 0)
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#else
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#$ErrorOrNot="Yes"
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#ForEach ($Site in $ADSites)
AD Site Location Test#CredCode#{ 
AD Site Location Test#CredCode#$FinStatus="Ok"
AD Site Location Test#CredCode#$SiteName = $Site.Name    
AD Site Location Test#CredCode#$SiteLocation = $Site.Location
AD Site Location Test#CredCode#IF ($Site.Location -eq $null)
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#$TotNo++
AD Site Location Test#CredCode#$FinStatus="Please provide a description for AD Site."
AD Site Location Test#CredCode#$ThisStr=$SiteName+","+$SiteLocation+","+$FinStatus
AD Site Location Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#else
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#$FinStatus="Ok"
AD Site Location Test#CredCode#$ThisStr=$SiteName+","+$SiteLocation+","+$FinStatus
AD Site Location Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Location Test#CredCode#$SumVal = ""
AD Site Location Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#else
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#IF ($TotNo -eq 0)
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#$TestText = "All Sites have a text that defines Site Location."
AD Site Location Test#CredCode#$SumVal = ""
AD Site Location Test#CredCode#$TestStatus="Passed"
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#else
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#$SumVal = $TotNo
AD Site Location Test#CredCode#$TestStatus = "Low"
AD Site Location Test#CredCode#$TestText = "Test found a few AD Sites do not have a description text set that defines the AD site location. It is recommended to set a description text in order to identify the role of the AD Site. Some applications use AD Site Location text to get the details about the AD Sites."
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Location Test#CredCode#
AD Site Location Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName)
AD Site Location Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Site Location Test#CredCode#$TotNo=0
AD Site Location Test#CredCode#$TestStatus=""
AD Site Location Test#CredCode#$TestText=""
AD Site Location Test#CredCode#IF ($Error.count -eq 0)
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#else
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#$ErrorOrNot="Yes"
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#ForEach ($Site in $ADSites)
AD Site Location Test#CredCode#{ 
AD Site Location Test#CredCode#$FinStatus="Ok"
AD Site Location Test#CredCode#$SiteName = $Site.Name    
AD Site Location Test#CredCode#$SiteLocation = $Site.Location
AD Site Location Test#CredCode#
AD Site Location Test#CredCode#IF ($Site.Location -eq $null)
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#$TotNo++
AD Site Location Test#CredCode#$FinStatus="Please provide a description for AD Site."
AD Site Location Test#CredCode#$ThisStr=$SiteName+","+$SiteLocation+","+$FinStatus
AD Site Location Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#else
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#$FinStatus="Ok"
AD Site Location Test#CredCode#$ThisStr=$SiteName+","+$SiteLocation+","+$FinStatus
AD Site Location Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Location Test#CredCode#$SumVal = ""
AD Site Location Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#else
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#IF ($TotNo -eq 0)
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#$TestText = "All Sites have a text that defines Site Location."
AD Site Location Test#CredCode#$SumVal = ""
AD Site Location Test#CredCode#$TestStatus="Passed"
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#else
AD Site Location Test#CredCode#{
AD Site Location Test#CredCode#$SumVal = $TotNo
AD Site Location Test#CredCode#$TestStatus = "Low"
AD Site Location Test#CredCode#$TestText = "Test found a few AD Sites do not have a description text set that defines the AD site location. It is recommended to set a description text in order to identify the role of the AD Site. Some applications use AD Site Location text to get the details about the AD Sites."
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#}
AD Site Location Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Location Test#CredCode#
Domain Users Stale Accounts Test#HeaderCode#$ThisString="User Name, SamAccountName, DistinguishedName, In AD Domain"
Domain Users Stale Accounts Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain Users Stale Accounts Test#HeaderCode#
Domain Users Stale Accounts Test#HeaderCode#
Domain Users Stale Accounts Test#HeaderCode#
Domain Users Stale Accounts Test#HeaderCode#
Domain Users Stale Accounts Test#CredCode#$TotNo=0
Domain Users Stale Accounts Test#CredCode#$ItemCount=0
Domain Users Stale Accounts Test#CredCode#$TestText = ""
Domain Users Stale Accounts Test#CredCode#$TestStatus=""
Domain Users Stale Accounts Test#CredCode#$SumVal = ""
Domain Users Stale Accounts Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Users Stale Accounts Test#CredCode#{ 
Domain Users Stale Accounts Test#CredCode#$UsersInactiveAccountList=Search-ADAccount -Credential $Creds -Server $ThisDomain -AccountInactive -TimeSpan 90.00:00:00 -ResultPageSize 2000 -resultSetSize $null | ?{$_.enabled -eq $true} | Select-Object Name, SamAccountName, DistinguishedName
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#IF ($Error.count -eq 0)
Domain Users Stale Accounts Test#CredCode#{
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#else
Domain Users Stale Accounts Test#CredCode#{
Domain Users Stale Accounts Test#CredCode#$ErrorOrNot="Yes"
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain Users Stale Accounts Test#CredCode#{
Domain Users Stale Accounts Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain Users Stale Accounts Test#CredCode#$SumVal = ""
Domain Users Stale Accounts Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#else
Domain Users Stale Accounts Test#CredCode#{
Domain Users Stale Accounts Test#CredCode#$Items = $UsersInactiveAccountList
Domain Users Stale Accounts Test#CredCode#$ItemCount=$UsersInactiveAccountList.Count
Domain Users Stale Accounts Test#CredCode#$FinalText = ""
Domain Users Stale Accounts Test#CredCode#$SumVal=$ItemCount
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Stale Accounts Test#CredCode#{ 
Domain Users Stale Accounts Test#CredCode#$TotNo++
Domain Users Stale Accounts Test#CredCode#} 
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Stale Accounts Test#CredCode#{ 
Domain Users Stale Accounts Test#CredCode#$FinalVal=$ThisItem.Name+","+$ThisItem.SamAccountName+","+'"'+$ThisItem.DistinguishedName+'"'+","+$ThisDomain
Domain Users Stale Accounts Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#IF ($TotNo -ge 500)
Domain Users Stale Accounts Test#CredCode#{
Domain Users Stale Accounts Test#CredCode#$TestText = "More than 500 Stale user accounts were found in AD Domains. Please load and check why these user accounts are not being used. If these user accounts are not in use then these MUST be disabled in order to avoid any securtiy risks to AD environment."
Domain Users Stale Accounts Test#CredCode#$TestStatus="High"
Domain Users Stale Accounts Test#CredCode#$SumVal = $TotNo
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#else
Domain Users Stale Accounts Test#CredCode#{
Domain Users Stale Accounts Test#CredCode#$TestText = "Less than 500 Stale user accounts were found in AD Domains. Please load and check why these user accounts are not being used. If these user accounts are not in use then these MUST be disabled in order to avoid any securtiy risks to AD environment."
Domain Users Stale Accounts Test#CredCode#$TestStatus="Low"
Domain Users Stale Accounts Test#CredCode#$SumVal = $TotNo          
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#IF ($TotNo -eq 0)
Domain Users Stale Accounts Test#CredCode#{
Domain Users Stale Accounts Test#CredCode#$TestText = "No Stale user accounts were found in AD Domains."
Domain Users Stale Accounts Test#CredCode#$TestStatus="Passed"
Domain Users Stale Accounts Test#CredCode#$SumVal = $TotNo
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#$TotNo=0
Domain Users Stale Accounts Test#CredCode#$ItemCount=0
Domain Users Stale Accounts Test#CredCode#$TestText = ""
Domain Users Stale Accounts Test#CredCode#$TestStatus=""
Domain Users Stale Accounts Test#CredCode#$SumVal = ""
Domain Users Stale Accounts Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Users Stale Accounts Test#CredCode#{ 
Domain Users Stale Accounts Test#CredCode#$UsersInactiveAccountList=Search-ADAccount -Server $ThisDomain -AccountInactive -TimeSpan 90.00:00:00 -ResultPageSize 2000 -resultSetSize $null | ?{$_.enabled -eq $true} | Select-Object Name, SamAccountName, DistinguishedName
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#IF ($Error.count -eq 0)
Domain Users Stale Accounts Test#CredCode#{
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#else
Domain Users Stale Accounts Test#CredCode#{
Domain Users Stale Accounts Test#CredCode#$ErrorOrNot="Yes"
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain Users Stale Accounts Test#CredCode#{
Domain Users Stale Accounts Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain Users Stale Accounts Test#CredCode#$SumVal = ""
Domain Users Stale Accounts Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#else
Domain Users Stale Accounts Test#CredCode#{
Domain Users Stale Accounts Test#CredCode#$Items = $UsersInactiveAccountList
Domain Users Stale Accounts Test#CredCode#$ItemCount=$UsersInactiveAccountList.Count
Domain Users Stale Accounts Test#CredCode#$FinalText = ""
Domain Users Stale Accounts Test#CredCode#$SumVal=$ItemCount
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Stale Accounts Test#CredCode#{ 
Domain Users Stale Accounts Test#CredCode#$TotNo++
Domain Users Stale Accounts Test#CredCode#} 
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Stale Accounts Test#CredCode#{ 
Domain Users Stale Accounts Test#CredCode#$FinalVal=$ThisItem.Name+","+$ThisItem.SamAccountName+","+'"'+$ThisItem.DistinguishedName+'"'+","+$ThisDomain
Domain Users Stale Accounts Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#IF ($TotNo -ge 500)
Domain Users Stale Accounts Test#CredCode#{
Domain Users Stale Accounts Test#CredCode#$TestText = "More than 500 Stale user accounts were found in AD Domains. Please load and check why these user accounts are not being used. If these user accounts are not in use then these MUST be disabled in order to avoid any securtiy risks to AD environment."
Domain Users Stale Accounts Test#CredCode#$TestStatus="High"
Domain Users Stale Accounts Test#CredCode#$SumVal = $TotNo
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#else
Domain Users Stale Accounts Test#CredCode#{
Domain Users Stale Accounts Test#CredCode#$TestText = "Less than 500 Stale user accounts were found in AD Domains. Please load and check why these user accounts are not being used. If these user accounts are not in use then these MUST be disabled in order to avoid any securtiy risks to AD environment."
Domain Users Stale Accounts Test#CredCode#$TestStatus="Low"
Domain Users Stale Accounts Test#CredCode#$SumVal = $TotNo          
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#IF ($TotNo -eq 0)
Domain Users Stale Accounts Test#CredCode#{
Domain Users Stale Accounts Test#CredCode#$TestText = "No Stale user accounts were found in AD Domains."
Domain Users Stale Accounts Test#CredCode#$TestStatus="Passed"
Domain Users Stale Accounts Test#CredCode#$SumVal = $TotNo
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#}
Domain Users Stale Accounts Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#
Domain Users Stale Accounts Test#CredCode#
Domain Users Password Never Expire Test#HeaderCode#$ThisString="User Name, SamAccountName, DistinguishedName, In AD Domain"
Domain Users Password Never Expire Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain Users Password Never Expire Test#HeaderCode#
Domain Users Password Never Expire Test#HeaderCode#
Domain Users Password Never Expire Test#HeaderCode#
Domain Users Password Never Expire Test#CredCode#$TotNo=0
Domain Users Password Never Expire Test#CredCode#$ItemCount=0
Domain Users Password Never Expire Test#CredCode#$TestText = ""
Domain Users Password Never Expire Test#CredCode#$TestStatus=""
Domain Users Password Never Expire Test#CredCode#$SumVal = ""
Domain Users Password Never Expire Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#$UsersPassNeverExpireList=Search-ADAccount -Server $ThisDomain -Credential $Creds -PasswordNeverExpires -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#IF ($Error.count -eq 0)
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#else
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#$ErrorOrNot="Yes"
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain Users Password Never Expire Test#CredCode#$SumVal = ""
Domain Users Password Never Expire Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#else
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#$Items = $UsersPassNeverExpireList
Domain Users Password Never Expire Test#CredCode#$ItemCount=$UsersPassNeverExpireList.Count
Domain Users Password Never Expire Test#CredCode#$FinalText = ""
Domain Users Password Never Expire Test#CredCode#$SumVal=$ItemCount
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Password Never Expire Test#CredCode#{ 
Domain Users Password Never Expire Test#CredCode#$TotNo++
Domain Users Password Never Expire Test#CredCode#} 
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Password Never Expire Test#CredCode#{ 
Domain Users Password Never Expire Test#CredCode#$RemovedComma = $ThisItem.DistinguishedName.replace(",", " ")
Domain Users Password Never Expire Test#CredCode#$FinalVal=$ThisItem.Name+","+$ThisItem.SamAccountName+","+'"'+$RemovedComma+'"'+","+$ThisDomain
Domain Users Password Never Expire Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#IF ($TotNo -ge 500)
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#$TestText = "More than 500 Password Never Expires user accounts were found in AD Domains. Please check why password for these user accounts are set to not expire. Every user must be set to renew their password except user accounts which are created for use with applications. Service Accounts can be set to not expire."
Domain Users Password Never Expire Test#CredCode#$TestStatus="High"
Domain Users Password Never Expire Test#CredCode#$SumVal = $TotNo
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#else
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#$TestText = "Less than 500 Password Never Expires user accounts were found in AD Domains. Please check why password for these user accounts are set to not expire. Every user must be set to renew their password except user accounts which are created for use with applications. Service Accounts can be set to not expire."
Domain Users Password Never Expire Test#CredCode#$TestStatus="Low"
Domain Users Password Never Expire Test#CredCode#$SumVal = $TotNo          
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#IF ($TotNo -eq 0)
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#$TestText = "No Password Never Expires user accounts were found in AD Domains."
Domain Users Password Never Expire Test#CredCode#$TestStatus="Passed"
Domain Users Password Never Expire Test#CredCode#$SumVal = $TotNo
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#$TotNo=0
Domain Users Password Never Expire Test#CredCode#$ItemCount=0
Domain Users Password Never Expire Test#CredCode#$TestText = ""
Domain Users Password Never Expire Test#CredCode#$TestStatus=""
Domain Users Password Never Expire Test#CredCode#$SumVal = ""
Domain Users Password Never Expire Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#$UsersPassNeverExpireList=Search-ADAccount -Server $ThisDomain -PasswordNeverExpires -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#IF ($Error.count -eq 0)
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#else
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#$ErrorOrNot="Yes"
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain Users Password Never Expire Test#CredCode#$SumVal = ""
Domain Users Password Never Expire Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#else
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#$Items = $UsersPassNeverExpireList
Domain Users Password Never Expire Test#CredCode#$ItemCount=$UsersPassNeverExpireList.Count
Domain Users Password Never Expire Test#CredCode#$FinalText = ""
Domain Users Password Never Expire Test#CredCode#$SumVal=$ItemCount
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Password Never Expire Test#CredCode#{ 
Domain Users Password Never Expire Test#CredCode#$TotNo++
Domain Users Password Never Expire Test#CredCode#} 
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#ForEach ($ThisItem in $Items)
Domain Users Password Never Expire Test#CredCode#{ 
Domain Users Password Never Expire Test#CredCode#$RemovedComma = $ThisItem.DistinguishedName.replace(",", " ")
Domain Users Password Never Expire Test#CredCode#$FinalVal=$ThisItem.Name+","+$ThisItem.SamAccountName+","+'"'+$RemovedComma+'"'+","+$ThisDomain
Domain Users Password Never Expire Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#IF ($TotNo -ge 500)
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#$TestText = "More than 500 Password Never Expires user accounts were found in AD Domains. Please check why password for these user accounts are set to not expire. Every user must be set to renew their password except user accounts which are created for use with applications. Service Accounts can be set to not expire."
Domain Users Password Never Expire Test#CredCode#$TestStatus="High"
Domain Users Password Never Expire Test#CredCode#$SumVal = $TotNo
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#else
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#$TestText = "Less than 500 Password Never Expires user accounts were found in AD Domains. Please check why password for these user accounts are set to not expire. Every user must be set to renew their password except user accounts which are created for use with applications. Service Accounts can be set to not expire."
Domain Users Password Never Expire Test#CredCode#$TestStatus="Low"
Domain Users Password Never Expire Test#CredCode#$SumVal = $TotNo          
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#IF ($TotNo -eq 0)
Domain Users Password Never Expire Test#CredCode#{
Domain Users Password Never Expire Test#CredCode#$TestText = "No Password Never Expires user accounts were found in AD Domains."
Domain Users Password Never Expire Test#CredCode#$TestStatus="Passed"
Domain Users Password Never Expire Test#CredCode#$SumVal = $TotNo
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#}
Domain Users Password Never Expire Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#
Domain Users Password Never Expire Test#CredCode#
Domain Controller Local Disks Test#HeaderCode#$ThisStr="Domain Controller,Connection,Command Status, Number of Volumes,Final Status"
Domain Controller Local Disks Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Local Disks Test#HeaderCode#
Domain Controller Local Disks Test#HeaderCode#
Domain Controller Local Disks Test#HeaderCode#
Domain Controller Local Disks Test#HeaderCode#
Domain Controller Local Disks Test#HeaderCode#
Domain Controller Local Disks Test#HeaderCode#
Domain Controller Local Disks Test#CredCode#$TotNo=0
Domain Controller Local Disks Test#CredCode#$ItemCount=0
Domain Controller Local Disks Test#CredCode#$TestText = ""
Domain Controller Local Disks Test#CredCode#$TestStatus=""
Domain Controller Local Disks Test#CredCode#$SumVal = ""
Domain Controller Local Disks Test#CredCode#$AnyGap = "No"
Domain Controller Local Disks Test#CredCode#$ErrorOrNot = "No"
Domain Controller Local Disks Test#CredCode#$AnyOneOk = "No"
Domain Controller Local Disks Test#CredCode#$TotDCsInError = 0
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$DCConError = "Ok"
Domain Controller Local Disks Test#CredCode#$DCConStatus = "Ok"
Domain Controller Local Disks Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller Local Disks Test#CredCode#$Error.Clear()
Domain Controller Local Disks Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller Local Disks Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$ProceedOrNot = "No"
Domain Controller Local Disks Test#CredCode#$TotDCsInError++
Domain Controller Local Disks Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Local Disks Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$ComConError="Ok"        
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#$Error.Clear()
Domain Controller Local Disks Test#CredCode#$disk = Get-WmiObject Win32_Volume -ComputerName $ItemName -Credential $Creds
Domain Controller Local Disks Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$AnyOneOk="Yes"
Domain Controller Local Disks Test#CredCode#$TotDisksNow=0
Domain Controller Local Disks Test#CredCode#ForEach ($R in $disk)
Domain Controller Local Disks Test#CredCode#{ 
Domain Controller Local Disks Test#CredCode#$ThisDriveType = $R.DriveType    
Domain Controller Local Disks Test#CredCode#IF ($ThisDriveType -eq 3 -and $RFreeSpace -lt 10)
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$TotDisksNow++
Domain Controller Local Disks Test#CredCode#} 
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#$NumberOfDisksRem = ""
Domain Controller Local Disks Test#CredCode#IF ($TotDisksNow -le 3)
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$NumberOfDisksRem = "There are less than three volumes configured in the domain controller to host OS and Active Directory Files."
Domain Controller Local Disks Test#CredCode#$AnyGap = "Yes"
Domain Controller Local Disks Test#CredCode#$TotNo++
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#$STRNew = $ItemName+","+$DCConError+","+$ComConError+","+$TotDisksNow+","+$NumberOfDisksRem
Domain Controller Local Disks Test#CredCode#Add-Content "$TestCSVFile" $STRNew    
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#else
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Local Disks Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Local Disks Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Local Disks Test#CredCode#} 
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#else
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Local Disks Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Local Disks Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#$OthText = ""
Domain Controller Local Disks Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$TestText = "Disks on Domain Controllers are not configured as per Active Directory best practices. As per best practices domain controllers file must be hosted on separate volumes to avoid any performance issues. For example SYSVOL to be hosted on a separate disk - Active Directory Logs to be hosted on another disk and so on. It is also recommended not to host Active Directory database on Operating System disk. $OthText"
Domain Controller Local Disks Test#CredCode#$SumVal = $TotNo
Domain Controller Local Disks Test#CredCode#$TestStatus="High"
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$TestText = "Disks on Domain Controllers configured as per Active Directory best practices. $OthText"
Domain Controller Local Disks Test#CredCode#$SumVal = ""
Domain Controller Local Disks Test#CredCode#$TestStatus="Passed"
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller Local Disks Test#CredCode#$SumVal = ""
Domain Controller Local Disks Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#$TotNo=0
Domain Controller Local Disks Test#CredCode#$ItemCount=0
Domain Controller Local Disks Test#CredCode#$TestText = ""
Domain Controller Local Disks Test#CredCode#$TestStatus=""
Domain Controller Local Disks Test#CredCode#$SumVal = ""
Domain Controller Local Disks Test#CredCode#$AnyGap = "No"
Domain Controller Local Disks Test#CredCode#$ErrorOrNot = "No"
Domain Controller Local Disks Test#CredCode#$AnyOneOk = "No"
Domain Controller Local Disks Test#CredCode#$TotDCsInError = 0
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$DCConError = "Ok"
Domain Controller Local Disks Test#CredCode#$DCConStatus = "Ok"
Domain Controller Local Disks Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller Local Disks Test#CredCode#$Error.Clear()
Domain Controller Local Disks Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller Local Disks Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$ProceedOrNot = "No"
Domain Controller Local Disks Test#CredCode#$TotDCsInError++
Domain Controller Local Disks Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Local Disks Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$ComConError="Ok"        
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#$Error.Clear()
Domain Controller Local Disks Test#CredCode#$disk = Get-WmiObject Win32_Volume -ComputerName $ItemName
Domain Controller Local Disks Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$AnyOneOk="Yes"
Domain Controller Local Disks Test#CredCode#$TotDisksNow=0
Domain Controller Local Disks Test#CredCode#ForEach ($R in $disk)
Domain Controller Local Disks Test#CredCode#{ 
Domain Controller Local Disks Test#CredCode#$ThisDriveType = $R.DriveType    
Domain Controller Local Disks Test#CredCode#IF ($ThisDriveType -eq 3 -and $RFreeSpace -lt 10)
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$TotDisksNow++
Domain Controller Local Disks Test#CredCode#} 
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#$NumberOfDisksRem = ""
Domain Controller Local Disks Test#CredCode#IF ($TotDisksNow -le 3)
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$NumberOfDisksRem = "There are less than three volumes configured in the domain controller to host OS and Active Directory Files."
Domain Controller Local Disks Test#CredCode#$AnyGap = "Yes"
Domain Controller Local Disks Test#CredCode#$TotNo++
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#$STRNew = $ItemName+","+$DCConError+","+$ComConError+","+$TotDisksNow+","+$NumberOfDisksRem
Domain Controller Local Disks Test#CredCode#Add-Content "$TestCSVFile" $STRNew    
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#else
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Local Disks Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Local Disks Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Local Disks Test#CredCode#} 
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#else
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Local Disks Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Local Disks Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#$OthText = ""
Domain Controller Local Disks Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$TestText = "Disks on Domain Controllers are not configured as per Active Directory best practices. As per best practices domain controllers file must be hosted on separate volumes to avoid any performance issues. For example SYSVOL to be hosted on a separate disk - Active Directory Logs to be hosted on another disk and so on. It is also recommended not to host Active Directory database on Operating System disk. $OthText"
Domain Controller Local Disks Test#CredCode#$SumVal = $TotNo
Domain Controller Local Disks Test#CredCode#$TestStatus="High"
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$TestText = "Disks on Domain Controllers configured as per Active Directory best practices. $OthText"
Domain Controller Local Disks Test#CredCode#$SumVal = ""
Domain Controller Local Disks Test#CredCode#$TestStatus="Passed"
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller Local Disks Test#CredCode#{
Domain Controller Local Disks Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller Local Disks Test#CredCode#$SumVal = ""
Domain Controller Local Disks Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#}
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Local Disks Test#CredCode#
Domain Controller Local Disks Test#CredCode#
Domain Controller DNS Configuration Test#HeaderCode#$ThisString="Domain Controller,Connection,Command Status, Network Adapter Description, IP Address,Subnet,Default Gateway,DNS Servers,Final Status"
Domain Controller DNS Configuration Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain Controller DNS Configuration Test#HeaderCode#
Domain Controller DNS Configuration Test#HeaderCode#
Domain Controller DNS Configuration Test#HeaderCode#
Domain Controller DNS Configuration Test#HeaderCode#
Domain Controller DNS Configuration Test#CredCode#$TotNo=0
Domain Controller DNS Configuration Test#CredCode#$ItemCount=0
Domain Controller DNS Configuration Test#CredCode#$TestText = ""
Domain Controller DNS Configuration Test#CredCode#$TestStatus=""
Domain Controller DNS Configuration Test#CredCode#$SumVal = ""
Domain Controller DNS Configuration Test#CredCode#$AnyGap = "No"
Domain Controller DNS Configuration Test#CredCode#$ErrorOrNot = "No"
Domain Controller DNS Configuration Test#CredCode#$AnyOneOk = "No"
Domain Controller DNS Configuration Test#CredCode#$TotDCsInError = 0
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$DCConError = "Ok"
Domain Controller DNS Configuration Test#CredCode#$DCConStatus = "Ok"
Domain Controller DNS Configuration Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller DNS Configuration Test#CredCode#$Error.Clear()
Domain Controller DNS Configuration Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller DNS Configuration Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$ProceedOrNot = "No"
Domain Controller DNS Configuration Test#CredCode#$TotDCsInError++
Domain Controller DNS Configuration Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller DNS Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$ComConError="Ok"        
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#$Error.Clear()
Domain Controller DNS Configuration Test#CredCode#$nwINFO = Get-WmiObject -Credential $Creds -ComputerName $ItemName Win32_NetworkAdapterConfiguration | Where-Object { $_.IPAddress -ne $null }
Domain Controller DNS Configuration Test#CredCode#IF ($Error.count -eq 0)
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$AnyOneOk="Yes"
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#foreach ($NIC in $nwINFO)
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$nwServerName = $NIC.DNSHostName 
Domain Controller DNS Configuration Test#CredCode#$nwDescrip = $NIC.Description 
Domain Controller DNS Configuration Test#CredCode#$nwIPADDR = $NIC.IPAddress 
Domain Controller DNS Configuration Test#CredCode#$nwSUBNET = $NIC.IpSubnet 
Domain Controller DNS Configuration Test#CredCode#$nwGateWay = $NIC.DefaultIPGateway 
Domain Controller DNS Configuration Test#CredCode#$nwMacADD = $NIC.MACAddress 
Domain Controller DNS Configuration Test#CredCode#$nwDNS = $NIC.DNSServerSearchOrder 
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#$FinStatus="Ok"
Domain Controller DNS Configuration Test#CredCode#IF ($NwDNS.Count -lt 2)
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$FinStatus ="Not enough DNS Servers have been configured on this domain controller."
Domain Controller DNS Configuration Test#CredCode#$AnyGap = "Yes"                
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#$FinalSTR = $ItemName+","+$DCConError+","+$ComConError+","+$nwDescrip+","+$nwIPADDR+","+$nwSUBNET+","+$nwGateWay+","+'"'+$NWDNS+'"'+","+$FinStatus
Domain Controller DNS Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$TotNo++
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#else
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller DNS Configuration Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller DNS Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#else
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller DNS Configuration Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller DNS Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#$OthText = ""
Domain Controller DNS Configuration Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$TestText = "Some Domain Controllers have not been configured with enough DNS Servers in the TCP/IP property of the network card. Please check FinalStatus column of the output and check which Domain Controller required updating with DNS configuration. It is recommended to configure domain controllers with at least 2 DNS Servers. $OthText"
Domain Controller DNS Configuration Test#CredCode#$SumVal = $TotNo
Domain Controller DNS Configuration Test#CredCode#$TestStatus="High"
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$TestText = "All Domain Controllers have been configured with two or more DNS Servers. $OthText"
Domain Controller DNS Configuration Test#CredCode#$SumVal = ""
Domain Controller DNS Configuration Test#CredCode#$TestStatus="Passed"
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller DNS Configuration Test#CredCode#$SumVal = ""
Domain Controller DNS Configuration Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#$TotNo=0
Domain Controller DNS Configuration Test#CredCode#$ItemCount=0
Domain Controller DNS Configuration Test#CredCode#$TestText = ""
Domain Controller DNS Configuration Test#CredCode#$TestStatus=""
Domain Controller DNS Configuration Test#CredCode#$SumVal = ""
Domain Controller DNS Configuration Test#CredCode#$AnyGap = "No"
Domain Controller DNS Configuration Test#CredCode#$ErrorOrNot = "No"
Domain Controller DNS Configuration Test#CredCode#$AnyOneOk = "No"
Domain Controller DNS Configuration Test#CredCode#$TotDCsInError = 0
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$DCConError = "Ok"
Domain Controller DNS Configuration Test#CredCode#$DCConStatus = "Ok"
Domain Controller DNS Configuration Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller DNS Configuration Test#CredCode#$Error.Clear()
Domain Controller DNS Configuration Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller DNS Configuration Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$ProceedOrNot = "No"
Domain Controller DNS Configuration Test#CredCode#$TotDCsInError++
Domain Controller DNS Configuration Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller DNS Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$ComConError="Ok"        
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#$Error.Clear()
Domain Controller DNS Configuration Test#CredCode#$nwINFO = Get-WmiObject -ComputerName $ItemName Win32_NetworkAdapterConfiguration | Where-Object { $_.IPAddress -ne $null }
Domain Controller DNS Configuration Test#CredCode#IF ($Error.count -eq 0)
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$AnyOneOk="Yes"
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#foreach ($NIC in $nwINFO)
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$nwServerName = $NIC.DNSHostName 
Domain Controller DNS Configuration Test#CredCode#$nwDescrip = $NIC.Description 
Domain Controller DNS Configuration Test#CredCode#$nwIPADDR = $NIC.IPAddress 
Domain Controller DNS Configuration Test#CredCode#$nwSUBNET = $NIC.IpSubnet 
Domain Controller DNS Configuration Test#CredCode#$nwGateWay = $NIC.DefaultIPGateway 
Domain Controller DNS Configuration Test#CredCode#$nwMacADD = $NIC.MACAddress 
Domain Controller DNS Configuration Test#CredCode#$nwDNS = $NIC.DNSServerSearchOrder 
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#$FinStatus="Ok"
Domain Controller DNS Configuration Test#CredCode#IF ($NwDNS.Count -lt 2)
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$FinStatus ="Not enough DNS Servers have been configured on this domain controller."
Domain Controller DNS Configuration Test#CredCode#$AnyGap = "Yes"                
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#$FinalSTR = $ItemName+","+$DCConError+","+$ComConError+","+$nwDescrip+","+$nwIPADDR+","+$nwSUBNET+","+$nwGateWay+","+'"'+$NWDNS+'"'+","+$FinStatus
Domain Controller DNS Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$TotNo++
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#else
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller DNS Configuration Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller DNS Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#else
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller DNS Configuration Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller DNS Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#$OthText = ""
Domain Controller DNS Configuration Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$TestText = "Some Domain Controllers have not been configured with enough DNS Servers in the TCP/IP property of the network card. Please check FinalStatus column of the output and check which Domain Controller required updating with DNS configuration. It is recommended to configure domain controllers with at least 2 DNS Servers. $OthText"
Domain Controller DNS Configuration Test#CredCode#$SumVal = $TotNo
Domain Controller DNS Configuration Test#CredCode#$TestStatus="High"
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$TestText = "All Domain Controllers have been configured with two or more DNS Servers. $OthText"
Domain Controller DNS Configuration Test#CredCode#$SumVal = ""
Domain Controller DNS Configuration Test#CredCode#$TestStatus="Passed"
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller DNS Configuration Test#CredCode#{
Domain Controller DNS Configuration Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller DNS Configuration Test#CredCode#$SumVal = ""
Domain Controller DNS Configuration Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#}
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller DNS Configuration Test#CredCode#
Domain Controller DNS Configuration Test#CredCode#
Domain Controller Free Space Test#HeaderCode#$ThisStr="Domain Controller,Connection,Command Status, Volume, Total Size in GB, Free Space in GB,Final Status"
Domain Controller Free Space Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Free Space Test#HeaderCode#
Domain Controller Free Space Test#HeaderCode#
Domain Controller Free Space Test#HeaderCode#
Domain Controller Free Space Test#HeaderCode#
Domain Controller Free Space Test#HeaderCode#
Domain Controller Free Space Test#HeaderCode#
Domain Controller Free Space Test#HeaderCode#
Domain Controller Free Space Test#CredCode#$TotNo=0
Domain Controller Free Space Test#CredCode#$ItemCount=0
Domain Controller Free Space Test#CredCode#$TestText = ""
Domain Controller Free Space Test#CredCode#$TestStatus=""
Domain Controller Free Space Test#CredCode#$SumVal = ""
Domain Controller Free Space Test#CredCode#$AnyGap = "No"
Domain Controller Free Space Test#CredCode#$ErrorOrNot = "No"
Domain Controller Free Space Test#CredCode#$AnyOneOk = "No"
Domain Controller Free Space Test#CredCode#$TotDCsInError = 0
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$DCConError = "Ok"
Domain Controller Free Space Test#CredCode#$DCConStatus = "Ok"
Domain Controller Free Space Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller Free Space Test#CredCode#$Error.Clear()
Domain Controller Free Space Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller Free Space Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$ProceedOrNot = "No"
Domain Controller Free Space Test#CredCode#$TotDCsInError++
Domain Controller Free Space Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Free Space Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$ComConError="Ok"        
Domain Controller Free Space Test#CredCode#$Error.Clear() 
Domain Controller Free Space Test#CredCode#$disk = Get-WmiObject Win32_Volume -ComputerName $ItemName -Credential $Creds
Domain Controller Free Space Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Free Space Test#CredCode#{ 
Domain Controller Free Space Test#CredCode#$AnyOneOk="Yes"    
Domain Controller Free Space Test#CredCode#ForEach ($R in $disk)
Domain Controller Free Space Test#CredCode#{ 
Domain Controller Free Space Test#CredCode#$SizeOk = "Ok"
Domain Controller Free Space Test#CredCode#$RSize = $R.Capacity / 1024/1024/1024
Domain Controller Free Space Test#CredCode#$RFreeSpace = $R.Freespace/1024/1024/1024
Domain Controller Free Space Test#CredCode#$ThisDriveType = $R.DriveType    
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#IF ($ThisDriveType -eq 3 -and $RFreeSpace -lt 10)
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$SizeOk = "WARNING:10 GB or less disk space available."                
Domain Controller Free Space Test#CredCode#$AnyGap = "Yes"                
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#$ThisStr=$ItemName+","+$DCConError+","+$ComConError+","+$R.Caption+","+$RSize+","+$RFreeSpace+","+$SizeOk
Domain Controller Free Space Test#CredCode#Add-Content "$TestCSVFile" $ThisStr            
Domain Controller Free Space Test#CredCode#} 
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$TotNo++
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#else
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Free Space Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Free Space Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#else
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Free Space Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Free Space Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#$OthText = ""
Domain Controller Free Space Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$TestText = "Disks on Domain Controllers have less than 10 GB of disk space available. Depending on the size of your Active Directory database you must consider freeing up some space on the disk or add more storage to disks on the domain controllers. Please load and check FinalStatus column indicating the domain controller and disk which are running low on space. $OthText"
Domain Controller Free Space Test#CredCode#$SumVal = $TotNo
Domain Controller Free Space Test#CredCode#$TestStatus="High"
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$TestText = "Domain Controllers have more than 10 GB of disk space available. $OthText"
Domain Controller Free Space Test#CredCode#$SumVal = ""
Domain Controller Free Space Test#CredCode#$TestStatus="Passed"
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller Free Space Test#CredCode#$SumVal = ""
Domain Controller Free Space Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#$TotNo=0
Domain Controller Free Space Test#CredCode#$ItemCount=0
Domain Controller Free Space Test#CredCode#$TestText = ""
Domain Controller Free Space Test#CredCode#$TestStatus=""
Domain Controller Free Space Test#CredCode#$SumVal = ""
Domain Controller Free Space Test#CredCode#$AnyGap = "No"
Domain Controller Free Space Test#CredCode#$ErrorOrNot = "No"
Domain Controller Free Space Test#CredCode#$AnyOneOk = "No"
Domain Controller Free Space Test#CredCode#$TotDCsInError = 0
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$DCConError = "Ok"
Domain Controller Free Space Test#CredCode#$DCConStatus = "Ok"
Domain Controller Free Space Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller Free Space Test#CredCode#$Error.Clear()
Domain Controller Free Space Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller Free Space Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$ProceedOrNot = "No"
Domain Controller Free Space Test#CredCode#$TotDCsInError++
Domain Controller Free Space Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Free Space Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$ComConError="Ok"        
Domain Controller Free Space Test#CredCode#$Error.Clear() 
Domain Controller Free Space Test#CredCode#$disk = Get-WmiObject Win32_Volume -ComputerName $ItemName
Domain Controller Free Space Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Free Space Test#CredCode#{ 
Domain Controller Free Space Test#CredCode#$AnyOneOk="Yes"    
Domain Controller Free Space Test#CredCode#ForEach ($R in $disk)
Domain Controller Free Space Test#CredCode#{ 
Domain Controller Free Space Test#CredCode#$SizeOk = "Ok"
Domain Controller Free Space Test#CredCode#$RSize = $R.Capacity / 1024/1024/1024
Domain Controller Free Space Test#CredCode#$RFreeSpace = $R.Freespace/1024/1024/1024
Domain Controller Free Space Test#CredCode#$ThisDriveType = $R.DriveType    
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#IF ($ThisDriveType -eq 3 -and $RFreeSpace -lt 10)
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$SizeOk = "WARNING:10 GB or less disk space available."                
Domain Controller Free Space Test#CredCode#$AnyGap = "Yes"                
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#$ThisStr=$ItemName+","+$DCConError+","+$ComConError+","+$R.Caption+","+$RSize+","+$RFreeSpace+","+$SizeOk
Domain Controller Free Space Test#CredCode#Add-Content "$TestCSVFile" $ThisStr            
Domain Controller Free Space Test#CredCode#} 
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$TotNo++
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#else
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Free Space Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Free Space Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#else
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Free Space Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Free Space Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#$OthText = ""
Domain Controller Free Space Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$TestText = "Disks on Domain Controllers have less than 10 GB of disk space available. Depending on the size of your Active Directory database you must consider freeing up some space on the disk or add more storage to disks on the domain controllers. Please load and check FinalStatus column indicating the domain controller and disk which are running low on space. $OthText"
Domain Controller Free Space Test#CredCode#$SumVal = $TotNo
Domain Controller Free Space Test#CredCode#$TestStatus="High"
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$TestText = "Domain Controllers have more than 10 GB of disk space available. $OthText"
Domain Controller Free Space Test#CredCode#$SumVal = ""
Domain Controller Free Space Test#CredCode#$TestStatus="Passed"
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller Free Space Test#CredCode#{
Domain Controller Free Space Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller Free Space Test#CredCode#$SumVal = ""
Domain Controller Free Space Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#}
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Free Space Test#CredCode#
Domain Controller Free Space Test#CredCode#
Domain Controller Updates Level Test#HeaderCode#$ThisStr="Domain Controller,Connection,Command Status, OS Version, Service Pack, Number of Updates, Number of HotFixes"
Domain Controller Updates Level Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Updates Level Test#HeaderCode#
Domain Controller Updates Level Test#HeaderCode#
Domain Controller Updates Level Test#HeaderCode#
Domain Controller Updates Level Test#HeaderCode#
Domain Controller Updates Level Test#CredCode#$TotNo=0
Domain Controller Updates Level Test#CredCode#$ItemCount=0
Domain Controller Updates Level Test#CredCode#$TestText = ""
Domain Controller Updates Level Test#CredCode#$TestStatus=""
Domain Controller Updates Level Test#CredCode#$SumVal = ""
Domain Controller Updates Level Test#CredCode#$AnyGap = "No"
Domain Controller Updates Level Test#CredCode#$ErrorOrNot = "No"
Domain Controller Updates Level Test#CredCode#$AnyOneOk = "No"
Domain Controller Updates Level Test#CredCode#$TotDCsInError = 0
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$DCConError = "Ok"
Domain Controller Updates Level Test#CredCode#$DCConStatus = "Ok"
Domain Controller Updates Level Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller Updates Level Test#CredCode#$Error.Clear()
Domain Controller Updates Level Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller Updates Level Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$ProceedOrNot = "No"
Domain Controller Updates Level Test#CredCode#$TotDCsInError++
Domain Controller Updates Level Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Updates Level Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$ComConError="Ok"        
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$Error.Clear()
Domain Controller Updates Level Test#CredCode#$TotSUpdates = Get-HotFix -Credential $Creds -ComputerName $ItemName | Where-Object {$_.Description -eq "Security Update" }
Domain Controller Updates Level Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Updates Level Test#CredCode#{ 
Domain Controller Updates Level Test#CredCode#$AnyOneOk="Yes"
Domain Controller Updates Level Test#CredCode#$sOS =Get-WmiObject -Credential $Creds  -class Win32_OperatingSystem -computername $ItemName
Domain Controller Updates Level Test#CredCode#$sOSName = $sOS.Caption
Domain Controller Updates Level Test#CredCode#$SPLevel = $sOS.ServicePackMajorVersion
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$IsHFOK = "No"
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$TotSUpdatesCount = $TotSUpdates.Count
Domain Controller Updates Level Test#CredCode#$TotOnlyUpdates = Get-HotFix -Credential $Creds -ComputerName $ItemName | Where-Object {$_.Description -eq "Update" }
Domain Controller Updates Level Test#CredCode#$TotOnlyUpdatesCount = $TotOnlyUpdates.Count
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$ThisSTr = $ItemName+","+$DCConError+","+$ComConError+","+$sOSName+","+$SPLevel+","+$TotSUpdatesCount+","+$TotOnlyUpdatesCount
Domain Controller Updates Level Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#IF ($IsHFOK -eq "No")
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$AnyGap = "Yes"
Domain Controller Updates Level Test#CredCode#$TotNo++
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#else
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Updates Level Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Updates Level Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#else
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Updates Level Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Updates Level Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$OthText = ""
Domain Controller Updates Level Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$TestText = "Some domain controllers do not have same patching level. Please load and check result. Please note it is certainly not necessary that all domain controllers will have same patching level. You may want to check with your patching administrator if any domain controller was applied with a hotfix that was not applicable to other domain controllers. It also depends on the version of domain controllers. For example - Windows Server 2012 R2 domain controllers might have different patching number than Windows Server 2016. $OthText"
Domain Controller Updates Level Test#CredCode#$SumVal = $TotNo
Domain Controller Updates Level Test#CredCode#$TestStatus="High"
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$TestText = "All domain controllers have same patching level. $OthText"
Domain Controller Updates Level Test#CredCode#$SumVal = ""
Domain Controller Updates Level Test#CredCode#$TestStatus="Passed"
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller Updates Level Test#CredCode#$SumVal = ""
Domain Controller Updates Level Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$TotNo=0
Domain Controller Updates Level Test#CredCode#$ItemCount=0
Domain Controller Updates Level Test#CredCode#$TestText = ""
Domain Controller Updates Level Test#CredCode#$TestStatus=""
Domain Controller Updates Level Test#CredCode#$SumVal = ""
Domain Controller Updates Level Test#CredCode#$AnyGap = "No"
Domain Controller Updates Level Test#CredCode#$ErrorOrNot = "No"
Domain Controller Updates Level Test#CredCode#$AnyOneOk = "No"
Domain Controller Updates Level Test#CredCode#$TotDCsInError = 0
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$DCConError = "Ok"
Domain Controller Updates Level Test#CredCode#$DCConStatus = "Ok"
Domain Controller Updates Level Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller Updates Level Test#CredCode#$Error.Clear()
Domain Controller Updates Level Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller Updates Level Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$ProceedOrNot = "No"
Domain Controller Updates Level Test#CredCode#$TotDCsInError++
Domain Controller Updates Level Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Updates Level Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$ComConError="Ok"        
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$Error.Clear()
Domain Controller Updates Level Test#CredCode#$TotSUpdates = Get-HotFix -ComputerName $ItemName | Where-Object {$_.Description -eq "Security Update" }
Domain Controller Updates Level Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Updates Level Test#CredCode#{ 
Domain Controller Updates Level Test#CredCode#$AnyOneOk="Yes"
Domain Controller Updates Level Test#CredCode#$sOS =Get-WmiObject -class Win32_OperatingSystem -computername $ItemName
Domain Controller Updates Level Test#CredCode#$sOSName = $sOS.Caption
Domain Controller Updates Level Test#CredCode#$SPLevel = $sOS.ServicePackMajorVersion
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$IsHFOK = "No"
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$TotSUpdatesCount = $TotSUpdates.Count
Domain Controller Updates Level Test#CredCode#$TotOnlyUpdates = Get-HotFix -ComputerName $ItemName | Where-Object {$_.Description -eq "Update" }
Domain Controller Updates Level Test#CredCode#$TotOnlyUpdatesCount = $TotOnlyUpdates.Count
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$ThisSTr = $ItemName+","+$DCConError+","+$ComConError+","+$sOSName+","+$SPLevel+","+$TotSUpdatesCount+","+$TotOnlyUpdatesCount
Domain Controller Updates Level Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#IF ($IsHFOK -eq "No")
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$AnyGap = "Yes"
Domain Controller Updates Level Test#CredCode#$TotNo++
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#else
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Updates Level Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Updates Level Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#else
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Updates Level Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Updates Level Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$OthText = ""
Domain Controller Updates Level Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$TestText = "Some domain controllers do not have same patching level. Please load and check result. Please note it is certainly not necessary that all domain controllers will have same patching level. You may want to check with your patching administrator if any domain controller was applied with a hotfix that was not applicable to other domain controllers. It also depends on the version of domain controllers. For example - Windows Server 2012 R2 domain controllers might have different patching number than Windows Server 2016. $OthText"
Domain Controller Updates Level Test#CredCode#$SumVal = $TotNo
Domain Controller Updates Level Test#CredCode#$TestStatus="High"
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$TestText = "All domain controllers have same patching level. $OthText"
Domain Controller Updates Level Test#CredCode#$SumVal = ""
Domain Controller Updates Level Test#CredCode#$TestStatus="Passed"
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller Updates Level Test#CredCode#{
Domain Controller Updates Level Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller Updates Level Test#CredCode#$SumVal = ""
Domain Controller Updates Level Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#}
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Updates Level Test#CredCode#
Domain Controller Updates Level Test#CredCode#
AD Site Without Global Catalog Test#HeaderCode#$ThisString="AD Site, Site Location, Total Global Catalog Servers, Final Status"
AD Site Without Global Catalog Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Site Without Global Catalog Test#HeaderCode#
AD Site Without Global Catalog Test#HeaderCode#
AD Site Without Global Catalog Test#CredCode#$RPass=$Creds.GetNetworkCredential().Password
AD Site Without Global Catalog Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName,$CredUserToUse,$RPass)
AD Site Without Global Catalog Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Site Without Global Catalog Test#CredCode#$TotNo=0
AD Site Without Global Catalog Test#CredCode#$TestStatus=""
AD Site Without Global Catalog Test#CredCode#ForEach ($Site in $ADSites)
AD Site Without Global Catalog Test#CredCode#{ 
AD Site Without Global Catalog Test#CredCode#$SiteName = $Site.Name
AD Site Without Global Catalog Test#CredCode#$SiteLocation = $Site.Location
AD Site Without Global Catalog Test#CredCode#[array] $SiteLinks = $Site.SiteLinks    
AD Site Without Global Catalog Test#CredCode#$SiteDC = Get-ADDomainController -Server $CurForestName  -Credential $Creds -filter { (Site -eq $Site) -and (IsGlobalCatalog -eq $True) }
AD Site Without Global Catalog Test#CredCode#$TotGCs = $SiteDC.Name.Count
AD Site Without Global Catalog Test#CredCode#IF (!$SiteDC)
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#$TotNo++
AD Site Without Global Catalog Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotGCs+", Not Ok"
AD Site Without Global Catalog Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Without Global Catalog Test#CredCode#} 
AD Site Without Global Catalog Test#CredCode#else
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotGCs+", OK"
AD Site Without Global Catalog Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#IF ($Error.count -eq 0)
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#else
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#$ErrorOrNot="Yes"
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Without Global Catalog Test#CredCode#$SumVal = ""
AD Site Without Global Catalog Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#else
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#IF ($TotNo -eq 0)
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#$TestText = "All Sites are configured at least with one Global Catalog Server."
AD Site Without Global Catalog Test#CredCode#$SumVal = ""
AD Site Without Global Catalog Test#CredCode#$TestStatus="Passed"
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#else
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#$SumVal = $TotNo
AD Site Without Global Catalog Test#CredCode#$TestStatus = "High"
AD Site Without Global Catalog Test#CredCode#$TestText = "Some AD Sites do not have a Global Catalog Server configured. It is recommended to designate one Domain Controller as a Global Catalog Server in AD Sites where AD Applications are running. AD Applications might use Global Catalog Server to find objects in the Active Directory. Otherwise AD Applications will send search queries to a remote global catalog domain controller which in turn might result in excessive network traffic."
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Without Global Catalog Test#CredCode#
AD Site Without Global Catalog Test#CredCode#
AD Site Without Global Catalog Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName)
AD Site Without Global Catalog Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Site Without Global Catalog Test#CredCode#$TotNo=0
AD Site Without Global Catalog Test#CredCode#$TestStatus=""
AD Site Without Global Catalog Test#CredCode#$TestText=""
AD Site Without Global Catalog Test#CredCode#$SumVal=0
AD Site Without Global Catalog Test#CredCode#ForEach ($Site in $ADSites)
AD Site Without Global Catalog Test#CredCode#{ 
AD Site Without Global Catalog Test#CredCode#$SiteName = $Site.Name
AD Site Without Global Catalog Test#CredCode#$SiteLocation = $Site.Location
AD Site Without Global Catalog Test#CredCode#[array] $SiteLinks = $Site.SiteLinks    
AD Site Without Global Catalog Test#CredCode#$SiteDC = Get-ADDomainController -Server $CurForestName  -filter { (Site -eq $Site) -and (IsGlobalCatalog -eq $True) }
AD Site Without Global Catalog Test#CredCode#$TotGCs = $SiteDC.Name.Count
AD Site Without Global Catalog Test#CredCode#IF (!$SiteDC)
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#$TotNo++
AD Site Without Global Catalog Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotGCs+", Not Ok"
AD Site Without Global Catalog Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Without Global Catalog Test#CredCode#} 
AD Site Without Global Catalog Test#CredCode#else
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotGCs+", OK"
AD Site Without Global Catalog Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#IF ($Error.count -eq 0)
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#else
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#$ErrorOrNot="Yes"
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Without Global Catalog Test#CredCode#$SumVal = ""
AD Site Without Global Catalog Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#else
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#IF ($TotNo -eq 0)
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#$TestText = "All Sites are configured at least with one Global Catalog Server."
AD Site Without Global Catalog Test#CredCode#$SumVal = ""
AD Site Without Global Catalog Test#CredCode#$TestStatus="Passed"
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#else
AD Site Without Global Catalog Test#CredCode#{
AD Site Without Global Catalog Test#CredCode#$SumVal = $TotNo
AD Site Without Global Catalog Test#CredCode#$TestStatus = "High"
AD Site Without Global Catalog Test#CredCode#$TestText = "Some AD Sites do not have a Global Catalog Server configured. It is recommended to designate one Domain Controller as a Global Catalog Server in AD Sites where AD Applications are running. AD Applications might use Global Catalog Server to find objects in the Active Directory. Otherwise AD Applications will send search queries to a remote global catalog domain controller which in turn might result in excessive network traffic."
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#}
AD Site Without Global Catalog Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Without Global Catalog Test#CredCode#
AD Site Without Global Catalog Test#CredCode#
AD Site Without Domain Controllers Test#HeaderCode#$ThisString="AD Site, Site Location, Total Domain Controllers, Final Status"
AD Site Without Domain Controllers Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Site Without Domain Controllers Test#HeaderCode#
AD Site Without Domain Controllers Test#HeaderCode#
AD Site Without Domain Controllers Test#CredCode#$RPass=$Creds.GetNetworkCredential().Password
AD Site Without Domain Controllers Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName,$CredUserToUse,$RPass)
AD Site Without Domain Controllers Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Site Without Domain Controllers Test#CredCode#IF ($Error.count -eq 0)
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#else
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#$ErrorOrNot="Yes"
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#$TotNo=0
AD Site Without Domain Controllers Test#CredCode#$TestStatus=""
AD Site Without Domain Controllers Test#CredCode#$TestText=""
AD Site Without Domain Controllers Test#CredCode#ForEach ($Site in $ADSites)
AD Site Without Domain Controllers Test#CredCode#{ 
AD Site Without Domain Controllers Test#CredCode#$SiteName = $Site.Name
AD Site Without Domain Controllers Test#CredCode#$SiteLocation = $Site.Location
AD Site Without Domain Controllers Test#CredCode#[array] $SiteServers = $Site.Servers
AD Site Without Domain Controllers Test#CredCode#$TotDCs = $SiteServers.Count
AD Site Without Domain Controllers Test#CredCode#IF (!$SiteServers)
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#$TotNo++
AD Site Without Domain Controllers Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotDCs+", Not Ok"
AD Site Without Domain Controllers Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Without Domain Controllers Test#CredCode#} 
AD Site Without Domain Controllers Test#CredCode#else
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotDCs+", Ok"
AD Site Without Domain Controllers Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#
AD Site Without Domain Controllers Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Without Domain Controllers Test#CredCode#$SumVal = ""
AD Site Without Domain Controllers Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#else
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#IF ($TotNo -eq 0)
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#$TestText = "All AD Sites have at least one Domain Controller."
AD Site Without Domain Controllers Test#CredCode#$TestStatus="Passed"
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#else
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#$SumVal = $TotNo
AD Site Without Domain Controllers Test#CredCode#$TestStatus = "High"
AD Site Without Domain Controllers Test#CredCode#$TestText = "Some AD Sites do not have a Domain Controller deployed. Please identify the role of the AD Site and check why these AD Sites do not have a domain controller deployed. You might also want to check number of users running in these sites. If there are fewer users and if these AD Sites are connected with a good network connection then there is no need to deploy domain controllers."
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Without Domain Controllers Test#CredCode#
AD Site Without Domain Controllers Test#CredCode#
AD Site Without Domain Controllers Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName)
AD Site Without Domain Controllers Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Site Without Domain Controllers Test#CredCode#IF ($Error.count -eq 0)
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#else
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#$ErrorOrNot="Yes"
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#$TotNo=0
AD Site Without Domain Controllers Test#CredCode#$TestStatus=""
AD Site Without Domain Controllers Test#CredCode#$TestText=""
AD Site Without Domain Controllers Test#CredCode#ForEach ($Site in $ADSites)
AD Site Without Domain Controllers Test#CredCode#{ 
AD Site Without Domain Controllers Test#CredCode#$SiteName = $Site.Name
AD Site Without Domain Controllers Test#CredCode#$SiteLocation = $Site.Location
AD Site Without Domain Controllers Test#CredCode#[array] $SiteServers = $Site.Servers
AD Site Without Domain Controllers Test#CredCode#$TotDCs = $SiteServers.Count
AD Site Without Domain Controllers Test#CredCode#IF (!$SiteServers)
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#$TotNo++
AD Site Without Domain Controllers Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotDCs+", Not Ok"
AD Site Without Domain Controllers Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Without Domain Controllers Test#CredCode#} 
AD Site Without Domain Controllers Test#CredCode#else
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$TotDCs+", Ok"
AD Site Without Domain Controllers Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Site Without Domain Controllers Test#CredCode#$SumVal = ""
AD Site Without Domain Controllers Test#CredCode#$TestStatus="Error executing AD Test."
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#else
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#IF ($TotNo -eq 0)
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#$TestText = "All AD Sites have at least one Domain Controller deployed."
AD Site Without Domain Controllers Test#CredCode#$TestStatus="Passed"
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#else
AD Site Without Domain Controllers Test#CredCode#{
AD Site Without Domain Controllers Test#CredCode#$SumVal = $TotNo
AD Site Without Domain Controllers Test#CredCode#$TestStatus = "High"
AD Site Without Domain Controllers Test#CredCode#$TestText = "Some AD Sites do not have a Domain Controller deployed. Please identify the role of the AD Site and check why these AD Sites do not have a domain controller deployed. You might also want to check number of users running in these sites. If there are fewer users and if these AD Sites are connected with a good network connection then there is no need to deploy domain controllers."
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#}
AD Site Without Domain Controllers Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Site Without Domain Controllers Test#CredCode#
AD Site Without Domain Controllers Test#CredCode#
Domain Controllers Required Ports Listening Test#HeaderCode#$ThisString="Domain Controller,Connection,Command Status, UDP-389, TCP-389, UDP-135, TCP-135, UDP-88, TCP-88, UDP-445, TCP-445,Final Status,Data File Location"
Domain Controllers Required Ports Listening Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain Controllers Required Ports Listening Test#HeaderCode#
Domain Controllers Required Ports Listening Test#HeaderCode#
Domain Controllers Required Ports Listening Test#HeaderCode#
Domain Controllers Required Ports Listening Test#HeaderCode#
Domain Controllers Required Ports Listening Test#CredCode#$TestStatus="Passed"
Domain Controllers Required Ports Listening Test#CredCode#$TestText = ""
Domain Controllers Required Ports Listening Test#CredCode#$sumVal=0
Domain Controllers Required Ports Listening Test#CredCode#$ReachOrNot = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "No"
Domain Controllers Required Ports Listening Test#CredCode#$TotNo = 0
Domain Controllers Required Ports Listening Test#CredCode#$AnyOneOk="No"
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$IntDirNow = "$LocAppDataNow\DynamicPAcksTechnologies\ADHealthProfiler\Data\ReqPortTest"
Domain Controllers Required Ports Listening Test#CredCode#mkdir $IntDirNow -Force
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$PortQryExe = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\PortQry.exe"
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controllers Required Ports Listening Test#CredCode#{ 
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "No"
Domain Controllers Required Ports Listening Test#CredCode#$ThisService="NetLogon"     
Domain Controllers Required Ports Listening Test#CredCode#$Error.Clear()
Domain Controllers Required Ports Listening Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controllers Required Ports Listening Test#CredCode#IF ($Error.Count -eq 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$AnyOneOk="Yes"
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP389Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP135Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP88Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP445Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP389Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP135Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP88Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP445Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$LookFor = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$ThisServer=$ItemName
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "389"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "UDP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus=""
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP389Status = "Listening"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "135"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "UDP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus=""
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP139Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "88"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "UDP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus=""
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP88Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "445"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "UDP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus=""
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP445Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "389"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "TCP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus=""
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP389Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "135"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "TCP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus=""
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP139Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "88"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "TCP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus=""
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP88Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "445"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "TCP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus="Ok"
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP445Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#IF ($PortTCP389Status -eq "Filtered" -or $PortTCP135Status -eq "Filtered" -or $PortTCP88Status -eq "Filtered" -or $PortTCP445Status -eq "Filtered" -or $PortUDP389Status -eq "Filtered" -or $PortUDP135Status -eq "Filtered" -or $PortUDP88Status -eq "Filtered" -or $PortUDP445Status -eq "Filtered")
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus ="WARNING: This domain controller does not listen on required domain controller ports."
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$DCConError = "Ok"
Domain Controllers Required Ports Listening Test#CredCode#$ComConError = "Ok"
Domain Controllers Required Ports Listening Test#CredCode#$FinalStr = $ItemName+","+$DCConError+","+$ComConError+","+$PortUDP389Status+","+$PortTCP389Status+","+$PortUDP135Status+","+$PortTCP135Status+","+$PortUDP88Status+","+$PortTCP88Status+","+$PortUDP445Status+","+$PortTCP445Status+","+$FinStatus+","+$PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#Add-Content $TestCSVFile $FinalStr            
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#IF ($IsDCGap -eq "Yes")
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$TotNo++
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#else
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$ThisSTR = $ItemName+",Error Connecting to Domain Controller"        
Domain Controllers Required Ports Listening Test#CredCode#Add-Content "$TestCSVFile" $ThisStr   
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$TestStatus="Critical"
Domain Controllers Required Ports Listening Test#CredCode#$TestText = "Domain Controllers are not listening on the required ports. Please ensure all domain controllers are listening on the required ports and protocols. You need to check Filtered text in output reported by the Dynamic Pack. Please check which domain controller is not listening on which port. The result is based on the PortQry tool. PortyQry Tool sometimes might return Filtered for a specific port. You may want to log on to Domain Controller and run netstat command to ensure domain controller is listening on the required port. If you find domain controller listening on all required ports you may consider closing this case."
Domain Controllers Required Ports Listening Test#CredCode#$SumVal = $TotNo
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#IF ($AnyGap -eq "No")
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$TestStatus="Passed"
Domain Controllers Required Ports Listening Test#CredCode#$TestText = "All domain controllers are listening on the required ports. Please ensure AD Health Profiler was able to execute Dynamic Pack against all domain controllers."
Domain Controllers Required Ports Listening Test#CredCode#$SumVal = ""
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$TestStatus="Error"
Domain Controllers Required Ports Listening Test#CredCode#$TestText = "Error Executing Dynamic Pack"
Domain Controllers Required Ports Listening Test#CredCode#$SumVal = ""
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$TestStatus="Passed"
Domain Controllers Required Ports Listening Test#CredCode#$TestText = ""
Domain Controllers Required Ports Listening Test#CredCode#$sumVal=0
Domain Controllers Required Ports Listening Test#CredCode#$ReachOrNot = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "No"
Domain Controllers Required Ports Listening Test#CredCode#$TotNo = 0
Domain Controllers Required Ports Listening Test#CredCode#$AnyOneOk="No"
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$IntDirNow = "$LocAppDataNow\DynamicPAcksTechnologies\ADHealthProfiler\Data\ReqPortTest"
Domain Controllers Required Ports Listening Test#CredCode#mkdir $IntDirNow -Force
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$PortQryExe = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\PortQry.exe"
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controllers Required Ports Listening Test#CredCode#{ 
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "No"
Domain Controllers Required Ports Listening Test#CredCode#$ThisService="NetLogon"     
Domain Controllers Required Ports Listening Test#CredCode#$Error.Clear()
Domain Controllers Required Ports Listening Test#CredCode#Get-Service -Name "$ThisService" -ComputerName $ItemName
Domain Controllers Required Ports Listening Test#CredCode#IF ($Error.Count -eq 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$AnyOneOk="Yes"
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP389Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP135Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP88Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP445Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP389Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP135Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP88Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP445Status="Listening"
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$LookFor = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$ThisServer=$ItemName
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "389"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "UDP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus=""
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP389Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "135"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "UDP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus=""
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP139Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "88"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "UDP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus=""
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP88Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "445"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "UDP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus=""
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortUDP445Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "389"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "TCP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus=""
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP389Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "135"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "TCP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus=""
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP139Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "88"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "TCP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus="Ok"
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP88Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$Port = "445"
Domain Controllers Required Ports Listening Test#CredCode#$PortProtocol = "TCP"
Domain Controllers Required Ports Listening Test#CredCode#$cmd = $PortQryExe + " -n " + $ThisServer + " -p " + $PortProtocol + " -e " + $port
Domain Controllers Required Ports Listening Test#CredCode#$PortQryResultFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\ReqPortTest\"+$CurProfNowForAll+$ThisServer+"_"+$Port+"_"+$PortProtocol+".TXT"
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#$Output = Invoke-Expression $cmd
Domain Controllers Required Ports Listening Test#CredCode#$Output | Out-file $PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#$ThisLookFor=$LookFor
Domain Controllers Required Ports Listening Test#CredCode#$FoundOrNot=Select-String -Path $PortQryResultFile -Pattern $ThisLookFor
Domain Controllers Required Ports Listening Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus=""
Domain Controllers Required Ports Listening Test#CredCode#IF ($TotFoundNow -ne 0)
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$PortTCP445Status = "Filtered"
Domain Controllers Required Ports Listening Test#CredCode#$AnyGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#$IsDCGap = "Yes"
Domain Controllers Required Ports Listening Test#CredCode#} 
Domain Controllers Required Ports Listening Test#CredCode#Remove-Item $PortQryResultFile -ErrorAction SilentlyContinue
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#IF ($PortTCP389Status -eq "Filtered" -or $PortTCP135Status -eq "Filtered" -or $PortTCP88Status -eq "Filtered" -or $PortTCP445Status -eq "Filtered" -or $PortUDP389Status -eq "Filtered" -or $PortUDP135Status -eq "Filtered" -or $PortUDP88Status -eq "Filtered" -or $PortUDP445Status -eq "Filtered")
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$FinStatus ="WARNING: This domain controller does not listen on required domain controller ports."
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#$DCConError = "Ok"
Domain Controllers Required Ports Listening Test#CredCode#$ComConError = "Ok"
Domain Controllers Required Ports Listening Test#CredCode#$FinalStr = $ItemName+","+$DCConError+","+$ComConError+","+$PortUDP389Status+","+$PortTCP389Status+","+$PortUDP135Status+","+$PortTCP135Status+","+$PortUDP88Status+","+$PortTCP88Status+","+$PortUDP445Status+","+$PortTCP445Status+","+$FinStatus+","+$PortQryResultFile
Domain Controllers Required Ports Listening Test#CredCode#Add-Content $TestCSVFile $FinalStr            
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#IF ($IsDCGap -eq "Yes")
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$TotNo++
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#else
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$ThisSTR = $ItemName+",Error Connecting to Domain Controller"        
Domain Controllers Required Ports Listening Test#CredCode#Add-Content "$TestCSVFile" $ThisStr   
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$TestStatus="Critical"
Domain Controllers Required Ports Listening Test#CredCode#$TestText = "Domain Controllers are not listening on the required ports. Please ensure all domain controllers are listening on the required ports and protocols. You need to check Filtered text in output reported by the Dynamic Pack. Please check which domain controller is not listening on which port. The result is based on the PortQry tool. PortyQry Tool sometimes might return Filtered for a specific port. You may want to log on to Domain Controller and run netstat command to ensure domain controller is listening on the required port. If you find domain controller listening on all required ports you may consider closing this case."
Domain Controllers Required Ports Listening Test#CredCode#$SumVal = $TotNo
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#IF ($AnyGap -eq "No")
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$TestStatus="Passed"
Domain Controllers Required Ports Listening Test#CredCode#$TestText = "All domain controllers are listening on the required ports. Please ensure AD Health Profiler was able to execute Dynamic Pack against all domain controllers."
Domain Controllers Required Ports Listening Test#CredCode#$SumVal = ""
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controllers Required Ports Listening Test#CredCode#{
Domain Controllers Required Ports Listening Test#CredCode#$TestStatus="Error"
Domain Controllers Required Ports Listening Test#CredCode#$TestText = "Error Executing Dynamic Pack"
Domain Controllers Required Ports Listening Test#CredCode#$SumVal = ""
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#}
Domain Controllers Required Ports Listening Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
Domain Controllers Required Ports Listening Test#CredCode#
AD Domain Controller Time Configuration Test#HeaderCode#$ThisString="Domain Controller,Connection,Command Status, Controller Type, Sync Setting,Sync From,Final Status"
AD Domain Controller Time Configuration Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Domain Controller Time Configuration Test#HeaderCode#
AD Domain Controller Time Configuration Test#CredCode#$TotNo=0
AD Domain Controller Time Configuration Test#CredCode#$ItemCount=0
AD Domain Controller Time Configuration Test#CredCode#$TestText = ""
AD Domain Controller Time Configuration Test#CredCode#$TestStatus=""
AD Domain Controller Time Configuration Test#CredCode#$SumVal = ""
AD Domain Controller Time Configuration Test#CredCode#$AnyGap = "No"
AD Domain Controller Time Configuration Test#CredCode#$ErrorOrNot = "No"
AD Domain Controller Time Configuration Test#CredCode#$AnyOneOk = "No"
AD Domain Controller Time Configuration Test#CredCode#$TotDCsInError = 0
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$Error.Clear()
AD Domain Controller Time Configuration Test#CredCode#$PDCInForest =Get-ADForest $CurForestName -Credential $Creds | Select-Object -ExpandProperty RootDomain | Get-ADDomain | Select-Object -Property PDCEmulator
AD Domain Controller Time Configuration Test#CredCode#IF ($Error.Count -eq 0)
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$PDCServer = $PDCInForest.PDCEmulator
AD Domain Controller Time Configuration Test#CredCode#$RMNow = Invoke-Command -ComputerName $PDCServer -Script { w32tm /query /configuration } -ArgumentList $ItemName -Credential $Creds
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$SyncSettingNow = ""
AD Domain Controller Time Configuration Test#CredCode#$SyncFrom = ""
AD Domain Controller Time Configuration Test#CredCode#$FinStatus ="Ok"
AD Domain Controller Time Configuration Test#CredCode#

AD Domain Controller Time Configuration Test#CredCode#Foreach ($Item in $RMNow)
AD Domain Controller Time Configuration Test#CredCode#{ 
AD Domain Controller Time Configuration Test#CredCode#    $T1, $T2 = $Item.Split(":")   
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#    IF ($T1 -eq "Type")
AD Domain Controller Time Configuration Test#CredCode#    {
AD Domain Controller Time Configuration Test#CredCode#        IF ($T2 -eq "NT5DS (Local)" -or $T2 -eq "NT5DS")
AD Domain Controller Time Configuration Test#CredCode#        { 
AD Domain Controller Time Configuration Test#CredCode#            $T2
AD Domain Controller Time Configuration Test#CredCode#            $AnyGap = "Yes"
AD Domain Controller Time Configuration Test#CredCode#            $FinStatus = "WARNING: Root PDC must sync its time from an External NTP Server by specifying NTP (Local) value in Type Registry entry. It is not recommended to use NT5DS and AllSync(Local) for PDC."
AD Domain Controller Time Configuration Test#CredCode#        }
AD Domain Controller Time Configuration Test#CredCode#        
AD Domain Controller Time Configuration Test#CredCode#        $SyncSettingNow = $T2        
AD Domain Controller Time Configuration Test#CredCode#    }
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#    IF ($T1 -eq "NtpServer")
AD Domain Controller Time Configuration Test#CredCode#    {
AD Domain Controller Time Configuration Test#CredCode#        $SyncFrom = $T2     
AD Domain Controller Time Configuration Test#CredCode#    }
AD Domain Controller Time Configuration Test#CredCode#}

AD Domain Controller Time Configuration Test#CredCode#$FinalSTR = $PDCServer+",Ok,Ok,PDC,"+$SyncSettingNow+","+'"'+$SyncFrom+'"'+","+$FinStatus
AD Domain Controller Time Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalStr
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#else
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$ComConError = $Error[0].Exception.Message
AD Domain Controller Time Configuration Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
AD Domain Controller Time Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$DCConError = "Ok"
AD Domain Controller Time Configuration Test#CredCode#$DCConStatus = "Ok"
AD Domain Controller Time Configuration Test#CredCode#$ProceedOrNot = "Yes"
AD Domain Controller Time Configuration Test#CredCode#$Error.Clear()
AD Domain Controller Time Configuration Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
AD Domain Controller Time Configuration Test#CredCode#IF ($Error.Count -ne 0)
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$ProceedOrNot = "No"
AD Domain Controller Time Configuration Test#CredCode#$TotDCsInError++
AD Domain Controller Time Configuration Test#CredCode#$DCConError = $Error[0].Exception.Message
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
AD Domain Controller Time Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#IF ($ProceedOrNot -eq "Yes")
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$ComConError="Ok"        
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$Error.Clear() 
AD Domain Controller Time Configuration Test#CredCode#$RMNow = Invoke-Command -ComputerName $ItemName -Script { w32tm /query /configuration } -ArgumentList $ItemName -Credential $Creds
AD Domain Controller Time Configuration Test#CredCode#IF ($Error.count -eq 0)
AD Domain Controller Time Configuration Test#CredCode#{ 
AD Domain Controller Time Configuration Test#CredCode#$AnyOneOk="Yes"
AD Domain Controller Time Configuration Test#CredCode#$SyncSettingNow = ""
AD Domain Controller Time Configuration Test#CredCode#$SyncFrom = ""
AD Domain Controller Time Configuration Test#CredCode#$FinStatus ="Ok"
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#Foreach ($Item in $RMNow)
AD Domain Controller Time Configuration Test#CredCode#{ 
AD Domain Controller Time Configuration Test#CredCode#$T1, $T2 = $Item.Split(":")   
AD Domain Controller Time Configuration Test#CredCode#IF ($T1 -eq "Type")
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#IF ($T2 -eq " NT5DS (Local)" -or $T2 -eq $Null -or $T2 -eq "")
AD Domain Controller Time Configuration Test#CredCode#{ 
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#else
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$AnyGap = "Yes"
AD Domain Controller Time Configuration Test#CredCode#$FinStatus = "WARNING: Domain Controller must use NT5DS value in Type registry entry. It is not recommended to use AllSync(Local) registry value for domain controllers."
AD Domain Controller Time Configuration Test#CredCode#} 
AD Domain Controller Time Configuration Test#CredCode#$SyncSettingNow = $T2        
AD Domain Controller Time Configuration Test#CredCode#} 
AD Domain Controller Time Configuration Test#CredCode#IF ($T1 -eq "NtpServer")
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$SyncFrom = $T2     
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#IF ($ItemName.ToLower() -eq $PDCServer.ToLower())
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$FinStatus=""
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#$FinalSTR = $ItemName+","+$DCConError+","+$ComConError+",Domain Controller,"+$SyncSettingNow+","+'"'+$SyncFrom+'"'+","+$FinStatus
AD Domain Controller Time Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalStr
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#else
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$ComConError = $Error[0].Exception.Message
AD Domain Controller Time Configuration Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
AD Domain Controller Time Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#else
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$ComConError = $Error[0].Exception.Message
AD Domain Controller Time Configuration Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
AD Domain Controller Time Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$OthText = ""
AD Domain Controller Time Configuration Test#CredCode#IF ($TotDCsInError -ne 0)
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#IF ($AnyGap -eq "Yes")
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$TestText = "Domain Controller Time Synchronization is not correct. Please ensure PDC syncs its time from an External NTP Server and other domain controllers sync using the default Time Synchronization settings. All other Domain Controllers must be using NT5DS registry entry. In the output please check FinalStatus column which indicates the problem with the domain controller in question. $OthText"
AD Domain Controller Time Configuration Test#CredCode#$SumVal = $TotNo
AD Domain Controller Time Configuration Test#CredCode#$TestStatus="Critical"
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#IF ($AnyGap -eq "No")
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$TestText = "Time Synchronization is configured correctly in Active Directory Forest. $OthText"
AD Domain Controller Time Configuration Test#CredCode#$SumVal = ""
AD Domain Controller Time Configuration Test#CredCode#$TestStatus="Passed"
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#IF ($AnyOneOk -eq "No")
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$TestText = "Error Executing Dynamic Pack."
AD Domain Controller Time Configuration Test#CredCode#$SumVal = ""
AD Domain Controller Time Configuration Test#CredCode#$TestStatus="Completed with Errors."
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$TotNo=0
AD Domain Controller Time Configuration Test#CredCode#$ItemCount=0
AD Domain Controller Time Configuration Test#CredCode#$TestText = ""
AD Domain Controller Time Configuration Test#CredCode#$TestStatus=""
AD Domain Controller Time Configuration Test#CredCode#$SumVal = ""
AD Domain Controller Time Configuration Test#CredCode#$AnyGap = "No"
AD Domain Controller Time Configuration Test#CredCode#$ErrorOrNot = "No"
AD Domain Controller Time Configuration Test#CredCode#$AnyOneOk = "No"
AD Domain Controller Time Configuration Test#CredCode#$TotDCsInError = 0
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$Error.Clear()
AD Domain Controller Time Configuration Test#CredCode#$PDCInForest =Get-ADForest $CurForestName | Select-Object -ExpandProperty RootDomain | Get-ADDomain | Select-Object -Property PDCEmulator
AD Domain Controller Time Configuration Test#CredCode#IF ($Error.Count -eq 0)
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$PDCServer = $PDCInForest.PDCEmulator
AD Domain Controller Time Configuration Test#CredCode#$RMNow=w32tm /query /configuration /computer:$PDCServer
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$SyncSettingNow = ""
AD Domain Controller Time Configuration Test#CredCode#$SyncFrom = ""
AD Domain Controller Time Configuration Test#CredCode#$FinStatus ="Ok"
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#Foreach ($Item in $RMNow)
AD Domain Controller Time Configuration Test#CredCode#{ 
AD Domain Controller Time Configuration Test#CredCode#    $T1, $T2 = $Item.Split(":")   
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#    IF ($T1 -eq "Type")
AD Domain Controller Time Configuration Test#CredCode#    {
AD Domain Controller Time Configuration Test#CredCode#        IF ($T2 -eq "NT5DS (Local)" -or $T2 -eq "NT5DS")
AD Domain Controller Time Configuration Test#CredCode#        { 
AD Domain Controller Time Configuration Test#CredCode#            $T2
AD Domain Controller Time Configuration Test#CredCode#            $AnyGap = "Yes"
AD Domain Controller Time Configuration Test#CredCode#            $FinStatus = "WARNING: Root PDC must sync its time from an External NTP Server by specifying NTP (Local) value in Type Registry entry. It is not recommended to use NT5DS and AllSync(Local) for PDC."
AD Domain Controller Time Configuration Test#CredCode#        }
AD Domain Controller Time Configuration Test#CredCode#        
AD Domain Controller Time Configuration Test#CredCode#        $SyncSettingNow = $T2        
AD Domain Controller Time Configuration Test#CredCode#    }
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#    IF ($T1 -eq "NtpServer")
AD Domain Controller Time Configuration Test#CredCode#    {
AD Domain Controller Time Configuration Test#CredCode#        $SyncFrom = $T2     
AD Domain Controller Time Configuration Test#CredCode#    }
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$FinalSTR = $PDCServer+",Ok,Ok,PDC,"+$SyncSettingNow+","+'"'+$SyncFrom+'"'+","+$FinStatus
AD Domain Controller Time Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalStr
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#else
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$ComConError = $Error[0].Exception.Message
AD Domain Controller Time Configuration Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
AD Domain Controller Time Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$DCConError = "Ok"
AD Domain Controller Time Configuration Test#CredCode#$DCConStatus = "Ok"
AD Domain Controller Time Configuration Test#CredCode#$ProceedOrNot = "Yes"
AD Domain Controller Time Configuration Test#CredCode#$Error.Clear()
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName
AD Domain Controller Time Configuration Test#CredCode#IF ($Error.Count -ne 0)
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$ProceedOrNot = "No"
AD Domain Controller Time Configuration Test#CredCode#$TotDCsInError++
AD Domain Controller Time Configuration Test#CredCode#$DCConError = $Error[0].Exception.Message
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
AD Domain Controller Time Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#IF ($ProceedOrNot -eq "Yes")
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$ComConError="Ok"        
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$Error.Clear() 
AD Domain Controller Time Configuration Test#CredCode#$RMNow=w32tm /query /configuration /computer:$ItemName
AD Domain Controller Time Configuration Test#CredCode#IF ($Error.count -eq 0)
AD Domain Controller Time Configuration Test#CredCode#{ 
AD Domain Controller Time Configuration Test#CredCode#$AnyOneOk="Yes"
AD Domain Controller Time Configuration Test#CredCode#$SyncSettingNow = ""
AD Domain Controller Time Configuration Test#CredCode#$SyncFrom = ""
AD Domain Controller Time Configuration Test#CredCode#$FinStatus ="Ok"
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#Foreach ($Item in $RMNow)
AD Domain Controller Time Configuration Test#CredCode#{ 
AD Domain Controller Time Configuration Test#CredCode#$T1, $T2 = $Item.Split(":")   
AD Domain Controller Time Configuration Test#CredCode#IF ($T1 -eq "Type")
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#IF ($T2 -eq " NT5DS (Local)" -or $T2 -eq $Null -or $T2 -eq "")
AD Domain Controller Time Configuration Test#CredCode#{ 
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#else
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$AnyGap = "Yes"
AD Domain Controller Time Configuration Test#CredCode#$FinStatus = "WARNING: Domain Controller must use NT5DS value in Type registry entry. It is not recommended to use AllSync(Local) registry value for domain controllers."
AD Domain Controller Time Configuration Test#CredCode#} 
AD Domain Controller Time Configuration Test#CredCode#$SyncSettingNow = $T2        
AD Domain Controller Time Configuration Test#CredCode#} 
AD Domain Controller Time Configuration Test#CredCode#IF ($T1 -eq "NtpServer")
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$SyncFrom = $T2     
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#IF ($ItemName.ToLower() -eq $PDCServer.ToLower())
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$FinStatus="PDC Emulator"
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#$FinalSTR = $ItemName+","+$DCConError+","+$ComConError+",Domain Controller,"+$SyncSettingNow+","+'"'+$SyncFrom+'"'+","+$FinStatus
AD Domain Controller Time Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalStr
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#else
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$ComConError = $Error[0].Exception.Message
AD Domain Controller Time Configuration Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
AD Domain Controller Time Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#else
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$ComConError = $Error[0].Exception.Message
AD Domain Controller Time Configuration Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
AD Domain Controller Time Configuration Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$OthText = ""
AD Domain Controller Time Configuration Test#CredCode#IF ($TotDCsInError -ne 0)
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#IF ($AnyGap -eq "Yes")
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$TestText = "Domain Controller Time Synchronization is not correct. Please ensure PDC syncs its time from an External NTP Server and other domain controllers sync using the default Time Synchronization settings. All other Domain Controllers must be using NT5DS registry entry. In the output please check FinalStatus column which indicates the problem with the domain controller in question. $OthText"
AD Domain Controller Time Configuration Test#CredCode#$SumVal = $TotNo
AD Domain Controller Time Configuration Test#CredCode#$TestStatus="Critical"
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#IF ($AnyGap -eq "No")
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$TestText = "Time Synchronization is configured correctly in Active Directory Forest. $OthText"
AD Domain Controller Time Configuration Test#CredCode#$SumVal = ""
AD Domain Controller Time Configuration Test#CredCode#$TestStatus="Passed"
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#IF ($AnyOneOk -eq "No")
AD Domain Controller Time Configuration Test#CredCode#{
AD Domain Controller Time Configuration Test#CredCode#$TestText = "Error Executing Dynamic Pack."
AD Domain Controller Time Configuration Test#CredCode#$SumVal = ""
AD Domain Controller Time Configuration Test#CredCode#$TestStatus="Completed with Errors."
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#}
AD Domain Controller Time Configuration Test#CredCode#
AD Domain Controller Time Configuration Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Domain Controller Time Configuration Test#CredCode#
Domain Controller OS Test#HeaderCode#$ThisStr="Domain Controller, OS Version, Service Pack Level,Final Status"
Domain Controller OS Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller OS Test#HeaderCode#
Domain Controller OS Test#HeaderCode#
Domain Controller OS Test#HeaderCode#
Domain Controller OS Test#CredCode#$TestStatus="Passed"
Domain Controller OS Test#CredCode#$TestText = ""
Domain Controller OS Test#CredCode#$sumVal=0
Domain Controller OS Test#CredCode#$ReachOrNot = "Yes"
Domain Controller OS Test#CredCode#$AnyGap = "No"
Domain Controller OS Test#CredCode#$TotNo = 0
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller OS Test#CredCode#{
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode#$T1, $T2  = $ItemName.Split(".")
Domain Controller OS Test#CredCode#$RAll = Get-ADComputer $T1 -Credential $Creds -Server $ItemName -Property * | Select-Object OperatingSystem,OperatingSystemServicePack
Domain Controller OS Test#CredCode#$OSversion = $RAll.OperatingSystem
Domain Controller OS Test#CredCode#$OSSPLevel = $RAll.OperatingSystemServicePack
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode#IF ($OSVersion -eq "Windows Server 2008 R2" -or $OSVersion -eq "Windows Server 2003" -or $OSVersion -eq "Windows Server 2008")
Domain Controller OS Test#CredCode#{
Domain Controller OS Test#CredCode#$AnyGap = "Yes"
Domain Controller OS Test#CredCode#$FinStatus = "Please upgrade to Windows Server 2012 R2 or latest OS Version."
Domain Controller OS Test#CredCode#$TotNo++
Domain Controller OS Test#CredCode#}
Domain Controller OS Test#CredCode#else
Domain Controller OS Test#CredCode#{
Domain Controller OS Test#CredCode#$FinStatus = "Ok"        
Domain Controller OS Test#CredCode#}
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode#$ThisStr=$ItemName+","+$OSversion+","+$OSSPLevel+","+$FinStatus
Domain Controller OS Test#CredCode#Add-Content "$TestCSVFile" $ThisStr                
Domain Controller OS Test#CredCode#}
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller OS Test#CredCode#{
Domain Controller OS Test#CredCode#$TestStatus="Medium"
Domain Controller OS Test#CredCode#$TestText = "Some Domain Controllers are still running Windows Server 2008 or previous versions. Please note that support for Windows Server 2008 and earlier versions have been expired."
Domain Controller OS Test#CredCode#$SumVal = $TotNo
Domain Controller OS Test#CredCode#}
Domain Controller OS Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller OS Test#CredCode#{
Domain Controller OS Test#CredCode#$TestStatus="Passed"
Domain Controller OS Test#CredCode#$TestText = "All Domain Controllers are running Windows Server 2012 or later versions."
Domain Controller OS Test#CredCode#$SumVal = ""
Domain Controller OS Test#CredCode#}
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode# 
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode#$TestStatus="Passed"
Domain Controller OS Test#CredCode#$TestText = ""
Domain Controller OS Test#CredCode#$sumVal=0
Domain Controller OS Test#CredCode#$ReachOrNot = "Yes"
Domain Controller OS Test#CredCode#$AnyGap = "No"
Domain Controller OS Test#CredCode#$TotNo = 0
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller OS Test#CredCode#{
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode#$T1, $T2  = $ItemName.Split(".")
Domain Controller OS Test#CredCode#$RAll = Get-ADComputer $T1 -Server $ItemName -Property * | Select-Object OperatingSystem,OperatingSystemServicePack
Domain Controller OS Test#CredCode#$OSversion = $RAll.OperatingSystem
Domain Controller OS Test#CredCode#$OSSPLevel = $RAll.OperatingSystemServicePack
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode#IF ($OSVersion -eq "Windows Server 2008 R2" -or $OSVersion -eq "Windows Server 2003" -or $OSVersion -eq "Windows Server 2008")
Domain Controller OS Test#CredCode#{
Domain Controller OS Test#CredCode#$AnyGap = "Yes"
Domain Controller OS Test#CredCode#$FinStatus = "Please upgrade to Windows Server 2012 R2 or latest OS Version."
Domain Controller OS Test#CredCode#$TotNo++
Domain Controller OS Test#CredCode#}
Domain Controller OS Test#CredCode#else
Domain Controller OS Test#CredCode#{
Domain Controller OS Test#CredCode#$FinStatus = "Ok"        
Domain Controller OS Test#CredCode#}
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode#$ThisStr=$ItemName+","+$OSversion+","+$OSSPLevel+","+$FinStatus
Domain Controller OS Test#CredCode#Add-Content "$TestCSVFile" $ThisStr                
Domain Controller OS Test#CredCode#}
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller OS Test#CredCode#{
Domain Controller OS Test#CredCode#$TestStatus="Medium"
Domain Controller OS Test#CredCode#$TestText = "Some Domain Controllers are still running Windows Server 2008 or previous versions. Please note that support for Windows Server 2008 and earlier versions have been expired."
Domain Controller OS Test#CredCode#$SumVal = $TotNo
Domain Controller OS Test#CredCode#}
Domain Controller OS Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller OS Test#CredCode#{
Domain Controller OS Test#CredCode#$TestStatus="Passed"
Domain Controller OS Test#CredCode#$TestText = "All Domain Controllers are running Windows Server 2012 or later versions."
Domain Controller OS Test#CredCode#$SumVal = ""
Domain Controller OS Test#CredCode#}
Domain Controller OS Test#CredCode#
Domain Controller OS Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller OS Test#CredCode#
Domain Controller OU Location Test#HeaderCode#$ThisStr="Domain Controller, OU Location,Final Status"
Domain Controller OU Location Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller OU Location Test#HeaderCode#
Domain Controller OU Location Test#HeaderCode#
Domain Controller OU Location Test#HeaderCode#
Domain Controller OU Location Test#HeaderCode#
Domain Controller OU Location Test#HeaderCode#
Domain Controller OU Location Test#CredCode#$TestStatus="Passed"
Domain Controller OU Location Test#CredCode#$TestText = ""
Domain Controller OU Location Test#CredCode#$sumVal=0
Domain Controller OU Location Test#CredCode#$ReachOrNot = "Yes"
Domain Controller OU Location Test#CredCode#$AnyGap = "No"
Domain Controller OU Location Test#CredCode#$TotNo = 0
Domain Controller OU Location Test#CredCode#$AnyOneOk = "No"
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$Fn1,$FN2 = $ItemName.Split(".")
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#$Error.Clear()
Domain Controller OU Location Test#CredCode#$RNow = Get-ADComputer $Fn1 -Credential $Creds -Server $ItemName
Domain Controller OU Location Test#CredCode#IF ($Error.Count -eq 0)
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$AnyOneOk = "Yes"
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#$DCName = $RNow.DistinguishedName
Domain Controller OU Location Test#CredCode#$CurLocName = $DCName
Domain Controller OU Location Test#CredCode#$RemovedComma = $CurLocName.replace(",", " ")
Domain Controller OU Location Test#CredCode#$T1,$T2,$T3 = $DCName.split(",")
Domain Controller OU Location Test#CredCode#IF ($T2 -eq "OU=Domain Controllers")
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$FinStatus = "Ok"
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#else
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$AnyGap = "Yes"
Domain Controller OU Location Test#CredCode#$FinStatus = "Domain Controller is located outside Domain Controllers OU"
Domain Controller OU Location Test#CredCode#$TotNo++
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#$ThisStr=$ItemName+","+'"'+$RemovedComma+'"'+","+$FinStatus
Domain Controller OU Location Test#CredCode#Add-Content "$TestCSVFile" $ThisStr                
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#else
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$ThisStr=$ItemName+",Error Executing Command"
Domain Controller OU Location Test#CredCode#Add-Content "$TestCSVFile" $ThisStr                        
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$TestStatus="Medium"
Domain Controller OU Location Test#CredCode#$TestText = "Some domain controllers are located oustide Domain Controllers OU. Domain Controller Default GPO might not be applying to domain controllers located outside Domain Controllers OU."
Domain Controller OU Location Test#CredCode#$SumVal = $TotNo
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$TestStatus="Passed"
Domain Controller OU Location Test#CredCode#$TestText = "All Domain Controllers are located under Domain Controllers OU."
Domain Controller OU Location Test#CredCode#$SumVal = ""
Domain Controller OU Location Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$TestStatus="Error"
Domain Controller OU Location Test#CredCode#$TestText = "Error Executing Dynamic Pack"
Domain Controller OU Location Test#CredCode#$SumVal = ""
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#$TestStatus="Passed"
Domain Controller OU Location Test#CredCode#$TestText = ""
Domain Controller OU Location Test#CredCode#$sumVal=0
Domain Controller OU Location Test#CredCode#$ReachOrNot = "Yes"
Domain Controller OU Location Test#CredCode#$AnyGap = "No"
Domain Controller OU Location Test#CredCode#$TotNo = 0
Domain Controller OU Location Test#CredCode#$AnyOneOk = "No"
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$Fn1,$FN2 = $ItemName.Split(".")
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#$Error.Clear()
Domain Controller OU Location Test#CredCode#$RNow = Get-ADComputer $Fn1 -Server $ItemName
Domain Controller OU Location Test#CredCode#IF ($Error.Count -eq 0)
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$AnyOneOk = "Yes"
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#$DCName = $RNow.DistinguishedName
Domain Controller OU Location Test#CredCode#$CurLocName = $DCName
Domain Controller OU Location Test#CredCode#$RemovedComma = $CurLocName.replace(",", " ")
Domain Controller OU Location Test#CredCode#$T1,$T2,$T3 = $DCName.split(",")
Domain Controller OU Location Test#CredCode#IF ($T2 -eq "OU=Domain Controllers")
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$FinStatus = "Ok"
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#else
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$AnyGap = "Yes"
Domain Controller OU Location Test#CredCode#$FinStatus = "Domain Controller is located outside Domain Controllers OU"
Domain Controller OU Location Test#CredCode#$TotNo++
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#$ThisStr=$ItemName+","+'"'+$RemovedComma+'"'+","+$FinStatus
Domain Controller OU Location Test#CredCode#Add-Content "$TestCSVFile" $ThisStr                
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#else
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$ThisStr=$ItemName+",Error Executing Command"
Domain Controller OU Location Test#CredCode#Add-Content "$TestCSVFile" $ThisStr                        
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$TestStatus="Medium"
Domain Controller OU Location Test#CredCode#$TestText = "Some domain controllers are located oustide Domain Controllers OU. Domain Controller Default GPO might not be applying to domain controllers located outside Domain Controllers OU."
Domain Controller OU Location Test#CredCode#$SumVal = $TotNo
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$TestStatus="Passed"
Domain Controller OU Location Test#CredCode#$TestText = "All Domain Controllers are located under Domain Controllers OU."
Domain Controller OU Location Test#CredCode#$SumVal = ""
Domain Controller OU Location Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller OU Location Test#CredCode#{
Domain Controller OU Location Test#CredCode#$TestStatus="Error"
Domain Controller OU Location Test#CredCode#$TestText = "Error Executing Dynamic Pack"
Domain Controller OU Location Test#CredCode#$SumVal = ""
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#}
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller OU Location Test#CredCode#
Domain Controller OU Location Test#CredCode#
AD Forest ISTG Test#HeaderCode#$ThisString="AD Site, Site Location, Current ISTG, Final Status"
AD Forest ISTG Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Forest ISTG Test#HeaderCode#
AD Forest ISTG Test#CredCode#$RPass=$Creds.GetNetworkCredential().Password
AD Forest ISTG Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName,$CredUserToUse,$RPass)
AD Forest ISTG Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Forest ISTG Test#CredCode#IF ($Error.count -eq 0)
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#else
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#$ErrorOrNot="Yes"
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#$TotNoISTG=0
AD Forest ISTG Test#CredCode#$TestStatus=""
AD Forest ISTG Test#CredCode#$TestText=""
AD Forest ISTG Test#CredCode#ForEach ($Site in $ADSites)
AD Forest ISTG Test#CredCode#{ 
AD Forest ISTG Test#CredCode#$SiteName = $Site.Name
AD Forest ISTG Test#CredCode#$SiteLocation = $Site.Location
AD Forest ISTG Test#CredCode#$SiteInterSiteTopologyGenerator = $Site.InterSiteTopologyGenerator
AD Forest ISTG Test#CredCode#IF (!$SiteInterSiteTopologyGenerator)
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#$TotNoIstg++
AD Forest ISTG Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$SiteInterSiteTopologyGenerator+",Not OK"
AD Forest ISTG Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#else
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$SiteInterSiteTopologyGenerator+",OK"
AD Forest ISTG Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Forest ISTG Test#CredCode#$SumVal = ""
AD Forest ISTG Test#CredCode#$TestStatus="Error executing AD Test."
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#else
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#IF ($TotNoISTG -eq 0)
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#$TestText = "All AD Sites have ISTG Defined."
AD Forest ISTG Test#CredCode#$STR = $ADTestName +",Passed"+","+$SumVal +","
AD Forest ISTG Test#CredCode#Add-Content $TestSummaryFile $STR
AD Forest ISTG Test#CredCode#$TestStatus="Passed"
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#else
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#$SumVal = $TotNoISTG
AD Forest ISTG Test#CredCode#$TestStatus = "High"
AD Forest ISTG Test#CredCode#$TestText = "Some AD Sites do not have ISTG Role defined. ISTG Role plays an important role in replication. An ISTG Server receives the replication data from a partner domain controller and distributes replication data to local domain controller in the ISTG site."
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Forest ISTG Test#CredCode#
AD Forest ISTG Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName)
AD Forest ISTG Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD Forest ISTG Test#CredCode#IF ($Error.count -eq 0)
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#else
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#$ErrorOrNot="Yes"
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#$TotNoISTG=0
AD Forest ISTG Test#CredCode#$TestStatus=""
AD Forest ISTG Test#CredCode#$TestText=""
AD Forest ISTG Test#CredCode#ForEach ($Site in $ADSites)
AD Forest ISTG Test#CredCode#{ 
AD Forest ISTG Test#CredCode#$SiteName = $Site.Name
AD Forest ISTG Test#CredCode#$SiteLocation = $Site.Location
AD Forest ISTG Test#CredCode#$SiteInterSiteTopologyGenerator = $Site.InterSiteTopologyGenerator    
AD Forest ISTG Test#CredCode#IF (!$SiteInterSiteTopologyGenerator)
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#$TotNoIstg++
AD Forest ISTG Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$SiteInterSiteTopologyGenerator+",Not OK"
AD Forest ISTG Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#else
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#$ThisStr=$SiteName+","+'"'+$SiteLocation+'"'+","+$SiteInterSiteTopologyGenerator+",OK"
AD Forest ISTG Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Forest ISTG Test#CredCode#$SumVal = ""
AD Forest ISTG Test#CredCode#$TestStatus="Error executing AD Test."
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#else
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#IF ($TotNoISTG -eq 0)
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#$TestText = "All AD Sites have ISTG Defined."
AD Forest ISTG Test#CredCode#$STR = $ADTestName +",Passed"+","+$SumVal +","
AD Forest ISTG Test#CredCode#Add-Content $TestSummaryFile $STR
AD Forest ISTG Test#CredCode#$TestStatus="Passed"
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#else
AD Forest ISTG Test#CredCode#{
AD Forest ISTG Test#CredCode#$SumVal = $TotNoISTG
AD Forest ISTG Test#CredCode#$TestStatus = "High"
AD Forest ISTG Test#CredCode#$TestText = "Some AD Sites do not have ISTG Role defined. ISTG Role plays an important role in replication. An ISTG Server receives the replication data from a partner domain controller and distributes replication data to local domain controller in the ISTG site."
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#}
AD Forest ISTG Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Forest ISTG Test#CredCode#
AD Manual Replication Connection Objects Test#HeaderCode#$ThisString="Manual Connection Object, Replication From DC, From DC Site,  Replication To DC, To DC Site, Final Status"
AD Manual Replication Connection Objects Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD Manual Replication Connection Objects Test#HeaderCode#
AD Manual Replication Connection Objects Test#HeaderCode#
AD Manual Replication Connection Objects Test#HeaderCode#
AD Manual Replication Connection Objects Test#CredCode#$R=Get-ADReplicationConnection -Credential $Creds -Server $CurForestName -Filter {AutoGenerated -eq $False} | Select-Object Name,AutoGenerated,ReplicateToDirectoryServer,ReplicateFromDirectoryServer
AD Manual Replication Connection Objects Test#CredCode#IF ($Error.count -eq 0)
AD Manual Replication Connection Objects Test#CredCode#{
AD Manual Replication Connection Objects Test#CredCode#}
AD Manual Replication Connection Objects Test#CredCode#else
AD Manual Replication Connection Objects Test#CredCode#{
AD Manual Replication Connection Objects Test#CredCode#$ErrorOrNot="Yes"
AD Manual Replication Connection Objects Test#CredCode#}
AD Manual Replication Connection Objects Test#CredCode#$TotCon=0
AD Manual Replication Connection Objects Test#CredCode#ForEach ($AllItems in $R)
AD Manual Replication Connection Objects Test#CredCode#{
AD Manual Replication Connection Objects Test#CredCode#$ConName=$AllItems.Name
AD Manual Replication Connection Objects Test#CredCode#$FromServer=$AllItems.ReplicateFromDirectoryServer
AD Manual Replication Connection Objects Test#CredCode#$ToServer=$AllItems.ReplicateToDirectoryServer
AD Manual Replication Connection Objects Test#CredCode#$ConName
AD Manual Replication Connection Objects Test#CredCode#$TotCon++
AD Manual Replication Connection Objects Test#CredCode#
AD Manual Replication Connection Objects Test#CredCode#$R=$FromServer
AD Manual Replication Connection Objects Test#CredCode#$S1, $S2, $S3, $S4, $S5 = $R.Split(",")
AD Manual Replication Connection Objects Test#CredCode#$T1, $T2, $T3 = $S4.Split("=")
AD Manual Replication Connection Objects Test#CredCode#$FromDCSiteNow = $T2
AD Manual Replication Connection Objects Test#CredCode#
AD Manual Replication Connection Objects Test#CredCode#$R=$ToServer
AD Manual Replication Connection Objects Test#CredCode#$S1, $S2, $S3, $S4, $S5 = $R.Split(",")
AD Manual Replication Connection Objects Test#CredCode#$T1, $T2, $T3 = $S4.Split("=")
AD Manual Replication Connection Objects Test#CredCode#$ToDCSiteNow = $T2
AD Manual Replication Connection Objects Test#CredCode#
AD Manual Replication Connection Objects Test#CredCode#$ThisStr=$ConName+","+'"'+$FromServer+'"'+","+$FromDCSiteNow+","+'"'+$ToServer+'"'+","+'"'+$ToDCSiteNow+'"'+", Not Ok"
AD Manual Replication Connection Objects Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Manual Replication Connection Objects Test#CredCode#}
AD Manual Replication Connection Objects Test#CredCode#$TotCon
AD Manual Replication Connection Objects Test#CredCode#$SumVal=$TotCon
AD Manual Replication Connection Objects Test#CredCode#$TestText=""
AD Manual Replication Connection Objects Test#CredCode#IF ($SumVal -eq 0)
AD Manual Replication Connection Objects Test#CredCode#{
AD Manual Replication Connection Objects Test#CredCode#$TestStatus="Passed"
AD Manual Replication Connection Objects Test#CredCode#$TestText="No Manual AD Replication Connection Objects found in the AD Forest."
AD Manual Replication Connection Objects Test#CredCode#} 
AD Manual Replication Connection Objects Test#CredCode#else 
AD Manual Replication Connection Objects Test#CredCode#{
AD Manual Replication Connection Objects Test#CredCode#$TestStatus="High"
AD Manual Replication Connection Objects Test#CredCode#$TestText="Manual Repliction Connection Objects were found. It is recommended to avoid creating manual replication connection objects.  Manual connection replication objects may result in replication errors if any of the partner domain controller is decommissioned and you forget to remove the manual connection object for decommisioned domain controller."
AD Manual Replication Connection Objects Test#CredCode#}
AD Manual Replication Connection Objects Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Manual Replication Connection Objects Test#CredCode#{
AD Manual Replication Connection Objects Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Manual Replication Connection Objects Test#CredCode#$SumVal = ""
AD Manual Replication Connection Objects Test#CredCode#$TestStatus="Error executing AD Test."
AD Manual Replication Connection Objects Test#CredCode#}
AD Manual Replication Connection Objects Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Manual Replication Connection Objects Test#CredCode#
AD Manual Replication Connection Objects Test#CredCode#
AD Manual Replication Connection Objects Test#CredCode#
AD Manual Replication Connection Objects Test#CredCode#$R=Get-ADReplicationConnection -Filter {AutoGenerated -eq $False} | Select-Object Name,AutoGenerated,ReplicateToDirectoryServer,ReplicateFromDirectoryServer
AD Manual Replication Connection Objects Test#CredCode#IF ($Error.count -eq 0)
AD Manual Replication Connection Objects Test#CredCode#{
AD Manual Replication Connection Objects Test#CredCode#}
AD Manual Replication Connection Objects Test#CredCode#else
AD Manual Replication Connection Objects Test#CredCode#{
AD Manual Replication Connection Objects Test#CredCode#$ErrorOrNot="Yes"
AD Manual Replication Connection Objects Test#CredCode#}
AD Manual Replication Connection Objects Test#CredCode#$TotCon=0
AD Manual Replication Connection Objects Test#CredCode#ForEach ($AllItems in $R)
AD Manual Replication Connection Objects Test#CredCode#{
AD Manual Replication Connection Objects Test#CredCode#$ConName=$AllItems.Name
AD Manual Replication Connection Objects Test#CredCode#$FromServer=$AllItems.ReplicateFromDirectoryServer
AD Manual Replication Connection Objects Test#CredCode#$ToServer=$AllItems.ReplicateToDirectoryServer
AD Manual Replication Connection Objects Test#CredCode#$ConName
AD Manual Replication Connection Objects Test#CredCode#$TotCon++
AD Manual Replication Connection Objects Test#CredCode#
AD Manual Replication Connection Objects Test#CredCode#$R=$FromServer
AD Manual Replication Connection Objects Test#CredCode#$S1, $S2, $S3, $S4, $S5 = $R.Split(",")
AD Manual Replication Connection Objects Test#CredCode#$T1, $T2, $T3 = $S4.Split("=")
AD Manual Replication Connection Objects Test#CredCode#$FromDCSiteNow = $T2
AD Manual Replication Connection Objects Test#CredCode#
AD Manual Replication Connection Objects Test#CredCode#$R=$ToServer
AD Manual Replication Connection Objects Test#CredCode#$S1, $S2, $S3, $S4, $S5 = $R.Split(",")
AD Manual Replication Connection Objects Test#CredCode#$T1, $T2, $T3 = $S4.Split("=")
AD Manual Replication Connection Objects Test#CredCode#$ToDCSiteNow = $T2
AD Manual Replication Connection Objects Test#CredCode#
AD Manual Replication Connection Objects Test#CredCode#$ThisStr=$ConName+","+'"'+$FromServer+'"'+","+$FromDCSiteNow+","+'"'+$ToServer+'"'+","+'"'+$ToDCSiteNow+'"'+", Not Ok"
AD Manual Replication Connection Objects Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
AD Manual Replication Connection Objects Test#CredCode#}
AD Manual Replication Connection Objects Test#CredCode#$TotCon
AD Manual Replication Connection Objects Test#CredCode#$SumVal=$TotCon
AD Manual Replication Connection Objects Test#CredCode#$TestText=""
AD Manual Replication Connection Objects Test#CredCode#IF ($SumVal -eq 0)
AD Manual Replication Connection Objects Test#CredCode#{
AD Manual Replication Connection Objects Test#CredCode#$TestStatus="Passed"
AD Manual Replication Connection Objects Test#CredCode#$TestText="No Manual AD Replication Connection Objects found in the AD Forest."
AD Manual Replication Connection Objects Test#CredCode#} 
AD Manual Replication Connection Objects Test#CredCode#else 
AD Manual Replication Connection Objects Test#CredCode#{
AD Manual Replication Connection Objects Test#CredCode#$TestStatus="High"
AD Manual Replication Connection Objects Test#CredCode#$TestText="Manual Repliction Connection Objects were found. It is recommended to avoid creating manual replication connection objects.  Manual connection replication objects may result in replication errors if any of the partner domain controller is decommissioned and you forget to remove the manual connection object for decommisioned domain controller."
AD Manual Replication Connection Objects Test#CredCode#}
AD Manual Replication Connection Objects Test#CredCode#IF ($ErrorOrNot -eq "Yes")
AD Manual Replication Connection Objects Test#CredCode#{
AD Manual Replication Connection Objects Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
AD Manual Replication Connection Objects Test#CredCode#$SumVal = ""
AD Manual Replication Connection Objects Test#CredCode#$TestStatus="Error executing AD Test."
AD Manual Replication Connection Objects Test#CredCode#}
AD Manual Replication Connection Objects Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD Manual Replication Connection Objects Test#CredCode#
AD Manual Replication Connection Objects Test#CredCode#
AD Manual Replication Connection Objects Test#CredCode#
Domain Controller Event Log Test#HeaderCode#$ThisStr="Domain Controller,Connection,Command Status, Log Name, Number Of Errors Since last 10 Days, Number Of Warnings Since last 10 Days, Final Status"
Domain Controller Event Log Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Event Log Test#HeaderCode#
Domain Controller Event Log Test#HeaderCode#
Domain Controller Event Log Test#HeaderCode#
Domain Controller Event Log Test#HeaderCode#
Domain Controller Event Log Test#HeaderCode#
Domain Controller Event Log Test#HeaderCode#
Domain Controller Event Log Test#HeaderCode#
Domain Controller Event Log Test#CredCode#$TotNo=0
Domain Controller Event Log Test#CredCode#$ItemCount=0
Domain Controller Event Log Test#CredCode#$TestText = ""
Domain Controller Event Log Test#CredCode#$TestStatus=""
Domain Controller Event Log Test#CredCode#$SumVal = ""
Domain Controller Event Log Test#CredCode#$AnyGap = "No"
Domain Controller Event Log Test#CredCode#$ErrorOrNot = "No"
Domain Controller Event Log Test#CredCode#$AnyOneOk = "No"
Domain Controller Event Log Test#CredCode#$TotDCsInError = 0
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$DCLogs="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCLogs.DPC"
Domain Controller Event Log Test#CredCode#$DCLogCSVNow = Import-CSV $DCLogs -Delimiter ";"
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$AfterDate = (get-date).AddDays(-10)
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$DCConError = "Ok"
Domain Controller Event Log Test#CredCode#$DCConStatus = "Ok"
Domain Controller Event Log Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller Event Log Test#CredCode#$Error.Clear()
Domain Controller Event Log Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller Event Log Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$ProceedOrNot = "No"
Domain Controller Event Log Test#CredCode#$TotDCsInError++
Domain Controller Event Log Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Event Log Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$ComConError="Ok"        
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#ForEach ($ThisLog in $DCLogCSVNow)
Domain Controller Event Log Test#CredCode#{ 
Domain Controller Event Log Test#CredCode#$ThisLogToCheck = $ThisLog.EventLogName
Domain Controller Event Log Test#CredCode#$Error.Clear()
Domain Controller Event Log Test#CredCode#$LogError = Invoke-Command -ComputerName $ItemName -Script { param($R1Now,$R2Now) Get-eventlog -log "$R1Now" -EntryType Error  -After $R2Now } -ArgumentList $ThisLogToCheck,$AfterDate -Credential $Creds
Domain Controller Event Log Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Event Log Test#CredCode#{ 
Domain Controller Event Log Test#CredCode#$FinStatus = "Ok"
Domain Controller Event Log Test#CredCode#$AnyOneOk="Yes"
Domain Controller Event Log Test#CredCode#$LogErrCnt = $LogError.Count
Domain Controller Event Log Test#CredCode#IF ($LogErrCnt -ne 0)
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$IsErrAva = "Yes"
Domain Controller Event Log Test#CredCode#$AnyGap = "Yes"
Domain Controller Event Log Test#CredCode#$FinStatus = "Not Ok"
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$LogWarnings = Invoke-Command -ComputerName $ItemName -Script { param($R1Now,$R2Now) Get-eventlog -log "$R1Now" -EntryType Warning -After $R2Now } -ArgumentList $ThisLogToCheck,$AfterDate -Credential $Creds
Domain Controller Event Log Test#CredCode#$LogWarningsCnt = $LogWarnings.Count
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$ThisSTr = $ItemName+","+$DCConError+","+$ComConError+","+$ThisLogToCheck+","+$LogErrCnt+","+$LogWarningsCnt+","+$FinStatus
Domain Controller Event Log Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$TotNo++
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#} 
Domain Controller Event Log Test#CredCode#else
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Event Log Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Event Log Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Event Log Test#CredCode#} 
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#else
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Event Log Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Event Log Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$OthText = ""
Domain Controller Event Log Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$TestText = "Domain Controllers have errors in Event Logs. Test reports number of errors and warnings reported since last 10 days. You might want to check domain controllers event log to ensure the errors and warnings can be ignored safely or consult a technician to resolve these errors. $OthText"
Domain Controller Event Log Test#CredCode#$SumVal = $TotNo
Domain Controller Event Log Test#CredCode#$TestStatus="High"
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$TestText = "There are no errors found in Event Logs of Domain Controllers. $OthText"
Domain Controller Event Log Test#CredCode#$SumVal = ""
Domain Controller Event Log Test#CredCode#$TestStatus="Passed"
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller Event Log Test#CredCode#$SumVal = ""
Domain Controller Event Log Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$TotNo=0
Domain Controller Event Log Test#CredCode#$ItemCount=0
Domain Controller Event Log Test#CredCode#$TestText = ""
Domain Controller Event Log Test#CredCode#$TestStatus=""
Domain Controller Event Log Test#CredCode#$SumVal = ""
Domain Controller Event Log Test#CredCode#$AnyGap = "No"
Domain Controller Event Log Test#CredCode#$ErrorOrNot = "No"
Domain Controller Event Log Test#CredCode#$AnyOneOk = "No"
Domain Controller Event Log Test#CredCode#$TotDCsInError = 0
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$DCLogs="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCLogs.DPC"
Domain Controller Event Log Test#CredCode#$DCLogCSVNow = Import-CSV $DCLogs -Delimiter ";"
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$AfterDate = (get-date).AddDays(-10)
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$DCConError = "Ok"
Domain Controller Event Log Test#CredCode#$DCConStatus = "Ok"
Domain Controller Event Log Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller Event Log Test#CredCode#$Error.Clear()
Domain Controller Event Log Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller Event Log Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$ProceedOrNot = "No"
Domain Controller Event Log Test#CredCode#$TotDCsInError++
Domain Controller Event Log Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Event Log Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$ComConError="Ok"        
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#ForEach ($ThisLog in $DCLogCSVNow)
Domain Controller Event Log Test#CredCode#{ 
Domain Controller Event Log Test#CredCode#$ThisLogToCheck = $ThisLog.EventLogName
Domain Controller Event Log Test#CredCode#$Error.Clear()
Domain Controller Event Log Test#CredCode#$LogError = Invoke-Command -ComputerName $ItemName -Script { param($R1Now,$R2Now) Get-eventlog -log "$R1Now" -EntryType Error  -After $R2Now } -ArgumentList $ThisLogToCheck,$AfterDate
Domain Controller Event Log Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Event Log Test#CredCode#{ 
Domain Controller Event Log Test#CredCode#$FinStatus = "Ok"
Domain Controller Event Log Test#CredCode#$AnyOneOk="Yes"
Domain Controller Event Log Test#CredCode#$LogErrCnt = $LogError.Count
Domain Controller Event Log Test#CredCode#IF ($LogErrCnt -ne 0)
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$IsErrAva = "Yes"
Domain Controller Event Log Test#CredCode#$AnyGap = "Yes"
Domain Controller Event Log Test#CredCode#$FinStatus = "Not Ok"
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$LogWarnings = Invoke-Command -ComputerName $ItemName -Script { param($R1Now,$R2Now) Get-eventlog -log "$R1Now" -EntryType Warning -After $R2Now } -ArgumentList $ThisLogToCheck,$AfterDate
Domain Controller Event Log Test#CredCode#$LogWarningsCnt = $LogWarnings.Count
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$ThisSTr = $ItemName+","+$DCConError+","+$ComConError+","+$ThisLogToCheck+","+$LogErrCnt+","+$LogWarningsCnt+","+$FinStatus
Domain Controller Event Log Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$TotNo++
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#} 
Domain Controller Event Log Test#CredCode#else
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Event Log Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Event Log Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Event Log Test#CredCode#} 
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#else
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Event Log Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Event Log Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$OthText = ""
Domain Controller Event Log Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$TestText = "Domain Controllers have errors in Event Logs. Test reports number of errors and warnings reported since last 10 days. You might want to check domain controllers event log to ensure the errors and warnings can be ignored safely or consult a technician to resolve these errors. $OthText"
Domain Controller Event Log Test#CredCode#$SumVal = $TotNo
Domain Controller Event Log Test#CredCode#$TestStatus="High"
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$TestText = "There are no errors found in Event Logs of Domain Controllers. $OthText"
Domain Controller Event Log Test#CredCode#$SumVal = ""
Domain Controller Event Log Test#CredCode#$TestStatus="Passed"
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller Event Log Test#CredCode#{
Domain Controller Event Log Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller Event Log Test#CredCode#$SumVal = ""
Domain Controller Event Log Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#}
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode#
Domain Controller Event Log Test#CredCode# 
Domain Controller Event Log Test#CredCode#
Domain Computers Operating Systems Test#HeaderCode#$ThisStr ="OS Type,Total Computers,Total Disabled,File Location, Password Not Updated Since last 60 Days,File Location"
Domain Computers Operating Systems Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
Domain Computers Operating Systems Test#HeaderCode#
Domain Computers Operating Systems Test#HeaderCode#
Domain Computers Operating Systems Test#HeaderCode#
Domain Computers Operating Systems Test#HeaderCode#
Domain Computers Operating Systems Test#HeaderCode#
Domain Computers Operating Systems Test#HeaderCode#
Domain Computers Operating Systems Test#CredCode#$TestStatus="Passed"
Domain Computers Operating Systems Test#CredCode#$TestText = ""
Domain Computers Operating Systems Test#CredCode#$sumVal=0
Domain Computers Operating Systems Test#CredCode#$ReachOrNot = "Yes"
Domain Computers Operating Systems Test#CredCode#$AnyGap = "No"
Domain Computers Operating Systems Test#CredCode#$TotNo = 0
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$OSTestFile="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\ComputerOSTest.DPC"
Domain Computers Operating Systems Test#CredCode#$OSCSVFileNow = Import-CSV $OSTestFile -Delimiter ";"
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$IntDirNow = "$LocAppDataNow\DynamicPAcksTechnologies\ADHealthProfiler\Data\OperatingSystemsTest"
Domain Computers Operating Systems Test#CredCode#mkdir $IntDirNow -Force
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#Foreach ($ItemName in $OSCSVFileNow)
Domain Computers Operating Systems Test#CredCode#{
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$ThisOSToCheck = $ItemName.OperatingSystem
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$TotDisFile="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\OperatingSystemsTest\"+$CurProfNowForAll+"_DisabledOS_"+$ItemName+".CSV"
Domain Computers Operating Systems Test#CredCode#$TotNotPassFile="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\OperatingSystemsTest\"+$CurProfNowForAll+"_PasswordNotUpdatedOS_"+$ItemName+".CSV"
Domain Computers Operating Systems Test#CredCode#Remove-item $TotDisFile -ErrorAction SilentlyContinue
Domain Computers Operating Systems Test#CredCode#Remove-item $TotNotPassFile -ErrorAction SilentlyContinue
Domain Computers Operating Systems Test#CredCode#$Error.Clear()
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$FinalItemNow = "$ThisOSToCheck*"
Domain Computers Operating Systems Test#CredCode#$TotComps=get-adcomputer -Credential $Creds -Filter {OperatingSystem -Like $FinalItemNow} | Select-Object Name,distinguishedname 
Domain Computers Operating Systems Test#CredCode#$TotDisabled = get-adcomputer -Credential $Creds -Filter {(OperatingSystem -Like $FinalItemNow) -and (enabled -eq $FALSE)} | Select-Object Name,distinguishedname 
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$TotNotPass=get-adcomputer -Credential $Creds -Properties * -Filter {(OperatingSystem -Like $FinalItemNow)} | Where {$_.Passwordlastset -lt (Get-date).AddDays(-60)} | Select-Object PasswordLastSet,Name,distinguishedname
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$TotCompsCount = $TotComps.Count
Domain Computers Operating Systems Test#CredCode#$TotDisabledCount = $TotDisabled.Count
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$TotNotPassCount = $TotNotPass.Count
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$TotDisabled | Export-CSV $TotDisFile -NoType
Domain Computers Operating Systems Test#CredCode#$TotNotPass | Export-CSV $TotNotPassFile -NoType
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$ThisSTr = $ThisOSToCheck+","+$TotCompsCount+","+$TotDisabledCount+","+$TotDisFile+","+$TotNotPassCount+","+$TotNotPassFile
Domain Computers Operating Systems Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#IF ($TotNotLogOnCount -ne 0)
Domain Computers Operating Systems Test#CredCode#{
Domain Computers Operating Systems Test#CredCode#$AnyGap = "Yes"
Domain Computers Operating Systems Test#CredCode#}
Domain Computers Operating Systems Test#CredCode#}
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Computers Operating Systems Test#CredCode#{
Domain Computers Operating Systems Test#CredCode#$TestStatus="Medium"
Domain Computers Operating Systems Test#CredCode#$TestText = "AD Health Profiler retrieved a list of computer counts specified in $LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\ComputerOSTest.DPC file. Please load and check result. Test reports the Operating System counts. If no data please check if you configured above file with the list of Operating Systems you intended to collect."
Domain Computers Operating Systems Test#CredCode#$SumVal = "NA"
Domain Computers Operating Systems Test#CredCode#}
Domain Computers Operating Systems Test#CredCode#IF ($AnyGap -eq "No")
Domain Computers Operating Systems Test#CredCode#{
Domain Computers Operating Systems Test#CredCode#$TestStatus="Passed"
Domain Computers Operating Systems Test#CredCode#$TestText = "Please load and check result."
Domain Computers Operating Systems Test#CredCode#$SumVal = "NA"
Domain Computers Operating Systems Test#CredCode#}
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$TestStatus="Passed"
Domain Computers Operating Systems Test#CredCode#$TestText = ""
Domain Computers Operating Systems Test#CredCode#$sumVal=0
Domain Computers Operating Systems Test#CredCode#$ReachOrNot = "Yes"
Domain Computers Operating Systems Test#CredCode#$AnyGap = "No"
Domain Computers Operating Systems Test#CredCode#$TotNo = 0
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$OSTestFile="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\ComputerOSTest.DPC"
Domain Computers Operating Systems Test#CredCode#$OSCSVFileNow = Import-CSV $OSTestFile -Delimiter ";"
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$IntDirNow = "$LocAppDataNow\DynamicPAcksTechnologies\ADHealthProfiler\Data\OperatingSystemsTest"
Domain Computers Operating Systems Test#CredCode#mkdir $IntDirNow -Force
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#Foreach ($ItemName in $OSCSVFileNow)
Domain Computers Operating Systems Test#CredCode#{
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$ThisOSToCheck = $ItemName.OperatingSystem
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$TotDisFile="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\OperatingSystemsTest\"+$CurProfNowForAll+"_DisabledOS_"+$ItemName+".CSV"
Domain Computers Operating Systems Test#CredCode#$TotNotPassFile="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\OperatingSystemsTest\"+$CurProfNowForAll+"_PasswordNotUpdatedOS_"+$ItemName+".CSV"
Domain Computers Operating Systems Test#CredCode#Remove-item $TotDisFile -ErrorAction SilentlyContinue
Domain Computers Operating Systems Test#CredCode#Remove-item $TotNotPassFile -ErrorAction SilentlyContinue
Domain Computers Operating Systems Test#CredCode#$Error.Clear()
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$FinalItemNow = "$ThisOSToCheck*"
Domain Computers Operating Systems Test#CredCode#$TotComps=get-adcomputer -Filter {OperatingSystem -Like $FinalItemNow} | Select-Object Name,distinguishedname 
Domain Computers Operating Systems Test#CredCode#$TotDisabled = get-adcomputer -Filter {(OperatingSystem -Like $FinalItemNow) -and (enabled -eq $FALSE)} | Select-Object Name,distinguishedname 
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$TotNotPass=get-adcomputer -Properties * -Filter {(OperatingSystem -Like $FinalItemNow)} | Where {$_.Passwordlastset -lt (Get-date).AddDays(-60)} | Select-Object PasswordLastSet,Name,distinguishedname
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$TotCompsCount = $TotComps.Count
Domain Computers Operating Systems Test#CredCode#$TotDisabledCount = $TotDisabled.Count
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$TotNotPassCount = $TotNotPass.Count
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$TotDisabled | Export-CSV $TotDisFile -NoType
Domain Computers Operating Systems Test#CredCode#$TotNotPass | Export-CSV $TotNotPassFile -NoType
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$ThisSTr = $ThisOSToCheck+","+$TotCompsCount+","+$TotDisabledCount+","+$TotDisFile+","+$TotNotPassCount+","+$TotNotPassFile
Domain Computers Operating Systems Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#IF ($TotNotLogOnCount -ne 0)
Domain Computers Operating Systems Test#CredCode#{
Domain Computers Operating Systems Test#CredCode#$AnyGap = "Yes"
Domain Computers Operating Systems Test#CredCode#}
Domain Computers Operating Systems Test#CredCode#}
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Computers Operating Systems Test#CredCode#{
Domain Computers Operating Systems Test#CredCode#$TestStatus="Medium"
Domain Computers Operating Systems Test#CredCode#$TestText = "AD Health Profiler retrieved a list of computer counts specified in $LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\ComputerOSTest.DPC file. Please load and check result. Test reports the Operating System counts. If no data please check if you configured above file with the list of Operating Systems you intended to collect."
Domain Computers Operating Systems Test#CredCode#$SumVal = "NA"
Domain Computers Operating Systems Test#CredCode#}
Domain Computers Operating Systems Test#CredCode#IF ($AnyGap -eq "No")
Domain Computers Operating Systems Test#CredCode#{
Domain Computers Operating Systems Test#CredCode#$TestStatus="Passed"
Domain Computers Operating Systems Test#CredCode#$TestText = "Please load and check result."
Domain Computers Operating Systems Test#CredCode#$SumVal = "NA"
Domain Computers Operating Systems Test#CredCode#}
Domain Computers Operating Systems Test#CredCode#
Domain Computers Operating Systems Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Computers Operating Systems Test#CredCode#
Domain Controllers DCDiag Test#HeaderCode#$ThisString="Domain Controller,Connection,Command Status, DCDIAG Test, Test Status, Final Status, Data File Location"
Domain Controllers DCDiag Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain Controllers DCDiag Test#HeaderCode#
Domain Controllers DCDiag Test#HeaderCode#
Domain Controllers DCDiag Test#HeaderCode#
Domain Controllers DCDiag Test#HeaderCode#
Domain Controllers DCDiag Test#HeaderCode#
Domain Controllers DCDiag Test#CredCode#$TotNo=0
Domain Controllers DCDiag Test#CredCode#$ItemCount=0
Domain Controllers DCDiag Test#CredCode#$TestText = ""
Domain Controllers DCDiag Test#CredCode#$TestStatus=""
Domain Controllers DCDiag Test#CredCode#$SumVal = ""
Domain Controllers DCDiag Test#CredCode#$AnyGap = "No"
Domain Controllers DCDiag Test#CredCode#$ErrorOrNot = "No"
Domain Controllers DCDiag Test#CredCode#$AnyOneOk = "No"
Domain Controllers DCDiag Test#CredCode#$TotDCsInError = 0
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$IntDirNow = "$LocAppDataNow\DynamicPAcksTechnologies\ADHealthProfiler\Data\DCDiagTest"
Domain Controllers DCDiag Test#CredCode#mkdir $IntDirNow -Force
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$DCDiagTestFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCDiagTests.DPC"
Domain Controllers DCDiag Test#CredCode#$DCDiagTestCSV = Import-CSV $DCDiagTestFile -Delimiter ";"
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$DCConError = "Ok"
Domain Controllers DCDiag Test#CredCode#$DCConStatus = "Ok"
Domain Controllers DCDiag Test#CredCode#$ProceedOrNot = "Yes"
Domain Controllers DCDiag Test#CredCode#$Error.Clear()
Domain Controllers DCDiag Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controllers DCDiag Test#CredCode#IF ($Error.Count -ne 0)
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$ProceedOrNot = "No"
Domain Controllers DCDiag Test#CredCode#$TotDCsInError++
Domain Controllers DCDiag Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controllers DCDiag Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$ComConError="Ok"        
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#ForEach ($ThisTestNow in $DCDiagTestCSV)
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$ThisTestToRun=$ThisTestNow.TestName
Domain Controllers DCDiag Test#CredCode#$ThisLookFor = $ThisTestNow.LookFor
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$DCDiagTestREsultFile="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\DCDiagTest\"+$CurProfNowForAll+$ItemName+"_Test_"+$ThisTestToRun+".TXT"
Domain Controllers DCDiag Test#CredCode#Remove-item $DCDiagTestREsultFile -ErrorAction SilentlyContinue
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$Error.Clear()
Domain Controllers DCDiag Test#CredCode#$DCDiagResult = Invoke-Command -ComputerName $ItemName -Script { param($R1Now, $R2Now) DCDiag /test:$R1Now /v -s:$R2Now } -Credential $Creds -ArgumentList $ThisTestToRun,$ItemName
Domain Controllers DCDiag Test#CredCode#IF ($Error.Count -eq 0)
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$DCdiagResult | Out-file $DCDiagTestREsultFile
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$FoundOrNot=Select-String -Path $DCDiagTestREsultFile -Pattern $ThisLookFor
Domain Controllers DCDiag Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$IsThisDCOk="Yes"
Domain Controllers DCDiag Test#CredCode#$FinStatus = "Ok"
Domain Controllers DCDiag Test#CredCode#$TestStatus="Passed"
Domain Controllers DCDiag Test#CredCode#IF ($TotFoundNow -eq 0)
Domain Controllers DCDiag Test#CredCode#{ 
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#else
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$TestStatus = "Failed"
Domain Controllers DCDiag Test#CredCode#$AnyGap = "Yes"
Domain Controllers DCDiag Test#CredCode#$IsThisDCOk="No"
Domain Controllers DCDiag Test#CredCode#$FinStatus = "Not Ok"
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$ThisSTR = $ItemName+","+$DCConError+","+$ComConError+","+$ThisTestToRun+","+$TestStatus+","+$FinStatus+","+$DCDiagTestREsultFile
Domain Controllers DCDiag Test#CredCode#Add-Content "$TestCSVFile" $ThisStr   
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#IF ($IsThisDCOk -eq "No")
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$TotNo++
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#else
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controllers DCDiag Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controllers DCDiag Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$OthText = ""
Domain Controllers DCDiag Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$TestText = "DCDiag Test reported errors on domain controllers. Please load and check FinalStatus column in the output. If you see Not Ok in the FinalStatus column for a domain controller the DCDiag result file can be found at $LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\DCDiagTest location. AD Health Profiler creates DCDiag file for each domain controller it checks. The file name is HealthProfileDCName_Test_TestName.CSV. $OthText"
Domain Controllers DCDiag Test#CredCode#$SumVal = $TotNo
Domain Controllers DCDiag Test#CredCode#$TestStatus="Critical"
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#IF ($AnyGap -eq "No")
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$TestText = "All DCDiag tests have been passed on all domain controllers. $OthText"
Domain Controllers DCDiag Test#CredCode#$SumVal = ""
Domain Controllers DCDiag Test#CredCode#$TestStatus="Passed"
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controllers DCDiag Test#CredCode#$SumVal = ""
Domain Controllers DCDiag Test#CredCode#$TestStatus="Completed with Errors."
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$TotNo=0
Domain Controllers DCDiag Test#CredCode#$ItemCount=0
Domain Controllers DCDiag Test#CredCode#$TestText = ""
Domain Controllers DCDiag Test#CredCode#$TestStatus=""
Domain Controllers DCDiag Test#CredCode#$SumVal = ""
Domain Controllers DCDiag Test#CredCode#$AnyGap = "No"
Domain Controllers DCDiag Test#CredCode#$ErrorOrNot = "No"
Domain Controllers DCDiag Test#CredCode#$AnyOneOk = "No"
Domain Controllers DCDiag Test#CredCode#$TotDCsInError = 0
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$IntDirNow = "$LocAppDataNow\DynamicPAcksTechnologies\ADHealthProfiler\Data\DCDiagTest"
Domain Controllers DCDiag Test#CredCode#mkdir $IntDirNow -Force
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$DCDiagTestFile = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCDiagTests.DPC"
Domain Controllers DCDiag Test#CredCode#$DCDiagTestCSV = Import-CSV $DCDiagTestFile -Delimiter ";"
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$DCConError = "Ok"
Domain Controllers DCDiag Test#CredCode#$DCConStatus = "Ok"
Domain Controllers DCDiag Test#CredCode#$ProceedOrNot = "Yes"
Domain Controllers DCDiag Test#CredCode#$Error.Clear()
Domain Controllers DCDiag Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controllers DCDiag Test#CredCode#IF ($Error.Count -ne 0)
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$ProceedOrNot = "No"
Domain Controllers DCDiag Test#CredCode#$TotDCsInError++
Domain Controllers DCDiag Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controllers DCDiag Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$ComConError="Ok"        
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#ForEach ($ThisTestNow in $DCDiagTestCSV)
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$ThisTestToRun=$ThisTestNow.TestName
Domain Controllers DCDiag Test#CredCode#$ThisLookFor = $ThisTestNow.LookFor
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$DCDiagTestREsultFile="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\DCDiagTest\"+$CurProfNowForAll+$ItemName+"_Test_"+$ThisTestToRun+".TXT"
Domain Controllers DCDiag Test#CredCode#Remove-item $DCDiagTestREsultFile -ErrorAction SilentlyContinue
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$Error.Clear()
Domain Controllers DCDiag Test#CredCode#$DCDiagResult = dcdiag /test:$ThisTestToRun /v -s:$ItemName
Domain Controllers DCDiag Test#CredCode#IF ($Error.Count -eq 0)
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$DCdiagResult | Out-file $DCDiagTestREsultFile
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$FoundOrNot=Select-String -Path $DCDiagTestREsultFile -Pattern $ThisLookFor
Domain Controllers DCDiag Test#CredCode#$TotFoundNow=$FoundOrNot.Count
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$IsThisDCOk="Yes"
Domain Controllers DCDiag Test#CredCode#$FinStatus = "Ok"
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$TestStatus="Passed"
Domain Controllers DCDiag Test#CredCode#IF ($TotFoundNow -eq 0)
Domain Controllers DCDiag Test#CredCode#{ 
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#else
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$TestStatus = "Failed"
Domain Controllers DCDiag Test#CredCode#$AnyGap = "Yes"
Domain Controllers DCDiag Test#CredCode#$IsThisDCOk="No"
Domain Controllers DCDiag Test#CredCode#$FinStatus = "Not Ok"
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$ThisSTR = $ItemName+","+$DCConError+","+$ComConError+","+$ThisTestToRun+","+$TestStatus+","+$FinStatus+","+$DCDiagTestREsultFile
Domain Controllers DCDiag Test#CredCode#Add-Content "$TestCSVFile" $ThisStr   
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#IF ($IsThisDCOk -eq "No")
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$TotNo++
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#else
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controllers DCDiag Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controllers DCDiag Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$OthText = ""
Domain Controllers DCDiag Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$TestText = "DCDiag Test reported errors on domain controllers. Please load and check FinalStatus column in the output. If you see Not Ok in the FinalStatus column for a domain controller the DCDiag result file can be found at $LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\Data\DCDiagTest location. AD Health Profiler creates DCDiag file for each domain controller it checks. The file name is HealthProfileDCName_Test_TestName.CSV. $OthText"
Domain Controllers DCDiag Test#CredCode#$SumVal = $TotNo
Domain Controllers DCDiag Test#CredCode#$TestStatus="Critical"
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#IF ($AnyGap -eq "No")
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$TestText = "All DCDiag tests have been passed on all domain controllers. $OthText"
Domain Controllers DCDiag Test#CredCode#$SumVal = ""
Domain Controllers DCDiag Test#CredCode#$TestStatus="Passed"
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controllers DCDiag Test#CredCode#{
Domain Controllers DCDiag Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controllers DCDiag Test#CredCode#$SumVal = ""
Domain Controllers DCDiag Test#CredCode#$TestStatus="Completed with Errors."
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#}
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#
Domain Controllers DCDiag Test#CredCode#
Domain Administrative Security Groups Test#HeaderCode#$ThisString="Security Group, Total Members, In AD Domain,Final Status"
Domain Administrative Security Groups Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain Administrative Security Groups Test#HeaderCode#
Domain Administrative Security Groups Test#HeaderCode#
Domain Administrative Security Groups Test#HeaderCode#
Domain Administrative Security Groups Test#HeaderCode#
Domain Administrative Security Groups Test#HeaderCode#
Domain Administrative Security Groups Test#CredCode#$TotNo=0
Domain Administrative Security Groups Test#CredCode#$ItemCount=0
Domain Administrative Security Groups Test#CredCode#$ErrorOrNot = "No"
Domain Administrative Security Groups Test#CredCode#$AnyGap = "No"
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$GrpMem="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DomainAdminGRP.DPC"
Domain Administrative Security Groups Test#CredCode#$GrpCSVNow = Import-CSV $GrpMem -Delimiter ";"
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#Foreach ($ItemName in $GrpCSVNow)
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$ThisItemToCheck = $ItemName.SecurityGroup
Domain Administrative Security Groups Test#CredCode#IF ($ItemName -eq "")
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#else
Domain Administrative Security Groups Test#CredCode#{ 
Domain Administrative Security Groups Test#CredCode#ForEach ($DomainName in Get-Content $GDomList)
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#IF ($ThisItemToCheck -eq "Schema Admins" -or $ThisItemToCheck -eq "Enterprise Admins")
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$TotMems = Get-ADGroupMember -Credential $creds -Identity "$ThisItemToCheck" -Server $CurForestName -ErrorAction SilentlyContinue
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#else
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$TotMems = Get-ADGroupMember -Credential $creds -Identity "$ThisItemToCheck" -Server $DomainName -ErrorAction SilentlyContinue
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$TotNowCount = $TotMems.SamAccountName.Count
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$FinStatus="Ok"
Domain Administrative Security Groups Test#CredCode#IF ($TotNowCount -gt 20)
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#$FinStatus = "Too many members in Administrative Security Group."
Domain Administrative Security Groups Test#CredCode#$AnyGap = "Yes"
Domain Administrative Security Groups Test#CredCode#$TotNo++
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$FinalVal=$ThisItemToCheck+","+$TotNowCount+","+$DomainName+","+$FinStatus
Domain Administrative Security Groups Test#CredCode#Add-Content "$TestCSVFile" $FinalVal
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#$TestText = "Administrative Security Groups contain more than 20 members. It is recommended to keep lesser number of members to avoid any crisis in Active Directory environment. Please remove members those are not required and are no longer active."
Domain Administrative Security Groups Test#CredCode#$SumVal = $TotNo
Domain Administrative Security Groups Test#CredCode#$TestStatus="High"
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#IF ($AnyGap -eq "No")
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#$TestText = "Administrative Security Groups contain less than 20 members."
Domain Administrative Security Groups Test#CredCode#$SumVal = ""
Domain Administrative Security Groups Test#CredCode#$TestStatus="Passed"
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$TotNo=0
Domain Administrative Security Groups Test#CredCode#$ItemCount=0
Domain Administrative Security Groups Test#CredCode#$ErrorOrNot = "No"
Domain Administrative Security Groups Test#CredCode#$AnyGap = "No"
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$GrpMem="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DomainAdminGRP.DPC"
Domain Administrative Security Groups Test#CredCode#$GrpCSVNow = Import-CSV $GrpMem -Delimiter ";"
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#Foreach ($ItemName in $GrpCSVNow)
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$ThisItemToCheck = $ItemName.SecurityGroup
Domain Administrative Security Groups Test#CredCode#IF ($ItemName -eq "")
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#else
Domain Administrative Security Groups Test#CredCode#{ 
Domain Administrative Security Groups Test#CredCode#ForEach ($DomainName in Get-Content $GDomList)
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#IF ($ThisItemToCheck -eq "Schema Admins" -or $ThisItemToCheck -eq "Enterprise Admins")
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$TotMems = Get-ADGroupMember -Identity "$ThisItemToCheck" -Server $CurForestName -ErrorAction SilentlyContinue
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#else
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$TotMems = Get-ADGroupMember -Identity "$ThisItemToCheck" -Server $DomainName -ErrorAction SilentlyContinue
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$TotNowCount = $TotMems.SamAccountName.Count
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$FinStatus="Ok"
Domain Administrative Security Groups Test#CredCode#IF ($TotNowCount -gt 20)
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#$FinStatus = "Too many members in Administrative Security Group."
Domain Administrative Security Groups Test#CredCode#$AnyGap = "Yes"
Domain Administrative Security Groups Test#CredCode#$TotNo++
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$FinalVal=$ThisItemToCheck+","+$TotNowCount+","+$DomainName+","+$FinStatus
Domain Administrative Security Groups Test#CredCode#Add-Content "$TestCSVFile" $FinalVal
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#$TestText = "Administrative Security Groups contain more than 20 members. It is recommended to keep lesser number of members to avoid any crisis in Active Directory environment. Please remove members those are not required and are no longer active."
Domain Administrative Security Groups Test#CredCode#$SumVal = $TotNo
Domain Administrative Security Groups Test#CredCode#$TestStatus="High"
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#IF ($AnyGap -eq "No")
Domain Administrative Security Groups Test#CredCode#{
Domain Administrative Security Groups Test#CredCode#$TestText = "Administrative Security Groups contain less than 20 members."
Domain Administrative Security Groups Test#CredCode#$SumVal = ""
Domain Administrative Security Groups Test#CredCode#$TestStatus="Passed"
Domain Administrative Security Groups Test#CredCode#}
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode#
Domain Administrative Security Groups Test#CredCode# 
Domain Administrative Security Groups Test#CredCode#
Domain Controller Custom Missing Updates Test#HeaderCode#$ThisStr="Domain Controller,Connection,Command Status, Update,Final Status"
Domain Controller Custom Missing Updates Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Custom Missing Updates Test#HeaderCode#
Domain Controller Custom Missing Updates Test#HeaderCode#
Domain Controller Custom Missing Updates Test#HeaderCode#
Domain Controller Custom Missing Updates Test#HeaderCode#
Domain Controller Custom Missing Updates Test#HeaderCode#
Domain Controller Custom Missing Updates Test#HeaderCode#
Domain Controller Custom Missing Updates Test#CredCode#$TotNo=0
Domain Controller Custom Missing Updates Test#CredCode#$ItemCount=0
Domain Controller Custom Missing Updates Test#CredCode#$TestText = ""
Domain Controller Custom Missing Updates Test#CredCode#$TestStatus=""
Domain Controller Custom Missing Updates Test#CredCode#$SumVal = ""
Domain Controller Custom Missing Updates Test#CredCode#$AnyGap = "No"
Domain Controller Custom Missing Updates Test#CredCode#$ErrorOrNot = "No"
Domain Controller Custom Missing Updates Test#CredCode#$AnyOneOk = "No"
Domain Controller Custom Missing Updates Test#CredCode#$TotDCsInError = 0
Domain Controller Custom Missing Updates Test#CredCode#$CustomUpdateFile="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\CustomUpdates.DPC"
Domain Controller Custom Missing Updates Test#CredCode#$CustomCSVNow = Import-CSV $CustomUpdateFile -Delimiter ";"
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$DCConError = "Ok"
Domain Controller Custom Missing Updates Test#CredCode#$DCConStatus = "Ok"
Domain Controller Custom Missing Updates Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller Custom Missing Updates Test#CredCode#$Error.Clear()
Domain Controller Custom Missing Updates Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller Custom Missing Updates Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$ProceedOrNot = "No"
Domain Controller Custom Missing Updates Test#CredCode#$TotDCsInError++
Domain Controller Custom Missing Updates Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Custom Missing Updates Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$ComConError="Ok"        
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#$Error.Clear()
Domain Controller Custom Missing Updates Test#CredCode#$AllHotFixes = Get-HotFix -Credential $Creds -ComputerName $ItemName        
Domain Controller Custom Missing Updates Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Custom Missing Updates Test#CredCode#{ 
Domain Controller Custom Missing Updates Test#CredCode#$AnyOneOk="Yes"
Domain Controller Custom Missing Updates Test#CredCode#ForEach ($ThisHotFix in $CustomCSVNow)
Domain Controller Custom Missing Updates Test#CredCode#{ 
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#$ThisHToCheck = $ThisHotFix.CustomUpdateNumber
Domain Controller Custom Missing Updates Test#CredCode#$HotStatusNow = "Not Found"
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#ForEach ($AllFound in $AllHotFixes)
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$ThisCheckNow = $AllFound.HotFixID
Domain Controller Custom Missing Updates Test#CredCode#IF ($ThisCheckNow -eq $ThisHToCheck)
Domain Controller Custom Missing Updates Test#CredCode#{ 
Domain Controller Custom Missing Updates Test#CredCode#$HotStatusNow = "Found"
Domain Controller Custom Missing Updates Test#CredCode#break
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#IF ($HotStatusNow -eq "Not Found")
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$IsHFAva = "No"
Domain Controller Custom Missing Updates Test#CredCode#$AnyGap="Yes"
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$TotNo++
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#$ThisSTr = $ItemName+","+$DCConError+","+$ComConError+","+$ThisHToCheck+","+$HotStatusNow
Domain Controller Custom Missing Updates Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Custom Missing Updates Test#CredCode#} 
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#else
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Custom Missing Updates Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Custom Missing Updates Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#else
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Custom Missing Updates Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Custom Missing Updates Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#$OthText = ""
Domain Controller Custom Missing Updates Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$TestText = "Please check and load result as to see which domain controller is missing the custom update. The custom update number is configured in $LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\CustomUpdates.CSV file. $OthText"
Domain Controller Custom Missing Updates Test#CredCode#$SumVal = $TotNo
Domain Controller Custom Missing Updates Test#CredCode#$TestStatus="High"
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$TestText = "Domain Controllers have custom updates installed. Please load and check result. $OthText"
Domain Controller Custom Missing Updates Test#CredCode#$SumVal = ""
Domain Controller Custom Missing Updates Test#CredCode#$TestStatus="Passed"
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller Custom Missing Updates Test#CredCode#$SumVal = ""
Domain Controller Custom Missing Updates Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode# 
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#$TotNo=0
Domain Controller Custom Missing Updates Test#CredCode#$ItemCount=0
Domain Controller Custom Missing Updates Test#CredCode#$TestText = ""
Domain Controller Custom Missing Updates Test#CredCode#$TestStatus=""
Domain Controller Custom Missing Updates Test#CredCode#$SumVal = ""
Domain Controller Custom Missing Updates Test#CredCode#$AnyGap = "No"
Domain Controller Custom Missing Updates Test#CredCode#$ErrorOrNot = "No"
Domain Controller Custom Missing Updates Test#CredCode#$AnyOneOk = "No"
Domain Controller Custom Missing Updates Test#CredCode#$TotDCsInError = 0
Domain Controller Custom Missing Updates Test#CredCode#$CustomUpdateFile="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\CustomUpdates.DPC"
Domain Controller Custom Missing Updates Test#CredCode#$CustomCSVNow = Import-CSV $CustomUpdateFile -Delimiter ";"
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$DCConError = "Ok"
Domain Controller Custom Missing Updates Test#CredCode#$DCConStatus = "Ok"
Domain Controller Custom Missing Updates Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller Custom Missing Updates Test#CredCode#$Error.Clear()
Domain Controller Custom Missing Updates Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller Custom Missing Updates Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$ProceedOrNot = "No"
Domain Controller Custom Missing Updates Test#CredCode#$TotDCsInError++
Domain Controller Custom Missing Updates Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Custom Missing Updates Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$ComConError="Ok"        
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#$Error.Clear()
Domain Controller Custom Missing Updates Test#CredCode#$AllHotFixes = Get-HotFix -ComputerName $ItemName        
Domain Controller Custom Missing Updates Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Custom Missing Updates Test#CredCode#{ 
Domain Controller Custom Missing Updates Test#CredCode#$AnyOneOk="Yes"
Domain Controller Custom Missing Updates Test#CredCode#ForEach ($ThisHotFix in $CustomCSVNow)
Domain Controller Custom Missing Updates Test#CredCode#{ 
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#$ThisHToCheck = $ThisHotFix.CustomUpdateNumber
Domain Controller Custom Missing Updates Test#CredCode#$HotStatusNow = "Not Found"
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#ForEach ($AllFound in $AllHotFixes)
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$ThisCheckNow = $AllFound.HotFixID
Domain Controller Custom Missing Updates Test#CredCode#IF ($ThisCheckNow -eq $ThisHToCheck)
Domain Controller Custom Missing Updates Test#CredCode#{ 
Domain Controller Custom Missing Updates Test#CredCode#$HotStatusNow = "Found"
Domain Controller Custom Missing Updates Test#CredCode#break
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#IF ($HotStatusNow -eq "Not Found")
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$IsHFAva = "No"
Domain Controller Custom Missing Updates Test#CredCode#$AnyGap="Yes"
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$TotNo++
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#$ThisSTr = $ItemName+","+$DCConError+","+$ComConError+","+$ThisHToCheck+","+$HotStatusNow
Domain Controller Custom Missing Updates Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Custom Missing Updates Test#CredCode#} 
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#else
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Custom Missing Updates Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Custom Missing Updates Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#else
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Custom Missing Updates Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Custom Missing Updates Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#$OthText = ""
Domain Controller Custom Missing Updates Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$TestText = "Please check and load result as to see which domain controller is missing the custom update. The custom update number is configured in $LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\CustomUpdates.CSV file. $OthText"
Domain Controller Custom Missing Updates Test#CredCode#$SumVal = $TotNo
Domain Controller Custom Missing Updates Test#CredCode#$TestStatus="High"
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$TestText = "Domain Controllers have custom updates installed. Please load and check result. $OthText"
Domain Controller Custom Missing Updates Test#CredCode#$SumVal = ""
Domain Controller Custom Missing Updates Test#CredCode#$TestStatus="Passed"
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller Custom Missing Updates Test#CredCode#{
Domain Controller Custom Missing Updates Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller Custom Missing Updates Test#CredCode#$SumVal = ""
Domain Controller Custom Missing Updates Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#}
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Custom Missing Updates Test#CredCode#
Domain Controller Event Log Recent Errors Test#HeaderCode#$ThisStr="Domain Controller,Connection,Command Status, Event Log, Event ID, Event Type, Time Generated, Source, Message"
Domain Controller Event Log Recent Errors Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Event Log Recent Errors Test#HeaderCode#
Domain Controller Event Log Recent Errors Test#HeaderCode#
Domain Controller Event Log Recent Errors Test#HeaderCode#
Domain Controller Event Log Recent Errors Test#CredCode#$TotNo=0
Domain Controller Event Log Recent Errors Test#CredCode#$ItemCount=0
Domain Controller Event Log Recent Errors Test#CredCode#$TestText = ""
Domain Controller Event Log Recent Errors Test#CredCode#$TestStatus=""
Domain Controller Event Log Recent Errors Test#CredCode#$SumVal = ""
Domain Controller Event Log Recent Errors Test#CredCode#$AnyGap = "No"
Domain Controller Event Log Recent Errors Test#CredCode#$ErrorOrNot = "No"
Domain Controller Event Log Recent Errors Test#CredCode#$AnyOneOk = "No"
Domain Controller Event Log Recent Errors Test#CredCode#$TotDCsInError = 0
Domain Controller Event Log Recent Errors Test#CredCode#$DCLogs="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCLogs.DPC"
Domain Controller Event Log Recent Errors Test#CredCode#$DCLogCSVNow = Import-CSV $DCLogs -Delimiter ";"
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$DCConError = "Ok"
Domain Controller Event Log Recent Errors Test#CredCode#$DCConStatus = "Ok"
Domain Controller Event Log Recent Errors Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller Event Log Recent Errors Test#CredCode#$Error.Clear()
Domain Controller Event Log Recent Errors Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller Event Log Recent Errors Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$ProceedOrNot = "No"
Domain Controller Event Log Recent Errors Test#CredCode#$TotDCsInError++
Domain Controller Event Log Recent Errors Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Event Log Recent Errors Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$ComConError="Ok"        
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#ForEach ($ThisLog in $DCLogCSVNow)
Domain Controller Event Log Recent Errors Test#CredCode#{ 
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#$ThisLogToCheck = $ThisLog.EventLogName
Domain Controller Event Log Recent Errors Test#CredCode#$Error.Clear()
Domain Controller Event Log Recent Errors Test#CredCode#$LogError = Invoke-Command -ComputerName $ItemName -Script { param($R1Now) Get-eventlog -log "$R1Now" -EntryType Error,Warning -Newest 10 } -ArgumentList $ThisLogToCheck -Credential $Creds
Domain Controller Event Log Recent Errors Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Event Log Recent Errors Test#CredCode#{ 
Domain Controller Event Log Recent Errors Test#CredCode#$AnyOneOk="Yes"
Domain Controller Event Log Recent Errors Test#CredCode#$LogErrCnt = $LogError.Count
Domain Controller Event Log Recent Errors Test#CredCode#$ThisMsgNow = $ThisLogToCheck
Domain Controller Event Log Recent Errors Test#CredCode#IF ($LogErrCnt -ne 0)
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$AnyGap = "Yes"  
Domain Controller Event Log Recent Errors Test#CredCode#ForEach ($AllErrors in $LogError)
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$ThisEventID = $AllErrors.EventID
Domain Controller Event Log Recent Errors Test#CredCode#$ThisMessage = '"'+$AllErrors.Message+'"'
Domain Controller Event Log Recent Errors Test#CredCode#$ThisEventType = '"'+$AllErrors.EntryType+'"'
Domain Controller Event Log Recent Errors Test#CredCode#$ThisTime = '"'+$AllErrors.TimeGenerated+'"'
Domain Controller Event Log Recent Errors Test#CredCode#$ThisSource = '"'+$AllErrors.Source+'"'
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#$ThisSTr = $ItemName+","+$DCConError+","+$ComConError+","+$ThisLogToCheck+","+$ThisEventID+","+$ThisEventType+","+$ThisTime+","+$ThisSource+","+$ThisMessage
Domain Controller Event Log Recent Errors Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Event Log Recent Errors Test#CredCode#} 
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#else
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$ThisMsgNow = $ThisLogToCheck +" : No Last 10 Errors or Warnings occured on this domain controller."
Domain Controller Event Log Recent Errors Test#CredCode#$ThisSTr = $ItemName+","+$DCConError+","+$ComConError+","+$ThisMsgNow
Domain Controller Event Log Recent Errors Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#else
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Event Log Recent Errors Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Event Log Recent Errors Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$TotNo++
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#$OthText = ""
Domain Controller Event Log Recent Errors Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$TestText = "Test checks errors and warnings in Event Logs of Domain Controllers. $OthText"
Domain Controller Event Log Recent Errors Test#CredCode#$SumVal = $TotNo
Domain Controller Event Log Recent Errors Test#CredCode#$TestStatus="High"
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$TestText = "No Errors found. $OthText"
Domain Controller Event Log Recent Errors Test#CredCode#$SumVal = ""
Domain Controller Event Log Recent Errors Test#CredCode#$TestStatus="Passed"
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller Event Log Recent Errors Test#CredCode#$SumVal = ""
Domain Controller Event Log Recent Errors Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode# 
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#$TotNo=0
Domain Controller Event Log Recent Errors Test#CredCode#$ItemCount=0
Domain Controller Event Log Recent Errors Test#CredCode#$TestText = ""
Domain Controller Event Log Recent Errors Test#CredCode#$TestStatus=""
Domain Controller Event Log Recent Errors Test#CredCode#$SumVal = ""
Domain Controller Event Log Recent Errors Test#CredCode#$AnyGap = "No"
Domain Controller Event Log Recent Errors Test#CredCode#$ErrorOrNot = "No"
Domain Controller Event Log Recent Errors Test#CredCode#$AnyOneOk = "No"
Domain Controller Event Log Recent Errors Test#CredCode#$TotDCsInError = 0
Domain Controller Event Log Recent Errors Test#CredCode#$DCLogs="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCLogs.DPC"
Domain Controller Event Log Recent Errors Test#CredCode#$DCLogCSVNow = Import-CSV $DCLogs -Delimiter ";"
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$DCConError = "Ok"
Domain Controller Event Log Recent Errors Test#CredCode#$DCConStatus = "Ok"
Domain Controller Event Log Recent Errors Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller Event Log Recent Errors Test#CredCode#$Error.Clear()
Domain Controller Event Log Recent Errors Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller Event Log Recent Errors Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$ProceedOrNot = "No"
Domain Controller Event Log Recent Errors Test#CredCode#$TotDCsInError++
Domain Controller Event Log Recent Errors Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Event Log Recent Errors Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$ComConError="Ok"        
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#ForEach ($ThisLog in $DCLogCSVNow)
Domain Controller Event Log Recent Errors Test#CredCode#{ 
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#$ThisLogToCheck = $ThisLog.EventLogName
Domain Controller Event Log Recent Errors Test#CredCode#$Error.Clear()
Domain Controller Event Log Recent Errors Test#CredCode#$LogError = Invoke-Command -ComputerName $ItemName -Script { param($R1Now) Get-eventlog -log "$R1Now" -EntryType Error,Warning -Newest 10 } -ArgumentList $ThisLogToCheck
Domain Controller Event Log Recent Errors Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Event Log Recent Errors Test#CredCode#{ 
Domain Controller Event Log Recent Errors Test#CredCode#$AnyOneOk="Yes"
Domain Controller Event Log Recent Errors Test#CredCode#$LogErrCnt = $LogError.Count
Domain Controller Event Log Recent Errors Test#CredCode#$ThisMsgNow = $ThisLogToCheck
Domain Controller Event Log Recent Errors Test#CredCode#IF ($LogErrCnt -ne 0)
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$AnyGap = "Yes"  
Domain Controller Event Log Recent Errors Test#CredCode#ForEach ($AllErrors in $LogError)
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$ThisEventID = $AllErrors.EventID
Domain Controller Event Log Recent Errors Test#CredCode#$ThisMessage = '"'+$AllErrors.Message+'"'
Domain Controller Event Log Recent Errors Test#CredCode#$ThisEventType = '"'+$AllErrors.EntryType+'"'
Domain Controller Event Log Recent Errors Test#CredCode#$ThisTime = '"'+$AllErrors.TimeGenerated+'"'
Domain Controller Event Log Recent Errors Test#CredCode#$ThisSource = '"'+$AllErrors.Source+'"'
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#$ThisSTr = $ItemName+","+$DCConError+","+$ComConError+","+$ThisLogToCheck+","+$ThisEventID+","+$ThisEventType+","+$ThisTime+","+$ThisSource+","+$ThisMessage
Domain Controller Event Log Recent Errors Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Event Log Recent Errors Test#CredCode#} 
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#else
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$ThisMsgNow = $ThisLogToCheck +" : No Last 10 Errors or Warnings occured on this domain controller."
Domain Controller Event Log Recent Errors Test#CredCode#$ThisSTr = $ItemName+","+$DCConError+","+$ComConError+","+$ThisMsgNow
Domain Controller Event Log Recent Errors Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#else
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Event Log Recent Errors Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Event Log Recent Errors Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$TotNo++
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#$OthText = ""
Domain Controller Event Log Recent Errors Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$TestText = "Test checks errors and warnings in Event Logs of Domain Controllers. $OthText"
Domain Controller Event Log Recent Errors Test#CredCode#$SumVal = $TotNo
Domain Controller Event Log Recent Errors Test#CredCode#$TestStatus="High"
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$TestText = "No Errors found. $OthText"
Domain Controller Event Log Recent Errors Test#CredCode#$SumVal = ""
Domain Controller Event Log Recent Errors Test#CredCode#$TestStatus="Passed"
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller Event Log Recent Errors Test#CredCode#{
Domain Controller Event Log Recent Errors Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller Event Log Recent Errors Test#CredCode#$SumVal = ""
Domain Controller Event Log Recent Errors Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#}
Domain Controller Event Log Recent Errors Test#CredCode#
Domain Controller Event Log Recent Errors Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Event Log Recent Errors Test#CredCode#
AD FSMO Placement Test#HeaderCode#$ThisString="Domain Name, PDC Emulator, RID Master, Are PDC and RID running on same Domain Controller?, Are PDC or RID Hosted on a Bridgehead Server?, Final Status"
AD FSMO Placement Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
AD FSMO Placement Test#HeaderCode#
AD FSMO Placement Test#HeaderCode#
AD FSMO Placement Test#CredCode#$TestStatus="Passed"
AD FSMO Placement Test#CredCode#$TestText = ""
AD FSMO Placement Test#CredCode#$sumVal=0
AD FSMO Placement Test#CredCode#$ReachOrNot = "Yes"
AD FSMO Placement Test#CredCode#$AnyGap = "No"
AD FSMO Placement Test#CredCode#$TotNo = 0
AD FSMO Placement Test#CredCode#$AnyOneOk="No"
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
AD FSMO Placement Test#CredCode#{
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#$Error.Clear()
AD FSMO Placement Test#CredCode#$DomDataNow = Get-ADDomain -Identity $ThisDomain -Credential $creds
AD FSMO Placement Test#CredCode#IF ($Error.Count -eq 0)
AD FSMO Placement Test#CredCode#{ 
AD FSMO Placement Test#CredCode#$AnyOneOk = "Yes"     
AD FSMO Placement Test#CredCode#$PDCInDomain = $DomDataNow.PDCEmulator
AD FSMO Placement Test#CredCode#$RIDInDomain = $DomDataNow.RIDMaster
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#$TextB = "Ok - Not hosted on Bridgehead Server"
AD FSMO Placement Test#CredCode#$TextA = "Ok - Running on same Domain Controller"
AD FSMO Placement Test#CredCode#$FinStatus="Ok"
AD FSMO Placement Test#CredCode#IF ($PDCInDomain -ne $RIDInDomain)
AD FSMO Placement Test#CredCode#{
AD FSMO Placement Test#CredCode#$AnyGap = "Yes"
AD FSMO Placement Test#CredCode#$TextA = "WARNING: PDC and RID Master are not hosted on the same domain controller."
AD FSMO Placement Test#CredCode#$FinStatus="Not Ok"
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName)
AD FSMO Placement Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#ForEach ($Site in $ADSites)
AD FSMO Placement Test#CredCode#{ 
AD FSMO Placement Test#CredCode#$BHName = $Site.BridgeheadServers.Name            
AD FSMO Placement Test#CredCode#IF ($BHName -eq $PDCInDomain -or $BHName -eq $RIDInDomain)
AD FSMO Placement Test#CredCode#{
AD FSMO Placement Test#CredCode#$AnyGap ="Yes"
AD FSMO Placement Test#CredCode#$FinStatus="Not Ok"
AD FSMO Placement Test#CredCode#$TextB = "WARNING: It is not recommended to host PDC and RID Master roles on a Bridgehead Server."
AD FSMO Placement Test#CredCode#break
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#$FinalSTR = $ThisDomain+","+$PDCInDomain+","+$RIDInDomain+","+$TextA+","+$TextB+","+$FinStatus
AD FSMO Placement Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#else
AD FSMO Placement Test#CredCode#{ 
AD FSMO Placement Test#CredCode#$ThisSTR = $ThisDomain+",Error Connecting to domain."
AD FSMO Placement Test#CredCode#$ErrorOrNot = "Yes"
AD FSMO Placement Test#CredCode#Add-Content "$TestCSVFile" $ThisStr   
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#IF ($AnyGap -eq "Yes")
AD FSMO Placement Test#CredCode#{
AD FSMO Placement Test#CredCode#$TestStatus="Critical"
AD FSMO Placement Test#CredCode#$TestText = "FSMO Placement is not correct. RID and PDC Master must be hosted on the same computer in each domain and it is recommended to avoid hosting any FSMO roles on Bridgehead Servers. A bridgehead server is a domain controller (DC) that functions as the primary route of Active Directory (AD) replication data moving into and out of sites. In a large Active Directory environment hosting FSMO roles on bridgehead Servers may create unnecessary load on domain controller."
AD FSMO Placement Test#CredCode#$SumVal = ""
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#IF ($AnyGap -eq "No")
AD FSMO Placement Test#CredCode#{
AD FSMO Placement Test#CredCode#$TestStatus="Passed"
AD FSMO Placement Test#CredCode#$TestText = "FSMO Placement is correct."
AD FSMO Placement Test#CredCode#$SumVal = ""
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#IF ($AnyOneOk -eq "No")
AD FSMO Placement Test#CredCode#{
AD FSMO Placement Test#CredCode#$TestText = "Error Executing Dynamic Pack."
AD FSMO Placement Test#CredCode#$SumVal = ""
AD FSMO Placement Test#CredCode#$TestStatus="Completed with Errors."
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#$TestStatus="Passed"
AD FSMO Placement Test#CredCode#$TestText = ""
AD FSMO Placement Test#CredCode#$sumVal=0
AD FSMO Placement Test#CredCode#$ReachOrNot = "Yes"
AD FSMO Placement Test#CredCode#$AnyGap = "No"
AD FSMO Placement Test#CredCode#$TotNo = 0
AD FSMO Placement Test#CredCode#$AnyOneOk="No"
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
AD FSMO Placement Test#CredCode#{
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#$Error.Clear()
AD FSMO Placement Test#CredCode#$DomDataNow = Get-ADDomain -Identity $ThisDomain
AD FSMO Placement Test#CredCode#IF ($Error.Count -eq 0)
AD FSMO Placement Test#CredCode#{ 
AD FSMO Placement Test#CredCode#$AnyOneOk = "Yes"     
AD FSMO Placement Test#CredCode#$PDCInDomain = $DomDataNow.PDCEmulator
AD FSMO Placement Test#CredCode#$RIDInDomain = $DomDataNow.RIDMaster
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#$TextB = "Not hosted on Bridgehead Server"
AD FSMO Placement Test#CredCode#$TextA = "Running on same Domain Controller"
AD FSMO Placement Test#CredCode#$FinStatus="Ok"
AD FSMO Placement Test#CredCode#IF ($PDCInDomain -ne $RIDInDomain)
AD FSMO Placement Test#CredCode#{
AD FSMO Placement Test#CredCode#$AnyGap = "Yes"
AD FSMO Placement Test#CredCode#$FinStatus = "Not Ok"
AD FSMO Placement Test#CredCode#$TextA = "WARNING: PDC and RID Master are not hosted on the same domain controller."
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#$a = new-object System.DirectoryServices.ActiveDirectory.DirectoryContext("Forest", $CurForestName)
AD FSMO Placement Test#CredCode#[array]$ADSites=[System.DirectoryServices.ActiveDirectory.Forest]::GetForest($a).sites
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#ForEach ($Site in $ADSites)
AD FSMO Placement Test#CredCode#{ 
AD FSMO Placement Test#CredCode#$BHName = $Site.BridgeheadServers.Name            
AD FSMO Placement Test#CredCode#IF ($BHName -eq $PDCInDomain -or $BHName -eq $RIDInDomain)
AD FSMO Placement Test#CredCode#{
AD FSMO Placement Test#CredCode#$AnyGap ="Yes"
AD FSMO Placement Test#CredCode#$FinStatus = "Not Ok"
AD FSMO Placement Test#CredCode#$TextB = "It is not recommended to host PDC and RID Master roles on a Bridgehead Server."
AD FSMO Placement Test#CredCode#break
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#$FinalSTR = $ThisDomain+","+$PDCInDomain+","+$RIDInDomain+","+$TextA+","+$TextB+","+$FinStatus
AD FSMO Placement Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#else
AD FSMO Placement Test#CredCode#{ 
AD FSMO Placement Test#CredCode#$ThisSTR = $ThisDomain+",Error Connecting to domain."
AD FSMO Placement Test#CredCode#$ErrorOrNot = "Yes"
AD FSMO Placement Test#CredCode#Add-Content "$TestCSVFile" $ThisStr   
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#IF ($AnyGap -eq "Yes")
AD FSMO Placement Test#CredCode#{
AD FSMO Placement Test#CredCode#$TestStatus="Critical"
AD FSMO Placement Test#CredCode#$TestText = "FSMO Placement is not correct. RID and PDC Master must be hosted on the same computer in each domain and it is recommended to avoid hosting any FSMO roles on Bridgehead Servers. A bridgehead server is a domain controller (DC) that functions as the primary route of Active Directory (AD) replication data moving into and out of sites. In a large Active Directory environment hosting FSMO roles on bridgehead Servers may create unnecessary load on domain controller."
AD FSMO Placement Test#CredCode#$SumVal = $TotNo
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#IF ($AnyGap -eq "No")
AD FSMO Placement Test#CredCode#{
AD FSMO Placement Test#CredCode#$TestStatus="Passed"
AD FSMO Placement Test#CredCode#$TestText = "FSMO Placement is correct."
AD FSMO Placement Test#CredCode#$SumVal = ""
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#IF ($AnyOneOk -eq "No")
AD FSMO Placement Test#CredCode#{
AD FSMO Placement Test#CredCode#$TestText = "Error Executing Dynamic Pack."
AD FSMO Placement Test#CredCode#$SumVal = ""
AD FSMO Placement Test#CredCode#$TestStatus="Completed with Errors."
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#}
AD FSMO Placement Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
AD FSMO Placement Test#CredCode#
AD FSMO Placement Test#CredCode#
Domain Controller Services Status Test#HeaderCode#$ThisStr="Domain Controller,Connection,Command Status, Service, Service Status, Final Status"
Domain Controller Services Status Test#HeaderCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Services Status Test#HeaderCode#
Domain Controller Services Status Test#HeaderCode#
Domain Controller Services Status Test#HeaderCode#
Domain Controller Services Status Test#HeaderCode#
Domain Controller Services Status Test#HeaderCode#
Domain Controller Services Status Test#HeaderCode#
Domain Controller Services Status Test#HeaderCode#
Domain Controller Services Status Test#HeaderCode#
Domain Controller Services Status Test#CredCode#$TotNo=0
Domain Controller Services Status Test#CredCode#$ItemCount=0
Domain Controller Services Status Test#CredCode#$TestText = ""
Domain Controller Services Status Test#CredCode#$TestStatus=""
Domain Controller Services Status Test#CredCode#$SumVal = ""
Domain Controller Services Status Test#CredCode#$AnyGap = "No"
Domain Controller Services Status Test#CredCode#$ErrorOrNot = "No"
Domain Controller Services Status Test#CredCode#$AnyOneOk = "No"
Domain Controller Services Status Test#CredCode#$TotDCsInError = 0
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#$DCServices="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCServices.DPC"
Domain Controller Services Status Test#CredCode#$CSVConfigItems = Import-CSV $DCServices -Delimiter ";"
Domain Controller Services Status Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$DCConError = "Ok"
Domain Controller Services Status Test#CredCode#$DCConStatus = "Ok"
Domain Controller Services Status Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller Services Status Test#CredCode#$Error.Clear()
Domain Controller Services Status Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller Services Status Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$ProceedOrNot = "No"
Domain Controller Services Status Test#CredCode#$TotDCsInError++
Domain Controller Services Status Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Services Status Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$ComConError="Ok"        
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#$IsThisDCOk="Yes"
Domain Controller Services Status Test#CredCode#ForEach ($ThisService in $CSVConfigItems)
Domain Controller Services Status Test#CredCode#{ 
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#$ThisItemToCheck = $ThisService.ServiceName
Domain Controller Services Status Test#CredCode#$Error.Clear()
Domain Controller Services Status Test#CredCode#$ServicesNow = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller Services Status Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$AnyOneOk="Yes"
Domain Controller Services Status Test#CredCode#$RStatus="Unknown"
Domain Controller Services Status Test#CredCode#$FinStatus = "Ok"
Domain Controller Services Status Test#CredCode#ForEach ($AllServicesNow in $ServicesNow)
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#IF ($AllServicesNow.Name -eq $ThisItemToCheck)
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$RStatus = $AllServicesNow.State
Domain Controller Services Status Test#CredCode#Break
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#IF ($RStatus -ne "Running")
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$AnyGap = "Yes"
Domain Controller Services Status Test#CredCode#$IsThisDCOk="No"
Domain Controller Services Status Test#CredCode#$FinStatus = "Not Ok"
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#$ThisStr=$ItemName+",$DCConError,"+$ComConError+","+$ThisItemToCheck+","+$RStatus+","+$FinStatus
Domain Controller Services Status Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#else
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Services Status Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Services Status Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#IF ($IsThisDCOk -eq "No")
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$TotNo++
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#else
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Services Status Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Services Status Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#$OthText = ""
Domain Controller Services Status Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$TestText = "There are a few Services that are not running on domain controllers. $OthText"
Domain Controller Services Status Test#CredCode#$SumVal = $TotNo
Domain Controller Services Status Test#CredCode#$TestStatus="Critical"
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$TestText = "All Domain Controller Services are running. $OthText"
Domain Controller Services Status Test#CredCode#$SumVal = ""
Domain Controller Services Status Test#CredCode#$TestStatus="Passed"
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller Services Status Test#CredCode#$SumVal = ""
Domain Controller Services Status Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#$TotNo=0
Domain Controller Services Status Test#CredCode#$ItemCount=0
Domain Controller Services Status Test#CredCode#$TestText = ""
Domain Controller Services Status Test#CredCode#$TestStatus=""
Domain Controller Services Status Test#CredCode#$SumVal = ""
Domain Controller Services Status Test#CredCode#$AnyGap = "No"
Domain Controller Services Status Test#CredCode#$ErrorOrNot = "No"
Domain Controller Services Status Test#CredCode#$AnyOneOk = "No"
Domain Controller Services Status Test#CredCode#$TotDCsInError = 0
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#$DCServices="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCServices.DPC"
Domain Controller Services Status Test#CredCode#$CSVConfigItems = Import-CSV $DCServices -Delimiter ";"
Domain Controller Services Status Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$DCConError = "Ok"
Domain Controller Services Status Test#CredCode#$DCConStatus = "Ok"
Domain Controller Services Status Test#CredCode#$ProceedOrNot = "Yes"
Domain Controller Services Status Test#CredCode#$Error.Clear()
Domain Controller Services Status Test#CredCode#$AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller Services Status Test#CredCode#IF ($Error.Count -ne 0)
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$ProceedOrNot = "No"
Domain Controller Services Status Test#CredCode#$TotDCsInError++
Domain Controller Services Status Test#CredCode#$DCConError = $Error[0].Exception.Message
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller Services Status Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#IF ($ProceedOrNot -eq "Yes")
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$ComConError="Ok"        
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#$IsThisDCOk="Yes"
Domain Controller Services Status Test#CredCode#ForEach ($ThisService in $CSVConfigItems)
Domain Controller Services Status Test#CredCode#{ 
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#$ThisItemToCheck = $ThisService.ServiceName
Domain Controller Services Status Test#CredCode#$Error.Clear()
Domain Controller Services Status Test#CredCode#$ServicesNow = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller Services Status Test#CredCode#IF ($Error.count -eq 0)
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$AnyOneOk="Yes"
Domain Controller Services Status Test#CredCode#$RStatus="Unknown"
Domain Controller Services Status Test#CredCode#$FinStatus = "Ok"
Domain Controller Services Status Test#CredCode#ForEach ($AllServicesNow in $ServicesNow)
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#IF ($AllServicesNow.Name -eq $ThisItemToCheck)
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$RStatus = $AllServicesNow.State
Domain Controller Services Status Test#CredCode#Break
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#IF ($RStatus -ne "Running")
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$AnyGap = "Yes"
Domain Controller Services Status Test#CredCode#$IsThisDCOk="No"
Domain Controller Services Status Test#CredCode#$FinStatus = "Not Ok"
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#$ThisStr=$ItemName+",$DCConError,"+$ComConError+","+$ThisItemToCheck+","+$RStatus+","+$FinStatus
Domain Controller Services Status Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#else
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Services Status Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Services Status Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#IF ($IsThisDCOk -eq "No")
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$TotNo++
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#else
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$ComConError = $Error[0].Exception.Message
Domain Controller Services Status Test#CredCode#$FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller Services Status Test#CredCode#Add-Content "$TestCSVFile" $FinalSTR
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#$OthText = ""
Domain Controller Services Status Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$TestText = "There are a few Services that are not running on domain controllers. $OthText"
Domain Controller Services Status Test#CredCode#$SumVal = $TotNo
Domain Controller Services Status Test#CredCode#$TestStatus="Critical"
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$TestText = "All Domain Controller Services are running. $OthText"
Domain Controller Services Status Test#CredCode#$SumVal = ""
Domain Controller Services Status Test#CredCode#$TestStatus="Passed"
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#IF ($AnyOneOk -eq "No")
Domain Controller Services Status Test#CredCode#{
Domain Controller Services Status Test#CredCode#$TestText = "Error Executing Dynamic Pack."
Domain Controller Services Status Test#CredCode#$SumVal = ""
Domain Controller Services Status Test#CredCode#$TestStatus="Completed with Errors."
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#}
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#
Domain Controller Services Status Test#CredCode#
Domain GPOs Block Inheritance Test#HeaderCode#$ThisString="OU Name, OU Path, Linked GPOs, In AD Domain, Final Status"
Domain GPOs Block Inheritance Test#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Domain GPOs Block Inheritance Test#HeaderCode#
Domain GPOs Block Inheritance Test#HeaderCode#
Domain GPOs Block Inheritance Test#HeaderCode#
Domain GPOs Block Inheritance Test#HeaderCode#
Domain GPOs Block Inheritance Test#HeaderCode#
Domain GPOs Block Inheritance Test#HeaderCode#
Domain GPOs Block Inheritance Test#CredCode#$TotNo=0
Domain GPOs Block Inheritance Test#CredCode#$ItemCount=0
Domain GPOs Block Inheritance Test#CredCode#$TestText = ""
Domain GPOs Block Inheritance Test#CredCode#$TestStatus=""
Domain GPOs Block Inheritance Test#CredCode#$SumVal = ""
Domain GPOs Block Inheritance Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#$PDCServerToConnect = "Unknown"
Domain GPOs Block Inheritance Test#CredCode#IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$PDCCSV = Import-CSV $PrefDCFile
Domain GPOs Block Inheritance Test#CredCode#ForEach ($ItemNow in $PDCCSV)
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain GPOs Block Inheritance Test#CredCode#break
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#} 
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#else
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$PDCCSV = Import-CSV $PDCListFile
Domain GPOs Block Inheritance Test#CredCode#ForEach ($ItemNow in $PDCCSV)
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$PDCServerToConnect = $ItemNow.PDCServer
Domain GPOs Block Inheritance Test#CredCode#break
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#} 
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#$Error.Clear() 
Domain GPOs Block Inheritance Test#CredCode#$AllGPOInch=Get-ADOrganizationalUnit -Credential $Creds -ResultPageSize 200 -resultSetSize 200 -Server $PDCServerToConnect -Filter * | Get-GPInheritance | Where-Object { $_.GPOInheritanceBlocked }
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#IF ($Error.count -eq 0)
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#else
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$ErrorOrNot="Yes"
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain GPOs Block Inheritance Test#CredCode#$SumVal = ""
Domain GPOs Block Inheritance Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#else
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$Items = $AllGPOInch
Domain GPOs Block Inheritance Test#CredCode#$ItemCount=$AllGPOInch.Count
Domain GPOs Block Inheritance Test#CredCode#$FinalText = ""
Domain GPOs Block Inheritance Test#CredCode#$SumVal=$ItemCount
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPOs Block Inheritance Test#CredCode#{ 
Domain GPOs Block Inheritance Test#CredCode#$TotNo++
Domain GPOs Block Inheritance Test#CredCode#} 
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPOs Block Inheritance Test#CredCode#{ 
Domain GPOs Block Inheritance Test#CredCode#$OUPathNow = '"'+$ThisItem.Path+'"'
Domain GPOs Block Inheritance Test#CredCode#$GPOLinkedName = '"'+$ThisItem.GPOLinks.DisplayName+'"'
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#$FinalVal=$ThisItem.Name+","+$OUPathNow+","+$GPOLinkedName+","+$ThisDomain+",Not Ok - Please check why this GPO has Block Policy Inheritance set."
Domain GPOs Block Inheritance Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#IF ($TotNo -eq 0)
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$TestText = "None of the Organizational Units have been configured with GPO Block Policy Inheritance settings."
Domain GPOs Block Inheritance Test#CredCode#$TestStatus="Passed"
Domain GPOs Block Inheritance Test#CredCode#$SumVal = ""
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#else
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#$TestText = "Some Organizational Units have Block Policy Inheritance Settings configured. Please ensure GPO Policy Inheritance setting is configured on required OUs."
Domain GPOs Block Inheritance Test#CredCode#$TestStatus="Medium"
Domain GPOs Block Inheritance Test#CredCode#$SumVal = $TotNo
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#$TotNo=0
Domain GPOs Block Inheritance Test#CredCode#$ItemCount=0
Domain GPOs Block Inheritance Test#CredCode#$TestText = ""
Domain GPOs Block Inheritance Test#CredCode#$TestStatus=""
Domain GPOs Block Inheritance Test#CredCode#$SumVal = ""
Domain GPOs Block Inheritance Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#$PDCServerToConnect = "Unknown"
Domain GPOs Block Inheritance Test#CredCode#IF ($HitWin2012DC -eq "Yes" -and $CredInputForPS -eq "File")
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$PDCCSV = Import-CSV $PrefDCFile
Domain GPOs Block Inheritance Test#CredCode#ForEach ($ItemNow in $PDCCSV)
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$PDCServerToConnect = $ItemNow.'Preferred Domain Controller'
Domain GPOs Block Inheritance Test#CredCode#break
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#} 
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#else
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$PDCCSV = Import-CSV $PDCListFile
Domain GPOs Block Inheritance Test#CredCode#ForEach ($ItemNow in $PDCCSV)
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#IF ($ItemNow.Domain -eq $ThisDomain)
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$PDCServerToConnect = $ItemNow.PDCServer
Domain GPOs Block Inheritance Test#CredCode#break
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#} 
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#$Error.Clear() 
Domain GPOs Block Inheritance Test#CredCode#$AllGPOInch=Get-ADOrganizationalUnit -ResultPageSize 200 -resultSetSize 200 -Server $PDCServerToConnect -Filter * | Get-GPInheritance | Where-Object { $_.GPOInheritanceBlocked } 
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#IF ($Error.count -eq 0)
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#else
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$ErrorOrNot="Yes"
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#IF ($ErrorOrNot -eq "Yes")
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute Dynamic Pack."
Domain GPOs Block Inheritance Test#CredCode#$SumVal = ""
Domain GPOs Block Inheritance Test#CredCode#$TestStatus="Error executing Dynamic Pack."
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#else
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$Items = $AllGPOInch
Domain GPOs Block Inheritance Test#CredCode#$ItemCount=$AllGPOInch.Count
Domain GPOs Block Inheritance Test#CredCode#$FinalText = ""
Domain GPOs Block Inheritance Test#CredCode#$SumVal=$ItemCount
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPOs Block Inheritance Test#CredCode#{ 
Domain GPOs Block Inheritance Test#CredCode#$TotNo++
Domain GPOs Block Inheritance Test#CredCode#} 
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#ForEach ($ThisItem in $Items)
Domain GPOs Block Inheritance Test#CredCode#{ 
Domain GPOs Block Inheritance Test#CredCode#$OUPathNow = '"'+$ThisItem.Path+'"'
Domain GPOs Block Inheritance Test#CredCode#$GPOLinkedName = '"'+$ThisItem.GPOLinks.DisplayName+'"'
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#$FinalVal=$ThisItem.Name+","+$OUPathNow+","+$GPOLinkedName+","+$ThisDomain+",Not Ok - Please check why this GPO has Block Policy Inheritance set."
Domain GPOs Block Inheritance Test#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#IF ($TotNo -eq 0)
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#$TestText = "None of the Organizational Units have been configured with GPO Block Policy Inheritance settings."
Domain GPOs Block Inheritance Test#CredCode#$TestStatus="Passed"
Domain GPOs Block Inheritance Test#CredCode#$SumVal = ""
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#else
Domain GPOs Block Inheritance Test#CredCode#{
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#$TestText = "Some Organizational Units have Block Policy Inheritance Settings configured. Please ensure GPO Policy Inheritance setting is configured on required OUs."
Domain GPOs Block Inheritance Test#CredCode#$TestStatus="Medium"
Domain GPOs Block Inheritance Test#CredCode#$SumVal = $TotNo
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#}
Domain GPOs Block Inheritance Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#
Domain GPOs Block Inheritance Test#CredCode#
Get AD Domain Info and FSMO#HeaderCode#$ThisString="Domain,NetBIOS Name,Functional Level,Forest,PDC Emulator,RID Master,Infrastructure Master"
Get AD Domain Info and FSMO#HeaderCode#Add-Content "$TestCSVFile" $ThisString
Get AD Domain Info and FSMO#HeaderCode#
Get AD Domain Info and FSMO#HeaderCode#
Get AD Domain Info and FSMO#CredCode#$TotNo=0
Get AD Domain Info and FSMO#CredCode#$ItemCount=0
Get AD Domain Info and FSMO#CredCode#$TestText = ""
Get AD Domain Info and FSMO#CredCode#$TestStatus=""
Get AD Domain Info and FSMO#CredCode#$SumVal = ""
Get AD Domain Info and FSMO#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Get AD Domain Info and FSMO#CredCode#{
Get AD Domain Info and FSMO#CredCode#$Items = Get-ADDomain -Identity $ThisDomain -Credential $Creds
Get AD Domain Info and FSMO#CredCode#IF ($Error.count -eq 0)
Get AD Domain Info and FSMO#CredCode#{
Get AD Domain Info and FSMO#CredCode#}
Get AD Domain Info and FSMO#CredCode#else
Get AD Domain Info and FSMO#CredCode#{
Get AD Domain Info and FSMO#CredCode#$ErrorOrNot="Yes"
Get AD Domain Info and FSMO#CredCode#}
Get AD Domain Info and FSMO#CredCode#IF ($ErrorOrNot -eq "Yes")
Get AD Domain Info and FSMO#CredCode#{
Get AD Domain Info and FSMO#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
Get AD Domain Info and FSMO#CredCode#$SumVal = ""
Get AD Domain Info and FSMO#CredCode#$TestStatus="Error executing AD Test"
Get AD Domain Info and FSMO#CredCode#}
Get AD Domain Info and FSMO#CredCode#else
Get AD Domain Info and FSMO#CredCode#{
Get AD Domain Info and FSMO#CredCode#$ItemCount="NA"
Get AD Domain Info and FSMO#CredCode#$TestStatus = "Completed"
Get AD Domain Info and FSMO#CredCode#$SumVal=$ItemCount
Get AD Domain Info and FSMO#CredCode#$TestText = "This information is gathered for reporting purposes only.."
Get AD Domain Info and FSMO#CredCode#
Get AD Domain Info and FSMO#CredCode#ForEach ($ThisItem in $Items)
Get AD Domain Info and FSMO#CredCode#{ 
Get AD Domain Info and FSMO#CredCode#$FinalVal=$ThisDomain+","+$ThisItem.NetBIOSName+","+'"'+$ThisItem.DomainMode+'"'+","+$ThisItem.Forest+","+$ThisItem.PDCEmulator+","+$ThisItem.RIDMaster+","+$ThisItem.InfrastructureMaster
Get AD Domain Info and FSMO#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Get AD Domain Info and FSMO#CredCode#}
Get AD Domain Info and FSMO#CredCode#
Get AD Domain Info and FSMO#CredCode#}
Get AD Domain Info and FSMO#CredCode#
Get AD Domain Info and FSMO#CredCode#}
Get AD Domain Info and FSMO#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Get AD Domain Info and FSMO#CredCode#
Get AD Domain Info and FSMO#CredCode#
Get AD Domain Info and FSMO#CredCode#$TotNo=0
Get AD Domain Info and FSMO#CredCode#$ItemCount=0
Get AD Domain Info and FSMO#CredCode#$TestText = ""
Get AD Domain Info and FSMO#CredCode#$TestStatus=""
Get AD Domain Info and FSMO#CredCode#$SumVal = ""
Get AD Domain Info and FSMO#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Get AD Domain Info and FSMO#CredCode#{
Get AD Domain Info and FSMO#CredCode#$Items = Get-ADDomain -Identity $ThisDomain
Get AD Domain Info and FSMO#CredCode#IF ($Error.count -eq 0)
Get AD Domain Info and FSMO#CredCode#{
Get AD Domain Info and FSMO#CredCode#}
Get AD Domain Info and FSMO#CredCode#else
Get AD Domain Info and FSMO#CredCode#{
Get AD Domain Info and FSMO#CredCode#$ErrorOrNot="Yes"
Get AD Domain Info and FSMO#CredCode#}
Get AD Domain Info and FSMO#CredCode#IF ($ErrorOrNot -eq "Yes")
Get AD Domain Info and FSMO#CredCode#{
Get AD Domain Info and FSMO#CredCode#$TestText = "Please check to make sure a Domain Controller is reachable to execute AD Test."
Get AD Domain Info and FSMO#CredCode#$SumVal = ""
Get AD Domain Info and FSMO#CredCode#$TestStatus="Error executing AD Test"
Get AD Domain Info and FSMO#CredCode#}
Get AD Domain Info and FSMO#CredCode#else
Get AD Domain Info and FSMO#CredCode#{
Get AD Domain Info and FSMO#CredCode#$ItemCount="NA"
Get AD Domain Info and FSMO#CredCode#$TestStatus = "Completed"
Get AD Domain Info and FSMO#CredCode#$SumVal=$ItemCount
Get AD Domain Info and FSMO#CredCode#$TestText = "This information is gathered for reporting purposes only."
Get AD Domain Info and FSMO#CredCode#
Get AD Domain Info and FSMO#CredCode#ForEach ($ThisItem in $Items)
Get AD Domain Info and FSMO#CredCode#{ 
Get AD Domain Info and FSMO#CredCode#$FinalVal=$ThisDomain+","+$ThisItem.NetBIOSName+","+'"'+$ThisItem.DomainMode+'"'+","+$ThisItem.Forest+","+$ThisItem.PDCEmulator+","+$ThisItem.RIDMaster+","+$ThisItem.InfrastructureMaster
Get AD Domain Info and FSMO#CredCode#Add-Content "$TestCSVFile" $FinalVal            
Get AD Domain Info and FSMO#CredCode#}
Get AD Domain Info and FSMO#CredCode#
Get AD Domain Info and FSMO#CredCode#}
Get AD Domain Info and FSMO#CredCode#
Get AD Domain Info and FSMO#CredCode#}
Get AD Domain Info and FSMO#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Get AD Domain Info and FSMO#CredCode#
Get AD Domain Info and FSMO#CredCode#
Domain Account Policies Test#Headercode#$STR = "Item, Value, AD Domain"
Domain Account Policies Test#Headercode#Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#
Domain Account Policies Test#CredCode#$TotNo=0 
Domain Account Policies Test#CredCode#$ItemCount=0 
Domain Account Policies Test#CredCode#$TestText = "Please check result" 
Domain Account Policies Test#CredCode#$TestStatus="Completed" 
Domain Account Policies Test#CredCode#$SumVal = "NA" 
Domain Account Policies Test#CredCode#$AnyGap = "No"
Domain Account Policies Test#CredCode#
Domain Account Policies Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Domain Account Policies Test#CredCode#{ 
Domain Account Policies Test#CredCode#    $R = Get-ADDefaultDomainPasswordPolicy -Identity $ThisDomain
Domain Account Policies Test#CredCode#    
Domain Account Policies Test#CredCode#    $ThisNow = $R.ComplexityEnabled
Domain Account Policies Test#CredCode#    $STR = "Password Complexity,"+$ThisNow+","+$ThisDomain
Domain Account Policies Test#CredCode#    Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#
Domain Account Policies Test#CredCode#    IF ($ThisNow -ne $true)
Domain Account Policies Test#CredCode#    {
Domain Account Policies Test#CredCode#        $AnyGap = "Yes"
Domain Account Policies Test#CredCode#    }
Domain Account Policies Test#CredCode#
Domain Account Policies Test#CredCode#    $ThisNow = $R.LockoutDuration  
Domain Account Policies Test#CredCode#    $STR = "Lockout Duration,"+$ThisNow+","+$ThisDomain
Domain Account Policies Test#CredCode#    Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#
Domain Account Policies Test#CredCode#    $ThisNow = $R.LockoutObservationWindow
Domain Account Policies Test#CredCode#    $STR = "Lockout Observation Window,"+$ThisNow+","+$ThisDomain
Domain Account Policies Test#CredCode#    Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#
Domain Account Policies Test#CredCode#    $ThisNow = $R.LockoutThreshold            
Domain Account Policies Test#CredCode#    $STR = "Lockout Threshold,"+$ThisNow+","+$ThisDomain
Domain Account Policies Test#CredCode#    Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#
Domain Account Policies Test#CredCode#    $ThisNow = $R.MaxPasswordAge              
Domain Account Policies Test#CredCode#    $STR = "Maximum Password Age,"+$ThisNow+","+$ThisDomain
Domain Account Policies Test#CredCode#    Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#    
Domain Account Policies Test#CredCode#    $ThisNow = $R.MinPasswordAge              
Domain Account Policies Test#CredCode#    $STR = "Minimum Password Age,"+$ThisNow+","+$ThisDomain
Domain Account Policies Test#CredCode#    Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#
Domain Account Policies Test#CredCode#    $ThisNow = $R.MinPasswordLength             
Domain Account Policies Test#CredCode#    $STR = "Minimum Password Length,"+$ThisNow+","+$ThisDomain
Domain Account Policies Test#CredCode#    Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#    
Domain Account Policies Test#CredCode#    $ThisNow = $R.PasswordHistoryCount 
Domain Account Policies Test#CredCode#    $STR = "Password History Count,"+$ThisNow+","+$ThisDomain
Domain Account Policies Test#CredCode#    Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#
Domain Account Policies Test#CredCode#}
Domain Account Policies Test#CredCode# 
Domain Account Policies Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Account Policies Test#CredCode#{
Domain Account Policies Test#CredCode#
Domain Account Policies Test#CredCode#    $TestText = " " 
Domain Account Policies Test#CredCode#    $SumVal = "" 
Domain Account Policies Test#CredCode#    $TestStatus="High" 
Domain Account Policies Test#CredCode#
Domain Account Policies Test#CredCode#}
Domain Account Policies Test#CredCode#else
Domain Account Policies Test#CredCode#{
Domain Account Policies Test#CredCode#
Domain Account Policies Test#CredCode#    $TestText = " " 
Domain Account Policies Test#CredCode#    $SumVal = "" 
Domain Account Policies Test#CredCode#    $TestStatus="Passed" 
Domain Account Policies Test#CredCode#}
Domain FGPP Policies Test#Headercode#$STR = "FGPP Name, Item, Value, AD Domain"
Domain FGPP Policies Test#Headercode#Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#
Domain FGPP Policies Test#CredCode#$TotNo=0 
Domain FGPP Policies Test#CredCode#$ItemCount=0 
Domain FGPP Policies Test#CredCode#$TestText = "Please check result" 
Domain FGPP Policies Test#CredCode#$TestStatus="Completed" 
Domain FGPP Policies Test#CredCode#$SumVal = "NA" 
Domain FGPP Policies Test#CredCode#$AnyGap = "No"
Domain FGPP Policies Test#CredCode#
Domain FGPP Policies Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Domain FGPP Policies Test#CredCode#{ 
Domain FGPP Policies Test#CredCode#    $R = Get-ADFineGrainedPasswordPolicy -Server $ThisDomain -Filter *
Domain FGPP Policies Test#CredCode#    
Domain FGPP Policies Test#CredCode#    ForEach ($Item in $R)
Domain FGPP Policies Test#CredCode#    {
Domain FGPP Policies Test#CredCode#
Domain FGPP Policies Test#CredCode#        $PolName = $R.Name
Domain FGPP Policies Test#CredCode#        
Domain FGPP Policies Test#CredCode#        $ThisNow = $R.ComplexityEnabled
Domain FGPP Policies Test#CredCode#        $STR = $PolName+","+"Password Complexity,"+$ThisNow+","+$ThisDomain
Domain FGPP Policies Test#CredCode#        Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#        
Domain FGPP Policies Test#CredCode#        IF ($ThisNow -ne $true)
Domain FGPP Policies Test#CredCode#        {
Domain FGPP Policies Test#CredCode#            $AnyGap = "Yes"
Domain FGPP Policies Test#CredCode#        }
Domain FGPP Policies Test#CredCode#
Domain FGPP Policies Test#CredCode#        $ThisNow = $R.LockoutDuration  
Domain FGPP Policies Test#CredCode#        $STR = $PolName+","+"Lockout Duration,"+$ThisNow+","+$ThisDomain
Domain FGPP Policies Test#CredCode#        Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#
Domain FGPP Policies Test#CredCode#        $ThisNow = $R.LockoutObservationWindow
Domain FGPP Policies Test#CredCode#        $STR = $PolName+","+"Lockout Observation Window,"+$ThisNow+","+$ThisDomain
Domain FGPP Policies Test#CredCode#        Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#
Domain FGPP Policies Test#CredCode#        $ThisNow = $R.LockoutThreshold            
Domain FGPP Policies Test#CredCode#        $STR = $PolName+","+"Lockout Threshold,"+$ThisNow+","+$ThisDomain
Domain FGPP Policies Test#CredCode#        Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#
Domain FGPP Policies Test#CredCode#        $ThisNow = $R.MaxPasswordAge              
Domain FGPP Policies Test#CredCode#        $STR = $PolName+","+"Maximum Password Age,"+$ThisNow+","+$ThisDomain
Domain FGPP Policies Test#CredCode#        Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#    
Domain FGPP Policies Test#CredCode#        $ThisNow = $R.MinPasswordAge              
Domain FGPP Policies Test#CredCode#        $STR = $PolName+","+"Minimum Password Age,"+$ThisNow+","+$ThisDomain
Domain FGPP Policies Test#CredCode#        Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#
Domain FGPP Policies Test#CredCode#        $ThisNow = $R.MinPasswordLength             
Domain FGPP Policies Test#CredCode#        $STR = $PolName+","+"Minimum Password Length,"+$ThisNow+","+$ThisDomain
Domain FGPP Policies Test#CredCode#        Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#    
Domain FGPP Policies Test#CredCode#        $ThisNow = $R.PasswordHistoryCount 
Domain FGPP Policies Test#CredCode#        $STR = $PolName+","+"Password History Count,"+$ThisNow+","+$ThisDomain
Domain FGPP Policies Test#CredCode#        Add-Content $TestCSVFile $STR    
Domain FGPP Policies Test#CredCode#    }
Domain FGPP Policies Test#CredCode#}
Domain FGPP Policies Test#CredCode# 
Domain FGPP Policies Test#CredCode#IF ($AnyGap -eq "Yes")
Domain FGPP Policies Test#CredCode#{
Domain FGPP Policies Test#CredCode#
Domain FGPP Policies Test#CredCode#    $TestText = " " 
Domain FGPP Policies Test#CredCode#    $SumVal = "" 
Domain FGPP Policies Test#CredCode#    $TestStatus="High" 
Domain FGPP Policies Test#CredCode#
Domain FGPP Policies Test#CredCode#}
Domain FGPP Policies Test#CredCode#else
Domain FGPP Policies Test#CredCode#{
Domain FGPP Policies Test#CredCode#
Domain FGPP Policies Test#CredCode#    $TestText = " " 
Domain FGPP Policies Test#CredCode#    $SumVal = "" 
Domain FGPP Policies Test#CredCode#    $TestStatus="Passed" 
Domain FGPP Policies Test#CredCode#}
Get AD Domain FGPP Application Test#Headercode#$STR = "FGPP Name, AD Domain, Applies To, Final Status"
Get AD Domain FGPP Application Test#Headercode#Add-Content $TestCSVFile $STR
Get AD Domain FGPP Application Test#CredCode#
Get AD Domain FGPP Application Test#CredCode#$TotNo=0 
Get AD Domain FGPP Application Test#CredCode#$ItemCount=0 
Get AD Domain FGPP Application Test#CredCode#$TestText = "Please check result" 
Get AD Domain FGPP Application Test#CredCode#$TestStatus="Completed" 
Get AD Domain FGPP Application Test#CredCode#$SumVal = "NA" 
Get AD Domain FGPP Application Test#CredCode#$AnyGap = "No"
Get AD Domain FGPP Application Test#CredCode#
Get AD Domain FGPP Application Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Get AD Domain FGPP Application Test#CredCode#{ 
Get AD Domain FGPP Application Test#CredCode#    $R = Get-ADFineGrainedPasswordPolicy -Server $ThisDomain -Filter *
Get AD Domain FGPP Application Test#CredCode#    
Get AD Domain FGPP Application Test#CredCode#    ForEach ($Item in $R)
Get AD Domain FGPP Application Test#CredCode#    {
Get AD Domain FGPP Application Test#CredCode#
Get AD Domain FGPP Application Test#CredCode#        $PolName = $R.Name
Get AD Domain FGPP Application Test#CredCode#        $AppTo = $R.AppliesTo
Get AD Domain FGPP Application Test#CredCode#        $TotCountNow = $AppTo.Count
Get AD Domain FGPP Application Test#CredCode#
Get AD Domain FGPP Application Test#CredCode#        IF ($TotCountNow -eq 0)
Get AD Domain FGPP Application Test#CredCode#        {
Get AD Domain FGPP Application Test#CredCode#            $AnyGap = "Yes"            
Get AD Domain FGPP Application Test#CredCode#            $STR = $PolName+","+$ThisDomain+","+'"'+$AppTo+'"'+", Not Applied"
Get AD Domain FGPP Application Test#CredCode#            Add-Content $TestCSVFile $STR    
Get AD Domain FGPP Application Test#CredCode#        }
Get AD Domain FGPP Application Test#CredCode#        else
Get AD Domain FGPP Application Test#CredCode#        {
Get AD Domain FGPP Application Test#CredCode#            $STR = $PolName+","+$ThisDomain+","+'"'+$AppTo+'"'+", Ok"
Get AD Domain FGPP Application Test#CredCode#            Add-Content $TestCSVFile $STR    
Get AD Domain FGPP Application Test#CredCode#        }                
Get AD Domain FGPP Application Test#CredCode#    }
Get AD Domain FGPP Application Test#CredCode#}
Get AD Domain FGPP Application Test#CredCode# 
Get AD Domain FGPP Application Test#CredCode#IF ($AnyGap -eq "Yes")
Get AD Domain FGPP Application Test#CredCode#{
Get AD Domain FGPP Application Test#CredCode#
Get AD Domain FGPP Application Test#CredCode#    $TestText = " " 
Get AD Domain FGPP Application Test#CredCode#    $SumVal = "" 
Get AD Domain FGPP Application Test#CredCode#    $TestStatus="High" 
Get AD Domain FGPP Application Test#CredCode#
Get AD Domain FGPP Application Test#CredCode#}
Get AD Domain FGPP Application Test#CredCode#else
Get AD Domain FGPP Application Test#CredCode#{
Get AD Domain FGPP Application Test#CredCode#
Get AD Domain FGPP Application Test#CredCode#    $TestText = " " 
Get AD Domain FGPP Application Test#CredCode#    $SumVal = "" 
Get AD Domain FGPP Application Test#CredCode#    $TestStatus="Passed" 
Get AD Domain FGPP Application Test#CredCode#}
Default Administrator Account Test#Headercode#$STR = "Administrator Account Name, Enabled, AD Domain, Final Status"
Default Administrator Account Test#Headercode#Add-Content $TestCSVFile $STR
Default Administrator Account Test#CredCode#
Default Administrator Account Test#CredCode#$TotNo=0 
Default Administrator Account Test#CredCode#$ItemCount=0 
Default Administrator Account Test#CredCode#$TestText = "Please check result" 
Default Administrator Account Test#CredCode#$TestStatus="Completed" 
Default Administrator Account Test#CredCode#$SumVal = "NA" 
Default Administrator Account Test#CredCode#$AnyGap = "No"
Default Administrator Account Test#CredCode#
Default Administrator Account Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Default Administrator Account Test#CredCode#{     
Default Administrator Account Test#CredCode#    $Error.Clear()
Default Administrator Account Test#CredCode#
Default Administrator Account Test#CredCode#    $R = Get-ADUser -Identity Administrator -Server $ThisDomain | Select-Object SamAccountName,Enabled
Default Administrator Account Test#CredCode#    IF ($Error.count -eq 0)
Default Administrator Account Test#CredCode#    {
Default Administrator Account Test#CredCode#        $EnaStatus = $R.Enabled
Default Administrator Account Test#CredCode#        $NameNow = $R.SamAccountName
Default Administrator Account Test#CredCode#
Default Administrator Account Test#CredCode#        $STR = $NameNow+","+$EnaStatus+","+$ThisDomain+", NOT OK"
Default Administrator Account Test#CredCode#        Add-Content $TestCSVFile $STR    
Default Administrator Account Test#CredCode#        $AnyGap = "Yes"
Default Administrator Account Test#CredCode#    }
Default Administrator Account Test#CredCode#    else
Default Administrator Account Test#CredCode#    {
Default Administrator Account Test#CredCode#        $EnaStatus="NA"
Default Administrator Account Test#CredCode#        $STR = "Default Administrator account renamed"+","+$EnaStatus+","+$ThisDomain+", OK"
Default Administrator Account Test#CredCode#        Add-Content $TestCSVFile $STR    
Default Administrator Account Test#CredCode#    }   
Default Administrator Account Test#CredCode#}
Default Administrator Account Test#CredCode# 
Default Administrator Account Test#CredCode#IF ($AnyGap -eq "Yes")
Default Administrator Account Test#CredCode#{
Default Administrator Account Test#CredCode#
Default Administrator Account Test#CredCode#    $TestText = " " 
Default Administrator Account Test#CredCode#    $SumVal = "" 
Default Administrator Account Test#CredCode#    $TestStatus="High" 
Default Administrator Account Test#CredCode#
Default Administrator Account Test#CredCode#}
Default Administrator Account Test#CredCode#else
Default Administrator Account Test#CredCode#{
Default Administrator Account Test#CredCode#
Default Administrator Account Test#CredCode#    $TestText = " " 
Default Administrator Account Test#CredCode#    $SumVal = "" 
Default Administrator Account Test#CredCode#    $TestStatus="Passed" 
Default Administrator Account Test#CredCode#}
Domain Controllers Roles and Features Test#Headercode#$STR = "Domain Controller, Total Roles, Total Features, Final Status, Data File Location"
Domain Controllers Roles and Features Test#Headercode#Add-Content $TestCSVFile $STR
Domain Controllers Roles and Features Test#CredCode#
Domain Controllers Roles and Features Test#CredCode#$TotNo=0 
Domain Controllers Roles and Features Test#CredCode#$ItemCount=0 
Domain Controllers Roles and Features Test#CredCode#$TestText = "Please check result" 
Domain Controllers Roles and Features Test#CredCode#$TestStatus="Completed" 
Domain Controllers Roles and Features Test#CredCode#$SumVal = "NA" 
Domain Controllers Roles and Features Test#CredCode#$AnyGap = "No"
Domain Controllers Roles and Features Test#CredCode#
Domain Controllers Roles and Features Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Domain Controllers Roles and Features Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Controllers Roles and Features Test#CredCode#$STR = "Domain Controller, RoleFeature Name, Feature/Role"
Domain Controllers Roles and Features Test#CredCode#Add-Content $DataFileLocation $STR
Domain Controllers Roles and Features Test#CredCode#
Domain Controllers Roles and Features Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controllers Roles and Features Test#CredCode#{     
Domain Controllers Roles and Features Test#CredCode#    $Error.Clear()
Domain Controllers Roles and Features Test#CredCode#    $AllFet = Get-WindowsFeature -ComputerName Localhost | Where-Object {$_."InstallState" -eq "Installed"} | Select-Object FeatureType,Name
Domain Controllers Roles and Features Test#CredCode#    IF ($Error.count -eq 0)
Domain Controllers Roles and Features Test#CredCode#    {
Domain Controllers Roles and Features Test#CredCode#        $TotRoles = 0
Domain Controllers Roles and Features Test#CredCode#        $TotFeatures = 0
Domain Controllers Roles and Features Test#CredCode#
Domain Controllers Roles and Features Test#CredCode#        ForEach ($Item in $AllFet)
Domain Controllers Roles and Features Test#CredCode#        {
Domain Controllers Roles and Features Test#CredCode#            IF ($Item.FeatureType -eq "Role" -or $Item.FeatureType -eq "Role Service")
Domain Controllers Roles and Features Test#CredCode#            {
Domain Controllers Roles and Features Test#CredCode#                $TotRoles++
Domain Controllers Roles and Features Test#CredCode#            }
Domain Controllers Roles and Features Test#CredCode#            IF ($Item.FeatureType -eq "Feature")
Domain Controllers Roles and Features Test#CredCode#            {
Domain Controllers Roles and Features Test#CredCode#                $TotFeatures++
Domain Controllers Roles and Features Test#CredCode#            }
Domain Controllers Roles and Features Test#CredCode#
Domain Controllers Roles and Features Test#CredCode#            $STRNew = $ItemName+","+$Item.Name+","+$Item.FeatureType
Domain Controllers Roles and Features Test#CredCode#            Add-Content $DataFileLocation $STRNew
Domain Controllers Roles and Features Test#CredCode#        }
Domain Controllers Roles and Features Test#CredCode#               
Domain Controllers Roles and Features Test#CredCode#        $STR = $ItemName+","+$TotRoles+","+$TotFeatures+",NOT OK,"+$DataFileLocation
Domain Controllers Roles and Features Test#CredCode#        Add-Content $TestCSVFile $STR    
Domain Controllers Roles and Features Test#CredCode#        $AnyGap = "Yes"
Domain Controllers Roles and Features Test#CredCode#    }
Domain Controllers Roles and Features Test#CredCode#    else
Domain Controllers Roles and Features Test#CredCode#    {
Domain Controllers Roles and Features Test#CredCode#        $EnaStatus="NA"
Domain Controllers Roles and Features Test#CredCode#        $STR = $ItemName+" ERROR: Not Reachable"+","
Domain Controllers Roles and Features Test#CredCode#        Add-Content $TestCSVFile $STR    
Domain Controllers Roles and Features Test#CredCode#    }   
Domain Controllers Roles and Features Test#CredCode#}
Domain Controllers Roles and Features Test#CredCode# 
Domain Controllers Roles and Features Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controllers Roles and Features Test#CredCode#{
Domain Controllers Roles and Features Test#CredCode#
Domain Controllers Roles and Features Test#CredCode#    $TestText = " " 
Domain Controllers Roles and Features Test#CredCode#    $SumVal = "" 
Domain Controllers Roles and Features Test#CredCode#    $TestStatus="High" 
Domain Controllers Roles and Features Test#CredCode#
Domain Controllers Roles and Features Test#CredCode#}
Domain Controllers Roles and Features Test#CredCode#else
Domain Controllers Roles and Features Test#CredCode#{
Domain Controllers Roles and Features Test#CredCode#
Domain Controllers Roles and Features Test#CredCode#    $TestText = " " 
Domain Controllers Roles and Features Test#CredCode#    $SumVal = "" 
Domain Controllers Roles and Features Test#CredCode#    $TestStatus="Passed" 
Domain Controllers Roles and Features Test#CredCode#}
Domain Organizational Unit Full Control Access Rights Test#Headercode#$STR = "Total OUs, Total Full Control Accounts, AD Domain, Final Status, Data File Location"
Domain Organizational Unit Full Control Access Rights Test#Headercode#Add-Content $TestCSVFile $STR
Domain Organizational Unit Full Control Access Rights Test#CredCode#
Domain Organizational Unit Full Control Access Rights Test#CredCode#$TotNo=0 
Domain Organizational Unit Full Control Access Rights Test#CredCode#$ItemCount=0 
Domain Organizational Unit Full Control Access Rights Test#CredCode#$TestText = "Please check result" 
Domain Organizational Unit Full Control Access Rights Test#CredCode#$TestStatus="Completed" 
Domain Organizational Unit Full Control Access Rights Test#CredCode#$SumVal = "NA" 
Domain Organizational Unit Full Control Access Rights Test#CredCode#$AnyGap = "No"
Domain Organizational Unit Full Control Access Rights Test#CredCode#
Domain Organizational Unit Full Control Access Rights Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Domain Organizational Unit Full Control Access Rights Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Organizational Unit Full Control Access Rights Test#CredCode#$STR = "OU Name, Full Control Account, AD Domain"
Domain Organizational Unit Full Control Access Rights Test#CredCode#Add-Content $DataFileLocation $STR
Domain Organizational Unit Full Control Access Rights Test#CredCode#
Domain Organizational Unit Full Control Access Rights Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Domain Organizational Unit Full Control Access Rights Test#CredCode#{     
Domain Organizational Unit Full Control Access Rights Test#CredCode#
Domain Organizational Unit Full Control Access Rights Test#CredCode#    $AllOUs = Get-ADOrganizationalUnit -Filter * -Server $ThisDomain
Domain Organizational Unit Full Control Access Rights Test#CredCode#    $TotOUsNow = $AllOUs.Count
Domain Organizational Unit Full Control Access Rights Test#CredCode#    $TotWithFullControlsCount = 0
Domain Organizational Unit Full Control Access Rights Test#CredCode#
Domain Organizational Unit Full Control Access Rights Test#CredCode#    ForEach ($EachOU in $AllOUs)
Domain Organizational Unit Full Control Access Rights Test#CredCode#    {
Domain Organizational Unit Full Control Access Rights Test#CredCode#        $ThisDName = $EachOU.DistinguishedName
Domain Organizational Unit Full Control Access Rights Test#CredCode#        $R=(Get-ACL "AD:$((Get-ADOrganizationalUnit -Server $ThisDomain -Identity "$ThisDName").distinguishedname)").access | Select-Object IdentityReference,ActiveDirectoryRights
Domain Organizational Unit Full Control Access Rights Test#CredCode#                
Domain Organizational Unit Full Control Access Rights Test#CredCode#        ForEach ($Perms in $R)
Domain Organizational Unit Full Control Access Rights Test#CredCode#        {
Domain Organizational Unit Full Control Access Rights Test#CredCode#            $PermNow = $Perms.ActiveDirectoryRights
Domain Organizational Unit Full Control Access Rights Test#CredCode#            $IDRef = $Perms.IdentityReference
Domain Organizational Unit Full Control Access Rights Test#CredCode#
Domain Organizational Unit Full Control Access Rights Test#CredCode#            IF ($PermNow -eq "GenericAll")
Domain Organizational Unit Full Control Access Rights Test#CredCode#            {
Domain Organizational Unit Full Control Access Rights Test#CredCode#                $TotWithFullControlsCount++
Domain Organizational Unit Full Control Access Rights Test#CredCode#                $AnyGap = "Yes"
Domain Organizational Unit Full Control Access Rights Test#CredCode#		      $RemovedComma = $ThisDName.replace(",", " ")			
Domain Organizational Unit Full Control Access Rights Test#CredCode#                $STR = '"'+$RemovedComma+'"'+$IDRef+","+$ThisDomain
Domain Organizational Unit Full Control Access Rights Test#CredCode#                Add-Content $DataFileLocation $STR
Domain Organizational Unit Full Control Access Rights Test#CredCode#            }
Domain Organizational Unit Full Control Access Rights Test#CredCode#        }
Domain Organizational Unit Full Control Access Rights Test#CredCode#    }
Domain Organizational Unit Full Control Access Rights Test#CredCode#
Domain Organizational Unit Full Control Access Rights Test#CredCode#    IF ($TotWithFullControlsCount -eq 0)
Domain Organizational Unit Full Control Access Rights Test#CredCode#    {
Domain Organizational Unit Full Control Access Rights Test#CredCode#        $FinalStatusNow = "Ok"
Domain Organizational Unit Full Control Access Rights Test#CredCode#    }
Domain Organizational Unit Full Control Access Rights Test#CredCode#    else
Domain Organizational Unit Full Control Access Rights Test#CredCode#    {
Domain Organizational Unit Full Control Access Rights Test#CredCode#        $FinalStatusNow = "NOT OK"
Domain Organizational Unit Full Control Access Rights Test#CredCode#    }
Domain Organizational Unit Full Control Access Rights Test#CredCode#
Domain Organizational Unit Full Control Access Rights Test#CredCode#    $STR = $TotOUsNow.ToString()+","+$TotWithFullControlsCount.ToString()+","+$ThisDomain+","+$FinalStatusNow+","+$DataFileLocation
Domain Organizational Unit Full Control Access Rights Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Organizational Unit Full Control Access Rights Test#CredCode#   
Domain Organizational Unit Full Control Access Rights Test#CredCode#}
Domain Organizational Unit Full Control Access Rights Test#CredCode# 
Domain Organizational Unit Full Control Access Rights Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Organizational Unit Full Control Access Rights Test#CredCode#{
Domain Organizational Unit Full Control Access Rights Test#CredCode#
Domain Organizational Unit Full Control Access Rights Test#CredCode#    $TestText = " " 
Domain Organizational Unit Full Control Access Rights Test#CredCode#    $SumVal = "" 
Domain Organizational Unit Full Control Access Rights Test#CredCode#    $TestStatus="High" 
Domain Organizational Unit Full Control Access Rights Test#CredCode#
Domain Organizational Unit Full Control Access Rights Test#CredCode#}
Domain Organizational Unit Full Control Access Rights Test#CredCode#else
Domain Organizational Unit Full Control Access Rights Test#CredCode#{
Domain Organizational Unit Full Control Access Rights Test#CredCode#
Domain Organizational Unit Full Control Access Rights Test#CredCode#    $TestText = " " 
Domain Organizational Unit Full Control Access Rights Test#CredCode#    $SumVal = "" 
Domain Organizational Unit Full Control Access Rights Test#CredCode#    $TestStatus="Passed" 
Domain Organizational Unit Full Control Access Rights Test#CredCode#}
Domain Organizational Unit Everyone Full Control Access Rights Test#Headercode#$STR = "OU Name, Has EVERYONE Full Control?, AD Domain, Final Status"
Domain Organizational Unit Everyone Full Control Access Rights Test#Headercode#Add-Content $TestCSVFile $STR
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#$TotNo=0 
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#$ItemCount=0 
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#$TestText = "Please check result" 
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#$TestStatus="Completed" 
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#$SumVal = "NA" 
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#$AnyGap = "No"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#{     
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#    $AllOUs = Get-ADOrganizationalUnit -Filter * -Server $ThisDomain
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#    $TotOUsNow = $AllOUs.Count
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#    $TotWithFullControlsCount = 0
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#    ForEach ($EachOU in $AllOUs)
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#    {
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        $ThisDName = $EachOU.DistinguishedName
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        $DispName = $EachOU.Name
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        $R=(Get-ACL "AD:$((Get-ADOrganizationalUnit -Server $ThisDomain -Identity "$ThisDName").distinguishedname)").access | Select-Object IdentityReference,ActiveDirectoryRights
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        $ThisDName
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#      
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        $FoundOrNot = "No"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        ForEach ($Perms in $R)
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        {
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#            $PermNow = $Perms.ActiveDirectoryRights
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#            $IDRef = $Perms.IdentityReference
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#            IF ($PermNow -eq "GenericAll" -and $IDRef -eq "Everyone")
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#            {        
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#                $FoundOrNot = "Yes"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#                $AnyGap = "Yes"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#                break
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#            }
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        }
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        IF ($FoundOrNot -eq "Yes")
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        {
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#            $STR = $DispName+",Yes,"+$ThisDomain+",NOT OK"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#            Add-Content $TestCSVFile $STR       
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        }
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        else
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        {            
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#            $STR = $DispName+",NO,"+$ThisDomain+",OK"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#            Add-Content $TestCSVFile $STR           
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#        }
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#    }
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#   
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#}
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode# 
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#{
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#    $TestText = " " 
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#    $SumVal = "" 
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#    $TestStatus="High" 
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#}
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#else
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#{
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#    $TestText = " " 
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#    $SumVal = "" 
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#    $TestStatus="Passed" 
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#}
Domain Controller Event Log Size Test#Headercode#$STR = "Domain Controller, Event Log, Maximum File Size in MB, Final Status"
Domain Controller Event Log Size Test#Headercode#Add-Content $TestCSVFile $STR
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#$TotNo=0 
Domain Controller Event Log Size Test#CredCode#$ItemCount=0 
Domain Controller Event Log Size Test#CredCode#$TestText = "Please check result" 
Domain Controller Event Log Size Test#CredCode#$TestStatus="Completed" 
Domain Controller Event Log Size Test#CredCode#$SumVal = "NA" 
Domain Controller Event Log Size Test#CredCode#$AnyGap = "No"
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#$DCLogs="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCLogs.DPC"
Domain Controller Event Log Size Test#CredCode#$DCLogCSVNow = Import-CSV $DCLogs -Delimiter ";"
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Event Log Size Test#CredCode#{     
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#    ForEach ($ThisLog in $DCLogCSVNow)
Domain Controller Event Log Size Test#CredCode#    {
Domain Controller Event Log Size Test#CredCode#        $ThisLogToCheck = $ThisLog.EventLogName
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#        $Error.Clear()
Domain Controller Event Log Size Test#CredCode#        $R=Get-WmiObject Win32_NTEventlogFile -ComputerName $ItemName | where LogFileName -EQ "$ThisLogToCheck" | Select-Object MaxFileSize, Archive, OverWritePolicy
Domain Controller Event Log Size Test#CredCode#        IF ($Error.count -eq 0)
Domain Controller Event Log Size Test#CredCode#        {
Domain Controller Event Log Size Test#CredCode#            ForEach ($Item in $R)
Domain Controller Event Log Size Test#CredCode#            {
Domain Controller Event Log Size Test#CredCode#                $SizeNow = $Item.MaxFileSize
Domain Controller Event Log Size Test#CredCode#                $AStatus = $Item.Archive
Domain Controller Event Log Size Test#CredCode#                $OPolicy = $Item.OverWritePolicy
Domain Controller Event Log Size Test#CredCode#                
Domain Controller Event Log Size Test#CredCode#                $SizeInMB = $SizeNow/1024/1024
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#                $FinalStatus = "Ok"
Domain Controller Event Log Size Test#CredCode#                IF ($SizeInMB -lt 10)
Domain Controller Event Log Size Test#CredCode#                {
Domain Controller Event Log Size Test#CredCode#                    $FinalStatus = "Please check why Event Log Maximum Size is set to less than 10 MB."
Domain Controller Event Log Size Test#CredCode#                    $AnyGap = "Yes"
Domain Controller Event Log Size Test#CredCode#                }
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#                $STR = $ItemName+","+$ThisLogToCheck+","+$SizeInMB+","+$FinalStatus
Domain Controller Event Log Size Test#CredCode#                Add-Content $TestCSVFile $STR                
Domain Controller Event Log Size Test#CredCode#            }
Domain Controller Event Log Size Test#CredCode#        }    
Domain Controller Event Log Size Test#CredCode#        else
Domain Controller Event Log Size Test#CredCode#        {
Domain Controller Event Log Size Test#CredCode#            $EnaStatus="NA"
Domain Controller Event Log Size Test#CredCode#            $STR = $ItemName+" ERROR: Not Reachable"+","
Domain Controller Event Log Size Test#CredCode#            Add-Content $TestCSVFile $STR    
Domain Controller Event Log Size Test#CredCode#        }   
Domain Controller Event Log Size Test#CredCode#    }
Domain Controller Event Log Size Test#CredCode#}
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Event Log Size Test#CredCode#{
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#    $TestText = " " 
Domain Controller Event Log Size Test#CredCode#    $SumVal = "" 
Domain Controller Event Log Size Test#CredCode#    $TestStatus="High" 
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#}
Domain Controller Event Log Size Test#CredCode#else
Domain Controller Event Log Size Test#CredCode#{
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#    $TestText = " " 
Domain Controller Event Log Size Test#CredCode#    $SumVal = "" 
Domain Controller Event Log Size Test#CredCode#    $TestStatus="Passed" 
Domain Controller Event Log Size Test#CredCode#}
Domain Controller Event Log Config Test#Headercode#$STR = "Domain Controller, Event Log, Archive Status, Overwrite Policy, Maximum File Size in MB"
Domain Controller Event Log Config Test#Headercode#Add-Content $TestCSVFile $STR
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#$TotNo=0 
Domain Controller Event Log Config Test#CredCode#$ItemCount=0 
Domain Controller Event Log Config Test#CredCode#$TestText = "Please check result" 
Domain Controller Event Log Config Test#CredCode#$TestStatus="Completed" 
Domain Controller Event Log Config Test#CredCode#$SumVal = "NA" 
Domain Controller Event Log Config Test#CredCode#$AnyGap = "No"
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#$DCLogs="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCLogs.DPC"
Domain Controller Event Log Config Test#CredCode#$DCLogCSVNow = Import-CSV $DCLogs -Delimiter ";"
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Event Log Config Test#CredCode#{     
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#    ForEach ($ThisLog in $DCLogCSVNow)
Domain Controller Event Log Config Test#CredCode#    {
Domain Controller Event Log Config Test#CredCode#        $ThisLogToCheck = $ThisLog.EventLogName
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#        $Error.Clear()
Domain Controller Event Log Config Test#CredCode#        $R=Get-WmiObject Win32_NTEventlogFile -ComputerName $ItemName | where LogFileName -EQ "$ThisLogToCheck" | Select-Object MaxFileSize, Archive, OverWritePolicy
Domain Controller Event Log Config Test#CredCode#        IF ($Error.count -eq 0)
Domain Controller Event Log Config Test#CredCode#        {
Domain Controller Event Log Config Test#CredCode#            ForEach ($Item in $R)
Domain Controller Event Log Config Test#CredCode#            {
Domain Controller Event Log Config Test#CredCode#                $SizeNow = $Item.MaxFileSize
Domain Controller Event Log Config Test#CredCode#                $SizeInMB = $SizeNow/1024/1024
Domain Controller Event Log Config Test#CredCode#                $AStatus = $Item.Archive
Domain Controller Event Log Config Test#CredCode#                $OPolicy = $Item.OverWritePolicy
Domain Controller Event Log Config Test#CredCode#                
Domain Controller Event Log Config Test#CredCode#                $STR = $ItemName+","+$ThisLogToCheck+","+$AStatus+","+$OPolicy+","+$SizeInMB+","
Domain Controller Event Log Config Test#CredCode#                Add-Content $TestCSVFile $STR                
Domain Controller Event Log Config Test#CredCode#            }
Domain Controller Event Log Config Test#CredCode#        }    
Domain Controller Event Log Config Test#CredCode#        else
Domain Controller Event Log Config Test#CredCode#        {
Domain Controller Event Log Config Test#CredCode#            $EnaStatus="NA"
Domain Controller Event Log Config Test#CredCode#            $STR = $ItemName+" ERROR: Not Reachable"+","
Domain Controller Event Log Config Test#CredCode#            Add-Content $TestCSVFile $STR    
Domain Controller Event Log Config Test#CredCode#        }   
Domain Controller Event Log Config Test#CredCode#    }
Domain Controller Event Log Config Test#CredCode#}
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#$AnyGap = "Yes"
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Event Log Config Test#CredCode#{
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#    $TestText = "Please ensure Event log Configuration is consistent." 
Domain Controller Event Log Config Test#CredCode#    $SumVal = "" 
Domain Controller Event Log Config Test#CredCode#    $TestStatus="Low" 
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#}
Domain Controller Event Log Config Test#CredCode#else
Domain Controller Event Log Config Test#CredCode#{
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#    $TestText = " " 
Domain Controller Event Log Config Test#CredCode#    $SumVal = "" 
Domain Controller Event Log Config Test#CredCode#    $TestStatus="Passed" 
Domain Controller Event Log Config Test#CredCode#}
Domain Controller SSL Test#Headercode#$STR = "Domain Controller, Is SSL Enabled?, Final Status"
Domain Controller SSL Test#Headercode#Add-Content $TestCSVFile $STR
Domain Controller SSL Test#CredCode#
Domain Controller SSL Test#CredCode#$TotNo=0 
Domain Controller SSL Test#CredCode#$ItemCount=0 
Domain Controller SSL Test#CredCode#$TestText = "Please check result" 
Domain Controller SSL Test#CredCode#$TestStatus="Completed" 
Domain Controller SSL Test#CredCode#$SumVal = "NA" 
Domain Controller SSL Test#CredCode#$AnyGap = "No"
Domain Controller SSL Test#CredCode#
Domain Controller SSL Test#CredCode#$DCLogs="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCLogs.DPC"
Domain Controller SSL Test#CredCode#$DCLogCSVNow = Import-CSV $DCLogs -Delimiter ";"
Domain Controller SSL Test#CredCode#
Domain Controller SSL Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller SSL Test#CredCode#{     
Domain Controller SSL Test#CredCode#
Domain Controller SSL Test#CredCode#    $SSLOrNot = ""
Domain Controller SSL Test#CredCode#    
Domain Controller SSL Test#CredCode#    $LDAPS = [ADSI]"LDAP://$($ItemName):636"
Domain Controller SSL Test#CredCode#    try {
Domain Controller SSL Test#CredCode#        $Connection = [adsi]($LDAPS)
Domain Controller SSL Test#CredCode#    } Catch {
Domain Controller SSL Test#CredCode#    }
Domain Controller SSL Test#CredCode#    If ($Connection.Path) {
Domain Controller SSL Test#CredCode#        $SSLOrNot="Yes"
Domain Controller SSL Test#CredCode#    } Else {
Domain Controller SSL Test#CredCode#        $SSLOrNot="Not Enabled"
Domain Controller SSL Test#CredCode#        $AnyGap = "Yes"
Domain Controller SSL Test#CredCode#    }
Domain Controller SSL Test#CredCode#
Domain Controller SSL Test#CredCode#    IF ($SSLOrNot -eq "Not Enabled")
Domain Controller SSL Test#CredCode#    {
Domain Controller SSL Test#CredCode#        $STR = $ItemName+","+$SSLOrNot+", Not Ok"
Domain Controller SSL Test#CredCode#        Add-Content $TestCSVFile $STR    
Domain Controller SSL Test#CredCode#    }
Domain Controller SSL Test#CredCode#    IF ($SSLOrNot -eq "Yes")
Domain Controller SSL Test#CredCode#    {
Domain Controller SSL Test#CredCode#        $STR = $ItemName+","+$SSLOrNot+", Ok"
Domain Controller SSL Test#CredCode#        Add-Content $TestCSVFile $STR    
Domain Controller SSL Test#CredCode#    }
Domain Controller SSL Test#CredCode#
Domain Controller SSL Test#CredCode#}
Domain Controller SSL Test#CredCode#
Domain Controller SSL Test#CredCode#
Domain Controller SSL Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller SSL Test#CredCode#{
Domain Controller SSL Test#CredCode#
Domain Controller SSL Test#CredCode#    $TestText = "" 
Domain Controller SSL Test#CredCode#    $SumVal = "" 
Domain Controller SSL Test#CredCode#    $TestStatus="High" 
Domain Controller SSL Test#CredCode#
Domain Controller SSL Test#CredCode#}
Domain Controller SSL Test#CredCode#else
Domain Controller SSL Test#CredCode#{
Domain Controller SSL Test#CredCode#
Domain Controller SSL Test#CredCode#    $TestText = " " 
Domain Controller SSL Test#CredCode#    $SumVal = "" 
Domain Controller SSL Test#CredCode#    $TestStatus="Passed" 
Domain Controller SSL Test#CredCode#}
Domain Controllers Internet Access Test#Headercode#$STR = "Domain Controller, Internet Accessible?, Final Status"
Domain Controllers Internet Access Test#Headercode#Add-Content $TestCSVFile $STR
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#$TotNo=0 
Domain Controllers Internet Access Test#CredCode#$ItemCount=0 
Domain Controllers Internet Access Test#CredCode#$TestText = "Please check result" 
Domain Controllers Internet Access Test#CredCode#$TestStatus="Completed" 
Domain Controllers Internet Access Test#CredCode#$SumVal = "NA" 
Domain Controllers Internet Access Test#CredCode#$AnyGap = "No"
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controllers Internet Access Test#CredCode#{     
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#    $IntOnOrNot = ""
Domain Controllers Internet Access Test#CredCode#    
Domain Controllers Internet Access Test#CredCode#    $Error.Clear()
Domain Controllers Internet Access Test#CredCode#    $NetStatus = Invoke-Command -ComputerName $ItemName -Script { Test-Connection www.google.com } 
Domain Controllers Internet Access Test#CredCode#    IF ($Error.Count -eq 0)
Domain Controllers Internet Access Test#CredCode#    {
Domain Controllers Internet Access Test#CredCode#        $TotNetCount = $NetStatus.Count
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#        IF ($TotNetCount -eq 4)
Domain Controllers Internet Access Test#CredCode#        {            
Domain Controllers Internet Access Test#CredCode#            $STR = $ItemName+", Internet is Accessible from Domain Controller, NOT OK"
Domain Controllers Internet Access Test#CredCode#            Add-Content $TestCSVFile $STR    
Domain Controllers Internet Access Test#CredCode#            $AnyGap = "Yes"
Domain Controllers Internet Access Test#CredCode#        }
Domain Controllers Internet Access Test#CredCode#        else
Domain Controllers Internet Access Test#CredCode#        {
Domain Controllers Internet Access Test#CredCode#            $STR = $ItemName+", Not Accessible, OK"
Domain Controllers Internet Access Test#CredCode#            Add-Content $TestCSVFile $STR    
Domain Controllers Internet Access Test#CredCode#        }
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#    }
Domain Controllers Internet Access Test#CredCode#    else
Domain Controllers Internet Access Test#CredCode#    {
Domain Controllers Internet Access Test#CredCode#        $STR = $ItemName+", ERROR: NOT Reachable"
Domain Controllers Internet Access Test#CredCode#        Add-Content $TestCSVFile $STR    
Domain Controllers Internet Access Test#CredCode#    }
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#}
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#$AnyGap = "Yes"
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controllers Internet Access Test#CredCode#{
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#    $TestText = "Please ensure Internet is blocked on Domain Controllers." 
Domain Controllers Internet Access Test#CredCode#    $SumVal = "" 
Domain Controllers Internet Access Test#CredCode#    $TestStatus="High" 
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#}
Domain Controllers Internet Access Test#CredCode#else
Domain Controllers Internet Access Test#CredCode#{
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#    $TestText = " " 
Domain Controllers Internet Access Test#CredCode#    $SumVal = "" 
Domain Controllers Internet Access Test#CredCode#    $TestStatus="Passed" 
Domain Controllers Internet Access Test#CredCode#}
Domain Computers Bad Logon Attempts Test#Headercode#$STR = "Total Computers, Total Computers Sending Bad Logon Attempts, AD Domain, Data File Location"
Domain Computers Bad Logon Attempts Test#Headercode#Add-Content $TestCSVFile $STR
Domain Computers Bad Logon Attempts Test#CredCode#
Domain Computers Bad Logon Attempts Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Domain Computers Bad Logon Attempts Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Computers Bad Logon Attempts Test#CredCode#$STR = "Computer Location, BadLogonCount"
Domain Computers Bad Logon Attempts Test#CredCode#Add-Content $DataFileLocation $STR
Domain Computers Bad Logon Attempts Test#CredCode#
Domain Computers Bad Logon Attempts Test#CredCode#$TotNo=0 
Domain Computers Bad Logon Attempts Test#CredCode#$ItemCount=0 
Domain Computers Bad Logon Attempts Test#CredCode#$TestText = "Please check result" 
Domain Computers Bad Logon Attempts Test#CredCode#$TestStatus="Completed" 
Domain Computers Bad Logon Attempts Test#CredCode#$SumVal = "NA" 
Domain Computers Bad Logon Attempts Test#CredCode#$AnyGap = "No"
Domain Computers Bad Logon Attempts Test#CredCode#
Domain Computers Bad Logon Attempts Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Domain Computers Bad Logon Attempts Test#CredCode#{     
Domain Computers Bad Logon Attempts Test#CredCode#    
Domain Computers Bad Logon Attempts Test#CredCode#    $AllComps = Get-ADComputer -Filter * -Properties BadLogonCount,CanonicalName -Server $ThisDomain
Domain Computers Bad Logon Attempts Test#CredCode#    $TotCompsNow = $AllComps.CanonicalName.Count
Domain Computers Bad Logon Attempts Test#CredCode#    $TotWithBadAttempts = 0
Domain Computers Bad Logon Attempts Test#CredCode#
Domain Computers Bad Logon Attempts Test#CredCode#    ForEach ($Item in $AllComps)
Domain Computers Bad Logon Attempts Test#CredCode#    {
Domain Computers Bad Logon Attempts Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Computers Bad Logon Attempts Test#CredCode#        $BadNumber = $Item.BadLogonCount
Domain Computers Bad Logon Attempts Test#CredCode#
Domain Computers Bad Logon Attempts Test#CredCode#        IF ($BadNumber -eq 0)
Domain Computers Bad Logon Attempts Test#CredCode#        {
Domain Computers Bad Logon Attempts Test#CredCode#        }
Domain Computers Bad Logon Attempts Test#CredCode#        else
Domain Computers Bad Logon Attempts Test#CredCode#        {
Domain Computers Bad Logon Attempts Test#CredCode#            $AnyGap = "Yes"
Domain Computers Bad Logon Attempts Test#CredCode#            $TotWithBadAttempts++
Domain Computers Bad Logon Attempts Test#CredCode#            $RemovedComma = $ThisDName.replace(",", " ")
Domain Computers Bad Logon Attempts Test#CredCode#            $STR = $RemovedComma+","+$BadNumber
Domain Computers Bad Logon Attempts Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Computers Bad Logon Attempts Test#CredCode#        }
Domain Computers Bad Logon Attempts Test#CredCode#    }
Domain Computers Bad Logon Attempts Test#CredCode#   
Domain Computers Bad Logon Attempts Test#CredCode#   $STR = $TotCompsNow.ToString()+","+$TotWithBadAttempts.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Computers Bad Logon Attempts Test#CredCode#   Add-Content $TestCSVFile $STR       
Domain Computers Bad Logon Attempts Test#CredCode#}
Domain Computers Bad Logon Attempts Test#CredCode# 
Domain Computers Bad Logon Attempts Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Computers Bad Logon Attempts Test#CredCode#{
Domain Computers Bad Logon Attempts Test#CredCode#
Domain Computers Bad Logon Attempts Test#CredCode#    $TestText = " " 
Domain Computers Bad Logon Attempts Test#CredCode#    $SumVal = "" 
Domain Computers Bad Logon Attempts Test#CredCode#    $TestStatus="High" 
Domain Computers Bad Logon Attempts Test#CredCode#
Domain Computers Bad Logon Attempts Test#CredCode#}
Domain Computers Bad Logon Attempts Test#CredCode#else
Domain Computers Bad Logon Attempts Test#CredCode#{
Domain Computers Bad Logon Attempts Test#CredCode#
Domain Computers Bad Logon Attempts Test#CredCode#    $TestText = " " 
Domain Computers Bad Logon Attempts Test#CredCode#    $SumVal = "" 
Domain Computers Bad Logon Attempts Test#CredCode#    $TestStatus="Passed" 
Domain Computers Bad Logon Attempts Test#CredCode#}
Domain Users Bad Logon Attempts Test#Headercode#$STR = "Total Users, Total Users Sending Bad Logon Attempts, AD Domain, Data File Location"
Domain Users Bad Logon Attempts Test#Headercode#Add-Content $TestCSVFile $STR
Domain Users Bad Logon Attempts Test#CredCode#
Domain Users Bad Logon Attempts Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Domain Users Bad Logon Attempts Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Users Bad Logon Attempts Test#CredCode#$STR = "User Location, BadLogonCount"
Domain Users Bad Logon Attempts Test#CredCode#Add-Content $DataFileLocation $STR
Domain Users Bad Logon Attempts Test#CredCode#
Domain Users Bad Logon Attempts Test#CredCode#$TotNo=0 
Domain Users Bad Logon Attempts Test#CredCode#$ItemCount=0 
Domain Users Bad Logon Attempts Test#CredCode#$TestText = "Please check result" 
Domain Users Bad Logon Attempts Test#CredCode#$TestStatus="Completed" 
Domain Users Bad Logon Attempts Test#CredCode#$SumVal = "NA" 
Domain Users Bad Logon Attempts Test#CredCode#$AnyGap = "No"
Domain Users Bad Logon Attempts Test#CredCode#
Domain Users Bad Logon Attempts Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Domain Users Bad Logon Attempts Test#CredCode#{     
Domain Users Bad Logon Attempts Test#CredCode#    
Domain Users Bad Logon Attempts Test#CredCode#    $AllComps = Get-ADUser -Filter * -Properties BadLogonCount,CanonicalName -Server $ThisDomain
Domain Users Bad Logon Attempts Test#CredCode#    $TotCompsNow = $AllComps.CanonicalName.Count
Domain Users Bad Logon Attempts Test#CredCode#    $TotWithBadAttempts = 0
Domain Users Bad Logon Attempts Test#CredCode#
Domain Users Bad Logon Attempts Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Bad Logon Attempts Test#CredCode#    {
Domain Users Bad Logon Attempts Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Bad Logon Attempts Test#CredCode#        $BadNumber = $Item.BadLogonCount
Domain Users Bad Logon Attempts Test#CredCode#
Domain Users Bad Logon Attempts Test#CredCode#        IF ($BadNumber -eq 0)
Domain Users Bad Logon Attempts Test#CredCode#        {
Domain Users Bad Logon Attempts Test#CredCode#        }
Domain Users Bad Logon Attempts Test#CredCode#        else
Domain Users Bad Logon Attempts Test#CredCode#        {
Domain Users Bad Logon Attempts Test#CredCode#            $AnyGap = "Yes"
Domain Users Bad Logon Attempts Test#CredCode#            $TotWithBadAttempts++
Domain Users Bad Logon Attempts Test#CredCode#            $RemovedComma = $ThisDName.replace(",", " ")
Domain Users Bad Logon Attempts Test#CredCode#            $STR = $RemovedComma+","+$BadNumber
Domain Users Bad Logon Attempts Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Bad Logon Attempts Test#CredCode#        }
Domain Users Bad Logon Attempts Test#CredCode#    }
Domain Users Bad Logon Attempts Test#CredCode#   
Domain Users Bad Logon Attempts Test#CredCode#   $STR = $TotCompsNow.ToString()+","+$TotWithBadAttempts.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Bad Logon Attempts Test#CredCode#   Add-Content $TestCSVFile $STR       
Domain Users Bad Logon Attempts Test#CredCode#}
Domain Users Bad Logon Attempts Test#CredCode# 
Domain Users Bad Logon Attempts Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Users Bad Logon Attempts Test#CredCode#{
Domain Users Bad Logon Attempts Test#CredCode#
Domain Users Bad Logon Attempts Test#CredCode#    $TestText = " " 
Domain Users Bad Logon Attempts Test#CredCode#    $SumVal = "" 
Domain Users Bad Logon Attempts Test#CredCode#    $TestStatus="High" 
Domain Users Bad Logon Attempts Test#CredCode#
Domain Users Bad Logon Attempts Test#CredCode#}
Domain Users Bad Logon Attempts Test#CredCode#else
Domain Users Bad Logon Attempts Test#CredCode#{
Domain Users Bad Logon Attempts Test#CredCode#
Domain Users Bad Logon Attempts Test#CredCode#    $TestText = " " 
Domain Users Bad Logon Attempts Test#CredCode#    $SumVal = "" 
Domain Users Bad Logon Attempts Test#CredCode#    $TestStatus="Passed" 
Domain Users Bad Logon Attempts Test#CredCode#}
AD Domain Admin Failed Logon Attempts#Headercode#$STR = "Total Admins, Total Admins Sending Bad Logon Attempts, AD Domain, Data File Location"
AD Domain Admin Failed Logon Attempts#Headercode#Add-Content $TestCSVFile $STR
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
AD Domain Admin Failed Logon Attempts#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
AD Domain Admin Failed Logon Attempts#CredCode#$STR = "User Location, BadLogonCount"
AD Domain Admin Failed Logon Attempts#CredCode#Add-Content $DataFileLocation $STR
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#$AllAdmins=$CurrentLoc+"\Data\"+$UniqueTest+"_Admins.CSV"
AD Domain Admin Failed Logon Attempts#CredCode#Remove-Item $AllAdmins -ErrorAction SilentlyContinue
AD Domain Admin Failed Logon Attempts#CredCode#$STR = "Admin, In Domain"
AD Domain Admin Failed Logon Attempts#CredCode#Add-Content $AllAdmins $STR
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
AD Domain Admin Failed Logon Attempts#CredCode#{
AD Domain Admin Failed Logon Attempts#CredCode#    $RAllAdmins = Get-ADGroupMember -Identity "Domain Admins" -Server $ThisDomain | Select-Object Name
AD Domain Admin Failed Logon Attempts#CredCode#    ForEach ($Item in $RAllAdmins)
AD Domain Admin Failed Logon Attempts#CredCode#    {
AD Domain Admin Failed Logon Attempts#CredCode#        $STR = $Item.Name+","+$ThisDomain
AD Domain Admin Failed Logon Attempts#CredCode#        Add-Content $AllAdmins $STR
AD Domain Admin Failed Logon Attempts#CredCode#    }
AD Domain Admin Failed Logon Attempts#CredCode#}
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#$CSVAdmin = Import-CSV $AllAdmins
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#$TotNo=0 
AD Domain Admin Failed Logon Attempts#CredCode#$ItemCount=0 
AD Domain Admin Failed Logon Attempts#CredCode#$TestText = "Please check result" 
AD Domain Admin Failed Logon Attempts#CredCode#$TestStatus="Completed" 
AD Domain Admin Failed Logon Attempts#CredCode#$SumVal = "NA" 
AD Domain Admin Failed Logon Attempts#CredCode#$AnyGap = "No"
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
AD Domain Admin Failed Logon Attempts#CredCode#{     
AD Domain Admin Failed Logon Attempts#CredCode#    
AD Domain Admin Failed Logon Attempts#CredCode#    $AllComps = Get-ADUser -Filter * -Properties BadLogonCount,CanonicalName,Name -Server $ThisDomain
AD Domain Admin Failed Logon Attempts#CredCode#    $TotCompsNow = $AllComps.CanonicalName.Count
AD Domain Admin Failed Logon Attempts#CredCode#    $TotWithBadAttempts = 0
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#    ForEach ($Item in $AllComps)
AD Domain Admin Failed Logon Attempts#CredCode#    {
AD Domain Admin Failed Logon Attempts#CredCode#        $ThisDName = $Item.CanonicalName
AD Domain Admin Failed Logon Attempts#CredCode#        $BadNumber = $Item.BadLogonCount
AD Domain Admin Failed Logon Attempts#CredCode#        $ThisUserName = $Item.Name
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#        IF ($BadNumber -eq 0)
AD Domain Admin Failed Logon Attempts#CredCode#        {
AD Domain Admin Failed Logon Attempts#CredCode#        }
AD Domain Admin Failed Logon Attempts#CredCode#        else
AD Domain Admin Failed Logon Attempts#CredCode#        {            
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#            $FoundOrNot = "No"
AD Domain Admin Failed Logon Attempts#CredCode#            ForEach ($ItemAdmin in $CSVAdmin)
AD Domain Admin Failed Logon Attempts#CredCode#            {
AD Domain Admin Failed Logon Attempts#CredCode#                IF ($ItemAdmin.Admin -eq $ThisUserName)
AD Domain Admin Failed Logon Attempts#CredCode#                {
AD Domain Admin Failed Logon Attempts#CredCode#                    $FoundOrNot = "Yes"
AD Domain Admin Failed Logon Attempts#CredCode#                    break
AD Domain Admin Failed Logon Attempts#CredCode#                }
AD Domain Admin Failed Logon Attempts#CredCode#            }
AD Domain Admin Failed Logon Attempts#CredCode#            
AD Domain Admin Failed Logon Attempts#CredCode#            IF ($FoundOrNot -eq "Yes")
AD Domain Admin Failed Logon Attempts#CredCode#            {
AD Domain Admin Failed Logon Attempts#CredCode#                $AnyGap = "Yes"
AD Domain Admin Failed Logon Attempts#CredCode#                $TotWithBadAttempts++
AD Domain Admin Failed Logon Attempts#CredCode#                $STR = $ThisDName+","+$BadNumber
AD Domain Admin Failed Logon Attempts#CredCode#                Add-Content $DataFileLocation $STR       
AD Domain Admin Failed Logon Attempts#CredCode#            }
AD Domain Admin Failed Logon Attempts#CredCode#        }
AD Domain Admin Failed Logon Attempts#CredCode#    }
AD Domain Admin Failed Logon Attempts#CredCode#   
AD Domain Admin Failed Logon Attempts#CredCode#   $STR = $TotCompsNow.ToString()+","+$TotWithBadAttempts.ToString()+","+$ThisDomain+","+$DataFileLocation
AD Domain Admin Failed Logon Attempts#CredCode#   Add-Content $TestCSVFile $STR       
AD Domain Admin Failed Logon Attempts#CredCode#}
AD Domain Admin Failed Logon Attempts#CredCode# 
AD Domain Admin Failed Logon Attempts#CredCode#IF ($AnyGap -eq "Yes")
AD Domain Admin Failed Logon Attempts#CredCode#{
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#    $TestText = " " 
AD Domain Admin Failed Logon Attempts#CredCode#    $SumVal = "" 
AD Domain Admin Failed Logon Attempts#CredCode#    $TestStatus="High" 
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#}
AD Domain Admin Failed Logon Attempts#CredCode#else
AD Domain Admin Failed Logon Attempts#CredCode#{
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#    $TestText = " " 
AD Domain Admin Failed Logon Attempts#CredCode#    $SumVal = "" 
AD Domain Admin Failed Logon Attempts#CredCode#    $TestStatus="Passed" 
AD Domain Admin Failed Logon Attempts#CredCode#}
Domain Users UPN Not Specified Test#Headercode#$STR = "Total Users, Total Users Blank UPN, Total Users Ok, AD Domain, Data File Location"
Domain Users UPN Not Specified Test#Headercode#Add-Content $TestCSVFile $STR
Domain Users UPN Not Specified Test#CredCode#
Domain Users UPN Not Specified Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Domain Users UPN Not Specified Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Users UPN Not Specified Test#CredCode#$STR = "User Location, UPN, AD Domain"
Domain Users UPN Not Specified Test#CredCode#Add-Content $DataFileLocation $STR
Domain Users UPN Not Specified Test#CredCode#
Domain Users UPN Not Specified Test#CredCode#$TotNo=0 
Domain Users UPN Not Specified Test#CredCode#$ItemCount=0 
Domain Users UPN Not Specified Test#CredCode#$TestText = "Please check result" 
Domain Users UPN Not Specified Test#CredCode#$TestStatus="Completed" 
Domain Users UPN Not Specified Test#CredCode#$SumVal = "NA" 
Domain Users UPN Not Specified Test#CredCode#$AnyGap = "No"
Domain Users UPN Not Specified Test#CredCode#
Domain Users UPN Not Specified Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Domain Users UPN Not Specified Test#CredCode#{     
Domain Users UPN Not Specified Test#CredCode#    
Domain Users UPN Not Specified Test#CredCode#    $AllComps = Get-ADUser -Filter * -Properties UserPrincipalName,CanonicalName -Server $ThisDomain
Domain Users UPN Not Specified Test#CredCode#    $TotCompsNow = $AllComps.CanonicalName.Count
Domain Users UPN Not Specified Test#CredCode#
Domain Users UPN Not Specified Test#CredCode#    $TotUPNBlank=0
Domain Users UPN Not Specified Test#CredCode#    $TotUPNOk=0
Domain Users UPN Not Specified Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users UPN Not Specified Test#CredCode#    {
Domain Users UPN Not Specified Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users UPN Not Specified Test#CredCode#        $ThisUPN = $Item.UserPrincipalName
Domain Users UPN Not Specified Test#CredCode#        IF ($ThisUPN -eq $Null -or $ThisUPN -eq "")
Domain Users UPN Not Specified Test#CredCode#        {
Domain Users UPN Not Specified Test#CredCode#            $AnyGap = "Yes"
Domain Users UPN Not Specified Test#CredCode#            $TotUPNBlank++
Domain Users UPN Not Specified Test#CredCode#            $STR = $ThisDName+","+$ThisUPN+","+$ThisDomain
Domain Users UPN Not Specified Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users UPN Not Specified Test#CredCode#        } 
Domain Users UPN Not Specified Test#CredCode#        else
Domain Users UPN Not Specified Test#CredCode#        {
Domain Users UPN Not Specified Test#CredCode#            $TotUPNOk++   
Domain Users UPN Not Specified Test#CredCode#        }
Domain Users UPN Not Specified Test#CredCode#    }
Domain Users UPN Not Specified Test#CredCode#   
Domain Users UPN Not Specified Test#CredCode#   $STR = $TotCompsNow.ToString()+","+$TotUPNBlank.ToString()+","+$TotUPNOk.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users UPN Not Specified Test#CredCode#   Add-Content $TestCSVFile $STR       
Domain Users UPN Not Specified Test#CredCode#}
Domain Users UPN Not Specified Test#CredCode# 
Domain Users UPN Not Specified Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Users UPN Not Specified Test#CredCode#{
Domain Users UPN Not Specified Test#CredCode#
Domain Users UPN Not Specified Test#CredCode#    $TestText = " " 
Domain Users UPN Not Specified Test#CredCode#    $SumVal = "" 
Domain Users UPN Not Specified Test#CredCode#    $TestStatus="Medium" 
Domain Users UPN Not Specified Test#CredCode#
Domain Users UPN Not Specified Test#CredCode#}
Domain Users UPN Not Specified Test#CredCode#else
Domain Users UPN Not Specified Test#CredCode#{
Domain Users UPN Not Specified Test#CredCode#
Domain Users UPN Not Specified Test#CredCode#    $TestText = " " 
Domain Users UPN Not Specified Test#CredCode#    $SumVal = "" 
Domain Users UPN Not Specified Test#CredCode#    $TestStatus="Passed" 
Domain Users UPN Not Specified Test#CredCode#}
Domain Users Empty Fields Test#Headercode#$STR = "Field, Total Users, Total Blank, Total Enabled In Blanks, AD Domain, Data File Location"
Domain Users Empty Fields Test#Headercode#Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Domain Users Empty Fields Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Users Empty Fields Test#CredCode#$STR = "Field, User Location, AD Domain"
Domain Users Empty Fields Test#CredCode#Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#$TotNo=0 
Domain Users Empty Fields Test#CredCode#$ItemCount=0 
Domain Users Empty Fields Test#CredCode#$TestText = "Please check result" 
Domain Users Empty Fields Test#CredCode#$TestStatus="Completed" 
Domain Users Empty Fields Test#CredCode#$SumVal = "NA" 
Domain Users Empty Fields Test#CredCode#$AnyGap = "No"
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Domain Users Empty Fields Test#CredCode#{     
Domain Users Empty Fields Test#CredCode#    
Domain Users Empty Fields Test#CredCode#    $AllComps = Get-ADUser -Filter * -Properties * -Server $ThisDomain
Domain Users Empty Fields Test#CredCode#    $TotCompsNow = $AllComps.CanonicalName.Count
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "City"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.City
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "Department"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.Department
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "Company"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.Company
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "Country"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.Country
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#      
Domain Users Empty Fields Test#CredCode#    $WhichField = "Description"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.Description
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "DisplayName"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.DisplayName
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "Division"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.Division
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "EmailAddress"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.EmailAddress
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "EmployeeID"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.EmployeeID
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "EmployeeNumber"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.EmployeeNumber
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "Initials"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.Initials
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "HomeDirectory"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.HomeDirectory
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "HomePhone"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.HomePhone
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "Country"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.Country
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "Manager"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.Manager
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "MobilePhone"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.MobilePhone
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "Office"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.Office
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "OfficePhone"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.OfficePhone
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "Organization"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.Organization
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "POBox"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.POBox
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "PostalCode"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.PostalCode
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "State"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.State
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "StreetAddress"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.StreetAddress
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "Surname"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.Surname
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $WhichField = "Title"    
Domain Users Empty Fields Test#CredCode#    $TotBlankNow=0
Domain Users Empty Fields Test#CredCode#    $TotEnabled = 0
Domain Users Empty Fields Test#CredCode#    ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#    {
Domain Users Empty Fields Test#CredCode#        $ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#        $ThisField = $Item.Title
Domain Users Empty Fields Test#CredCode#        IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#        {
Domain Users Empty Fields Test#CredCode#            $AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#            $TotBlankNow++
Domain Users Empty Fields Test#CredCode#            $STR = $WhichField+","+$ThisDName+","+$ThisDomain
Domain Users Empty Fields Test#CredCode#            Add-Content $DataFileLocation $STR       
Domain Users Empty Fields Test#CredCode#            IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#            {
Domain Users Empty Fields Test#CredCode#                $TotEnabled++
Domain Users Empty Fields Test#CredCode#            }
Domain Users Empty Fields Test#CredCode#        }
Domain Users Empty Fields Test#CredCode#    }    
Domain Users Empty Fields Test#CredCode#    $STR = $WhichField+","+$TotCompsNow.ToString()+","+$TotBlankNow.ToString()+","+$TotEnabled.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Empty Fields Test#CredCode#    Add-Content $TestCSVFile $STR       
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#}
Domain Users Empty Fields Test#CredCode# 
Domain Users Empty Fields Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Users Empty Fields Test#CredCode#{
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $TestText = " " 
Domain Users Empty Fields Test#CredCode#    $SumVal = "" 
Domain Users Empty Fields Test#CredCode#    $TestStatus="Medium" 
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#}
Domain Users Empty Fields Test#CredCode#else
Domain Users Empty Fields Test#CredCode#{
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#    $TestText = " " 
Domain Users Empty Fields Test#CredCode#    $SumVal = "" 
Domain Users Empty Fields Test#CredCode#    $TestStatus="Passed" 
Domain Users Empty Fields Test#CredCode#}
Domain Managed Service Accounts Test#Headercode#$STR = "Managed Service Account, AD Domain"
Domain Managed Service Accounts Test#Headercode#Add-Content $TestCSVFile $STR
Domain Managed Service Accounts Test#CredCode#
Domain Managed Service Accounts Test#CredCode#$TotNo=0 
Domain Managed Service Accounts Test#CredCode#$ItemCount=0 
Domain Managed Service Accounts Test#CredCode#$TestText = "Please check result" 
Domain Managed Service Accounts Test#CredCode#$TestStatus="Completed" 
Domain Managed Service Accounts Test#CredCode#$SumVal = "NA" 
Domain Managed Service Accounts Test#CredCode#$AnyGap = "No"
Domain Managed Service Accounts Test#CredCode#
Domain Managed Service Accounts Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Domain Managed Service Accounts Test#CredCode#{     
Domain Managed Service Accounts Test#CredCode#    
Domain Managed Service Accounts Test#CredCode#    $AllServiceAccounts = Get-ADServiceAccount -Filter * -Server $ThisDomain
Domain Managed Service Accounts Test#CredCode#    
Domain Managed Service Accounts Test#CredCode#    ForEach ($Item in $AllServiceAccounts)
Domain Managed Service Accounts Test#CredCode#    {
Domain Managed Service Accounts Test#CredCode#       $AnyGap = "Yes"
Domain Managed Service Accounts Test#CredCode#       $ThisDName = $Item.Name
Domain Managed Service Accounts Test#CredCode#       $STR = $ThisDName+","+$ThisDomain
Domain Managed Service Accounts Test#CredCode#       Add-Content $TestCSVFile $STR       
Domain Managed Service Accounts Test#CredCode#    }
Domain Managed Service Accounts Test#CredCode#}
Domain Managed Service Accounts Test#CredCode# 
Domain Managed Service Accounts Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Managed Service Accounts Test#CredCode#{
Domain Managed Service Accounts Test#CredCode#
Domain Managed Service Accounts Test#CredCode#    $TestText = " " 
Domain Managed Service Accounts Test#CredCode#    $SumVal = "" 
Domain Managed Service Accounts Test#CredCode#    $TestStatus="Low" 
Domain Managed Service Accounts Test#CredCode#
Domain Managed Service Accounts Test#CredCode#}
Domain Managed Service Accounts Test#CredCode#else
Domain Managed Service Accounts Test#CredCode#{
Domain Managed Service Accounts Test#CredCode#
Domain Managed Service Accounts Test#CredCode#    $TestText = " " 
Domain Managed Service Accounts Test#CredCode#    $SumVal = "" 
Domain Managed Service Accounts Test#CredCode#    $TestStatus="Passed" 
Domain Managed Service Accounts Test#CredCode#}
Domain Managed Service Accounts Linked Test#Headercode#$STR = "Managed Service Account, Linked To Computer?, AD Domain"
Domain Managed Service Accounts Linked Test#Headercode#Add-Content $TestCSVFile $STR
Domain Managed Service Accounts Linked Test#CredCode#
Domain Managed Service Accounts Linked Test#CredCode#$TotNo=0 
Domain Managed Service Accounts Linked Test#CredCode#$ItemCount=0 
Domain Managed Service Accounts Linked Test#CredCode#$TestText = "Please check result" 
Domain Managed Service Accounts Linked Test#CredCode#$TestStatus="Completed" 
Domain Managed Service Accounts Linked Test#CredCode#$SumVal = "NA" 
Domain Managed Service Accounts Linked Test#CredCode#$AnyGap = "No"
Domain Managed Service Accounts Linked Test#CredCode#
Domain Managed Service Accounts Linked Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList") 
Domain Managed Service Accounts Linked Test#CredCode#{     
Domain Managed Service Accounts Linked Test#CredCode#    
Domain Managed Service Accounts Linked Test#CredCode#    $AllServiceAccounts = Get-ADServiceAccount -Filter * -Server $ThisDomain
Domain Managed Service Accounts Linked Test#CredCode#    
Domain Managed Service Accounts Linked Test#CredCode#    ForEach ($Item in $AllServiceAccounts)
Domain Managed Service Accounts Linked Test#CredCode#    {
Domain Managed Service Accounts Linked Test#CredCode#       $ThisDName = $Item.Name
Domain Managed Service Accounts Linked Test#CredCode#
Domain Managed Service Accounts Linked Test#CredCode#       $TestNow = Test-ADServiceAccount -Identity "$ThisDName"
Domain Managed Service Accounts Linked Test#CredCode#       IF ($TestNow -eq $false)
Domain Managed Service Accounts Linked Test#CredCode#       {
Domain Managed Service Accounts Linked Test#CredCode#           $AnyGap = "Yes"
Domain Managed Service Accounts Linked Test#CredCode#           $STR = $ThisDName+", Not Linked, "+$ThisDomain
Domain Managed Service Accounts Linked Test#CredCode#           Add-Content $TestCSVFile $STR       
Domain Managed Service Accounts Linked Test#CredCode#       }
Domain Managed Service Accounts Linked Test#CredCode#       else
Domain Managed Service Accounts Linked Test#CredCode#       {
Domain Managed Service Accounts Linked Test#CredCode#          $STR = $ThisDName+", Linked, "+$ThisDomain
Domain Managed Service Accounts Linked Test#CredCode#          Add-Content $TestCSVFile $STR             
Domain Managed Service Accounts Linked Test#CredCode#       }
Domain Managed Service Accounts Linked Test#CredCode#    }
Domain Managed Service Accounts Linked Test#CredCode#}
Domain Managed Service Accounts Linked Test#CredCode# 
Domain Managed Service Accounts Linked Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Managed Service Accounts Linked Test#CredCode#{
Domain Managed Service Accounts Linked Test#CredCode#
Domain Managed Service Accounts Linked Test#CredCode#    $TestText = " " 
Domain Managed Service Accounts Linked Test#CredCode#    $SumVal = "" 
Domain Managed Service Accounts Linked Test#CredCode#    $TestStatus="Medium" 
Domain Managed Service Accounts Linked Test#CredCode#
Domain Managed Service Accounts Linked Test#CredCode#}
Domain Managed Service Accounts Linked Test#CredCode#else
Domain Managed Service Accounts Linked Test#CredCode#{
Domain Managed Service Accounts Linked Test#CredCode#
Domain Managed Service Accounts Linked Test#CredCode#    $TestText = " " 
Domain Managed Service Accounts Linked Test#CredCode#    $SumVal = "" 
Domain Managed Service Accounts Linked Test#CredCode#    $TestStatus="Passed" 
Domain Managed Service Accounts Linked Test#CredCode#}
Domain Controller Audit Policy Configuration Consistency Test#Headercode#$STR = "Domain Controller, Total Categories Being Audited, Total Categories Not Being Audited"
Domain Controller Audit Policy Configuration Consistency Test#Headercode#Add-Content $TestCSVFile $STR
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Domain Controller Audit Policy Configuration Consistency Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$TotNo=0 
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$ItemCount=0 
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$TestText = "Please check result" 
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$TestStatus="Completed" 
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$SumVal = "NA" 
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$AnyGap = "No"
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Audit Policy Configuration Consistency Test#CredCode#{     
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    $IntOnOrNot = ""
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    Remove-item $DataFileLocation -ErrorAction SilentlyContinue
Domain Controller Audit Policy Configuration Consistency Test#CredCode#        
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    $Error.Clear()
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    $AuditStatus = Invoke-Command -ComputerName $ItemName -Script { auditpol.exe /get /Category:* /r } 
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    IF ($Error.Count -eq 0)
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    {
Domain Controller Audit Policy Configuration Consistency Test#CredCode#        $AuditStatus > $DataFileLocation
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    
Domain Controller Audit Policy Configuration Consistency Test#CredCode#        $TotAudited = 0
Domain Controller Audit Policy Configuration Consistency Test#CredCode#        $TotNotAudited = 0
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#        $CSV = Import-CSV $DataFileLocation
Domain Controller Audit Policy Configuration Consistency Test#CredCode#        ForEach ($Item in $CSV)
Domain Controller Audit Policy Configuration Consistency Test#CredCode#        {
Domain Controller Audit Policy Configuration Consistency Test#CredCode#            $MName = $Item.Subcategory
Domain Controller Audit Policy Configuration Consistency Test#CredCode#            $IncSet = $Item.'Inclusion Setting'
Domain Controller Audit Policy Configuration Consistency Test#CredCode#            IF ($MName -eq $null -or $MName -eq "")
Domain Controller Audit Policy Configuration Consistency Test#CredCode#            {
Domain Controller Audit Policy Configuration Consistency Test#CredCode#            }
Domain Controller Audit Policy Configuration Consistency Test#CredCode#            else
Domain Controller Audit Policy Configuration Consistency Test#CredCode#            {
Domain Controller Audit Policy Configuration Consistency Test#CredCode#                IF ($IncSet -eq "No Auditing")
Domain Controller Audit Policy Configuration Consistency Test#CredCode#                {
Domain Controller Audit Policy Configuration Consistency Test#CredCode#                    $TotNotAudited++
Domain Controller Audit Policy Configuration Consistency Test#CredCode#                }
Domain Controller Audit Policy Configuration Consistency Test#CredCode#                else
Domain Controller Audit Policy Configuration Consistency Test#CredCode#                {
Domain Controller Audit Policy Configuration Consistency Test#CredCode#                    $TotAudited++
Domain Controller Audit Policy Configuration Consistency Test#CredCode#                }
Domain Controller Audit Policy Configuration Consistency Test#CredCode#            }    
Domain Controller Audit Policy Configuration Consistency Test#CredCode#        }
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#        $STR = $ItemName+","+$TotAudited.ToString()+","+$TotNotAudited.ToString()
Domain Controller Audit Policy Configuration Consistency Test#CredCode#        Add-Content $TestCSVFile $STR    
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    }
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    else
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    {
Domain Controller Audit Policy Configuration Consistency Test#CredCode#        $STR = $ItemName+", ERROR: NOT Reachable"
Domain Controller Audit Policy Configuration Consistency Test#CredCode#        Add-Content $TestCSVFile $STR    
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    }
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#}
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$AnyGap = "Yes"
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Audit Policy Configuration Consistency Test#CredCode#{
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    $TestText = "Please ensure Internet is blocked on Domain Controllers." 
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    $SumVal = "" 
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    $TestStatus="High" 
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#}
Domain Controller Audit Policy Configuration Consistency Test#CredCode#else
Domain Controller Audit Policy Configuration Consistency Test#CredCode#{
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    $TestText = " " 
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    $SumVal = "" 
Domain Controller Audit Policy Configuration Consistency Test#CredCode#    $TestStatus="Passed" 
Domain Controller Audit Policy Configuration Consistency Test#CredCode#}
Domain Controller DS Audit Policy Test#Headercode#$STR = "Domain Controller, Directory Service Access, Directory Service Changes, Directory Service Replication, Detailed Directory Service Replication"
Domain Controller DS Audit Policy Test#Headercode#Add-Content $TestCSVFile $STR
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Domain Controller DS Audit Policy Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#$TotNo=0 
Domain Controller DS Audit Policy Test#CredCode#$ItemCount=0 
Domain Controller DS Audit Policy Test#CredCode#$TestText = "Please check result" 
Domain Controller DS Audit Policy Test#CredCode#$TestStatus="Completed" 
Domain Controller DS Audit Policy Test#CredCode#$SumVal = "NA" 
Domain Controller DS Audit Policy Test#CredCode#$AnyGap = "No"
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller DS Audit Policy Test#CredCode#{     
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#    $IntOnOrNot = ""
Domain Controller DS Audit Policy Test#CredCode#    Remove-item $DataFileLocation -ErrorAction SilentlyContinue
Domain Controller DS Audit Policy Test#CredCode#        
Domain Controller DS Audit Policy Test#CredCode#    $Error.Clear()
Domain Controller DS Audit Policy Test#CredCode#    $AuditStatus = Invoke-Command -ComputerName $ItemName -Script { auditpol.exe /get /Category:* /r } 
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#    IF ($Error.Count -eq 0)
Domain Controller DS Audit Policy Test#CredCode#    {
Domain Controller DS Audit Policy Test#CredCode#        $AuditStatus > $DataFileLocation
Domain Controller DS Audit Policy Test#CredCode#    
Domain Controller DS Audit Policy Test#CredCode#        $CSV = Import-CSV $DataFileLocation
Domain Controller DS Audit Policy Test#CredCode#        ForEach ($Item in $CSV)
Domain Controller DS Audit Policy Test#CredCode#        {
Domain Controller DS Audit Policy Test#CredCode#            $MName = $Item.Subcategory
Domain Controller DS Audit Policy Test#CredCode#            $IncSet = $Item.'Inclusion Setting'
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#            IF ($MName -eq "Directory Service Access")
Domain Controller DS Audit Policy Test#CredCode#            {
Domain Controller DS Audit Policy Test#CredCode#                $DirSuccessOrNot = "Enabled"
Domain Controller DS Audit Policy Test#CredCode#                IF ($IncSet -eq "No Auditing")
Domain Controller DS Audit Policy Test#CredCode#                {
Domain Controller DS Audit Policy Test#CredCode#                    $DirSuccessOrNot = "Not Enabled"
Domain Controller DS Audit Policy Test#CredCode#                }
Domain Controller DS Audit Policy Test#CredCode#            }    
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#            IF ($MName -eq "Directory Service Changes")
Domain Controller DS Audit Policy Test#CredCode#            {
Domain Controller DS Audit Policy Test#CredCode#                $DirChangesOrNot = "Enabled"
Domain Controller DS Audit Policy Test#CredCode#                IF ($IncSet -eq "No Auditing")
Domain Controller DS Audit Policy Test#CredCode#                {
Domain Controller DS Audit Policy Test#CredCode#                    $DirChangesOrNot = "Not Enabled"
Domain Controller DS Audit Policy Test#CredCode#                }
Domain Controller DS Audit Policy Test#CredCode#            }    
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#            IF ($MName -eq "Directory Service Replication")
Domain Controller DS Audit Policy Test#CredCode#            {
Domain Controller DS Audit Policy Test#CredCode#                $DirReplOrNot = "Enabled"
Domain Controller DS Audit Policy Test#CredCode#                IF ($IncSet -eq "No Auditing")
Domain Controller DS Audit Policy Test#CredCode#                {
Domain Controller DS Audit Policy Test#CredCode#                    $DirReplOrNot = "Not Enabled"
Domain Controller DS Audit Policy Test#CredCode#                }
Domain Controller DS Audit Policy Test#CredCode#            }    
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#            IF ($MName -eq "Detailed Directory Service Replication")
Domain Controller DS Audit Policy Test#CredCode#            {
Domain Controller DS Audit Policy Test#CredCode#                $DirReplDOrNot = "Enabled"
Domain Controller DS Audit Policy Test#CredCode#                IF ($IncSet -eq "No Auditing")
Domain Controller DS Audit Policy Test#CredCode#                {
Domain Controller DS Audit Policy Test#CredCode#                    $DirReplDOrNot = "Not Enabled"
Domain Controller DS Audit Policy Test#CredCode#                }
Domain Controller DS Audit Policy Test#CredCode#            }    
Domain Controller DS Audit Policy Test#CredCode#        }
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#        $STR = $ItemName+","+$DirSuccessOrNot+","+$DirChangesOrNot+","+$DirReplOrNot+","+$DirReplDOrNot
Domain Controller DS Audit Policy Test#CredCode#        Add-Content $TestCSVFile $STR    
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#    }
Domain Controller DS Audit Policy Test#CredCode#    else
Domain Controller DS Audit Policy Test#CredCode#    {
Domain Controller DS Audit Policy Test#CredCode#        $STR = $ItemName+", ERROR: NOT Reachable"
Domain Controller DS Audit Policy Test#CredCode#        Add-Content $TestCSVFile $STR    
Domain Controller DS Audit Policy Test#CredCode#    }
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#}
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#$AnyGap = "Yes"
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller DS Audit Policy Test#CredCode#{
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#    $TestText = "Please ensure Internet is blocked on Domain Controllers." 
Domain Controller DS Audit Policy Test#CredCode#    $SumVal = "" 
Domain Controller DS Audit Policy Test#CredCode#    $TestStatus="High" 
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#}
Domain Controller DS Audit Policy Test#CredCode#else
Domain Controller DS Audit Policy Test#CredCode#{
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#    $TestText = " " 
Domain Controller DS Audit Policy Test#CredCode#    $SumVal = "" 
Domain Controller DS Audit Policy Test#CredCode#    $TestStatus="Passed" 
Domain Controller DS Audit Policy Test#CredCode#}
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller NIC Dynamic Updates Test#CredCode#$TotNo=0
Domain Controller NIC Dynamic Updates Test#CredCode#$ItemCount=0
Domain Controller NIC Dynamic Updates Test#CredCode#$TestText = ""
Domain Controller NIC Dynamic Updates Test#CredCode#$TestStatus=""
Domain Controller NIC Dynamic Updates Test#CredCode#$SumVal = ""
Domain Controller NIC Dynamic Updates Test#CredCode#$AnyGap = "No"
Domain Controller NIC Dynamic Updates Test#CredCode#$ErrorOrNot = "No"
Domain Controller NIC Dynamic Updates Test#CredCode#$AnyOneOk = "No"
Domain Controller NIC Dynamic Updates Test#CredCode#$TotDCsInError = 0
Domain Controller NIC Dynamic Updates Test#CredCode#
Domain Controller NIC Dynamic Updates Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller NIC Dynamic Updates Test#CredCode#{
Domain Controller NIC Dynamic Updates Test#CredCode#    $DCConError = "Ok"
Domain Controller NIC Dynamic Updates Test#CredCode#    $DCConStatus = "Ok"
Domain Controller NIC Dynamic Updates Test#CredCode#    $ProceedOrNot = "Yes"
Domain Controller NIC Dynamic Updates Test#CredCode#    $Error.Clear()
Domain Controller NIC Dynamic Updates Test#CredCode#    $AllServices = Get-WMIObject Win32_Service -computer $ItemName
Domain Controller NIC Dynamic Updates Test#CredCode#    IF ($Error.Count -ne 0)
Domain Controller NIC Dynamic Updates Test#CredCode#    {
Domain Controller NIC Dynamic Updates Test#CredCode#        $ProceedOrNot = "No"
Domain Controller NIC Dynamic Updates Test#CredCode#        $TotDCsInError++
Domain Controller NIC Dynamic Updates Test#CredCode#        $DCConError = $Error[0].Exception.Message
Domain Controller NIC Dynamic Updates Test#CredCode#
Domain Controller NIC Dynamic Updates Test#CredCode#        $FinalSTR = $ItemName+",Not OK: Error: $DCConError"
Domain Controller NIC Dynamic Updates Test#CredCode#        Add-Content "$TestCSVFile" $FinalSTR
Domain Controller NIC Dynamic Updates Test#CredCode#    }
Domain Controller NIC Dynamic Updates Test#CredCode#    
Domain Controller NIC Dynamic Updates Test#CredCode#    IF ($ProceedOrNot -eq "Yes")
Domain Controller NIC Dynamic Updates Test#CredCode#    {
Domain Controller NIC Dynamic Updates Test#CredCode#        $ComConError="Ok"        
Domain Controller NIC Dynamic Updates Test#CredCode#        $Error.Clear()
Domain Controller NIC Dynamic Updates Test#CredCode#        $nwINFO = Get-WmiObject -ComputerName $ItemName Win32_NetworkAdapterConfiguration | Where-Object { $_.IPAddress -ne $null }
Domain Controller NIC Dynamic Updates Test#CredCode#        IF ($Error.count -eq 0)
Domain Controller NIC Dynamic Updates Test#CredCode#        { 
Domain Controller NIC Dynamic Updates Test#CredCode#            $AnyOneOk="Yes"
Domain Controller NIC Dynamic Updates Test#CredCode#            foreach ($NIC in $nwINFO)
Domain Controller NIC Dynamic Updates Test#CredCode#            {
Domain Controller NIC Dynamic Updates Test#CredCode#                $FinStatus = "Ok"
Domain Controller NIC Dynamic Updates Test#CredCode#                IF ($Nic.FullDNSRegistrationEnabled -eq $False)
Domain Controller NIC Dynamic Updates Test#CredCode#                {
Domain Controller NIC Dynamic Updates Test#CredCode#                    $AnyGap = "Yes"
Domain Controller NIC Dynamic Updates Test#CredCode#                    $FinStatus ="WARNING : Domain Controller Dynamic DNS Registration is Disabled for this Network Card."
Domain Controller NIC Dynamic Updates Test#CredCode#                }
Domain Controller NIC Dynamic Updates Test#CredCode#
Domain Controller NIC Dynamic Updates Test#CredCode#                $DNStatus=$Nic.FullDNSRegistrationEnabled                
Domain Controller NIC Dynamic Updates Test#CredCode#                $FinalSTR = $ItemName+","+$DCConError+","+$ComConError+","+$DNStatus+","+$FinStatus
Domain Controller NIC Dynamic Updates Test#CredCode#                Add-Content "$TestCSVFile" $FinalSTR
Domain Controller NIC Dynamic Updates Test#CredCode#            }
Domain Controller NIC Dynamic Updates Test#CredCode#
Domain Controller NIC Dynamic Updates Test#CredCode#            IF ($AnyGap -eq "Yes")
Domain Controller NIC Dynamic Updates Test#CredCode#            {
Domain Controller NIC Dynamic Updates Test#CredCode#                $TotNo++
Domain Controller NIC Dynamic Updates Test#CredCode#            }
Domain Controller NIC Dynamic Updates Test#CredCode#        }
Domain Controller NIC Dynamic Updates Test#CredCode#        else
Domain Controller NIC Dynamic Updates Test#CredCode#        {
Domain Controller NIC Dynamic Updates Test#CredCode#            $ComConError = $Error[0].Exception.Message
Domain Controller NIC Dynamic Updates Test#CredCode#            $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller NIC Dynamic Updates Test#CredCode#            Add-Content "$TestCSVFile" $FinalSTR
Domain Controller NIC Dynamic Updates Test#CredCode#        }
Domain Controller NIC Dynamic Updates Test#CredCode#    }
Domain Controller NIC Dynamic Updates Test#CredCode#    else
Domain Controller NIC Dynamic Updates Test#CredCode#    {
Domain Controller NIC Dynamic Updates Test#CredCode#       $ComConError = $Error[0].Exception.Message
Domain Controller NIC Dynamic Updates Test#CredCode#       $FinalSTR = $ItemName+",$DCConError,"+$ComConError
Domain Controller NIC Dynamic Updates Test#CredCode#       Add-Content "$TestCSVFile" $FinalSTR
Domain Controller NIC Dynamic Updates Test#CredCode#    }
Domain Controller NIC Dynamic Updates Test#CredCode#}
Domain Controller NIC Dynamic Updates Test#CredCode#
Domain Controller NIC Dynamic Updates Test#CredCode#
Domain Controller NIC Dynamic Updates Test#CredCode#$OthText = ""
Domain Controller NIC Dynamic Updates Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller NIC Dynamic Updates Test#CredCode#{
Domain Controller NIC Dynamic Updates Test#CredCode#   $OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller NIC Dynamic Updates Test#CredCode#}
Domain Controller NIC Dynamic Updates Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller NIC Dynamic Updates Test#CredCode#{
Domain Controller NIC Dynamic Updates Test#CredCode#    $TestText = "Domain Controllers have Dynamic DNS Registration disabled for active NICs. Please ensure it is enabled. Disabling Dynamic DNS Registration will disable the ability for domain controller to register its resource records dynamically to configured DNS Servers. $OthText"
Domain Controller NIC Dynamic Updates Test#CredCode#    $SumVal = $TotNo
Domain Controller NIC Dynamic Updates Test#CredCode#    $TestStatus="High"
Domain Controller NIC Dynamic Updates Test#CredCode#}
Domain Controller NIC Dynamic Updates Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller NIC Dynamic Updates Test#CredCode#{
Domain Controller NIC Dynamic Updates Test#CredCode#    $TestText = "Dynamic Pack DNS Registration is enabled for all domain controllers. $OthText"
Domain Controller NIC Dynamic Updates Test#CredCode#    $SumVal = ""
Domain Controller NIC Dynamic Updates Test#CredCode#    $TestStatus="Passed"
Domain Controller NIC Dynamic Updates Test#CredCode#
Domain Controller NIC Dynamic Updates Test#CredCode#    IF ($AnyOneOk -eq "No")
Domain Controller NIC Dynamic Updates Test#CredCode#    {
Domain Controller NIC Dynamic Updates Test#CredCode#        $TestText = "Error Executing Dynamic Pack."
Domain Controller NIC Dynamic Updates Test#CredCode#        $SumVal = ""
Domain Controller NIC Dynamic Updates Test#CredCode#        $TestStatus="Completed with Errors."
Domain Controller NIC Dynamic Updates Test#CredCode#    }
Domain Controller NIC Dynamic Updates Test#CredCode#}
Domain Controller NIC Dynamic Updates Test#CredCode#
Domain Controller NIC Dynamic Updates Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Controller NIC Dynamic Updates Test#CredCode#
Domain Security Groups with No Members Test#Headercode#$STR = "Total Groups, Groups Without Members, AD Domain, Data File Location"
Domain Security Groups with No Members Test#Headercode#Add-Content $TestCSVFile $STR
Domain Security Groups with No Members Test#CredCode#
Domain Security Groups with No Members Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Domain Security Groups with No Members Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Security Groups with No Members Test#CredCode#$STR = "Group, AD Domain"
Domain Security Groups with No Members Test#CredCode#Add-Content $DataFileLocation $STR
Domain Security Groups with No Members Test#CredCode#
Domain Security Groups with No Members Test#CredCode#$TotNo=0
Domain Security Groups with No Members Test#CredCode#$ItemCount=0
Domain Security Groups with No Members Test#CredCode#$TestText = ""
Domain Security Groups with No Members Test#CredCode#$TestStatus=""
Domain Security Groups with No Members Test#CredCode#$SumVal = ""
Domain Security Groups with No Members Test#CredCode#$AnyGap = "No"
Domain Security Groups with No Members Test#CredCode#$IsErr = "No"
Domain Security Groups with No Members Test#CredCode#
Domain Security Groups with No Members Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Security Groups with No Members Test#CredCode#{ 
Domain Security Groups with No Members Test#CredCode#    $TotEmptyGroups = 0    
Domain Security Groups with No Members Test#CredCode#    $Error.Clear()
Domain Security Groups with No Members Test#CredCode#    $SGsNoMemCount=Get-ADGroup -Filter * -properties * -Server $ThisDomain -ResultPageSize 2000 -resultSetSize $null
Domain Security Groups with No Members Test#CredCode#    IF ($Error.count -eq 0)
Domain Security Groups with No Members Test#CredCode#    {
Domain Security Groups with No Members Test#CredCode#        $Items = $SGsNoMemCount
Domain Security Groups with No Members Test#CredCode#        $ItemCount=$SGsNoMemCount.Count
Domain Security Groups with No Members Test#CredCode#        
Domain Security Groups with No Members Test#CredCode#        ForEach ($AllGPOs in $Items)
Domain Security Groups with No Members Test#CredCode#        {
Domain Security Groups with No Members Test#CredCode#            $ThisGroupName = $AllGPOS.DistinguishedName
Domain Security Groups with No Members Test#CredCode#            $RValue = (Get-ADGroupMember $AllGPOs.DistinguishedName -Server $ThisDomain).count 
Domain Security Groups with No Members Test#CredCode#            IF ($RValue -eq 0)
Domain Security Groups with No Members Test#CredCode#            {
Domain Security Groups with No Members Test#CredCode#                $TotEmptyGroups++
Domain Security Groups with No Members Test#CredCode#                $AnyGap="Yes"
Domain Security Groups with No Members Test#CredCode#                $RemovedComma = $ThisGroupName.replace(",", " ")
Domain Security Groups with No Members Test#CredCode#                $FinalVal='"'+$RemovedComma+'"'+","+$ThisDomain
Domain Security Groups with No Members Test#CredCode#                Add-Content "$DataFileLocation" $FinalVal
Domain Security Groups with No Members Test#CredCode#            } 
Domain Security Groups with No Members Test#CredCode#        }
Domain Security Groups with No Members Test#CredCode#
Domain Security Groups with No Members Test#CredCode#        $ThisStr=$ItemCount.ToString()+","+$TotEmptyGroups.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Security Groups with No Members Test#CredCode#        Add-Content "$TestCSVFile" $ThisStr                    
Domain Security Groups with No Members Test#CredCode#    }
Domain Security Groups with No Members Test#CredCode#    else
Domain Security Groups with No Members Test#CredCode#    { 
Domain Security Groups with No Members Test#CredCode#        $ThisStr="Could not connect to AD Server,,"+$ThisDomain
Domain Security Groups with No Members Test#CredCode#        Add-Content "$TestCSVFile" $ThisStr                    
Domain Security Groups with No Members Test#CredCode#    }
Domain Security Groups with No Members Test#CredCode#}
Domain Security Groups with No Members Test#CredCode#
Domain Security Groups with No Members Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Security Groups with No Members Test#CredCode#{
Domain Security Groups with No Members Test#CredCode#    $TestText = "Security Groups have been created in Domain but they do not hold any members. Please check why empty Security Groups have been created in Domain. The output also contains the pre-defined security groups other than user-defined security groups. For example Print Operators group might not have any group members. Similarly RDS Endpoint Servers group will not have any members if you have created another security group for same purpose. However, test shows the list of empty security groups in each domain."
Domain Security Groups with No Members Test#CredCode#    $TestStatus="High"
Domain Security Groups with No Members Test#CredCode#    $SumVal = ""
Domain Security Groups with No Members Test#CredCode#}
Domain Security Groups with No Members Test#CredCode#
Domain Security Groups with No Members Test#CredCode#IF ($AnyGap -eq "No")
Domain Security Groups with No Members Test#CredCode#{
Domain Security Groups with No Members Test#CredCode#    $TestText = "All Security Groups in domains have members added to them."
Domain Security Groups with No Members Test#CredCode#    $TestStatus="Passed"
Domain Security Groups with No Members Test#CredCode#    $SumVal = ""       
Domain Security Groups with No Members Test#CredCode#}
Domain Security Groups with No Members Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Security Groups with No Members Test#CredCode#
Domain OU Empty Test#Headercode#$STR = "Empty Organizational Units, AD Domain, Data File Location"
Domain OU Empty Test#Headercode#Add-Content $TestCSVFile $STR
Domain OU Empty Test#CredCode#
Domain OU Empty Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Domain OU Empty Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain OU Empty Test#CredCode#$STR = "Organizational Unit Name, Organizational Unit DN, AD Domain"
Domain OU Empty Test#CredCode#Add-Content $DataFileLocation $STR
Domain OU Empty Test#CredCode#
Domain OU Empty Test#CredCode#$TotNo=0
Domain OU Empty Test#CredCode#$ItemCount=0
Domain OU Empty Test#CredCode#$TestText = ""
Domain OU Empty Test#CredCode#$TestStatus=""
Domain OU Empty Test#CredCode#$SumVal = ""
Domain OU Empty Test#CredCode#$AnyGap = "No"
Domain OU Empty Test#CredCode#
Domain OU Empty Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain OU Empty Test#CredCode#{ 
Domain OU Empty Test#CredCode#    $Error.Clear()
Domain OU Empty Test#CredCode#    $GetEmptyOUList=Get-ADOrganizationalUnit -Server $ThisDomain -Filter 'Name -like "*"' | 
Domain OU Empty Test#CredCode#    Where { -not(Get-ADObject -Server $ThisDomain -Filter 'Name -like "*"' -SearchBase $_.DistinguishedName -SearchScope OneLevel -ResultPageSize 2000 -resultSetSize $null -ErrorAction SilentlyContinue)} | 
Domain OU Empty Test#CredCode#    Select-Object Name, DistinguishedName
Domain OU Empty Test#CredCode#
Domain OU Empty Test#CredCode#    IF ($Error.count -eq 0)
Domain OU Empty Test#CredCode#    {    
Domain OU Empty Test#CredCode#        $Items = $GetEmptyOUList
Domain OU Empty Test#CredCode#        $ItemCount=$GetEmptyOUList.Name.Count        
Domain OU Empty Test#CredCode#
Domain OU Empty Test#CredCode#        IF ($ItemCount -ne 0)
Domain OU Empty Test#CredCode#        {
Domain OU Empty Test#CredCode#            $AnyGap = "Yes"
Domain OU Empty Test#CredCode#        }
Domain OU Empty Test#CredCode#        $FinalVal=$ItemCount.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain OU Empty Test#CredCode#        Add-Content "$TestCSVFile" $FinalVal
Domain OU Empty Test#CredCode#
Domain OU Empty Test#CredCode#        ForEach ($ThisItem in $Items)
Domain OU Empty Test#CredCode#        { 
Domain OU Empty Test#CredCode#            $RemovedComma = $ThisItem.DistinguishedName.replace(",", " ")
Domain OU Empty Test#CredCode#            $FinalVal=$ThisItem.Name+","+'"'+$RemovedComma+'"'+","+$ThisDomain
Domain OU Empty Test#CredCode#            Add-Content "$DataFileLocation" $FinalVal            
Domain OU Empty Test#CredCode#        }
Domain OU Empty Test#CredCode#    }
Domain OU Empty Test#CredCode#    else
Domain OU Empty Test#CredCode#    {
Domain OU Empty Test#CredCode#        $FinalVal="Could not connect to AD Server,"+$ThisDomain
Domain OU Empty Test#CredCode#        Add-Content "$TestCSVFile" $FinalVal        
Domain OU Empty Test#CredCode#    }
Domain OU Empty Test#CredCode#}
Domain OU Empty Test#CredCode#
Domain OU Empty Test#CredCode#IF ($AnyGap -eq "Yes")
Domain OU Empty Test#CredCode#{
Domain OU Empty Test#CredCode#    $TestText = ""
Domain OU Empty Test#CredCode#    $TestStatus="High"
Domain OU Empty Test#CredCode#    $SumVal = ""
Domain OU Empty Test#CredCode#}
Domain OU Empty Test#CredCode#else
Domain OU Empty Test#CredCode#{
Domain OU Empty Test#CredCode#    $TestText = ""
Domain OU Empty Test#CredCode#    $TestStatus="Passed"
Domain OU Empty Test#CredCode#    $SumVal = ""
Domain OU Empty Test#CredCode#}
Domain OU Empty Test#CredCode#
Domain OU Empty Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Domain Users Disabled Test#Headercode#$STR = "Total Disabled Users, AD Domain, Data File Location"
Domain Users Disabled Test#Headercode#Add-Content $TestCSVFile $STR
Domain Users Disabled Test#CredCode#
Domain Users Disabled Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Domain Users Disabled Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Users Disabled Test#CredCode#$STR = "User Name, SamAccountName, User DN, AD Domain"
Domain Users Disabled Test#CredCode#Add-Content $DataFileLocation $STR
Domain Users Disabled Test#CredCode#
Domain Users Disabled Test#CredCode#$TotNo=0
Domain Users Disabled Test#CredCode#$ItemCount=0
Domain Users Disabled Test#CredCode#$TestText = ""
Domain Users Disabled Test#CredCode#$TestStatus=""
Domain Users Disabled Test#CredCode#$SumVal = ""
Domain Users Disabled Test#CredCode#$AnyGap = "No"
Domain Users Disabled Test#CredCode#
Domain Users Disabled Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Users Disabled Test#CredCode#{
Domain Users Disabled Test#CredCode#    $Error.Clear()
Domain Users Disabled Test#CredCode#    $UsersDisabledList=Search-ADAccount -Server $ThisDomain -AccountDisabled -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
Domain Users Disabled Test#CredCode#    IF ($Error.count -eq 0)
Domain Users Disabled Test#CredCode#    {    
Domain Users Disabled Test#CredCode#        $Items = $UsersDisabledList
Domain Users Disabled Test#CredCode#        $ItemCount=$UsersDisabledList.Name.Count
Domain Users Disabled Test#CredCode#
Domain Users Disabled Test#CredCode#        $FinalVal=$ItemCount.ToString()+","+$ThisDomain+","+$DataFileLocation
Domain Users Disabled Test#CredCode#        Add-Content "$TestCSVFile" $FinalVal            
Domain Users Disabled Test#CredCode#        
Domain Users Disabled Test#CredCode#        ForEach ($ThisItem in $Items)
Domain Users Disabled Test#CredCode#        { 
Domain Users Disabled Test#CredCode#            $RemovedComma = $ThisItem.DistinguishedName.replace(",", " ")
Domain Users Disabled Test#CredCode#            $FinalVal=$ThisItem.Name+","+$ThisItem.SamAccountName+","+'"'+$RemovedComma+'"'+","+$ThisDomain
Domain Users Disabled Test#CredCode#            Add-Content "$DataFileLocation" $FinalVal            
Domain Users Disabled Test#CredCode#            $AnyGap="Yes"
Domain Users Disabled Test#CredCode#        }
Domain Users Disabled Test#CredCode#    }
Domain Users Disabled Test#CredCode#}
Domain Users Disabled Test#CredCode#
Domain Users Disabled Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Users Disabled Test#CredCode#{
Domain Users Disabled Test#CredCode#    $TestText = ""
Domain Users Disabled Test#CredCode#    $TestStatus="High"
Domain Users Disabled Test#CredCode#    $SumVal = ""
Domain Users Disabled Test#CredCode#}
Domain Users Disabled Test#CredCode#else
Domain Users Disabled Test#CredCode#{
Domain Users Disabled Test#CredCode#    $TestText = ""
Domain Users Disabled Test#CredCode#    $TestStatus="Passed"
Domain Users Disabled Test#CredCode#    $SumVal = $TotNo          
Domain Users Disabled Test#CredCode#}
Domain Users Disabled Test#CredCode#
Domain Users Disabled Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Get AD Recycle Bin Status#Headercode#$ThisString="Item, Value, Final Status"
Get AD Recycle Bin Status#Headercode#Add-Content "$TestCSVFile" $ThisString
Get AD Recycle Bin Status#CredCode#
Get AD Recycle Bin Status#CredCode#$TotSyncing = 0
Get AD Recycle Bin Status#CredCode#$TotInError = 0
Get AD Recycle Bin Status#CredCode#$AnyGap = "No"
Get AD Recycle Bin Status#CredCode#$TestStatus ="Passed"
Get AD Recycle Bin Status#CredCode#$SumVal = ""
Get AD Recycle Bin Status#CredCode#$TestText = ""
Get AD Recycle Bin Status#CredCode#
Get AD Recycle Bin Status#CredCode#$Items = Get-ADOptionalFeature -Filter *
Get AD Recycle Bin Status#CredCode#
Get AD Recycle Bin Status#CredCode#ForEach ($Item in $Items)
Get AD Recycle Bin Status#CredCode#{
Get AD Recycle Bin Status#CredCode#
Get AD Recycle Bin Status#CredCode#    $ADRName = $Item.Name
Get AD Recycle Bin Status#CredCode#    $ADRName
Get AD Recycle Bin Status#CredCode#    $ADRStatus = $Item.EnabledScopes
Get AD Recycle Bin Status#CredCode#    $FinalStaTUS = "Enabled"
Get AD Recycle Bin Status#CredCode#
Get AD Recycle Bin Status#CredCode#    IF ($ADRName -eq "Recycle Bin Feature")
Get AD Recycle Bin Status#CredCode#    {
Get AD Recycle Bin Status#CredCode#        $TotCountNow = $ADRStatus.Count
Get AD Recycle Bin Status#CredCode#        IF ($TotCountNow -eq 0)
Get AD Recycle Bin Status#CredCode#        {
Get AD Recycle Bin Status#CredCode#            $FinalStaTUS = "Disabled"
Get AD Recycle Bin Status#CredCode#            $AnyGap = "Yes"
Get AD Recycle Bin Status#CredCode#        }
Get AD Recycle Bin Status#CredCode#        break
Get AD Recycle Bin Status#CredCode#    }
Get AD Recycle Bin Status#CredCode#}
Get AD Recycle Bin Status#CredCode#    
Get AD Recycle Bin Status#CredCode#If ($AnyGap -eq "Yes")
Get AD Recycle Bin Status#CredCode#{
Get AD Recycle Bin Status#CredCode#    $TestStatus="High"
Get AD Recycle Bin Status#CredCode#    $TestText = "Disabled"
Get AD Recycle Bin Status#CredCode#    $SumVal = "NA"
Get AD Recycle Bin Status#CredCode#}
Get AD Recycle Bin Status#CredCode#else
Get AD Recycle Bin Status#CredCode#{
Get AD Recycle Bin Status#CredCode#    $TestStatus="Passed"
Get AD Recycle Bin Status#CredCode#    $TestText = "Enabled"
Get AD Recycle Bin Status#CredCode#    $SumVal = "NA"
Get AD Recycle Bin Status#CredCode#}
Get AD Recycle Bin Status#CredCode#
Get AD Recycle Bin Status#CredCode#$ThisSTR = "AD Recycle Bin Feature,"+'"'+$ADRStatus+'"'+","+$FinalStaTUS
Get AD Recycle Bin Status#CredCode#Add-Content "$TestCSVFile" $ThisStr
Get AD Recycle Bin Status#CredCode#
Get AD Recycle Bin Status#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Get AD Privileged Access Management Status#Headercode#$ThisString="Item, Value, Final Status"
Get AD Privileged Access Management Status#Headercode#Add-Content "$TestCSVFile" $ThisString
Get AD Privileged Access Management Status#CredCode#
Get AD Privileged Access Management Status#CredCode#$TotSyncing = 0
Get AD Privileged Access Management Status#CredCode#$TotInError = 0
Get AD Privileged Access Management Status#CredCode#$AnyGap = "No"
Get AD Privileged Access Management Status#CredCode#$TestStatus ="Passed"
Get AD Privileged Access Management Status#CredCode#$SumVal = ""
Get AD Privileged Access Management Status#CredCode#$TestText = ""
Get AD Privileged Access Management Status#CredCode#
Get AD Privileged Access Management Status#CredCode#$Items = Get-ADOptionalFeature -Filter *
Get AD Privileged Access Management Status#CredCode#
Get AD Privileged Access Management Status#CredCode#ForEach ($Item in $Items)
Get AD Privileged Access Management Status#CredCode#{
Get AD Privileged Access Management Status#CredCode#
Get AD Privileged Access Management Status#CredCode#    $ADRName = $Item.Name
Get AD Privileged Access Management Status#CredCode#    $ADRName
Get AD Privileged Access Management Status#CredCode#    $ADRStatus = $Item.EnabledScopes
Get AD Privileged Access Management Status#CredCode#    $FinalStaTUS = "Enabled"
Get AD Privileged Access Management Status#CredCode#
Get AD Privileged Access Management Status#CredCode#    IF ($ADRName -eq "Privileged Access Management Feature")
Get AD Privileged Access Management Status#CredCode#    {
Get AD Privileged Access Management Status#CredCode#        $TotCountNow = $ADRStatus.Count
Get AD Privileged Access Management Status#CredCode#        IF ($TotCountNow -eq 0)
Get AD Privileged Access Management Status#CredCode#        {
Get AD Privileged Access Management Status#CredCode#            $FinalStaTUS = "Disabled"
Get AD Privileged Access Management Status#CredCode#            $AnyGap = "Yes"
Get AD Privileged Access Management Status#CredCode#        }
Get AD Privileged Access Management Status#CredCode#        break
Get AD Privileged Access Management Status#CredCode#    }
Get AD Privileged Access Management Status#CredCode#}
Get AD Privileged Access Management Status#CredCode#    
Get AD Privileged Access Management Status#CredCode#If ($AnyGap -eq "Yes")
Get AD Privileged Access Management Status#CredCode#{
Get AD Privileged Access Management Status#CredCode#    $TestStatus="High"
Get AD Privileged Access Management Status#CredCode#    $TestText = "Disabled"
Get AD Privileged Access Management Status#CredCode#    $SumVal = "NA"
Get AD Privileged Access Management Status#CredCode#}
Get AD Privileged Access Management Status#CredCode#else
Get AD Privileged Access Management Status#CredCode#{
Get AD Privileged Access Management Status#CredCode#    $TestStatus="Passed"
Get AD Privileged Access Management Status#CredCode#    $TestText = "Enabled"
Get AD Privileged Access Management Status#CredCode#    $SumVal = "NA"
Get AD Privileged Access Management Status#CredCode#}
Get AD Privileged Access Management Status#CredCode#
Get AD Privileged Access Management Status#CredCode#$ThisSTR = "Privileged Access Management Feature,"+'"'+$ADRStatus+'"'+","+$FinalStaTUS
Get AD Privileged Access Management Status#CredCode#Add-Content "$TestCSVFile" $ThisStr
Get AD Privileged Access Management Status#CredCode#
Get AD Privileged Access Management Status#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Host Configuration Test#Headercode
Hyper-V Host Configuration Test#Headercode#$ThisString="Hyper-V Host, Virtual Hard Disk Path, Virtual Machine Path"
Hyper-V Host Configuration Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Hyper-V Host Configuration Test#Headercode
Hyper-V Host Configuration Test#Headercode# 
Hyper-V Host Configuration Test#Headercode#
Hyper-V Host Configuration Test#CredCode#$AnyGap = "No"
Hyper-V Host Configuration Test#CredCode#$TestStatus ="Passed"
Hyper-V Host Configuration Test#CredCode#$SumVal = ""
Hyper-V Host Configuration Test#CredCode#$TestText = ""
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Host Configuration Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Host Configuration Test#CredCode#{
Hyper-V Host Configuration Test#CredCode#    $VMConfig = Get-VMHost -ComputerName $ServerName | Select-Object name,FullyQualifiedDomainName,virtualmacinepath,virtualharddiskpath,VirtualMachinePath
Hyper-V Host Configuration Test#CredCode#    $VHDPath = $VMConfig.virtualharddiskpath
Hyper-V Host Configuration Test#CredCode#    $VMPath = $VMConfig.VirtualMachinePath
Hyper-V Host Configuration Test#CredCode#    
Hyper-V Host Configuration Test#CredCode#    $CheckPath = $VMPath.SubString(0,3)
Hyper-V Host Configuration Test#CredCode#    $CheckPath2 = $VHDPath.SubString(0,3)
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#    IF ($CheckPath -eq "C:\" -or $CheckPath2 -eq "C:\")
Hyper-V Host Configuration Test#CredCode#    {
Hyper-V Host Configuration Test#CredCode#        $AnyGap = "Yes"
Hyper-V Host Configuration Test#CredCode#    }
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#    $STR = $ServerName+","+$VHDPatH+","+$VMPath
Hyper-V Host Configuration Test#CredCode#    Add-Content "$TestCSVFile" $STR
Hyper-V Host Configuration Test#CredCode#}
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#IF ($AnyGap -eq "Yes")
Hyper-V Host Configuration Test#CredCode#{
Hyper-V Host Configuration Test#CredCode#    $TestStatus="High"
Hyper-V Host Configuration Test#CredCode#    $TestText = "Hyper-V Host VHD path and virtual machine configuration path locations are C:\. It is recommended to host configuration files and VHD files to a clustered shared volume."
Hyper-V Host Configuration Test#CredCode#    $SumVal = "NA"
Hyper-V Host Configuration Test#CredCode#}
Hyper-V Host Configuration Test#CredCode#else
Hyper-V Host Configuration Test#CredCode#{  
Hyper-V Host Configuration Test#CredCode#    $TestStatus="Completed"
Hyper-V Host Configuration Test#CredCode#    $TestText = "Hyper-V Host configuration was retreived. Please check to make sure configuration is correct."
Hyper-V Host Configuration Test#CredCode#    $SumVal = "NA"
Hyper-V Host Configuration Test#CredCode#}
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Host Configuration Test#CredCode#$STR
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode# 
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#$AnyGap = "No"
Hyper-V Host Configuration Test#CredCode#$TestStatus ="Passed"
Hyper-V Host Configuration Test#CredCode#$SumVal = ""
Hyper-V Host Configuration Test#CredCode#$TestText = ""
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Host Configuration Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Host Configuration Test#CredCode#{
Hyper-V Host Configuration Test#CredCode#    $VMConfig = Get-VMHost -ComputerName $ServerName | Select-Object name,FullyQualifiedDomainName,virtualmacinepath,virtualharddiskpath,VirtualMachinePath
Hyper-V Host Configuration Test#CredCode#    $VHDPath = $VMConfig.virtualharddiskpath
Hyper-V Host Configuration Test#CredCode#    $VMPath = $VMConfig.VirtualMachinePath
Hyper-V Host Configuration Test#CredCode#    
Hyper-V Host Configuration Test#CredCode#    $CheckPath = $VMPath.SubString(0,3)
Hyper-V Host Configuration Test#CredCode#    $CheckPath2 = $VHDPath.SubString(0,3)
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#    IF ($CheckPath -eq "C:\" -or $CheckPath2 -eq "C:\")
Hyper-V Host Configuration Test#CredCode#    {
Hyper-V Host Configuration Test#CredCode#        $AnyGap = "Yes"
Hyper-V Host Configuration Test#CredCode#    }
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#    $STR = $ServerName+","+$VHDPatH+","+$VMPath
Hyper-V Host Configuration Test#CredCode#    Add-Content "$TestCSVFile" $STR
Hyper-V Host Configuration Test#CredCode#}
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#IF ($AnyGap -eq "Yes")
Hyper-V Host Configuration Test#CredCode#{
Hyper-V Host Configuration Test#CredCode#    $TestStatus="High"
Hyper-V Host Configuration Test#CredCode#    $TestText = "Hyper-V Host VHD path and virtual machine configuration path locations are C:\. It is recommended to host configuration files and VHD files to a clustered shared volume."
Hyper-V Host Configuration Test#CredCode#    $SumVal = "NA"
Hyper-V Host Configuration Test#CredCode#}
Hyper-V Host Configuration Test#CredCode#else
Hyper-V Host Configuration Test#CredCode#{  
Hyper-V Host Configuration Test#CredCode#    $TestStatus="Completed"
Hyper-V Host Configuration Test#CredCode#    $TestText = "Hyper-V Host configuration was retreived. Please check to make sure configuration is correct."
Hyper-V Host Configuration Test#CredCode#    $SumVal = "NA"
Hyper-V Host Configuration Test#CredCode#}
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Host Configuration Test#CredCode#$STR
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode#
Hyper-V Host Configuration Test#CredCode# 
Hyper-V Host Configuration Test#CredCode#
Hyper-V Virtual Machine Version Test#Headercode#$ThisString="Hyper-V Host, VM Name, Current Version, Final Status"
Hyper-V Virtual Machine Version Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Hyper-V Virtual Machine Version Test#Headercode# 
Hyper-V Virtual Machine Version Test#Headercode#
Hyper-V Virtual Machine Version Test#CredCode#$AnyGap = "No"
Hyper-V Virtual Machine Version Test#CredCode#$TestStatus ="Passed"
Hyper-V Virtual Machine Version Test#CredCode#$SumVal = ""
Hyper-V Virtual Machine Version Test#CredCode#$TestText = ""
Hyper-V Virtual Machine Version Test#CredCode#
Hyper-V Virtual Machine Version Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Virtual Machine Version Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Virtual Machine Version Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Virtual Machine Version Test#CredCode#{        
Hyper-V Virtual Machine Version Test#CredCode#    $AllVMs = Get-VM -ComputerName $ServerName
Hyper-V Virtual Machine Version Test#CredCode#
Hyper-V Virtual Machine Version Test#CredCode#    ForEach ($Item in $AllVMs)
Hyper-V Virtual Machine Version Test#CredCode#    {                
Hyper-V Virtual Machine Version Test#CredCode#       IF ($Item.Version -eq "5.0")
Hyper-V Virtual Machine Version Test#CredCode#       {
Hyper-V Virtual Machine Version Test#CredCode#           $STR = $ServerName+","+$Item.Name+","+$Item.Version+","+"Ok"
Hyper-V Virtual Machine Version Test#CredCode#           Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Version Test#CredCode#       }
Hyper-V Virtual Machine Version Test#CredCode#       else
Hyper-V Virtual Machine Version Test#CredCode#       {
Hyper-V Virtual Machine Version Test#CredCode#           $AnyGap = "Yes"
Hyper-V Virtual Machine Version Test#CredCode#           $STR = $ServerName+","+$Item.Name+","+$Item.Version+","+"Not OK"
Hyper-V Virtual Machine Version Test#CredCode#           Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Version Test#CredCode#       }
Hyper-V Virtual Machine Version Test#CredCode#
Hyper-V Virtual Machine Version Test#CredCode#    }
Hyper-V Virtual Machine Version Test#CredCode#}
Hyper-V Virtual Machine Version Test#CredCode#
Hyper-V Virtual Machine Version Test#CredCode#If ($AnyGap -eq "Yes")
Hyper-V Virtual Machine Version Test#CredCode#{
Hyper-V Virtual Machine Version Test#CredCode#    $TestStatus="High"
Hyper-V Virtual Machine Version Test#CredCode#    $TestText = "Virtual Machines are not updated with latest version of Integration Services."
Hyper-V Virtual Machine Version Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Version Test#CredCode#}
Hyper-V Virtual Machine Version Test#CredCode#else
Hyper-V Virtual Machine Version Test#CredCode#{
Hyper-V Virtual Machine Version Test#CredCode#    $TestStatus="Passed"
Hyper-V Virtual Machine Version Test#CredCode#    $TestText = "Virtual Machines are updated with latest version of Integration Services."
Hyper-V Virtual Machine Version Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Version Test#CredCode#}
Hyper-V Virtual Machine Version Test#CredCode#
Hyper-V Virtual Machine Version Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Virtual Machine Version Test#CredCode#$STR
Hyper-V Virtual Machine Version Test#CredCode#
Hyper-V Virtual Machine Version Test#CredCode#
Hyper-V Virtual Machine Version Test#CredCode#$AnyGap = "No"
Hyper-V Virtual Machine Version Test#CredCode#$TestStatus ="Passed"
Hyper-V Virtual Machine Version Test#CredCode#$SumVal = ""
Hyper-V Virtual Machine Version Test#CredCode#$TestText = ""
Hyper-V Virtual Machine Version Test#CredCode#
Hyper-V Virtual Machine Version Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Virtual Machine Version Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Virtual Machine Version Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Virtual Machine Version Test#CredCode#{        
Hyper-V Virtual Machine Version Test#CredCode#    $AllVMs = Get-VM -ComputerName $ServerName
Hyper-V Virtual Machine Version Test#CredCode#
Hyper-V Virtual Machine Version Test#CredCode#    ForEach ($Item in $AllVMs)
Hyper-V Virtual Machine Version Test#CredCode#    {                
Hyper-V Virtual Machine Version Test#CredCode#       IF ($Item.Version -eq "5.0")
Hyper-V Virtual Machine Version Test#CredCode#       {
Hyper-V Virtual Machine Version Test#CredCode#           $STR = $ServerName+","+$Item.Name+","+$Item.Version+","+"Ok"
Hyper-V Virtual Machine Version Test#CredCode#           Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Version Test#CredCode#       }
Hyper-V Virtual Machine Version Test#CredCode#       else
Hyper-V Virtual Machine Version Test#CredCode#       {
Hyper-V Virtual Machine Version Test#CredCode#           $AnyGap = "Yes"
Hyper-V Virtual Machine Version Test#CredCode#           $STR = $ServerName+","+$Item.Name+","+$Item.Version+","+"Not OK"
Hyper-V Virtual Machine Version Test#CredCode#           Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Version Test#CredCode#       }
Hyper-V Virtual Machine Version Test#CredCode#
Hyper-V Virtual Machine Version Test#CredCode#    }
Hyper-V Virtual Machine Version Test#CredCode#}
Hyper-V Virtual Machine Version Test#CredCode#
Hyper-V Virtual Machine Version Test#CredCode#If ($AnyGap -eq "Yes")
Hyper-V Virtual Machine Version Test#CredCode#{
Hyper-V Virtual Machine Version Test#CredCode#    $TestStatus="High"
Hyper-V Virtual Machine Version Test#CredCode#    $TestText = "Virtual Machines are not updated with latest version of Integration Services."
Hyper-V Virtual Machine Version Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Version Test#CredCode#}
Hyper-V Virtual Machine Version Test#CredCode#else
Hyper-V Virtual Machine Version Test#CredCode#{
Hyper-V Virtual Machine Version Test#CredCode#    $TestStatus="Passed"
Hyper-V Virtual Machine Version Test#CredCode#    $TestText = "Virtual Machines are updated with latest version of Integration Services."
Hyper-V Virtual Machine Version Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Version Test#CredCode#}
Hyper-V Virtual Machine Version Test#CredCode#
Hyper-V Virtual Machine Version Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Virtual Machine Version Test#CredCode#$STR
Hyper-V Virtual Machine Version Test#CredCode#
Hyper-V Virtual Machine Uptime Test#Headercode#$ThisString="Hyper-V Host, VM Name, UpTime, Final Status"
Hyper-V Virtual Machine Uptime Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Hyper-V Virtual Machine Uptime Test#Headercode#
Hyper-V Virtual Machine Uptime Test#Headercode#
Hyper-V Virtual Machine Uptime Test#Headercode#
Hyper-V Virtual Machine Uptime Test#CredCode#$AnyGap = "No"
Hyper-V Virtual Machine Uptime Test#CredCode#$TestStatus ="Passed"
Hyper-V Virtual Machine Uptime Test#CredCode#$SumVal = ""
Hyper-V Virtual Machine Uptime Test#CredCode#$TestText = ""
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Virtual Machine Uptime Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Virtual Machine Uptime Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Virtual Machine Uptime Test#CredCode#{ 
Hyper-V Virtual Machine Uptime Test#CredCode#$AllVMs = Get-VM -ComputerName $ServerName
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#ForEach ($Item in $AllVMs)
Hyper-V Virtual Machine Uptime Test#CredCode#{ 
Hyper-V Virtual Machine Uptime Test#CredCode#$AnyGap = "Yes"
Hyper-V Virtual Machine Uptime Test#CredCode#$STR = $ServerName+","+$Item.Name+","+$Item.UpTime+","+"Ok"
Hyper-V Virtual Machine Uptime Test#CredCode#Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Uptime Test#CredCode#}
Hyper-V Virtual Machine Uptime Test#CredCode#}
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#If ($AnyGap -eq "Yes")
Hyper-V Virtual Machine Uptime Test#CredCode#{
Hyper-V Virtual Machine Uptime Test#CredCode#$TestStatus="High"
Hyper-V Virtual Machine Uptime Test#CredCode#$TestText = "Virtual Machine Uptime was fetched. Some virtual machines have not been rebooted for more than 20 days."
Hyper-V Virtual Machine Uptime Test#CredCode#$SumVal = "NA"
Hyper-V Virtual Machine Uptime Test#CredCode#}
Hyper-V Virtual Machine Uptime Test#CredCode#else
Hyper-V Virtual Machine Uptime Test#CredCode#{
Hyper-V Virtual Machine Uptime Test#CredCode#$TestStatus="Passed"
Hyper-V Virtual Machine Uptime Test#CredCode#$TestText = "Virtual Machine Uptime was fetched."   
Hyper-V Virtual Machine Uptime Test#CredCode#$SumVal = "NA"
Hyper-V Virtual Machine Uptime Test#CredCode#}
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Virtual Machine Uptime Test#CredCode#$STR
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#$AnyGap = "No"
Hyper-V Virtual Machine Uptime Test#CredCode#$TestStatus ="Passed"
Hyper-V Virtual Machine Uptime Test#CredCode#$SumVal = ""
Hyper-V Virtual Machine Uptime Test#CredCode#$TestText = ""
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Virtual Machine Uptime Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Virtual Machine Uptime Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Virtual Machine Uptime Test#CredCode#{ 
Hyper-V Virtual Machine Uptime Test#CredCode#$AllVMs = Get-VM -ComputerName $ServerName
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#ForEach ($Item in $AllVMs)
Hyper-V Virtual Machine Uptime Test#CredCode#{ 
Hyper-V Virtual Machine Uptime Test#CredCode#$AnyGap = "Yes"
Hyper-V Virtual Machine Uptime Test#CredCode#$STR = $ServerName+","+$Item.Name+","+$Item.UpTime+","+"Ok"
Hyper-V Virtual Machine Uptime Test#CredCode#Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Uptime Test#CredCode#}
Hyper-V Virtual Machine Uptime Test#CredCode#}
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#If ($AnyGap -eq "Yes")
Hyper-V Virtual Machine Uptime Test#CredCode#{
Hyper-V Virtual Machine Uptime Test#CredCode#$TestStatus="High"
Hyper-V Virtual Machine Uptime Test#CredCode#$TestText = "Virtual Machine Uptime was fetched. Some virtual machines have not been rebooted for more than 20 days."
Hyper-V Virtual Machine Uptime Test#CredCode#$SumVal = "NA"
Hyper-V Virtual Machine Uptime Test#CredCode#}
Hyper-V Virtual Machine Uptime Test#CredCode#else
Hyper-V Virtual Machine Uptime Test#CredCode#{
Hyper-V Virtual Machine Uptime Test#CredCode#$TestStatus="Passed"
Hyper-V Virtual Machine Uptime Test#CredCode#$TestText = "Virtual Machine Uptime was fetched."   
Hyper-V Virtual Machine Uptime Test#CredCode#$SumVal = "NA"
Hyper-V Virtual Machine Uptime Test#CredCode#}
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Virtual Machine Uptime Test#CredCode#$STR
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Uptime Test#CredCode#
Hyper-V Virtual Machine Running Test#Headercode#$ThisString="Hyper-V Host, VM Name, VM Status, Final Status"
Hyper-V Virtual Machine Running Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Hyper-V Virtual Machine Running Test#Headercode# 
Hyper-V Virtual Machine Running Test#Headercode#
Hyper-V Virtual Machine Running Test#CredCode#$AnyGap = "No"
Hyper-V Virtual Machine Running Test#CredCode#$TestStatus ="Passed"
Hyper-V Virtual Machine Running Test#CredCode#$SumVal = ""
Hyper-V Virtual Machine Running Test#CredCode#$TestText = ""
Hyper-V Virtual Machine Running Test#CredCode#
Hyper-V Virtual Machine Running Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Virtual Machine Running Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Virtual Machine Running Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Virtual Machine Running Test#CredCode#{        
Hyper-V Virtual Machine Running Test#CredCode#    $AllVMs = Get-VM -ComputerName $ServerName
Hyper-V Virtual Machine Running Test#CredCode#
Hyper-V Virtual Machine Running Test#CredCode#    ForEach ($Item in $AllVMs)
Hyper-V Virtual Machine Running Test#CredCode#    {                
Hyper-V Virtual Machine Running Test#CredCode#       IF ($Item.State -eq "Running")
Hyper-V Virtual Machine Running Test#CredCode#       {
Hyper-V Virtual Machine Running Test#CredCode#           $STR = $ServerName+","+$Item.Name+","+$Item.State+","+"Ok"
Hyper-V Virtual Machine Running Test#CredCode#           Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Running Test#CredCode#       }
Hyper-V Virtual Machine Running Test#CredCode#       else
Hyper-V Virtual Machine Running Test#CredCode#       {
Hyper-V Virtual Machine Running Test#CredCode#           $AnyGap = "Yes"
Hyper-V Virtual Machine Running Test#CredCode#           $STR = $ServerName+","+$Item.Name+","+$Item.State+","+"WARNING: Not Running. Please check"
Hyper-V Virtual Machine Running Test#CredCode#           Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Running Test#CredCode#       }
Hyper-V Virtual Machine Running Test#CredCode#
Hyper-V Virtual Machine Running Test#CredCode#    }
Hyper-V Virtual Machine Running Test#CredCode#}
Hyper-V Virtual Machine Running Test#CredCode#
Hyper-V Virtual Machine Running Test#CredCode#If ($AnyGap -eq "Yes")
Hyper-V Virtual Machine Running Test#CredCode#{
Hyper-V Virtual Machine Running Test#CredCode#    $TestStatus="High"
Hyper-V Virtual Machine Running Test#CredCode#    $TestText = "Some Virtual Machines are not running. Please check."
Hyper-V Virtual Machine Running Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Running Test#CredCode#}
Hyper-V Virtual Machine Running Test#CredCode#else
Hyper-V Virtual Machine Running Test#CredCode#{
Hyper-V Virtual Machine Running Test#CredCode#    $TestStatus="Passed"
Hyper-V Virtual Machine Running Test#CredCode#    $TestText = "All Virtual Machines are running."
Hyper-V Virtual Machine Running Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Running Test#CredCode#}
Hyper-V Virtual Machine Running Test#CredCode#
Hyper-V Virtual Machine Running Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Virtual Machine Running Test#CredCode#$STR
Hyper-V Virtual Machine Running Test#CredCode# 
Hyper-V Virtual Machine Running Test#CredCode#
Hyper-V Virtual Machine Running Test#CredCode#$AnyGap = "No"
Hyper-V Virtual Machine Running Test#CredCode#$TestStatus ="Passed"
Hyper-V Virtual Machine Running Test#CredCode#$SumVal = ""
Hyper-V Virtual Machine Running Test#CredCode#$TestText = ""
Hyper-V Virtual Machine Running Test#CredCode#
Hyper-V Virtual Machine Running Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Virtual Machine Running Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Virtual Machine Running Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Virtual Machine Running Test#CredCode#{        
Hyper-V Virtual Machine Running Test#CredCode#    $AllVMs = Get-VM -ComputerName $ServerName
Hyper-V Virtual Machine Running Test#CredCode#
Hyper-V Virtual Machine Running Test#CredCode#    ForEach ($Item in $AllVMs)
Hyper-V Virtual Machine Running Test#CredCode#    {                
Hyper-V Virtual Machine Running Test#CredCode#       IF ($Item.State -eq "Running")
Hyper-V Virtual Machine Running Test#CredCode#       {
Hyper-V Virtual Machine Running Test#CredCode#           $STR = $ServerName+","+$Item.Name+","+$Item.State+","+"Ok"
Hyper-V Virtual Machine Running Test#CredCode#           Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Running Test#CredCode#       }
Hyper-V Virtual Machine Running Test#CredCode#       else
Hyper-V Virtual Machine Running Test#CredCode#       {
Hyper-V Virtual Machine Running Test#CredCode#           $AnyGap = "Yes"
Hyper-V Virtual Machine Running Test#CredCode#           $STR = $ServerName+","+$Item.Name+","+$Item.State+","+"WARNING: Not Running. Please check"
Hyper-V Virtual Machine Running Test#CredCode#           Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Running Test#CredCode#       }
Hyper-V Virtual Machine Running Test#CredCode#
Hyper-V Virtual Machine Running Test#CredCode#    }
Hyper-V Virtual Machine Running Test#CredCode#}
Hyper-V Virtual Machine Running Test#CredCode#
Hyper-V Virtual Machine Running Test#CredCode#If ($AnyGap -eq "Yes")
Hyper-V Virtual Machine Running Test#CredCode#{
Hyper-V Virtual Machine Running Test#CredCode#    $TestStatus="High"
Hyper-V Virtual Machine Running Test#CredCode#    $TestText = "Some Virtual Machines are not running. Please check."
Hyper-V Virtual Machine Running Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Running Test#CredCode#}
Hyper-V Virtual Machine Running Test#CredCode#else
Hyper-V Virtual Machine Running Test#CredCode#{
Hyper-V Virtual Machine Running Test#CredCode#    $TestStatus="Passed"
Hyper-V Virtual Machine Running Test#CredCode#    $TestText = "All Virtual Machines are running."
Hyper-V Virtual Machine Running Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Running Test#CredCode#}
Hyper-V Virtual Machine Running Test#CredCode#
Hyper-V Virtual Machine Running Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Virtual Machine Running Test#CredCode#$STR
Hyper-V Virtual Machine Running Test#CredCode# 
Hyper-V Virtual Machine Running Test#CredCode#
Hyper-V Virtual Machine Clustering Test#Headercode#$ThisString="Hyper-V Host, VM Name, Is Clustered?, Final Status"
Hyper-V Virtual Machine Clustering Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Hyper-V Virtual Machine Clustering Test#Headercode# 
Hyper-V Virtual Machine Clustering Test#Headercode#
Hyper-V Virtual Machine Clustering Test#CredCode#$AnyGap = "No"
Hyper-V Virtual Machine Clustering Test#CredCode#$TestStatus ="Passed"
Hyper-V Virtual Machine Clustering Test#CredCode#$SumVal = ""
Hyper-V Virtual Machine Clustering Test#CredCode#$TestText = ""
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Virtual Machine Clustering Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Virtual Machine Clustering Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Virtual Machine Clustering Test#CredCode#{        
Hyper-V Virtual Machine Clustering Test#CredCode#    $AllVMs = Get-VM -ComputerName $ServerName
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#    ForEach ($Item in $AllVMs)
Hyper-V Virtual Machine Clustering Test#CredCode#    {                
Hyper-V Virtual Machine Clustering Test#CredCode#      
Hyper-V Virtual Machine Clustering Test#CredCode#       $ClusterStatus = $Item.IsClustered
Hyper-V Virtual Machine Clustering Test#CredCode#       
Hyper-V Virtual Machine Clustering Test#CredCode#       IF ($ClusterStatus -eq $false)
Hyper-V Virtual Machine Clustering Test#CredCode#       {
Hyper-V Virtual Machine Clustering Test#CredCode#            $AnyGap = "Yes"
Hyper-V Virtual Machine Clustering Test#CredCode#            $STR = $ServerName+","+$Item.Name+","+$ClusterStatus+", NOT Ok"
Hyper-V Virtual Machine Clustering Test#CredCode#            Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Clustering Test#CredCode#       }
Hyper-V Virtual Machine Clustering Test#CredCode#       else
Hyper-V Virtual Machine Clustering Test#CredCode#       {
Hyper-V Virtual Machine Clustering Test#CredCode#            $STR = $ServerName+","+$Item.Name+","+$ClusterStatus+", Ok"
Hyper-V Virtual Machine Clustering Test#CredCode#            Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Clustering Test#CredCode#       }
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#    }
Hyper-V Virtual Machine Clustering Test#CredCode#}
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#If ($AnyGap -eq "Yes")
Hyper-V Virtual Machine Clustering Test#CredCode#{
Hyper-V Virtual Machine Clustering Test#CredCode#    $TestStatus="High"
Hyper-V Virtual Machine Clustering Test#CredCode#    $TestText = "Some Virtual Machines are not clustered. Please check."
Hyper-V Virtual Machine Clustering Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Clustering Test#CredCode#}
Hyper-V Virtual Machine Clustering Test#CredCode#else
Hyper-V Virtual Machine Clustering Test#CredCode#{
Hyper-V Virtual Machine Clustering Test#CredCode#    $TestStatus="Passed"
Hyper-V Virtual Machine Clustering Test#CredCode#    $TestText = "All Virtual Machines are clustered."
Hyper-V Virtual Machine Clustering Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Clustering Test#CredCode#}
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Virtual Machine Clustering Test#CredCode#$STR
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode# 
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#$AnyGap = "No"
Hyper-V Virtual Machine Clustering Test#CredCode#$TestStatus ="Passed"
Hyper-V Virtual Machine Clustering Test#CredCode#$SumVal = ""
Hyper-V Virtual Machine Clustering Test#CredCode#$TestText = ""
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Virtual Machine Clustering Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Virtual Machine Clustering Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Virtual Machine Clustering Test#CredCode#{        
Hyper-V Virtual Machine Clustering Test#CredCode#    $AllVMs = Get-VM -ComputerName $ServerName
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#    ForEach ($Item in $AllVMs)
Hyper-V Virtual Machine Clustering Test#CredCode#    {                
Hyper-V Virtual Machine Clustering Test#CredCode#      
Hyper-V Virtual Machine Clustering Test#CredCode#       $ClusterStatus = $Item.IsClustered
Hyper-V Virtual Machine Clustering Test#CredCode#       
Hyper-V Virtual Machine Clustering Test#CredCode#       IF ($ClusterStatus -eq $false)
Hyper-V Virtual Machine Clustering Test#CredCode#       {
Hyper-V Virtual Machine Clustering Test#CredCode#            $AnyGap = "Yes"
Hyper-V Virtual Machine Clustering Test#CredCode#            $STR = $ServerName+","+$Item.Name+","+$ClusterStatus+", NOT Ok"
Hyper-V Virtual Machine Clustering Test#CredCode#            Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Clustering Test#CredCode#       }
Hyper-V Virtual Machine Clustering Test#CredCode#       else
Hyper-V Virtual Machine Clustering Test#CredCode#       {
Hyper-V Virtual Machine Clustering Test#CredCode#            $STR = $ServerName+","+$Item.Name+","+$ClusterStatus+", Ok"
Hyper-V Virtual Machine Clustering Test#CredCode#            Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Clustering Test#CredCode#       }
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#    }
Hyper-V Virtual Machine Clustering Test#CredCode#}
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#If ($AnyGap -eq "Yes")
Hyper-V Virtual Machine Clustering Test#CredCode#{
Hyper-V Virtual Machine Clustering Test#CredCode#    $TestStatus="High"
Hyper-V Virtual Machine Clustering Test#CredCode#    $TestText = "Some Virtual Machines are not clustered. Please check."
Hyper-V Virtual Machine Clustering Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Clustering Test#CredCode#}
Hyper-V Virtual Machine Clustering Test#CredCode#else
Hyper-V Virtual Machine Clustering Test#CredCode#{
Hyper-V Virtual Machine Clustering Test#CredCode#    $TestStatus="Passed"
Hyper-V Virtual Machine Clustering Test#CredCode#    $TestText = "All Virtual Machines are clustered."
Hyper-V Virtual Machine Clustering Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Clustering Test#CredCode#}
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Virtual Machine Clustering Test#CredCode#$STR
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Clustering Test#CredCode# 
Hyper-V Virtual Machine Clustering Test#CredCode#
Hyper-V Virtual Machine Status Test#Headercode#$ThisString="Hyper-V Host, VM Name, State, Memory Assigned, Status, Final Status"
Hyper-V Virtual Machine Status Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Hyper-V Virtual Machine Status Test#Headercode#
Hyper-V Virtual Machine Status Test#Headercode#
Hyper-V Virtual Machine Status Test#Headercode#
Hyper-V Virtual Machine Status Test#CredCode#$AnyGap = "No"
Hyper-V Virtual Machine Status Test#CredCode#$TestStatus ="Passed"
Hyper-V Virtual Machine Status Test#CredCode#$SumVal = ""
Hyper-V Virtual Machine Status Test#CredCode#$TestText = ""
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine Status Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Virtual Machine Status Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Virtual Machine Status Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Virtual Machine Status Test#CredCode#{ 
Hyper-V Virtual Machine Status Test#CredCode#$AllVMs = Get-VM -ComputerName $ServerName
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine Status Test#CredCode#ForEach ($Item in $AllVMs)
Hyper-V Virtual Machine Status Test#CredCode#{
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine Status Test#CredCode#IF ($Item.Status -eq "Operating normally")
Hyper-V Virtual Machine Status Test#CredCode#{
Hyper-V Virtual Machine Status Test#CredCode#$STR = $ServerName+","+$Item.Name+","+$Item.State+","+$Item.MemoryAssigned+","+$Item.Status+", Ok"
Hyper-V Virtual Machine Status Test#CredCode#Add-Content $TestCSVFile $STR
Hyper-V Virtual Machine Status Test#CredCode#}
Hyper-V Virtual Machine Status Test#CredCode#else
Hyper-V Virtual Machine Status Test#CredCode#{
Hyper-V Virtual Machine Status Test#CredCode#$AnyGap = "Yes"
Hyper-V Virtual Machine Status Test#CredCode#$STR = $ServerName+","+$Item.Name+","+$Item.State+","+$Item.MemoryAssigned+","+$Item.Status+", Not Operating Normally. Please check"
Hyper-V Virtual Machine Status Test#CredCode#Add-Content $TestCSVFile $STR
Hyper-V Virtual Machine Status Test#CredCode#} 
Hyper-V Virtual Machine Status Test#CredCode#}
Hyper-V Virtual Machine Status Test#CredCode#}
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine Status Test#CredCode#If ($AnyGap -eq "Yes")
Hyper-V Virtual Machine Status Test#CredCode#{
Hyper-V Virtual Machine Status Test#CredCode#$TestStatus="High"
Hyper-V Virtual Machine Status Test#CredCode#$TestText = "Some Virtual Machines are not operating normally. Please check."
Hyper-V Virtual Machine Status Test#CredCode#$SumVal = "NA"
Hyper-V Virtual Machine Status Test#CredCode#}
Hyper-V Virtual Machine Status Test#CredCode#else
Hyper-V Virtual Machine Status Test#CredCode#{
Hyper-V Virtual Machine Status Test#CredCode#$TestStatus="Passed"
Hyper-V Virtual Machine Status Test#CredCode#$TestText = "All Virtual Machines are operating normally on Hyper-V Hosts."
Hyper-V Virtual Machine Status Test#CredCode#$SumVal = "NA"
Hyper-V Virtual Machine Status Test#CredCode#}
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine Status Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Virtual Machine Status Test#CredCode#$STR
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine Status Test#CredCode#$AnyGap = "No"
Hyper-V Virtual Machine Status Test#CredCode#$TestStatus ="Passed"
Hyper-V Virtual Machine Status Test#CredCode#$SumVal = ""
Hyper-V Virtual Machine Status Test#CredCode#$TestText = ""
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine Status Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Virtual Machine Status Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Virtual Machine Status Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Virtual Machine Status Test#CredCode#{ 
Hyper-V Virtual Machine Status Test#CredCode#$AllVMs = Get-VM -ComputerName $ServerName
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine Status Test#CredCode#ForEach ($Item in $AllVMs)
Hyper-V Virtual Machine Status Test#CredCode#{
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine Status Test#CredCode#IF ($Item.Status -eq "Operating normally")
Hyper-V Virtual Machine Status Test#CredCode#{
Hyper-V Virtual Machine Status Test#CredCode#$STR = $ServerName+","+$Item.Name+","+$Item.State+","+$Item.MemoryAssigned+","+$Item.Status+", Ok"
Hyper-V Virtual Machine Status Test#CredCode#Add-Content $TestCSVFile $STR
Hyper-V Virtual Machine Status Test#CredCode#}
Hyper-V Virtual Machine Status Test#CredCode#else
Hyper-V Virtual Machine Status Test#CredCode#{
Hyper-V Virtual Machine Status Test#CredCode#$AnyGap = "Yes"
Hyper-V Virtual Machine Status Test#CredCode#$STR = $ServerName+","+$Item.Name+","+$Item.State+","+$Item.MemoryAssigned+","+$Item.Status+", Not Operating Normally. Please check"
Hyper-V Virtual Machine Status Test#CredCode#Add-Content $TestCSVFile $STR
Hyper-V Virtual Machine Status Test#CredCode#} 
Hyper-V Virtual Machine Status Test#CredCode#}
Hyper-V Virtual Machine Status Test#CredCode#}
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine Status Test#CredCode#If ($AnyGap -eq "Yes")
Hyper-V Virtual Machine Status Test#CredCode#{
Hyper-V Virtual Machine Status Test#CredCode#$TestStatus="High"
Hyper-V Virtual Machine Status Test#CredCode#$TestText = "Some Virtual Machines are not operating normally. Please check."
Hyper-V Virtual Machine Status Test#CredCode#$SumVal = "NA"
Hyper-V Virtual Machine Status Test#CredCode#}
Hyper-V Virtual Machine Status Test#CredCode#else
Hyper-V Virtual Machine Status Test#CredCode#{
Hyper-V Virtual Machine Status Test#CredCode#$TestStatus="Passed"
Hyper-V Virtual Machine Status Test#CredCode#$TestText = "All Virtual Machines are operating normally on Hyper-V Hosts."
Hyper-V Virtual Machine Status Test#CredCode#$SumVal = "NA"
Hyper-V Virtual Machine Status Test#CredCode#}
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine Status Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Virtual Machine Status Test#CredCode#$STR
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine Status Test#CredCode#
Hyper-V Virtual Machine RDP Test#Headercode#$ThisString="Hyper-V Host, VM Name, Remote Address, Ping Success?, TCP Test Success?, Final Status"
Hyper-V Virtual Machine RDP Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Hyper-V Virtual Machine RDP Test#Headercode#
Hyper-V Virtual Machine RDP Test#Headercode#
Hyper-V Virtual Machine RDP Test#Headercode#
Hyper-V Virtual Machine RDP Test#CredCode#$AnyGap = "No"
Hyper-V Virtual Machine RDP Test#CredCode#$TestStatus ="Passed"
Hyper-V Virtual Machine RDP Test#CredCode#$SumVal = ""
Hyper-V Virtual Machine RDP Test#CredCode#$TestText = ""
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Virtual Machine RDP Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Virtual Machine RDP Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Virtual Machine RDP Test#CredCode#{ 
Hyper-V Virtual Machine RDP Test#CredCode#$AllVMs = Get-VM -ComputerName $ServerName
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#ForEach ($Item in $AllVMs)
Hyper-V Virtual Machine RDP Test#CredCode#{ 
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#$CheckCon = Test-NetConnection $Item.name -Port 3389
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#$RAddress = $CheckCon.RemoteAddress
Hyper-V Virtual Machine RDP Test#CredCode#$PingSu = $CheckCon.PingSucceeded
Hyper-V Virtual Machine RDP Test#CredCode#$TCPTest = $CheckCon.TCPTestSucceeded
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#IF ($PingSu -eq $False -or $TCPTest -eq $False)
Hyper-V Virtual Machine RDP Test#CredCode#{
Hyper-V Virtual Machine RDP Test#CredCode#$AnyGap = "Yes"
Hyper-V Virtual Machine RDP Test#CredCode#$STR = $ServerName+","+$Item.Name+","+$RAddress+","+$PingSu+","+$TCPTest+", Please check."
Hyper-V Virtual Machine RDP Test#CredCode#Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine RDP Test#CredCode#}
Hyper-V Virtual Machine RDP Test#CredCode#else
Hyper-V Virtual Machine RDP Test#CredCode#{
Hyper-V Virtual Machine RDP Test#CredCode#$STR = $ServerName+","+$Item.Name+","+$RAddress+","+$PingSu+","+$TCPTest+", Ok"
Hyper-V Virtual Machine RDP Test#CredCode#Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine RDP Test#CredCode#}
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#}
Hyper-V Virtual Machine RDP Test#CredCode#}
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#If ($AnyGap -eq "Yes")
Hyper-V Virtual Machine RDP Test#CredCode#{
Hyper-V Virtual Machine RDP Test#CredCode#$TestStatus="High"
Hyper-V Virtual Machine RDP Test#CredCode#$TestText = "Some Virtual Machines did not respond to Ping and TCP Test for RDP. Please check"
Hyper-V Virtual Machine RDP Test#CredCode#$SumVal = "NA"
Hyper-V Virtual Machine RDP Test#CredCode#}
Hyper-V Virtual Machine RDP Test#CredCode#else
Hyper-V Virtual Machine RDP Test#CredCode#{
Hyper-V Virtual Machine RDP Test#CredCode#$TestStatus="Passed"
Hyper-V Virtual Machine RDP Test#CredCode#$TestText = "All Virtual Machines responded to Ping and TCP Test for RDP."
Hyper-V Virtual Machine RDP Test#CredCode#$SumVal = "NA"
Hyper-V Virtual Machine RDP Test#CredCode#}
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Virtual Machine RDP Test#CredCode#$STR
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#$AnyGap = "No"
Hyper-V Virtual Machine RDP Test#CredCode#$TestStatus ="Passed"
Hyper-V Virtual Machine RDP Test#CredCode#$SumVal = ""
Hyper-V Virtual Machine RDP Test#CredCode#$TestText = ""
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Virtual Machine RDP Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Virtual Machine RDP Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Virtual Machine RDP Test#CredCode#{ 
Hyper-V Virtual Machine RDP Test#CredCode#$AllVMs = Get-VM -ComputerName $ServerName
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#ForEach ($Item in $AllVMs)
Hyper-V Virtual Machine RDP Test#CredCode#{ 
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#$CheckCon = Test-NetConnection $Item.name -Port 3389
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#$RAddress = $CheckCon.RemoteAddress
Hyper-V Virtual Machine RDP Test#CredCode#$PingSu = $CheckCon.PingSucceeded
Hyper-V Virtual Machine RDP Test#CredCode#$TCPTest = $CheckCon.TCPTestSucceeded
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#IF ($PingSu -eq $False -or $TCPTest -eq $False)
Hyper-V Virtual Machine RDP Test#CredCode#{
Hyper-V Virtual Machine RDP Test#CredCode#$AnyGap = "Yes"
Hyper-V Virtual Machine RDP Test#CredCode#$STR = $ServerName+","+$Item.Name+","+$RAddress+","+$PingSu+","+$TCPTest+", Please check."
Hyper-V Virtual Machine RDP Test#CredCode#Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine RDP Test#CredCode#}
Hyper-V Virtual Machine RDP Test#CredCode#else
Hyper-V Virtual Machine RDP Test#CredCode#{
Hyper-V Virtual Machine RDP Test#CredCode#$STR = $ServerName+","+$Item.Name+","+$RAddress+","+$PingSu+","+$TCPTest+", Ok"
Hyper-V Virtual Machine RDP Test#CredCode#Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine RDP Test#CredCode#}
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#}
Hyper-V Virtual Machine RDP Test#CredCode#}
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#If ($AnyGap -eq "Yes")
Hyper-V Virtual Machine RDP Test#CredCode#{
Hyper-V Virtual Machine RDP Test#CredCode#$TestStatus="High"
Hyper-V Virtual Machine RDP Test#CredCode#$TestText = "Some Virtual Machines did not respond to Ping and TCP Test for RDP. Please check"
Hyper-V Virtual Machine RDP Test#CredCode#$SumVal = "NA"
Hyper-V Virtual Machine RDP Test#CredCode#}
Hyper-V Virtual Machine RDP Test#CredCode#else
Hyper-V Virtual Machine RDP Test#CredCode#{
Hyper-V Virtual Machine RDP Test#CredCode#$TestStatus="Passed"
Hyper-V Virtual Machine RDP Test#CredCode#$TestText = "All Virtual Machines responded to Ping and TCP Test for RDP."
Hyper-V Virtual Machine RDP Test#CredCode#$SumVal = "NA"
Hyper-V Virtual Machine RDP Test#CredCode#}
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Virtual Machine RDP Test#CredCode#$STR
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine RDP Test#CredCode#
Hyper-V Virtual Machine Memory Test#Headercode#$ThisString="Hyper-V Host, VM Name, MemoryAssignedInMB, MemoryDemandInMB,MemoryStatus"
Hyper-V Virtual Machine Memory Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Hyper-V Virtual Machine Memory Test#Headercode# 
Hyper-V Virtual Machine Memory Test#Headercode#
Hyper-V Virtual Machine Memory Test#CredCode#$AnyGap = "No"
Hyper-V Virtual Machine Memory Test#CredCode#$TestStatus ="Passed"
Hyper-V Virtual Machine Memory Test#CredCode#$SumVal = ""
Hyper-V Virtual Machine Memory Test#CredCode#$TestText = ""
Hyper-V Virtual Machine Memory Test#CredCode#
Hyper-V Virtual Machine Memory Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Virtual Machine Memory Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Virtual Machine Memory Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Virtual Machine Memory Test#CredCode#{        
Hyper-V Virtual Machine Memory Test#CredCode#    $AllVMS = (Get-VM -ComputerName $ServerName).where({$_.state -eq 'running'}) |
Hyper-V Virtual Machine Memory Test#CredCode#    select Computername,VMName,
Hyper-V Virtual Machine Memory Test#CredCode#    @{Name="MemAssignedMB";Expression={$_.MemoryAssigned/1mb}},
Hyper-V Virtual Machine Memory Test#CredCode#    @{Name="MemDemandMB";Expression = {$_.MemoryDemand/1mb}},
Hyper-V Virtual Machine Memory Test#CredCode#    MemoryStatus
Hyper-V Virtual Machine Memory Test#CredCode#
Hyper-V Virtual Machine Memory Test#CredCode#    ForEach ($Item in $AllVMs)
Hyper-V Virtual Machine Memory Test#CredCode#    {                
Hyper-V Virtual Machine Memory Test#CredCode#             
Hyper-V Virtual Machine Memory Test#CredCode#       $MemStat = $Item.MemoryStatus
Hyper-V Virtual Machine Memory Test#CredCode#       
Hyper-V Virtual Machine Memory Test#CredCode#       IF ($MemStat -eq "Warning")
Hyper-V Virtual Machine Memory Test#CredCode#       {
Hyper-V Virtual Machine Memory Test#CredCode#            $AnyGap = "Yes"
Hyper-V Virtual Machine Memory Test#CredCode#            $STR = $ServerName+","+$Item.VMName+","+$Item.MemAssignedMB+","+$Item.MemDemandMB+","+$Item.MemoryStatus
Hyper-V Virtual Machine Memory Test#CredCode#            Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Memory Test#CredCode#       }
Hyper-V Virtual Machine Memory Test#CredCode#       else
Hyper-V Virtual Machine Memory Test#CredCode#       {
Hyper-V Virtual Machine Memory Test#CredCode#            $STR = $ServerName+","+$Item.VMName+","+$Item.MemAssignedMB+","+$Item.MemDemandMB+","+$Item.MemoryStatus
Hyper-V Virtual Machine Memory Test#CredCode#            Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Memory Test#CredCode#       }
Hyper-V Virtual Machine Memory Test#CredCode#
Hyper-V Virtual Machine Memory Test#CredCode#    }
Hyper-V Virtual Machine Memory Test#CredCode#}
Hyper-V Virtual Machine Memory Test#CredCode#
Hyper-V Virtual Machine Memory Test#CredCode#If ($AnyGap -eq "Yes")
Hyper-V Virtual Machine Memory Test#CredCode#{
Hyper-V Virtual Machine Memory Test#CredCode#    $TestStatus="High"
Hyper-V Virtual Machine Memory Test#CredCode#    $TestText = "Some Virtual Machines are running low on Memory. Please check."
Hyper-V Virtual Machine Memory Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Memory Test#CredCode#}
Hyper-V Virtual Machine Memory Test#CredCode#else
Hyper-V Virtual Machine Memory Test#CredCode#{
Hyper-V Virtual Machine Memory Test#CredCode#    $TestStatus="Passed"
Hyper-V Virtual Machine Memory Test#CredCode#    $TestText = "Virtual Machines are running normally."
Hyper-V Virtual Machine Memory Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Memory Test#CredCode#}
Hyper-V Virtual Machine Memory Test#CredCode#
Hyper-V Virtual Machine Memory Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Virtual Machine Memory Test#CredCode#$STR
Hyper-V Virtual Machine Memory Test#CredCode# 
Hyper-V Virtual Machine Memory Test#CredCode#
Hyper-V Virtual Machine Memory Test#CredCode#$AnyGap = "No"
Hyper-V Virtual Machine Memory Test#CredCode#$TestStatus ="Passed"
Hyper-V Virtual Machine Memory Test#CredCode#$SumVal = ""
Hyper-V Virtual Machine Memory Test#CredCode#$TestText = ""
Hyper-V Virtual Machine Memory Test#CredCode#
Hyper-V Virtual Machine Memory Test#CredCode#$HyperVServerFile = "C:\Users\Public\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\Hyper-VServers.CSV"
Hyper-V Virtual Machine Memory Test#CredCode#$GCAll = GC $HyperVServerFile
Hyper-V Virtual Machine Memory Test#CredCode#ForEach ($ServerName in $GCAll)
Hyper-V Virtual Machine Memory Test#CredCode#{        
Hyper-V Virtual Machine Memory Test#CredCode#    $AllVMS = (Get-VM -ComputerName $ServerName).where({$_.state -eq 'running'}) |
Hyper-V Virtual Machine Memory Test#CredCode#    select Computername,VMName,
Hyper-V Virtual Machine Memory Test#CredCode#    @{Name="MemAssignedMB";Expression={$_.MemoryAssigned/1mb}},
Hyper-V Virtual Machine Memory Test#CredCode#    @{Name="MemDemandMB";Expression = {$_.MemoryDemand/1mb}},
Hyper-V Virtual Machine Memory Test#CredCode#    MemoryStatus
Hyper-V Virtual Machine Memory Test#CredCode#
Hyper-V Virtual Machine Memory Test#CredCode#    ForEach ($Item in $AllVMs)
Hyper-V Virtual Machine Memory Test#CredCode#    {                
Hyper-V Virtual Machine Memory Test#CredCode#             
Hyper-V Virtual Machine Memory Test#CredCode#       $MemStat = $Item.MemoryStatus
Hyper-V Virtual Machine Memory Test#CredCode#       
Hyper-V Virtual Machine Memory Test#CredCode#       IF ($MemStat -eq "Warning")
Hyper-V Virtual Machine Memory Test#CredCode#       {
Hyper-V Virtual Machine Memory Test#CredCode#            $AnyGap = "Yes"
Hyper-V Virtual Machine Memory Test#CredCode#            $STR = $ServerName+","+$Item.VMName+","+$Item.MemAssignedMB+","+$Item.MemDemandMB+","+$Item.MemoryStatus
Hyper-V Virtual Machine Memory Test#CredCode#            Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Memory Test#CredCode#       }
Hyper-V Virtual Machine Memory Test#CredCode#       else
Hyper-V Virtual Machine Memory Test#CredCode#       {
Hyper-V Virtual Machine Memory Test#CredCode#            $STR = $ServerName+","+$Item.VMName+","+$Item.MemAssignedMB+","+$Item.MemDemandMB+","+$Item.MemoryStatus
Hyper-V Virtual Machine Memory Test#CredCode#            Add-Content $TestCSVFile $STR       
Hyper-V Virtual Machine Memory Test#CredCode#       }
Hyper-V Virtual Machine Memory Test#CredCode#
Hyper-V Virtual Machine Memory Test#CredCode#    }
Hyper-V Virtual Machine Memory Test#CredCode#}
Hyper-V Virtual Machine Memory Test#CredCode#
Hyper-V Virtual Machine Memory Test#CredCode#If ($AnyGap -eq "Yes")
Hyper-V Virtual Machine Memory Test#CredCode#{
Hyper-V Virtual Machine Memory Test#CredCode#    $TestStatus="High"
Hyper-V Virtual Machine Memory Test#CredCode#    $TestText = "Some Virtual Machines are running low on Memory. Please check."
Hyper-V Virtual Machine Memory Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Memory Test#CredCode#}
Hyper-V Virtual Machine Memory Test#CredCode#else
Hyper-V Virtual Machine Memory Test#CredCode#{
Hyper-V Virtual Machine Memory Test#CredCode#    $TestStatus="Passed"
Hyper-V Virtual Machine Memory Test#CredCode#    $TestText = "Virtual Machines are running normally."
Hyper-V Virtual Machine Memory Test#CredCode#    $SumVal = "NA"
Hyper-V Virtual Machine Memory Test#CredCode#}
Hyper-V Virtual Machine Memory Test#CredCode#
Hyper-V Virtual Machine Memory Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
Hyper-V Virtual Machine Memory Test#CredCode#$STR
Hyper-V Virtual Machine Memory Test#CredCode# 
Hyper-V Virtual Machine Memory Test#CredCode#
Azure Virtual Machine VM Extensions Test#Headercode#$ThisString="Azure Subscription, VM Name, Resource Group, VM Extensions Installed?, Final Status"
Azure Virtual Machine VM Extensions Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Azure Virtual Machine VM Extensions Test#CredCode#
Azure Virtual Machine VM Extensions Test#CredCode#$AnyGap = "No"
Azure Virtual Machine VM Extensions Test#CredCode#
Azure Virtual Machine VM Extensions Test#CredCode#$AllSubs = Get-AzureRmSubscription
Azure Virtual Machine VM Extensions Test#CredCode#ForEach ($EachSub in $AllSubs)
Azure Virtual Machine VM Extensions Test#CredCode#{
Azure Virtual Machine VM Extensions Test#CredCode#    $ThisSub = $EachSub.ID
Azure Virtual Machine VM Extensions Test#CredCode#    Select-AzureRmSubscription -Subscription $ThisSub
Azure Virtual Machine VM Extensions Test#CredCode#    
Azure Virtual Machine VM Extensions Test#CredCode#    ForEach ($EachVM in $AllVMs)
Azure Virtual Machine VM Extensions Test#CredCode#    {        
Azure Virtual Machine VM Extensions Test#CredCode#        $ThisVM = $EachVM.Name
Azure Virtual Machine VM Extensions Test#CredCode#        $ThisVMRS = $EachVM.ResourceGroupName
Azure Virtual Machine VM Extensions Test#CredCode#        $PStatus = $EachVM.PowerState
Azure Virtual Machine VM Extensions Test#CredCode#    
Azure Virtual Machine VM Extensions Test#CredCode#        $AllExNow = Get-AzureRmResource -ResourceId /subscriptions/$ThisSub/resourceGroups/$ThisVMRS/providers/Microsoft.Compute/virtualMachines/$ThisVM/extensions
Azure Virtual Machine VM Extensions Test#CredCode#        $TotNow = $AllExNow.Name.Count
Azure Virtual Machine VM Extensions Test#CredCode#                                  
Azure Virtual Machine VM Extensions Test#CredCode#        IF ($TotNow -eq 0)
Azure Virtual Machine VM Extensions Test#CredCode#        {
Azure Virtual Machine VM Extensions Test#CredCode#            $AnyGap = "Yes"
Azure Virtual Machine VM Extensions Test#CredCode#            $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+", Not Installed,Not Ok"
Azure Virtual Machine VM Extensions Test#CredCode#            Add-Content $TestCSVFile $STR
Azure Virtual Machine VM Extensions Test#CredCode#        }
Azure Virtual Machine VM Extensions Test#CredCode#        else
Azure Virtual Machine VM Extensions Test#CredCode#        {                        
Azure Virtual Machine VM Extensions Test#CredCode#            $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+", Installed, Ok"
Azure Virtual Machine VM Extensions Test#CredCode#            Add-Content $TestCSVFile $STR
Azure Virtual Machine VM Extensions Test#CredCode#        }
Azure Virtual Machine VM Extensions Test#CredCode#
Azure Virtual Machine VM Extensions Test#CredCode#    }
Azure Virtual Machine VM Extensions Test#CredCode#
Azure Virtual Machine VM Extensions Test#CredCode#}
Azure Virtual Machine VM Extensions Test#CredCode#
Azure Virtual Machine VM Extensions Test#CredCode#    IF ($AnyGap -eq "Yes")
Azure Virtual Machine VM Extensions Test#CredCode#    {
Azure Virtual Machine VM Extensions Test#CredCode#        $TestStatus="High"
Azure Virtual Machine VM Extensions Test#CredCode#        $TestText="HIGH ISSUE"
Azure Virtual Machine VM Extensions Test#CredCode#    }
Azure Virtual Machine VM Extensions Test#CredCode#    else
Azure Virtual Machine VM Extensions Test#CredCode#    {
Azure Virtual Machine VM Extensions Test#CredCode#        $TestStatus="Passed"
Azure Virtual Machine VM Extensions Test#CredCode#        $TestText="MEDIUM ISSUE"    
Azure Virtual Machine VM Extensions Test#CredCode#    }
Azure Virtual Machine Status Test#Headercode#$ThisString="Azure Subscription, VM Name, Resource Group, VM Current Status, Final Status"
Azure Virtual Machine Status Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Azure Virtual Machine Status Test#CredCode#
Azure Virtual Machine Status Test#CredCode#$AnyGap = "No"
Azure Virtual Machine Status Test#CredCode#
Azure Virtual Machine Status Test#CredCode#$AllSubs = Get-AzureRmSubscription
Azure Virtual Machine Status Test#CredCode#ForEach ($EachSub in $AllSubs)
Azure Virtual Machine Status Test#CredCode#{
Azure Virtual Machine Status Test#CredCode#    $ThisSub = $EachSub.ID
Azure Virtual Machine Status Test#CredCode#    Select-AzureRmSubscription -Subscription $ThisSub
Azure Virtual Machine Status Test#CredCode#    
Azure Virtual Machine Status Test#CredCode#    $AllVMs = Get-AzureRmVM -Status | Select-Object Name, PowerState, ResourceGroupName
Azure Virtual Machine Status Test#CredCode#    ForEach ($EachVM in $AllVMs)
Azure Virtual Machine Status Test#CredCode#    {        
Azure Virtual Machine Status Test#CredCode#        $ThisVM = $EachVM.Name
Azure Virtual Machine Status Test#CredCode#        $ThisVMRS = $EachVM.ResourceGroupName
Azure Virtual Machine Status Test#CredCode#        $PStatus = $EachVM.PowerState
Azure Virtual Machine Status Test#CredCode#                                        
Azure Virtual Machine Status Test#CredCode#        IF ($PStatus -eq "VM running")
Azure Virtual Machine Status Test#CredCode#        {
Azure Virtual Machine Status Test#CredCode#            $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+","+$PStatus+",Ok"
Azure Virtual Machine Status Test#CredCode#            Add-Content $TestCSVFile $STR
Azure Virtual Machine Status Test#CredCode#        }
Azure Virtual Machine Status Test#CredCode#        else
Azure Virtual Machine Status Test#CredCode#        {            
Azure Virtual Machine Status Test#CredCode#            $AnyGap = "Yes"
Azure Virtual Machine Status Test#CredCode#            $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+","+$PStatus+",Not Ok"
Azure Virtual Machine Status Test#CredCode#            Add-Content $TestCSVFile $STR
Azure Virtual Machine Status Test#CredCode#        }
Azure Virtual Machine Status Test#CredCode#
Azure Virtual Machine Status Test#CredCode#    }
Azure Virtual Machine Status Test#CredCode#
Azure Virtual Machine Status Test#CredCode#}
Azure Virtual Machine Status Test#CredCode#
Azure Virtual Machine Status Test#CredCode#    IF ($AnyGap -eq "Yes")
Azure Virtual Machine Status Test#CredCode#    {
Azure Virtual Machine Status Test#CredCode#        $TestStatus="High"
Azure Virtual Machine Status Test#CredCode#        $TestText="HIGH ISSUE"
Azure Virtual Machine Status Test#CredCode#    }
Azure Virtual Machine Status Test#CredCode#    else
Azure Virtual Machine Status Test#CredCode#    {
Azure Virtual Machine Status Test#CredCode#        $TestStatus="Passed"
Azure Virtual Machine Status Test#CredCode#        $TestText="MEDIUM ISSUE"    
Azure Virtual Machine Status Test#CredCode#    }
Azure Subcription Status#Headercode#$ThisString="Azure Subscription, Subscription ID, Status, Final Status"
Azure Subcription Status#Headercode#Add-Content "$TestCSVFile" $ThisString
Azure Subcription Status#CredCode#
Azure Subcription Status#CredCode#$AnyGap = "No"
Azure Subcription Status#CredCode#
Azure Subcription Status#CredCode#$AllSubs = Get-AzureRmSubscription
Azure Subcription Status#CredCode#ForEach ($EachSub in $AllSubs)
Azure Subcription Status#CredCode#{
Azure Subcription Status#CredCode#    $SubID = $EachSub.Id
Azure Subcription Status#CredCode#    $SubName = $EachSub.Name
Azure Subcription Status#CredCode#    $SubStatus = $EachSub.State
Azure Subcription Status#CredCode#
Azure Subcription Status#CredCode#    IF ($SubStatus -eq "Enabled")
Azure Subcription Status#CredCode#    {
Azure Subcription Status#CredCode#        $STR = $SubName+","+$SubID+","+$SubStatus+",Ok"
Azure Subcription Status#CredCode#        add-Content $TestCSVFile $STR
Azure Subcription Status#CredCode#    }
Azure Subcription Status#CredCode#    else
Azure Subcription Status#CredCode#    {            
Azure Subcription Status#CredCode#        $AnyGap = "Yes"
Azure Subcription Status#CredCode#        $STR = $SubName+","+$SubID+","+$SubStatus+",Not Ok"     
Azure Subcription Status#CredCode#        Add-Content $TestCSVFile $STR
Azure Subcription Status#CredCode#    }
Azure Subcription Status#CredCode#}
Azure Subcription Status#CredCode#
Azure Subcription Status#CredCode#    IF ($AnyGap -eq "Yes")
Azure Subcription Status#CredCode#    {
Azure Subcription Status#CredCode#        $TestStatus="Medium"
Azure Subcription Status#CredCode#        $TestText="HIGH ISSUE"
Azure Subcription Status#CredCode#    }
Azure Subcription Status#CredCode#    else
Azure Subcription Status#CredCode#    {
Azure Subcription Status#CredCode#        $TestStatus="Passed"
Azure Subcription Status#CredCode#        $TestText="MEDIUM ISSUE"    
Azure Subcription Status#CredCode#    }
Azure Virtual Machine Provisioning Status Test#Headercode#$ThisString="Azure Subscription, VM Name, Resource Group, VM Provisioning Status, Final Status"
Azure Virtual Machine Provisioning Status Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Azure Virtual Machine Provisioning Status Test#CredCode#
Azure Virtual Machine Provisioning Status Test#CredCode#$AnyGap = "No"
Azure Virtual Machine Provisioning Status Test#CredCode#
Azure Virtual Machine Provisioning Status Test#CredCode#$AllSubs = Get-AzureRmSubscription
Azure Virtual Machine Provisioning Status Test#CredCode#ForEach ($EachSub in $AllSubs)
Azure Virtual Machine Provisioning Status Test#CredCode#{
Azure Virtual Machine Provisioning Status Test#CredCode#    $ThisSub = $EachSub.ID
Azure Virtual Machine Provisioning Status Test#CredCode#    Select-AzureRmSubscription -Subscription $ThisSub
Azure Virtual Machine Provisioning Status Test#CredCode#    
Azure Virtual Machine Provisioning Status Test#CredCode#    $AllVMs = Get-AzureRMVM
Azure Virtual Machine Provisioning Status Test#CredCode#    ForEach ($EachVM in $AllVMs)
Azure Virtual Machine Provisioning Status Test#CredCode#    {        
Azure Virtual Machine Provisioning Status Test#CredCode#        $ThisVM = $EachVM.Name
Azure Virtual Machine Provisioning Status Test#CredCode#        $ThisVMRS = $EachVM.ResourceGroupName
Azure Virtual Machine Provisioning Status Test#CredCode#        $ThisProStatus = $EachVM.ProvisioningState
Azure Virtual Machine Provisioning Status Test#CredCode#                                        
Azure Virtual Machine Provisioning Status Test#CredCode#        IF ($ThisProStatus -eq "Succeeded")
Azure Virtual Machine Provisioning Status Test#CredCode#        {
Azure Virtual Machine Provisioning Status Test#CredCode#            $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+","+$ThisProStatus+",Ok"
Azure Virtual Machine Provisioning Status Test#CredCode#            Add-Content $TestCSVFile $STR
Azure Virtual Machine Provisioning Status Test#CredCode#        }
Azure Virtual Machine Provisioning Status Test#CredCode#        else
Azure Virtual Machine Provisioning Status Test#CredCode#        {            
Azure Virtual Machine Provisioning Status Test#CredCode#            $AnyGap = "Yes"
Azure Virtual Machine Provisioning Status Test#CredCode#            $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+","+$ThisProStatus+",Not Ok"
Azure Virtual Machine Provisioning Status Test#CredCode#            Add-Content $TestCSVFile $STR
Azure Virtual Machine Provisioning Status Test#CredCode#        }
Azure Virtual Machine Provisioning Status Test#CredCode#
Azure Virtual Machine Provisioning Status Test#CredCode#    }
Azure Virtual Machine Provisioning Status Test#CredCode#
Azure Virtual Machine Provisioning Status Test#CredCode#}
Azure Virtual Machine Provisioning Status Test#CredCode#
Azure Virtual Machine Provisioning Status Test#CredCode#    IF ($AnyGap -eq "Yes")
Azure Virtual Machine Provisioning Status Test#CredCode#    {
Azure Virtual Machine Provisioning Status Test#CredCode#        $TestStatus="High"
Azure Virtual Machine Provisioning Status Test#CredCode#        $TestText="HIGH ISSUE"
Azure Virtual Machine Provisioning Status Test#CredCode#    }
Azure Virtual Machine Provisioning Status Test#CredCode#    else
Azure Virtual Machine Provisioning Status Test#CredCode#    {
Azure Virtual Machine Provisioning Status Test#CredCode#        $TestStatus="Passed"
Azure Virtual Machine Provisioning Status Test#CredCode#        $TestText="MEDIUM ISSUE"    
Azure Virtual Machine Provisioning Status Test#CredCode#    }
Azure Virtual Machine Automatic Updates Test#Headercode#$ThisString="Azure Subscription, VM Name, Resource Group, VM Automatic Update Enabled?, Final Status"
Azure Virtual Machine Automatic Updates Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Azure Virtual Machine Automatic Updates Test#CredCode#
Azure Virtual Machine Automatic Updates Test#CredCode#$AnyGap = "No"
Azure Virtual Machine Automatic Updates Test#CredCode#
Azure Virtual Machine Automatic Updates Test#CredCode#$AllSubs = Get-AzureRmSubscription
Azure Virtual Machine Automatic Updates Test#CredCode#ForEach ($EachSub in $AllSubs)
Azure Virtual Machine Automatic Updates Test#CredCode#{
Azure Virtual Machine Automatic Updates Test#CredCode#    $ThisSub = $EachSub.ID
Azure Virtual Machine Automatic Updates Test#CredCode#    Select-AzureRmSubscription -Subscription $ThisSub
Azure Virtual Machine Automatic Updates Test#CredCode#    
Azure Virtual Machine Automatic Updates Test#CredCode#    $AllVMs = Get-AzureRMVM
Azure Virtual Machine Automatic Updates Test#CredCode#    ForEach ($EachVM in $AllVMs)
Azure Virtual Machine Automatic Updates Test#CredCode#    {        
Azure Virtual Machine Automatic Updates Test#CredCode#        $ThisVM = $EachVM.Name
Azure Virtual Machine Automatic Updates Test#CredCode#        $ThisVMRS = $EachVM.ResourceGroupName
Azure Virtual Machine Automatic Updates Test#CredCode#
Azure Virtual Machine Automatic Updates Test#CredCode#        $AllProp = Get-AzureRmVM -Name "$ThisVM" -ResourceGroupName "$ThisVMRS" | Select -ExpandProperty OSProfile | Select -ExpandProperty Windowsconfiguration | Select EnableAutomaticUpdates
Azure Virtual Machine Automatic Updates Test#CredCode#        $AgentStatus = $AllProp.EnableAutomaticUpdates
Azure Virtual Machine Automatic Updates Test#CredCode#                                
Azure Virtual Machine Automatic Updates Test#CredCode#        IF ($AgentStatus -eq $True)
Azure Virtual Machine Automatic Updates Test#CredCode#        {
Azure Virtual Machine Automatic Updates Test#CredCode#            $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+","+$AgentStatus+",Ok"
Azure Virtual Machine Automatic Updates Test#CredCode#            Add-Content $TestCSVFile $STR
Azure Virtual Machine Automatic Updates Test#CredCode#        }
Azure Virtual Machine Automatic Updates Test#CredCode#        else
Azure Virtual Machine Automatic Updates Test#CredCode#        {            
Azure Virtual Machine Automatic Updates Test#CredCode#            $AnyGap = "Yes"
Azure Virtual Machine Automatic Updates Test#CredCode#            $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+","+$AgentStatus+",Not Ok"
Azure Virtual Machine Automatic Updates Test#CredCode#            Add-Content $TestCSVFile $STR
Azure Virtual Machine Automatic Updates Test#CredCode#        }
Azure Virtual Machine Automatic Updates Test#CredCode#
Azure Virtual Machine Automatic Updates Test#CredCode#    }
Azure Virtual Machine Automatic Updates Test#CredCode#
Azure Virtual Machine Automatic Updates Test#CredCode#}
Azure Virtual Machine Automatic Updates Test#CredCode#
Azure Virtual Machine Automatic Updates Test#CredCode#    IF ($AnyGap -eq "Yes")
Azure Virtual Machine Automatic Updates Test#CredCode#    {
Azure Virtual Machine Automatic Updates Test#CredCode#        $TestStatus="High"
Azure Virtual Machine Automatic Updates Test#CredCode#        $TestText="HIGH ISSUE"
Azure Virtual Machine Automatic Updates Test#CredCode#    }
Azure Virtual Machine Automatic Updates Test#CredCode#    else
Azure Virtual Machine Automatic Updates Test#CredCode#    {
Azure Virtual Machine Automatic Updates Test#CredCode#        $TestStatus="Passed"
Azure Virtual Machine Automatic Updates Test#CredCode#        $TestText="MEDIUM ISSUE"    
Azure Virtual Machine Automatic Updates Test#CredCode#    }
Azure Virtual Machine Agent Status Test#Headercode#$ThisString="Azure Subscription, VM Name, Resource Group, VM Agent Status, Final Status"
Azure Virtual Machine Agent Status Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Azure Virtual Machine Agent Status Test#CredCode#
Azure Virtual Machine Agent Status Test#CredCode#$AnyGap = "No"
Azure Virtual Machine Agent Status Test#CredCode#
Azure Virtual Machine Agent Status Test#CredCode#$AllSubs = Get-AzureRmSubscription
Azure Virtual Machine Agent Status Test#CredCode#ForEach ($EachSub in $AllSubs)
Azure Virtual Machine Agent Status Test#CredCode#{
Azure Virtual Machine Agent Status Test#CredCode#    $ThisSub = $EachSub.ID
Azure Virtual Machine Agent Status Test#CredCode#    Select-AzureRmSubscription -Subscription $ThisSub
Azure Virtual Machine Agent Status Test#CredCode#    
Azure Virtual Machine Agent Status Test#CredCode#    $AllVMs = Get-AzureRMVM
Azure Virtual Machine Agent Status Test#CredCode#    ForEach ($EachVM in $AllVMs)
Azure Virtual Machine Agent Status Test#CredCode#    {        
Azure Virtual Machine Agent Status Test#CredCode#        $ThisVM = $EachVM.Name
Azure Virtual Machine Agent Status Test#CredCode#        $ThisVMRS = $EachVM.ResourceGroupName
Azure Virtual Machine Agent Status Test#CredCode#
Azure Virtual Machine Agent Status Test#CredCode#        $AllProp = Get-AzureRmVM -Name "$ThisVM" -ResourceGroupName "$ThisVMRS" | Select -ExpandProperty OSProfile | Select -ExpandProperty Windowsconfiguration | Select ProvisionVMAgent
Azure Virtual Machine Agent Status Test#CredCode#        $AgentStatus = $AllProp.ProvisionVMAgent
Azure Virtual Machine Agent Status Test#CredCode#                                
Azure Virtual Machine Agent Status Test#CredCode#        IF ($AgentStatus -eq $True)
Azure Virtual Machine Agent Status Test#CredCode#        {
Azure Virtual Machine Agent Status Test#CredCode#            $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+","+$AgentStatus+",Ok"
Azure Virtual Machine Agent Status Test#CredCode#            Add-Content $TestCSVFile $STR
Azure Virtual Machine Agent Status Test#CredCode#        }
Azure Virtual Machine Agent Status Test#CredCode#        else
Azure Virtual Machine Agent Status Test#CredCode#        {            
Azure Virtual Machine Agent Status Test#CredCode#            $AnyGap = "Yes"
Azure Virtual Machine Agent Status Test#CredCode#            $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+","+$AgentStatus+",Not Ok"
Azure Virtual Machine Agent Status Test#CredCode#            Add-Content $TestCSVFile $STR
Azure Virtual Machine Agent Status Test#CredCode#        }
Azure Virtual Machine Agent Status Test#CredCode#
Azure Virtual Machine Agent Status Test#CredCode#    }
Azure Virtual Machine Agent Status Test#CredCode#
Azure Virtual Machine Agent Status Test#CredCode#}
Azure Virtual Machine Agent Status Test#CredCode#
Azure Virtual Machine Agent Status Test#CredCode#    IF ($AnyGap -eq "Yes")
Azure Virtual Machine Agent Status Test#CredCode#    {
Azure Virtual Machine Agent Status Test#CredCode#        $TestStatus="High"
Azure Virtual Machine Agent Status Test#CredCode#        $TestText="HIGH ISSUE"
Azure Virtual Machine Agent Status Test#CredCode#    }
Azure Virtual Machine Agent Status Test#CredCode#    else
Azure Virtual Machine Agent Status Test#CredCode#    {
Azure Virtual Machine Agent Status Test#CredCode#        $TestStatus="Passed"
Azure Virtual Machine Agent Status Test#CredCode#        $TestText="MEDIUM ISSUE"    
Azure Virtual Machine Agent Status Test#CredCode#    }
Azure Virtual Machine Data Disk Test#Headercode#$ThisString="Azure Subscription, VM Name, Resource Group, Data Disks Assigned?, Final Status"
Azure Virtual Machine Data Disk Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Azure Virtual Machine Data Disk Test#CredCode#
Azure Virtual Machine Data Disk Test#CredCode#$AnyGap = "No"
Azure Virtual Machine Data Disk Test#CredCode#
Azure Virtual Machine Data Disk Test#CredCode#$AllSubs = Get-AzureRmSubscription
Azure Virtual Machine Data Disk Test#CredCode#ForEach ($EachSub in $AllSubs)
Azure Virtual Machine Data Disk Test#CredCode#{
Azure Virtual Machine Data Disk Test#CredCode#    $ThisSub = $EachSub.ID
Azure Virtual Machine Data Disk Test#CredCode#    Select-AzureRmSubscription -Subscription $ThisSub
Azure Virtual Machine Data Disk Test#CredCode#    
Azure Virtual Machine Data Disk Test#CredCode#    $AllVMs = Get-AzureRMVM
Azure Virtual Machine Data Disk Test#CredCode#    ForEach ($EachVM in $AllVMs)
Azure Virtual Machine Data Disk Test#CredCode#    {        
Azure Virtual Machine Data Disk Test#CredCode#        $ThisVM = $EachVM.Name
Azure Virtual Machine Data Disk Test#CredCode#        $ThisVMRS = $EachVM.ResourceGroupName
Azure Virtual Machine Data Disk Test#CredCode#
Azure Virtual Machine Data Disk Test#CredCode#        $AllProp = Get-AzureRmVM -Name "$ThisVM" -ResourceGroupName "$ThisVMRS" | Select -ExpandProperty StorageProfile        
Azure Virtual Machine Data Disk Test#CredCode#        $TotNow = $AllProp.DataDisks.Count
Azure Virtual Machine Data Disk Test#CredCode#                                        
Azure Virtual Machine Data Disk Test#CredCode#        IF ($TotNow -eq 0)
Azure Virtual Machine Data Disk Test#CredCode#        {
Azure Virtual Machine Data Disk Test#CredCode#            $AnyGap = "Yes"
Azure Virtual Machine Data Disk Test#CredCode#            $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+", Not Assigned, Not Ok"
Azure Virtual Machine Data Disk Test#CredCode#            Add-Content $TestCSVFile $STR
Azure Virtual Machine Data Disk Test#CredCode#        }
Azure Virtual Machine Data Disk Test#CredCode#        else
Azure Virtual Machine Data Disk Test#CredCode#        {                        
Azure Virtual Machine Data Disk Test#CredCode#            $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+", Assigned "+$TotNow+",Ok"
Azure Virtual Machine Data Disk Test#CredCode#            Add-Content $TestCSVFile $STR
Azure Virtual Machine Data Disk Test#CredCode#        }
Azure Virtual Machine Data Disk Test#CredCode#
Azure Virtual Machine Data Disk Test#CredCode#    }
Azure Virtual Machine Data Disk Test#CredCode#
Azure Virtual Machine Data Disk Test#CredCode#}
Azure Virtual Machine Data Disk Test#CredCode#
Azure Virtual Machine Data Disk Test#CredCode#    IF ($AnyGap -eq "Yes")
Azure Virtual Machine Data Disk Test#CredCode#    {
Azure Virtual Machine Data Disk Test#CredCode#        $TestStatus="High"
Azure Virtual Machine Data Disk Test#CredCode#        $TestText="HIGH ISSUE"
Azure Virtual Machine Data Disk Test#CredCode#    }
Azure Virtual Machine Data Disk Test#CredCode#    else
Azure Virtual Machine Data Disk Test#CredCode#    {
Azure Virtual Machine Data Disk Test#CredCode#        $TestStatus="Passed"
Azure Virtual Machine Data Disk Test#CredCode#        $TestText="MEDIUM ISSUE"    
Azure Virtual Machine Data Disk Test#CredCode#    }
Azure Virtual Machine Boot Diagnostics Test#Headercode#$ThisString="Azure Subscription, VM Name, Resource Group, Boot Diagnostics Enabled?, Final Status"
Azure Virtual Machine Boot Diagnostics Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Azure Virtual Machine Boot Diagnostics Test#CredCode#
Azure Virtual Machine Boot Diagnostics Test#CredCode#$AnyGap = "No"
Azure Virtual Machine Boot Diagnostics Test#CredCode#
Azure Virtual Machine Boot Diagnostics Test#CredCode#$AllSubs = Get-AzureRmSubscription
Azure Virtual Machine Boot Diagnostics Test#CredCode#ForEach ($EachSub in $AllSubs)
Azure Virtual Machine Boot Diagnostics Test#CredCode#{
Azure Virtual Machine Boot Diagnostics Test#CredCode#    $ThisSub = $EachSub.ID
Azure Virtual Machine Boot Diagnostics Test#CredCode#    Select-AzureRmSubscription -Subscription $ThisSub
Azure Virtual Machine Boot Diagnostics Test#CredCode#    
Azure Virtual Machine Boot Diagnostics Test#CredCode#    $AllVMs = Get-AzureRMVM
Azure Virtual Machine Boot Diagnostics Test#CredCode#    ForEach ($EachVM in $AllVMs)
Azure Virtual Machine Boot Diagnostics Test#CredCode#    {        
Azure Virtual Machine Boot Diagnostics Test#CredCode#        $ThisVM = $EachVM.Name
Azure Virtual Machine Boot Diagnostics Test#CredCode#        $ThisVMRS = $EachVM.ResourceGroupName
Azure Virtual Machine Boot Diagnostics Test#CredCode#
Azure Virtual Machine Boot Diagnostics Test#CredCode#        $AllProp = Get-AzureRmVM -Name "$ThisVM" -ResourceGroupName "$ThisVMRS"
Azure Virtual Machine Boot Diagnostics Test#CredCode#        $AgentStatus = $AllProp.DiagnosticsProfile.BootDiagnostics.Enabled
Azure Virtual Machine Boot Diagnostics Test#CredCode#                                
Azure Virtual Machine Boot Diagnostics Test#CredCode#        IF ($AgentStatus -eq $True)
Azure Virtual Machine Boot Diagnostics Test#CredCode#        {
Azure Virtual Machine Boot Diagnostics Test#CredCode#            $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+","+$AgentStatus+",Ok"
Azure Virtual Machine Boot Diagnostics Test#CredCode#            Add-Content $TestCSVFile $STR
Azure Virtual Machine Boot Diagnostics Test#CredCode#        }
Azure Virtual Machine Boot Diagnostics Test#CredCode#        else
Azure Virtual Machine Boot Diagnostics Test#CredCode#        {            
Azure Virtual Machine Boot Diagnostics Test#CredCode#            $AnyGap = "Yes"
Azure Virtual Machine Boot Diagnostics Test#CredCode#            $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+","+$AgentStatus+",Not Ok"
Azure Virtual Machine Boot Diagnostics Test#CredCode#            Add-Content $TestCSVFile $STR
Azure Virtual Machine Boot Diagnostics Test#CredCode#        }
Azure Virtual Machine Boot Diagnostics Test#CredCode#
Azure Virtual Machine Boot Diagnostics Test#CredCode#    }
Azure Virtual Machine Boot Diagnostics Test#CredCode#
Azure Virtual Machine Boot Diagnostics Test#CredCode#}
Azure Virtual Machine Boot Diagnostics Test#CredCode#
Azure Virtual Machine Boot Diagnostics Test#CredCode#    IF ($AnyGap -eq "Yes")
Azure Virtual Machine Boot Diagnostics Test#CredCode#    {
Azure Virtual Machine Boot Diagnostics Test#CredCode#        $TestStatus="High"
Azure Virtual Machine Boot Diagnostics Test#CredCode#        $TestText="HIGH ISSUE"
Azure Virtual Machine Boot Diagnostics Test#CredCode#    }
Azure Virtual Machine Boot Diagnostics Test#CredCode#    else
Azure Virtual Machine Boot Diagnostics Test#CredCode#    {
Azure Virtual Machine Boot Diagnostics Test#CredCode#        $TestStatus="Passed"
Azure Virtual Machine Boot Diagnostics Test#CredCode#        $TestText="MEDIUM ISSUE"    
Azure Virtual Machine Boot Diagnostics Test#CredCode#    }
Azure Virtual Machine Volume Encryption Test#Headercode#$ThisString="Azure Subscription, VM Name, Resource Group, OS Encryption Enabled?, Data Disk Encryption Enabled?"
Azure Virtual Machine Volume Encryption Test#Headercode#Add-Content "$TestCSVFile" $ThisString
Azure Virtual Machine Volume Encryption Test#CredCode#
Azure Virtual Machine Volume Encryption Test#CredCode#$AnyGap = "No"
Azure Virtual Machine Volume Encryption Test#CredCode#
Azure Virtual Machine Volume Encryption Test#CredCode#$AllSubs = Get-AzureRmSubscription
Azure Virtual Machine Volume Encryption Test#CredCode#ForEach ($EachSub in $AllSubs)
Azure Virtual Machine Volume Encryption Test#CredCode#{
Azure Virtual Machine Volume Encryption Test#CredCode#    $ThisSub = $EachSub.ID
Azure Virtual Machine Volume Encryption Test#CredCode#    Select-AzureRmSubscription -Subscription $ThisSub
Azure Virtual Machine Volume Encryption Test#CredCode#    
Azure Virtual Machine Volume Encryption Test#CredCode#    $AllVMs = Get-AzureRMVM
Azure Virtual Machine Volume Encryption Test#CredCode#    ForEach ($EachVM in $AllVMs)
Azure Virtual Machine Volume Encryption Test#CredCode#    {        
Azure Virtual Machine Volume Encryption Test#CredCode#        $ThisVM = $EachVM.Name
Azure Virtual Machine Volume Encryption Test#CredCode#        $ThisVMRS = $EachVM.ResourceGroupName
Azure Virtual Machine Volume Encryption Test#CredCode#
Azure Virtual Machine Volume Encryption Test#CredCode#        $AllProp = Get-AzureRmVMDiskEncryptionStatus -VMName $ThisVM -ResourceGroupName $ThisVMRS
Azure Virtual Machine Volume Encryption Test#CredCode#        $OSEnc = $AllProp.OsVolumeEncrypted
Azure Virtual Machine Volume Encryption Test#CredCode#        $DataEnc = $AllProp.DataVolumesEncrypted
Azure Virtual Machine Volume Encryption Test#CredCode#
Azure Virtual Machine Volume Encryption Test#CredCode#        IF ($OSEnc -eq "NotEncrypted" -or $DataEnc -eq "NotEncrypted")
Azure Virtual Machine Volume Encryption Test#CredCode#        {
Azure Virtual Machine Volume Encryption Test#CredCode#            $AnyGap = "Yes"         
Azure Virtual Machine Volume Encryption Test#CredCode#        }
Azure Virtual Machine Volume Encryption Test#CredCode#        
Azure Virtual Machine Volume Encryption Test#CredCode#        $STR = $ThisSub+","+$ThisVM+","+$ThisVMRS+","+$OSEnc+","+$DataEnc
Azure Virtual Machine Volume Encryption Test#CredCode#        Add-Content $TestCSVFile $STR        
Azure Virtual Machine Volume Encryption Test#CredCode#
Azure Virtual Machine Volume Encryption Test#CredCode#    }
Azure Virtual Machine Volume Encryption Test#CredCode#
Azure Virtual Machine Volume Encryption Test#CredCode#}
Azure Virtual Machine Volume Encryption Test#CredCode#
Azure Virtual Machine Volume Encryption Test#CredCode#    IF ($AnyGap -eq "Yes")
Azure Virtual Machine Volume Encryption Test#CredCode#    {
Azure Virtual Machine Volume Encryption Test#CredCode#        $TestStatus="High"
Azure Virtual Machine Volume Encryption Test#CredCode#        $TestText="HIGH ISSUE"
Azure Virtual Machine Volume Encryption Test#CredCode#    }
Azure Virtual Machine Volume Encryption Test#CredCode#    else
Azure Virtual Machine Volume Encryption Test#CredCode#    {
Azure Virtual Machine Volume Encryption Test#CredCode#        $TestStatus="Passed"
Azure Virtual Machine Volume Encryption Test#CredCode#        $TestText="MEDIUM ISSUE"    
Azure Virtual Machine Volume Encryption Test#CredCode#    }
DHCP Database Size Test#Headercode#$ThisString="DHCP Server,DHCP Database Size, Final Status"
DHCP Database Size Test#Headercode#Add-Content "$TestCSVFile" $ThisString
DHCP Database Size Test#CredCode#Import-Module DHCPServer
DHCP Database Size Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
DHCP Database Size Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Database Size Test#CredCode#
DHCP Database Size Test#CredCode#
DHCP Database Size Test#CredCode#
DHCP Database Size Test#CredCode#$AnyGap = "No"
DHCP Database Size Test#CredCode#
DHCP Database Size Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Database Size Test#CredCode#{
DHCP Database Size Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Database Size Test#CredCode#
DHCP Database Size Test#CredCode#    $Error.Clear()
DHCP Database Size Test#CredCode#    $DHCPMDBSize = "{0:N2} MB" -f $((Get-Item "\\$ThisServerNow\C$\Windows\System32\dhcp\dhcp.mdb").Length / 1mb) 
DHCP Database Size Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Database Size Test#CredCode#    {
DHCP Database Size Test#CredCode#     
DHCP Database Size Test#CredCode#        $FinalStatusNow = "Ok"
DHCP Database Size Test#CredCode#        IF ($DHCPMDBSize -gt 100)
DHCP Database Size Test#CredCode#        {
DHCP Database Size Test#CredCode#            $FinalStatusNow = "Not Ok"
DHCP Database Size Test#CredCode#            $AnyGap = "Yes"
DHCP Database Size Test#CredCode#        }   
DHCP Database Size Test#CredCode#
DHCP Database Size Test#CredCode#        $STR = $ThisServerNow+","+$DHCPMDBSize+","+$FinalStatusNow
DHCP Database Size Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Database Size Test#CredCode#    }
DHCP Database Size Test#CredCode#    else
DHCP Database Size Test#CredCode#    {
DHCP Database Size Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Database Size Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Database Size Test#CredCode#    }
DHCP Database Size Test#CredCode#}
DHCP Database Size Test#CredCode#
DHCP Database Size Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Database Size Test#CredCode#    {
DHCP Database Size Test#CredCode#        $TestStatus="High"
DHCP Database Size Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Database Size Test#CredCode#    }
DHCP Database Size Test#CredCode#    else
DHCP Database Size Test#CredCode#    {
DHCP Database Size Test#CredCode#        $TestStatus="Passed"
DHCP Database Size Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Database Size Test#CredCode#    }
DHCP Database Size Test#CredCode#Import-Module DHCPServer
DHCP Database Size Test#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
DHCP Database Size Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Database Size Test#CredCode#
DHCP Database Size Test#CredCode#
DHCP Database Size Test#CredCode#
DHCP Database Size Test#CredCode#$AnyGap = "No"
DHCP Database Size Test#CredCode#
DHCP Database Size Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Database Size Test#CredCode#{
DHCP Database Size Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Database Size Test#CredCode#
DHCP Database Size Test#CredCode#    $Error.Clear()
DHCP Database Size Test#CredCode#    $DHCPMDBSize = "{0:N2} MB" -f $((Get-Item "\\$ThisServerNow\C$\Windows\System32\dhcp\dhcp.mdb").Length / 1mb) 
DHCP Database Size Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Database Size Test#CredCode#    {
DHCP Database Size Test#CredCode#     
DHCP Database Size Test#CredCode#        $FinalStatusNow = "Ok"
DHCP Database Size Test#CredCode#        IF ($DHCPMDBSize -gt 100)
DHCP Database Size Test#CredCode#        {
DHCP Database Size Test#CredCode#            $FinalStatusNow = "Not Ok"
DHCP Database Size Test#CredCode#            $AnyGap = "Yes"
DHCP Database Size Test#CredCode#        }   
DHCP Database Size Test#CredCode#
DHCP Database Size Test#CredCode#        $STR = $ThisServerNow+","+$DHCPMDBSize+","+$FinalStatusNow
DHCP Database Size Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Database Size Test#CredCode#    }
DHCP Database Size Test#CredCode#    else
DHCP Database Size Test#CredCode#    {
DHCP Database Size Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Database Size Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Database Size Test#CredCode#    }
DHCP Database Size Test#CredCode#}
DHCP Database Size Test#CredCode#
DHCP Database Size Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Database Size Test#CredCode#    {
DHCP Database Size Test#CredCode#        $TestStatus="High"
DHCP Database Size Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Database Size Test#CredCode#    }
DHCP Database Size Test#CredCode#    else
DHCP Database Size Test#CredCode#    {
DHCP Database Size Test#CredCode#        $TestStatus="Passed"
DHCP Database Size Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Database Size Test#CredCode#    }
DHCP Scope Inactive Test#Headercode#$ThisString="DHCP Server, Number Of Active Scopes, Number Of Inactive Scopes, Data File Location"
DHCP Scope Inactive Test#Headercode#Add-Content "$TestCSVFile" $ThisString
DHCP Scope Inactive Test#CredCode#Import-Module DHCPServer
DHCP Scope Inactive Test#CredCode#$DataFileLocation=$CurrentLoc+"Data\"+$UniqueTest+"_DATA.CSV"
DHCP Scope Inactive Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Scope Inactive Test#CredCode#$STR = "DHCP Server, Inactive Scope Name"
DHCP Scope Inactive Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Scope Inactive Test#CredCode#
DHCP Scope Inactive Test#CredCode#$AnyGap = "No"
DHCP Scope Inactive Test#CredCode#
DHCP Scope Inactive Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Scope Inactive Test#CredCode#{
DHCP Scope Inactive Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Scope Inactive Test#CredCode#    $TotScopeActive = 0
DHCP Scope Inactive Test#CredCode#    $TotScopeInActive = 0
DHCP Scope Inactive Test#CredCode#
DHCP Scope Inactive Test#CredCode#    $Error.Clear()
DHCP Scope Inactive Test#CredCode#    $results=Get-DhcpServerv4Scope -ComputerName $ThisServerNow
DHCP Scope Inactive Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Scope Inactive Test#CredCode#    {     
DHCP Scope Inactive Test#CredCode#        ForEach ($EachScope in $Results)
DHCP Scope Inactive Test#CredCode#        {
DHCP Scope Inactive Test#CredCode#            IF ($EachScope.State -eq "Inactive")
DHCP Scope Inactive Test#CredCode#            {
DHCP Scope Inactive Test#CredCode#                $TotScopeInActive++
DHCP Scope Inactive Test#CredCode#                $AnyGap = "Yes"
DHCP Scope Inactive Test#CredCode#                $STR = $ThisServerNow+","+'"'+$EachScope.Name+'"'
DHCP Scope Inactive Test#CredCode#                Add-Content $DataFileLocation $STR
DHCP Scope Inactive Test#CredCode#            }        
DHCP Scope Inactive Test#CredCode#            IF ($EachScope.State -eq "Active")
DHCP Scope Inactive Test#CredCode#            {
DHCP Scope Inactive Test#CredCode#                $TotScopeActive++
DHCP Scope Inactive Test#CredCode#            }        
DHCP Scope Inactive Test#CredCode#        }
DHCP Scope Inactive Test#CredCode#               
DHCP Scope Inactive Test#CredCode#        $STR = $ThisServerNow+","+$TotScopeActive+","+$TotScopeInActive+","+$DataFileLocation
DHCP Scope Inactive Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Scope Inactive Test#CredCode#    }
DHCP Scope Inactive Test#CredCode#    else
DHCP Scope Inactive Test#CredCode#    {
DHCP Scope Inactive Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Scope Inactive Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Scope Inactive Test#CredCode#    }
DHCP Scope Inactive Test#CredCode#}
DHCP Scope Inactive Test#CredCode#
DHCP Scope Inactive Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Scope Inactive Test#CredCode#    {
DHCP Scope Inactive Test#CredCode#        $TestStatus="High"
DHCP Scope Inactive Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Scope Inactive Test#CredCode#    }
DHCP Scope Inactive Test#CredCode#    else
DHCP Scope Inactive Test#CredCode#    {
DHCP Scope Inactive Test#CredCode#        $TestStatus="Passed"
DHCP Scope Inactive Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Scope Inactive Test#CredCode#    }
DHCP Scope Inactive Test#CredCode#Import-Module DHCPServer
DHCP Scope Inactive Test#CredCode#$DataFileLocation=$CurrentLoc+"Data\"+$UniqueTest+"_DATA.CSV"
DHCP Scope Inactive Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Scope Inactive Test#CredCode#$STR = "DHCP Server, Inactive Scope Name"
DHCP Scope Inactive Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Scope Inactive Test#CredCode#
DHCP Scope Inactive Test#CredCode#$AnyGap = "No"
DHCP Scope Inactive Test#CredCode#
DHCP Scope Inactive Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Scope Inactive Test#CredCode#{
DHCP Scope Inactive Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Scope Inactive Test#CredCode#    $TotScopeActive = 0
DHCP Scope Inactive Test#CredCode#    $TotScopeInActive = 0
DHCP Scope Inactive Test#CredCode#
DHCP Scope Inactive Test#CredCode#    $Error.Clear()
DHCP Scope Inactive Test#CredCode#    $results=Invoke-Command -ComputerName $ThisServerNow -Script { param($R1Now) Get-DhcpServerv4Scope -ComputerName $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
DHCP Scope Inactive Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Scope Inactive Test#CredCode#    {     
DHCP Scope Inactive Test#CredCode#        ForEach ($EachScope in $Results)
DHCP Scope Inactive Test#CredCode#        {
DHCP Scope Inactive Test#CredCode#            IF ($EachScope.State -eq "Inactive")
DHCP Scope Inactive Test#CredCode#            {
DHCP Scope Inactive Test#CredCode#                $TotScopeInActive++
DHCP Scope Inactive Test#CredCode#                $AnyGap = "Yes"
DHCP Scope Inactive Test#CredCode#                $STR = $ThisServerNow+","+'"'+$EachScope.Name+'"'
DHCP Scope Inactive Test#CredCode#                Add-Content $DataFileLocation $STR
DHCP Scope Inactive Test#CredCode#            }        
DHCP Scope Inactive Test#CredCode#            IF ($EachScope.State -eq "Active")
DHCP Scope Inactive Test#CredCode#            {
DHCP Scope Inactive Test#CredCode#                $TotScopeActive++
DHCP Scope Inactive Test#CredCode#            }        
DHCP Scope Inactive Test#CredCode#        }
DHCP Scope Inactive Test#CredCode#               
DHCP Scope Inactive Test#CredCode#        $STR = $ThisServerNow+","+$TotScopeActive+","+$TotScopeInActive+","+$DataFileLocation
DHCP Scope Inactive Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Scope Inactive Test#CredCode#    }
DHCP Scope Inactive Test#CredCode#    else
DHCP Scope Inactive Test#CredCode#    {
DHCP Scope Inactive Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Scope Inactive Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Scope Inactive Test#CredCode#    }
DHCP Scope Inactive Test#CredCode#}
DHCP Scope Inactive Test#CredCode#
DHCP Scope Inactive Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Scope Inactive Test#CredCode#    {
DHCP Scope Inactive Test#CredCode#        $TestStatus="High"
DHCP Scope Inactive Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Scope Inactive Test#CredCode#    }
DHCP Scope Inactive Test#CredCode#    else
DHCP Scope Inactive Test#CredCode#    {
DHCP Scope Inactive Test#CredCode#        $TestStatus="Passed"
DHCP Scope Inactive Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Scope Inactive Test#CredCode#    }
DHCP Lease Duration Test#Headercode#$ThisString="DHCP Server, Scope Name, Scope Status, Lease Duration, Final Status"
DHCP Lease Duration Test#Headercode#Add-Content "$TestCSVFile" $ThisString
DHCP Lease Duration Test#CredCode#Import-Module DHCPServer
DHCP Lease Duration Test#CredCode#
DHCP Lease Duration Test#CredCode#
DHCP Lease Duration Test#CredCode#$AnyGap = "No"
DHCP Lease Duration Test#CredCode#
DHCP Lease Duration Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Lease Duration Test#CredCode#{
DHCP Lease Duration Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Lease Duration Test#CredCode#    $TotScopeActive = 0
DHCP Lease Duration Test#CredCode#    $TotScopeInActive = 0
DHCP Lease Duration Test#CredCode#
DHCP Lease Duration Test#CredCode#    $Error.Clear()
DHCP Lease Duration Test#CredCode#    $results=Get-DhcpServerv4Scope -ComputerName $ThisServerNow
DHCP Lease Duration Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Lease Duration Test#CredCode#    {     
DHCP Lease Duration Test#CredCode#        ForEach ($EachScope in $Results)
DHCP Lease Duration Test#CredCode#        {
DHCP Lease Duration Test#CredCode#            IF ($EachScope.LeaseDuration -lt 8)
DHCP Lease Duration Test#CredCode#            {
DHCP Lease Duration Test#CredCode#                $AnyGap = "Yes"
DHCP Lease Duration Test#CredCode#                $FinalStatus="Not Ok"
DHCP Lease Duration Test#CredCode#            }
DHCP Lease Duration Test#CredCode#            else
DHCP Lease Duration Test#CredCode#            {                    
DHCP Lease Duration Test#CredCode#                $FinalStatus="Ok"
DHCP Lease Duration Test#CredCode#            }        
DHCP Lease Duration Test#CredCode#        
DHCP Lease Duration Test#CredCode#            $STR = $ThisServerNow+","+'"'+$EachScope.Name+'"'+","+$EachScope.State+","+$EachScope.LeaseDuration+","+$FinalStatus
DHCP Lease Duration Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Lease Duration Test#CredCode#        }
DHCP Lease Duration Test#CredCode#               
DHCP Lease Duration Test#CredCode#    }
DHCP Lease Duration Test#CredCode#    else
DHCP Lease Duration Test#CredCode#    {
DHCP Lease Duration Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Lease Duration Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Lease Duration Test#CredCode#    }
DHCP Lease Duration Test#CredCode#}
DHCP Lease Duration Test#CredCode#
DHCP Lease Duration Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Lease Duration Test#CredCode#    {
DHCP Lease Duration Test#CredCode#        $TestStatus="High"
DHCP Lease Duration Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Lease Duration Test#CredCode#    }
DHCP Lease Duration Test#CredCode#    else
DHCP Lease Duration Test#CredCode#    {
DHCP Lease Duration Test#CredCode#        $TestStatus="Passed"
DHCP Lease Duration Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Lease Duration Test#CredCode#    }
DHCP Lease Duration Test#CredCode#Import-Module DHCPServer
DHCP Lease Duration Test#CredCode#
DHCP Lease Duration Test#CredCode#
DHCP Lease Duration Test#CredCode#$AnyGap = "No"
DHCP Lease Duration Test#CredCode#
DHCP Lease Duration Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Lease Duration Test#CredCode#{
DHCP Lease Duration Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Lease Duration Test#CredCode#    $TotScopeActive = 0
DHCP Lease Duration Test#CredCode#    $TotScopeInActive = 0
DHCP Lease Duration Test#CredCode#
DHCP Lease Duration Test#CredCode#    $Error.Clear()
DHCP Lease Duration Test#CredCode#    $results=Invoke-Command -ComputerName $ThisServerNow -Script { param($R1Now) Get-DhcpServerv4Scope -ComputerName $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
DHCP Lease Duration Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Lease Duration Test#CredCode#    {     
DHCP Lease Duration Test#CredCode#        ForEach ($EachScope in $Results)
DHCP Lease Duration Test#CredCode#        {
DHCP Lease Duration Test#CredCode#            IF ($EachScope.LeaseDuration -lt 8)
DHCP Lease Duration Test#CredCode#            {
DHCP Lease Duration Test#CredCode#                $AnyGap = "Yes"
DHCP Lease Duration Test#CredCode#                $FinalStatus="Not Ok"
DHCP Lease Duration Test#CredCode#            }
DHCP Lease Duration Test#CredCode#            else
DHCP Lease Duration Test#CredCode#            {                    
DHCP Lease Duration Test#CredCode#                $FinalStatus="Ok"
DHCP Lease Duration Test#CredCode#            }        
DHCP Lease Duration Test#CredCode#        
DHCP Lease Duration Test#CredCode#            $STR = $ThisServerNow+","+'"'+$EachScope.Name+'"'+","+$EachScope.State+","+$EachScope.LeaseDuration+","+$FinalStatus
DHCP Lease Duration Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Lease Duration Test#CredCode#        }
DHCP Lease Duration Test#CredCode#               
DHCP Lease Duration Test#CredCode#    }
DHCP Lease Duration Test#CredCode#    else
DHCP Lease Duration Test#CredCode#    {
DHCP Lease Duration Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Lease Duration Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Lease Duration Test#CredCode#    }
DHCP Lease Duration Test#CredCode#}
DHCP Lease Duration Test#CredCode#
DHCP Lease Duration Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Lease Duration Test#CredCode#    {
DHCP Lease Duration Test#CredCode#        $TestStatus="High"
DHCP Lease Duration Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Lease Duration Test#CredCode#    }
DHCP Lease Duration Test#CredCode#    else
DHCP Lease Duration Test#CredCode#    {
DHCP Lease Duration Test#CredCode#        $TestStatus="Passed"
DHCP Lease Duration Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Lease Duration Test#CredCode#    }
DHCP Empty Scope Test#Headercode#$ThisString="DHCP Server, Total Scopes, Total Scopes Not In Use, Data File Location"
DHCP Empty Scope Test#Headercode#Add-Content "$TestCSVFile" $ThisString
DHCP Empty Scope Test#CredCode#Import-Module DHCPServer
DHCP Empty Scope Test#CredCode#$DataFileLocation=$CurrentLoc+"Data\"+$UniqueTest+"_DATA.CSV"
DHCP Empty Scope Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Empty Scope Test#CredCode#$STR = "DHCP Server, Scope Not In Use"
DHCP Empty Scope Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#$AnyGap = "No"
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Empty Scope Test#CredCode#{
DHCP Empty Scope Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Empty Scope Test#CredCode#    $TotScopeNotInUse = 0
DHCP Empty Scope Test#CredCode#    $TotScopeInUse = 0
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#    $Error.Clear()
DHCP Empty Scope Test#CredCode#    $results=Get-DhcpServerv4ScopeStatistics -ComputerName $ThisServerNow | Select ScopeID,AddressesFree,AddressesInUse,PercentageInUse,ReservedAddress
DHCP Empty Scope Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Empty Scope Test#CredCode#    {     
DHCP Empty Scope Test#CredCode#        $TotScopeNow = $results.Name.Count
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#        ForEach ($EachScope in $Results)
DHCP Empty Scope Test#CredCode#        {
DHCP Empty Scope Test#CredCode#            IF ($EachScope.AddressesInUse -eq 0)
DHCP Empty Scope Test#CredCode#            {
DHCP Empty Scope Test#CredCode#                $AnyGap = "Yes"
DHCP Empty Scope Test#CredCode#                $TotScopeNotInUse++
DHCP Empty Scope Test#CredCode#                
DHCP Empty Scope Test#CredCode#                $STR = $ThisServerNow+","+'"'+$EachScope.ScopeID+'"'
DHCP Empty Scope Test#CredCode#                Add-Content $DataFileLocation $STR
DHCP Empty Scope Test#CredCode#            }            
DHCP Empty Scope Test#CredCode#        }
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#        $STR = $ThisServerNow+","+$TotScopeNow+","+$TotScopeNotInUse+","+$DataFileLocation
DHCP Empty Scope Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Empty Scope Test#CredCode#    }
DHCP Empty Scope Test#CredCode#    else
DHCP Empty Scope Test#CredCode#    {
DHCP Empty Scope Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Empty Scope Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Empty Scope Test#CredCode#    }
DHCP Empty Scope Test#CredCode#}
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Empty Scope Test#CredCode#    {
DHCP Empty Scope Test#CredCode#        $TestStatus="High"
DHCP Empty Scope Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Empty Scope Test#CredCode#    }
DHCP Empty Scope Test#CredCode#    else
DHCP Empty Scope Test#CredCode#    {
DHCP Empty Scope Test#CredCode#        $TestStatus="Passed"
DHCP Empty Scope Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Empty Scope Test#CredCode#    }
DHCP Empty Scope Test#CredCode#Import-Module DHCPServer
DHCP Empty Scope Test#CredCode#$DataFileLocation=$CurrentLoc+"Data\"+$UniqueTest+"_DATA.CSV"
DHCP Empty Scope Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Empty Scope Test#CredCode#$STR = "DHCP Server, Scope Not In Use"
DHCP Empty Scope Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#$AnyGap = "No"
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Empty Scope Test#CredCode#{
DHCP Empty Scope Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Empty Scope Test#CredCode#    $TotScopeNotInUse = 0
DHCP Empty Scope Test#CredCode#    $TotScopeInUse = 0
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#    $Error.Clear()
DHCP Empty Scope Test#CredCode#    $results=Invoke-Command -ComputerName $ThisServerNow -Script { param($R1Now) Get-DhcpServerv4ScopeStatistics -ComputerName $R1Now | Select ScopeID,AddressesFree,AddressesInUse,PercentageInUse,ReservedAddress } -Credential $Creds -ArgumentList $ThisServerNow
DHCP Empty Scope Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Empty Scope Test#CredCode#    {     
DHCP Empty Scope Test#CredCode#        $TotScopeNow = $results.Name.Count
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#        ForEach ($EachScope in $Results)
DHCP Empty Scope Test#CredCode#        {
DHCP Empty Scope Test#CredCode#            IF ($EachScope.AddressesInUse -eq 0)
DHCP Empty Scope Test#CredCode#            {
DHCP Empty Scope Test#CredCode#                $AnyGap = "Yes"
DHCP Empty Scope Test#CredCode#                $TotScopeNotInUse++
DHCP Empty Scope Test#CredCode#                
DHCP Empty Scope Test#CredCode#                $STR = $ThisServerNow+","+'"'+$EachScope.ScopeID+'"'
DHCP Empty Scope Test#CredCode#                Add-Content $DataFileLocation $STR
DHCP Empty Scope Test#CredCode#            }            
DHCP Empty Scope Test#CredCode#        }
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#        $STR = $ThisServerNow+","+$TotScopeNow+","+$TotScopeNotInUse+","+$DataFileLocation
DHCP Empty Scope Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Empty Scope Test#CredCode#    }
DHCP Empty Scope Test#CredCode#    else
DHCP Empty Scope Test#CredCode#    {
DHCP Empty Scope Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Empty Scope Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Empty Scope Test#CredCode#    }
DHCP Empty Scope Test#CredCode#}
DHCP Empty Scope Test#CredCode#
DHCP Empty Scope Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Empty Scope Test#CredCode#    {
DHCP Empty Scope Test#CredCode#        $TestStatus="High"
DHCP Empty Scope Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Empty Scope Test#CredCode#    }
DHCP Empty Scope Test#CredCode#    else
DHCP Empty Scope Test#CredCode#    {
DHCP Empty Scope Test#CredCode#        $TestStatus="Passed"
DHCP Empty Scope Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Empty Scope Test#CredCode#    }
DHCP Scope Use Test#Headercode#$ThisString="DHCP Server, Scope ID, Percentage Used, Final Status"
DHCP Scope Use Test#Headercode#Add-Content "$TestCSVFile" $ThisString
DHCP Scope Use Test#CredCode#Import-Module DHCPServer
DHCP Scope Use Test#CredCode#$DataFileLocation=$CurrentLoc+"Data\"+$UniqueTest+"_DATA.CSV"
DHCP Scope Use Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Scope Use Test#CredCode#$STR = "DHCP Server, Scope Not In Use"
DHCP Scope Use Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Scope Use Test#CredCode#
DHCP Scope Use Test#CredCode#
DHCP Scope Use Test#CredCode#
DHCP Scope Use Test#CredCode#$AnyGap = "No"
DHCP Scope Use Test#CredCode#
DHCP Scope Use Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Scope Use Test#CredCode#{
DHCP Scope Use Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Scope Use Test#CredCode#    $TotScopeNotInUse = 0
DHCP Scope Use Test#CredCode#    $TotScopeInUse = 0
DHCP Scope Use Test#CredCode#
DHCP Scope Use Test#CredCode#    $Error.Clear()
DHCP Scope Use Test#CredCode#    $results=Get-DhcpServerv4ScopeStatistics -ComputerName $ThisServerNow | Select ScopeID,AddressesFree,AddressesInUse,PercentageInUse,ReservedAddress
DHCP Scope Use Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Scope Use Test#CredCode#    {     
DHCP Scope Use Test#CredCode#        $TotScopeNow = $results.Name.Count
DHCP Scope Use Test#CredCode#
DHCP Scope Use Test#CredCode#        ForEach ($EachScope in $Results)
DHCP Scope Use Test#CredCode#        {
DHCP Scope Use Test#CredCode#            IF ($EachScope.PercentageInUse -gt 80)
DHCP Scope Use Test#CredCode#            {
DHCP Scope Use Test#CredCode#                $AnyGap = "Yes"                                
DHCP Scope Use Test#CredCode#                $STR = $ThisServerNow+","+$EachScope.ScopeID+","+$EachScope.PercentageInUse+",Not Ok"
DHCP Scope Use Test#CredCode#                Add-Content $TestCSVFile $STR
DHCP Scope Use Test#CredCode#            }            
DHCP Scope Use Test#CredCode#            else
DHCP Scope Use Test#CredCode#            {
DHCP Scope Use Test#CredCode#                $STR = $ThisServerNow+","+$EachScope.ScopeID+","+$EachScope.PercentageInUse+",Ok"
DHCP Scope Use Test#CredCode#                Add-Content $TestCSVFile $STR
DHCP Scope Use Test#CredCode#            }
DHCP Scope Use Test#CredCode#        }
DHCP Scope Use Test#CredCode#    }
DHCP Scope Use Test#CredCode#    else
DHCP Scope Use Test#CredCode#    {
DHCP Scope Use Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Scope Use Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Scope Use Test#CredCode#    }
DHCP Scope Use Test#CredCode#}
DHCP Scope Use Test#CredCode#
DHCP Scope Use Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Scope Use Test#CredCode#    {
DHCP Scope Use Test#CredCode#        $TestStatus="High"
DHCP Scope Use Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Scope Use Test#CredCode#    }
DHCP Scope Use Test#CredCode#    else
DHCP Scope Use Test#CredCode#    {
DHCP Scope Use Test#CredCode#        $TestStatus="Passed"
DHCP Scope Use Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Scope Use Test#CredCode#    }
DHCP Scope Use Test#CredCode#Import-Module DHCPServer
DHCP Scope Use Test#CredCode#$DataFileLocation=$CurrentLoc+"Data\"+$UniqueTest+"_DATA.CSV"
DHCP Scope Use Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Scope Use Test#CredCode#$STR = "DHCP Server, Scope Not In Use"
DHCP Scope Use Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Scope Use Test#CredCode#
DHCP Scope Use Test#CredCode#
DHCP Scope Use Test#CredCode#
DHCP Scope Use Test#CredCode#$AnyGap = "No"
DHCP Scope Use Test#CredCode#
DHCP Scope Use Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Scope Use Test#CredCode#{
DHCP Scope Use Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Scope Use Test#CredCode#    $TotScopeNotInUse = 0
DHCP Scope Use Test#CredCode#    $TotScopeInUse = 0
DHCP Scope Use Test#CredCode#
DHCP Scope Use Test#CredCode#    $Error.Clear()
DHCP Scope Use Test#CredCode#    $results=Invoke-Command -ComputerName $ThisServerNow -Script { param($R1Now) Get-DhcpServerv4ScopeStatistics -ComputerName $R1Now | Select ScopeID,AddressesFree,AddressesInUse,PercentageInUse,ReservedAddress } -Credential $Creds -ArgumentList $ThisServerNow
DHCP Scope Use Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Scope Use Test#CredCode#    {     
DHCP Scope Use Test#CredCode#        $TotScopeNow = $results.Name.Count
DHCP Scope Use Test#CredCode#
DHCP Scope Use Test#CredCode#        ForEach ($EachScope in $Results)
DHCP Scope Use Test#CredCode#        {
DHCP Scope Use Test#CredCode#            IF ($EachScope.PercentageInUse -gt 80)
DHCP Scope Use Test#CredCode#            {
DHCP Scope Use Test#CredCode#                $AnyGap = "Yes"                                
DHCP Scope Use Test#CredCode#                $STR = $ThisServerNow+","+$EachScope.ScopeID+","+$EachScope.PercentageInUse+",Not Ok"
DHCP Scope Use Test#CredCode#                Add-Content $TestCSVFile $STR
DHCP Scope Use Test#CredCode#            }            
DHCP Scope Use Test#CredCode#            else
DHCP Scope Use Test#CredCode#            {
DHCP Scope Use Test#CredCode#                $STR = $ThisServerNow+","+$EachScope.ScopeID+","+$EachScope.PercentageInUse+",Ok"
DHCP Scope Use Test#CredCode#                Add-Content $TestCSVFile $STR
DHCP Scope Use Test#CredCode#            }
DHCP Scope Use Test#CredCode#        }
DHCP Scope Use Test#CredCode#    }
DHCP Scope Use Test#CredCode#    else
DHCP Scope Use Test#CredCode#    {
DHCP Scope Use Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Scope Use Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Scope Use Test#CredCode#    }
DHCP Scope Use Test#CredCode#}
DHCP Scope Use Test#CredCode#
DHCP Scope Use Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Scope Use Test#CredCode#    {
DHCP Scope Use Test#CredCode#        $TestStatus="High"
DHCP Scope Use Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Scope Use Test#CredCode#    }
DHCP Scope Use Test#CredCode#    else
DHCP Scope Use Test#CredCode#    {
DHCP Scope Use Test#CredCode#        $TestStatus="Passed"
DHCP Scope Use Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Scope Use Test#CredCode#    }
DHCP Server Auditing Test#Headercode#$ThisString="DHCP Server, Auditing Status, Path, Max File Size In MB, Disk Check Interval, Minimum MB Disk Space, Final Status"
DHCP Server Auditing Test#Headercode#Add-Content "$TestCSVFile" $ThisString
DHCP Server Auditing Test#CredCode#Import-Module DHCPServer
DHCP Server Auditing Test#CredCode#$DataFileLocation=$CurrentLoc+"Data\"+$UniqueTest+"_DATA.CSV"
DHCP Server Auditing Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Server Auditing Test#CredCode#$STR = "DHCP Server, Scope Not In Use"
DHCP Server Auditing Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#$AnyGap = "No"
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server Auditing Test#CredCode#{
DHCP Server Auditing Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server Auditing Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server Auditing Test#CredCode#    $TotScopeInUse = 0
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#    $Error.Clear()
DHCP Server Auditing Test#CredCode#    $results=Get-DhcpServerAuditLog -ComputerName $ThisServerNow
DHCP Server Auditing Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server Auditing Test#CredCode#    {     
DHCP Server Auditing Test#CredCode#        $AuditStatus = $results.Enable
DHCP Server Auditing Test#CredCode#	     $MPath = $results.Path
DHCP Server Auditing Test#CredCode#	     $MaxMBFileSize = $results.MaxMBFileSize
DHCP Server Auditing Test#CredCode#	     $DiskCheckInterval	= $results.DiskCheckInterval
DHCP Server Auditing Test#CredCode#	     $MinMBDiskSpace = $results.MinMBDiskSpace
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#        $Val1 = "Disabled"
DHCP Server Auditing Test#CredCode#        $FinalStatus = "Ok"
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#        IF ($AuditStatus -eq $true)
DHCP Server Auditing Test#CredCode#        {
DHCP Server Auditing Test#CredCode#            $STR = $ThisServerNow+",Enabled, "+$MPath+","+$MaxMBFileSize+","+$DiskCheckInterval+","+$MinMBDiskSpace+","+" Ok"
DHCP Server Auditing Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Auditing Test#CredCode#        }
DHCP Server Auditing Test#CredCode#        else
DHCP Server Auditing Test#CredCode#        {
DHCP Server Auditing Test#CredCode#            $AnyGap = "Yes"
DHCP Server Auditing Test#CredCode#            $STR = $ThisServerNow+",Enabled, "+$MPath+","+$MaxMBFileSize+","+$DiskCheckInterval+","+$MinMBDiskSpace+","+" Not Ok"
DHCP Server Auditing Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Auditing Test#CredCode#        }
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#    }
DHCP Server Auditing Test#CredCode#    else
DHCP Server Auditing Test#CredCode#    {
DHCP Server Auditing Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server Auditing Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Auditing Test#CredCode#    }
DHCP Server Auditing Test#CredCode#}
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server Auditing Test#CredCode#    {
DHCP Server Auditing Test#CredCode#        $TestStatus="High"
DHCP Server Auditing Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server Auditing Test#CredCode#    }
DHCP Server Auditing Test#CredCode#    else
DHCP Server Auditing Test#CredCode#    {
DHCP Server Auditing Test#CredCode#        $TestStatus="Passed"
DHCP Server Auditing Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server Auditing Test#CredCode#    }
DHCP Server Auditing Test#CredCode#Import-Module DHCPServer
DHCP Server Auditing Test#CredCode#$DataFileLocation=$CurrentLoc+"Data\"+$UniqueTest+"_DATA.CSV"
DHCP Server Auditing Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Server Auditing Test#CredCode#$STR = "DHCP Server, Scope Not In Use"
DHCP Server Auditing Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#$AnyGap = "No"
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server Auditing Test#CredCode#{
DHCP Server Auditing Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server Auditing Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server Auditing Test#CredCode#    $TotScopeInUse = 0
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#    $Error.Clear()
DHCP Server Auditing Test#CredCode#    $results=Invoke-Command -ComputerName $ThisServerNow -Script { param($R1Now) Get-DhcpServerAuditLog -ComputerName $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
DHCP Server Auditing Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server Auditing Test#CredCode#    {     
DHCP Server Auditing Test#CredCode#        $AuditStatus = $results.Enable
DHCP Server Auditing Test#CredCode#	     $MPath = $results.Path
DHCP Server Auditing Test#CredCode#	     $MaxMBFileSize = $results.MaxMBFileSize
DHCP Server Auditing Test#CredCode#	     $DiskCheckInterval	= $results.DiskCheckInterval
DHCP Server Auditing Test#CredCode#	     $MinMBDiskSpace = $results.MinMBDiskSpace
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#        $Val1 = "Disabled"
DHCP Server Auditing Test#CredCode#        $FinalStatus = "Ok"
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#        IF ($AuditStatus -eq $true)
DHCP Server Auditing Test#CredCode#        {
DHCP Server Auditing Test#CredCode#            $STR = $ThisServerNow+",Enabled, "+$MPath+","+$MaxMBFileSize+","+$DiskCheckInterval+","+$MinMBDiskSpace+","+" Ok"
DHCP Server Auditing Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Auditing Test#CredCode#        }
DHCP Server Auditing Test#CredCode#        else
DHCP Server Auditing Test#CredCode#        {
DHCP Server Auditing Test#CredCode#            $AnyGap = "Yes"
DHCP Server Auditing Test#CredCode#            $STR = $ThisServerNow+",Enabled, "+$MPath+","+$MaxMBFileSize+","+$DiskCheckInterval+","+$MinMBDiskSpace+","+" Not Ok"
DHCP Server Auditing Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Auditing Test#CredCode#        }
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#    }
DHCP Server Auditing Test#CredCode#    else
DHCP Server Auditing Test#CredCode#    {
DHCP Server Auditing Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server Auditing Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Auditing Test#CredCode#    }
DHCP Server Auditing Test#CredCode#}
DHCP Server Auditing Test#CredCode#
DHCP Server Auditing Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server Auditing Test#CredCode#    {
DHCP Server Auditing Test#CredCode#        $TestStatus="High"
DHCP Server Auditing Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server Auditing Test#CredCode#    }
DHCP Server Auditing Test#CredCode#    else
DHCP Server Auditing Test#CredCode#    {
DHCP Server Auditing Test#CredCode#        $TestStatus="Passed"
DHCP Server Auditing Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server Auditing Test#CredCode#    }
DHCP Server Logging Test#Headercode#$ThisString="DHCP Server, DHCP Logging Status, Backup Interval In Minutes, Cleanup Interval In Minutes, Final Status"
DHCP Server Logging Test#Headercode#Add-Content "$TestCSVFile" $ThisString
DHCP Server Logging Test#CredCode#Import-Module DHCPServer
DHCP Server Logging Test#CredCode#$DataFileLocation=$CurrentLoc+"Data\"+$UniqueTest+"_DATA.CSV"
DHCP Server Logging Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Server Logging Test#CredCode#$STR = "DHCP Server, Scope Not In Use"
DHCP Server Logging Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#$AnyGap = "No"
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server Logging Test#CredCode#{
DHCP Server Logging Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server Logging Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server Logging Test#CredCode#    $TotScopeInUse = 0
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#    $Error.Clear()
DHCP Server Logging Test#CredCode#    $results=Get-DhcpServerDatabase -ComputerName $ThisServerNow
DHCP Server Logging Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server Logging Test#CredCode#    {     
DHCP Server Logging Test#CredCode#        $AuditStatus = $results.LoggingEnabled
DHCP Server Logging Test#CredCode#        $IntOne = $results.BackupInterval
DHCP Server Logging Test#CredCode#        $IntTwo = $results.CleanupInterval
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#        IF ($AuditStatus -eq $true)
DHCP Server Logging Test#CredCode#        {
DHCP Server Logging Test#CredCode#            $STR = $ThisServerNow+",Enabled,"+$IntOne+","+$IntTwo+",Ok"
DHCP Server Logging Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Logging Test#CredCode#        }
DHCP Server Logging Test#CredCode#        else
DHCP Server Logging Test#CredCode#        {
DHCP Server Logging Test#CredCode#            $AnyGap = "Yes"
DHCP Server Logging Test#CredCode#            $STR = $ThisServerNow+",Enabled,"+$IntOne+","+$IntTwo+",Not Ok"
DHCP Server Logging Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Logging Test#CredCode#        }
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#    }
DHCP Server Logging Test#CredCode#    else
DHCP Server Logging Test#CredCode#    {
DHCP Server Logging Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server Logging Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Logging Test#CredCode#    }
DHCP Server Logging Test#CredCode#}
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server Logging Test#CredCode#    {
DHCP Server Logging Test#CredCode#        $TestStatus="High"
DHCP Server Logging Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server Logging Test#CredCode#    }
DHCP Server Logging Test#CredCode#    else
DHCP Server Logging Test#CredCode#    {
DHCP Server Logging Test#CredCode#        $TestStatus="Passed"
DHCP Server Logging Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server Logging Test#CredCode#    }
DHCP Server Logging Test#CredCode#Import-Module DHCPServer
DHCP Server Logging Test#CredCode#$DataFileLocation=$CurrentLoc+"Data\"+$UniqueTest+"_DATA.CSV"
DHCP Server Logging Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Server Logging Test#CredCode#$STR = "DHCP Server, Scope Not In Use"
DHCP Server Logging Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#$AnyGap = "No"
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server Logging Test#CredCode#{
DHCP Server Logging Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server Logging Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server Logging Test#CredCode#    $TotScopeInUse = 0
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#    $Error.Clear()
DHCP Server Logging Test#CredCode#    $results=Invoke-Command -ComputerName $ThisServerNow -Script { param($R1Now) Get-DhcpServerDatabase -ComputerName $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
DHCP Server Logging Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server Logging Test#CredCode#    {     
DHCP Server Logging Test#CredCode#        $AuditStatus = $results.LoggingEnabled
DHCP Server Logging Test#CredCode#        $IntOne = $results.BackupInterval
DHCP Server Logging Test#CredCode#        $IntTwo = $results.CleanupInterval
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#        IF ($AuditStatus -eq $true)
DHCP Server Logging Test#CredCode#        {
DHCP Server Logging Test#CredCode#            $STR = $ThisServerNow+",Enabled,"+$IntOne+","+$IntTwo+",Ok"
DHCP Server Logging Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Logging Test#CredCode#        }
DHCP Server Logging Test#CredCode#        else
DHCP Server Logging Test#CredCode#        {
DHCP Server Logging Test#CredCode#            $AnyGap = "Yes"
DHCP Server Logging Test#CredCode#            $STR = $ThisServerNow+",Enabled,"+$IntOne+","+$IntTwo+",Not Ok"
DHCP Server Logging Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Logging Test#CredCode#        }
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#    }
DHCP Server Logging Test#CredCode#    else
DHCP Server Logging Test#CredCode#    {
DHCP Server Logging Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server Logging Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Logging Test#CredCode#    }
DHCP Server Logging Test#CredCode#}
DHCP Server Logging Test#CredCode#
DHCP Server Logging Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server Logging Test#CredCode#    {
DHCP Server Logging Test#CredCode#        $TestStatus="High"
DHCP Server Logging Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server Logging Test#CredCode#    }
DHCP Server Logging Test#CredCode#    else
DHCP Server Logging Test#CredCode#    {
DHCP Server Logging Test#CredCode#        $TestStatus="Passed"
DHCP Server Logging Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server Logging Test#CredCode#    }
DHCP Server Backup Path Test#Headercode#$ThisString="DHCP Server, DHCP Database Backup Path, Final Status"
DHCP Server Backup Path Test#Headercode#Add-Content "$TestCSVFile" $ThisString
DHCP Server Backup Path Test#CredCode#Import-Module DHCPServer
DHCP Server Backup Path Test#CredCode#$DataFileLocation=$CurrentLoc+"Data\"+$UniqueTest+"_DATA.CSV"
DHCP Server Backup Path Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Server Backup Path Test#CredCode#$STR = "DHCP Server, Scope Not In Use"
DHCP Server Backup Path Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Server Backup Path Test#CredCode#
DHCP Server Backup Path Test#CredCode#
DHCP Server Backup Path Test#CredCode#
DHCP Server Backup Path Test#CredCode#$AnyGap = "No"
DHCP Server Backup Path Test#CredCode#
DHCP Server Backup Path Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server Backup Path Test#CredCode#{
DHCP Server Backup Path Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server Backup Path Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server Backup Path Test#CredCode#    $TotScopeInUse = 0
DHCP Server Backup Path Test#CredCode#
DHCP Server Backup Path Test#CredCode#    $Error.Clear()
DHCP Server Backup Path Test#CredCode#    $results=Get-DhcpServerDatabase -ComputerName $ThisServerNow
DHCP Server Backup Path Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server Backup Path Test#CredCode#    {     
DHCP Server Backup Path Test#CredCode#        $BackupPath = $results.BackupPath
DHCP Server Backup Path Test#CredCode#        
DHCP Server Backup Path Test#CredCode#        $NewNow = $BackupPath.SubString(0, 3)
DHCP Server Backup Path Test#CredCode#        
DHCP Server Backup Path Test#CredCode#        IF ($NewNow -eq "C:\")
DHCP Server Backup Path Test#CredCode#        {
DHCP Server Backup Path Test#CredCode#            $AnyGap = "Yes"
DHCP Server Backup Path Test#CredCode#            $STR = $ThisServerNow+","+$BackupPath+",Not Ok"
DHCP Server Backup Path Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Backup Path Test#CredCode#        }
DHCP Server Backup Path Test#CredCode#        else
DHCP Server Backup Path Test#CredCode#        {
DHCP Server Backup Path Test#CredCode#            $STR = $ThisServerNow+","+$BackupPath+", Ok"
DHCP Server Backup Path Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Backup Path Test#CredCode#        }
DHCP Server Backup Path Test#CredCode#
DHCP Server Backup Path Test#CredCode#    }
DHCP Server Backup Path Test#CredCode#    else
DHCP Server Backup Path Test#CredCode#    {
DHCP Server Backup Path Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server Backup Path Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Backup Path Test#CredCode#    }
DHCP Server Backup Path Test#CredCode#}
DHCP Server Backup Path Test#CredCode#
DHCP Server Backup Path Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server Backup Path Test#CredCode#    {
DHCP Server Backup Path Test#CredCode#        $TestStatus="High"
DHCP Server Backup Path Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server Backup Path Test#CredCode#    }
DHCP Server Backup Path Test#CredCode#    else
DHCP Server Backup Path Test#CredCode#    {
DHCP Server Backup Path Test#CredCode#        $TestStatus="Passed"
DHCP Server Backup Path Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server Backup Path Test#CredCode#    }
DHCP Server Backup Path Test#CredCode#Import-Module DHCPServer
DHCP Server Backup Path Test#CredCode#$DataFileLocation=$CurrentLoc+"Data\"+$UniqueTest+"_DATA.CSV"
DHCP Server Backup Path Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Server Backup Path Test#CredCode#$STR = "DHCP Server, Scope Not In Use"
DHCP Server Backup Path Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Server Backup Path Test#CredCode#
DHCP Server Backup Path Test#CredCode#
DHCP Server Backup Path Test#CredCode#
DHCP Server Backup Path Test#CredCode#$AnyGap = "No"
DHCP Server Backup Path Test#CredCode#
DHCP Server Backup Path Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server Backup Path Test#CredCode#{
DHCP Server Backup Path Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server Backup Path Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server Backup Path Test#CredCode#    $TotScopeInUse = 0
DHCP Server Backup Path Test#CredCode#
DHCP Server Backup Path Test#CredCode#    $Error.Clear()
DHCP Server Backup Path Test#CredCode#    $results=Invoke-Command -ComputerName $ThisServerNow -Script { param($R1Now) Get-DhcpServerDatabase -ComputerName $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
DHCP Server Backup Path Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server Backup Path Test#CredCode#    {     
DHCP Server Backup Path Test#CredCode#        $BackupPath = $results.BackupPath
DHCP Server Backup Path Test#CredCode#        
DHCP Server Backup Path Test#CredCode#        $NewNow = $BackupPath.SubString(0, 3)
DHCP Server Backup Path Test#CredCode#        
DHCP Server Backup Path Test#CredCode#        IF ($NewNow -eq "C:\")
DHCP Server Backup Path Test#CredCode#        {
DHCP Server Backup Path Test#CredCode#            $AnyGap = "Yes"
DHCP Server Backup Path Test#CredCode#            $STR = $ThisServerNow+","+$BackupPath+",Not Ok"
DHCP Server Backup Path Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Backup Path Test#CredCode#        }
DHCP Server Backup Path Test#CredCode#        else
DHCP Server Backup Path Test#CredCode#        {
DHCP Server Backup Path Test#CredCode#            $STR = $ThisServerNow+","+$BackupPath+", Ok"
DHCP Server Backup Path Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Backup Path Test#CredCode#        }
DHCP Server Backup Path Test#CredCode#
DHCP Server Backup Path Test#CredCode#    }
DHCP Server Backup Path Test#CredCode#    else
DHCP Server Backup Path Test#CredCode#    {
DHCP Server Backup Path Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server Backup Path Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Backup Path Test#CredCode#    }
DHCP Server Backup Path Test#CredCode#}
DHCP Server Backup Path Test#CredCode#
DHCP Server Backup Path Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server Backup Path Test#CredCode#    {
DHCP Server Backup Path Test#CredCode#        $TestStatus="High"
DHCP Server Backup Path Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server Backup Path Test#CredCode#    }
DHCP Server Backup Path Test#CredCode#    else
DHCP Server Backup Path Test#CredCode#    {
DHCP Server Backup Path Test#CredCode#        $TestStatus="Passed"
DHCP Server Backup Path Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server Backup Path Test#CredCode#    }
DHCP Server Conflict Detection Settings Test#Headercode#$ThisString="DHCP Server, Conflict Detection Configured?, Value, Final Status"
DHCP Server Conflict Detection Settings Test#Headercode#Add-Content "$TestCSVFile" $ThisString
DHCP Server Conflict Detection Settings Test#CredCode#
DHCP Server Conflict Detection Settings Test#CredCode#
DHCP Server Conflict Detection Settings Test#CredCode#
DHCP Server Conflict Detection Settings Test#CredCode#$AnyGap = "No"
DHCP Server Conflict Detection Settings Test#CredCode#
DHCP Server Conflict Detection Settings Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server Conflict Detection Settings Test#CredCode#{
DHCP Server Conflict Detection Settings Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server Conflict Detection Settings Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server Conflict Detection Settings Test#CredCode#    $TotScopeInUse = 0
DHCP Server Conflict Detection Settings Test#CredCode#
DHCP Server Conflict Detection Settings Test#CredCode#    $Error.Clear()
DHCP Server Conflict Detection Settings Test#CredCode#    $results=Get-DhcpServerSetting -ComputerName $ThisServerNow
DHCP Server Conflict Detection Settings Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server Conflict Detection Settings Test#CredCode#    {     
DHCP Server Conflict Detection Settings Test#CredCode#        $ConfSetting = $results.ConflictDetectionAttempts
DHCP Server Conflict Detection Settings Test#CredCode#        
DHCP Server Conflict Detection Settings Test#CredCode#        IF ($ConfSetting -eq 0)
DHCP Server Conflict Detection Settings Test#CredCode#        {
DHCP Server Conflict Detection Settings Test#CredCode#            $AnyGap = "Yes"
DHCP Server Conflict Detection Settings Test#CredCode#            $STR = $ThisServerNow+",Disabled, 0, Not Ok"
DHCP Server Conflict Detection Settings Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Conflict Detection Settings Test#CredCode#        }
DHCP Server Conflict Detection Settings Test#CredCode#        else
DHCP Server Conflict Detection Settings Test#CredCode#        {
DHCP Server Conflict Detection Settings Test#CredCode#            $STR = $ThisServerNow+",Enabled,"+$ConfSetting+",Ok"
DHCP Server Conflict Detection Settings Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Conflict Detection Settings Test#CredCode#        }
DHCP Server Conflict Detection Settings Test#CredCode#
DHCP Server Conflict Detection Settings Test#CredCode#    }
DHCP Server Conflict Detection Settings Test#CredCode#    else
DHCP Server Conflict Detection Settings Test#CredCode#    {
DHCP Server Conflict Detection Settings Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server Conflict Detection Settings Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Conflict Detection Settings Test#CredCode#    }
DHCP Server Conflict Detection Settings Test#CredCode#}
DHCP Server Conflict Detection Settings Test#CredCode#
DHCP Server Conflict Detection Settings Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server Conflict Detection Settings Test#CredCode#    {
DHCP Server Conflict Detection Settings Test#CredCode#        $TestStatus="High"
DHCP Server Conflict Detection Settings Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server Conflict Detection Settings Test#CredCode#    }
DHCP Server Conflict Detection Settings Test#CredCode#    else
DHCP Server Conflict Detection Settings Test#CredCode#    {
DHCP Server Conflict Detection Settings Test#CredCode#        $TestStatus="Passed"
DHCP Server Conflict Detection Settings Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server Conflict Detection Settings Test#CredCode#    }
DHCP Server Conflict Detection Settings Test#CredCode#
DHCP Server Conflict Detection Settings Test#CredCode#
DHCP Server Conflict Detection Settings Test#CredCode#
DHCP Server Conflict Detection Settings Test#CredCode#$AnyGap = "No"
DHCP Server Conflict Detection Settings Test#CredCode#
DHCP Server Conflict Detection Settings Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server Conflict Detection Settings Test#CredCode#{
DHCP Server Conflict Detection Settings Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server Conflict Detection Settings Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server Conflict Detection Settings Test#CredCode#    $TotScopeInUse = 0
DHCP Server Conflict Detection Settings Test#CredCode#
DHCP Server Conflict Detection Settings Test#CredCode#    $Error.Clear()
DHCP Server Conflict Detection Settings Test#CredCode#    $results=Invoke-Command -ComputerName $ThisServerNow -Script { param($R1Now) Get-DhcpServerSetting -ComputerName $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
DHCP Server Conflict Detection Settings Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server Conflict Detection Settings Test#CredCode#    {     
DHCP Server Conflict Detection Settings Test#CredCode#        $ConfSetting = $results.ConflictDetectionAttempts
DHCP Server Conflict Detection Settings Test#CredCode#        
DHCP Server Conflict Detection Settings Test#CredCode#        IF ($ConfSetting -eq 0)
DHCP Server Conflict Detection Settings Test#CredCode#        {
DHCP Server Conflict Detection Settings Test#CredCode#            $AnyGap = "Yes"
DHCP Server Conflict Detection Settings Test#CredCode#            $STR = $ThisServerNow+",Disabled, 0, Not Ok"
DHCP Server Conflict Detection Settings Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Conflict Detection Settings Test#CredCode#        }
DHCP Server Conflict Detection Settings Test#CredCode#        else
DHCP Server Conflict Detection Settings Test#CredCode#        {
DHCP Server Conflict Detection Settings Test#CredCode#            $STR = $ThisServerNow+",Enabled,"+$ConfSetting+",Ok"
DHCP Server Conflict Detection Settings Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Conflict Detection Settings Test#CredCode#        }
DHCP Server Conflict Detection Settings Test#CredCode#
DHCP Server Conflict Detection Settings Test#CredCode#    }
DHCP Server Conflict Detection Settings Test#CredCode#    else
DHCP Server Conflict Detection Settings Test#CredCode#    {
DHCP Server Conflict Detection Settings Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server Conflict Detection Settings Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Conflict Detection Settings Test#CredCode#    }
DHCP Server Conflict Detection Settings Test#CredCode#}
DHCP Server Conflict Detection Settings Test#CredCode#
DHCP Server Conflict Detection Settings Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server Conflict Detection Settings Test#CredCode#    {
DHCP Server Conflict Detection Settings Test#CredCode#        $TestStatus="High"
DHCP Server Conflict Detection Settings Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server Conflict Detection Settings Test#CredCode#    }
DHCP Server Conflict Detection Settings Test#CredCode#    else
DHCP Server Conflict Detection Settings Test#CredCode#    {
DHCP Server Conflict Detection Settings Test#CredCode#        $TestStatus="Passed"
DHCP Server Conflict Detection Settings Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server Conflict Detection Settings Test#CredCode#    }
DHCP Server Authorization Test#Headercode#$ThisString="DHCP Server, Is Authorized?, Final Status"
DHCP Server Authorization Test#Headercode#Add-Content "$TestCSVFile" $ThisString
DHCP Server Authorization Test#CredCode#
DHCP Server Authorization Test#CredCode#
DHCP Server Authorization Test#CredCode#
DHCP Server Authorization Test#CredCode#$AnyGap = "No"
DHCP Server Authorization Test#CredCode#
DHCP Server Authorization Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server Authorization Test#CredCode#{
DHCP Server Authorization Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server Authorization Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server Authorization Test#CredCode#    $TotScopeInUse = 0
DHCP Server Authorization Test#CredCode#
DHCP Server Authorization Test#CredCode#    $Error.Clear()
DHCP Server Authorization Test#CredCode#    $results=Get-DhcpServerSetting -ComputerName $ThisServerNow
DHCP Server Authorization Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server Authorization Test#CredCode#    {     
DHCP Server Authorization Test#CredCode#        $ConfSetting = $results.IsAuthorized
DHCP Server Authorization Test#CredCode#        
DHCP Server Authorization Test#CredCode#        IF ($ConfSetting -eq $true)
DHCP Server Authorization Test#CredCode#        {
DHCP Server Authorization Test#CredCode#            $STR = $ThisServerNow+",Authorized, Ok"
DHCP Server Authorization Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Authorization Test#CredCode#        }
DHCP Server Authorization Test#CredCode#        else
DHCP Server Authorization Test#CredCode#        {
DHCP Server Authorization Test#CredCode#            $AnyGap = "Yes"
DHCP Server Authorization Test#CredCode#            $STR = $ThisServerNow+",Not Authorized, Not Ok"
DHCP Server Authorization Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Authorization Test#CredCode#        }
DHCP Server Authorization Test#CredCode#
DHCP Server Authorization Test#CredCode#    }
DHCP Server Authorization Test#CredCode#    else
DHCP Server Authorization Test#CredCode#    {
DHCP Server Authorization Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server Authorization Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Authorization Test#CredCode#    }
DHCP Server Authorization Test#CredCode#}
DHCP Server Authorization Test#CredCode#
DHCP Server Authorization Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server Authorization Test#CredCode#    {
DHCP Server Authorization Test#CredCode#        $TestStatus="High"
DHCP Server Authorization Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server Authorization Test#CredCode#    }
DHCP Server Authorization Test#CredCode#    else
DHCP Server Authorization Test#CredCode#    {
DHCP Server Authorization Test#CredCode#        $TestStatus="Passed"
DHCP Server Authorization Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server Authorization Test#CredCode#    }
DHCP Server Authorization Test#CredCode#
DHCP Server Authorization Test#CredCode#
DHCP Server Authorization Test#CredCode#
DHCP Server Authorization Test#CredCode#$AnyGap = "No"
DHCP Server Authorization Test#CredCode#
DHCP Server Authorization Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server Authorization Test#CredCode#{
DHCP Server Authorization Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server Authorization Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server Authorization Test#CredCode#    $TotScopeInUse = 0
DHCP Server Authorization Test#CredCode#
DHCP Server Authorization Test#CredCode#    $Error.Clear()
DHCP Server Authorization Test#CredCode#    $results=Invoke-Command -ComputerName $ThisServerNow -Script { param($R1Now) Get-DhcpServerSetting -ComputerName $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
DHCP Server Authorization Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server Authorization Test#CredCode#    {     
DHCP Server Authorization Test#CredCode#        $ConfSetting = $results.IsAuthorized
DHCP Server Authorization Test#CredCode#        
DHCP Server Authorization Test#CredCode#        IF ($ConfSetting -eq $true)
DHCP Server Authorization Test#CredCode#        {
DHCP Server Authorization Test#CredCode#            $STR = $ThisServerNow+",Authorized, Ok"
DHCP Server Authorization Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Authorization Test#CredCode#        }
DHCP Server Authorization Test#CredCode#        else
DHCP Server Authorization Test#CredCode#        {
DHCP Server Authorization Test#CredCode#            $AnyGap = "Yes"
DHCP Server Authorization Test#CredCode#            $STR = $ThisServerNow+",Not Authorized, Not Ok"
DHCP Server Authorization Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Authorization Test#CredCode#        }
DHCP Server Authorization Test#CredCode#
DHCP Server Authorization Test#CredCode#    }
DHCP Server Authorization Test#CredCode#    else
DHCP Server Authorization Test#CredCode#    {
DHCP Server Authorization Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server Authorization Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Authorization Test#CredCode#    }
DHCP Server Authorization Test#CredCode#}
DHCP Server Authorization Test#CredCode#
DHCP Server Authorization Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server Authorization Test#CredCode#    {
DHCP Server Authorization Test#CredCode#        $TestStatus="High"
DHCP Server Authorization Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server Authorization Test#CredCode#    }
DHCP Server Authorization Test#CredCode#    else
DHCP Server Authorization Test#CredCode#    {
DHCP Server Authorization Test#CredCode#        $TestStatus="Passed"
DHCP Server Authorization Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server Authorization Test#CredCode#    }
DHCP Server NAP Enabled Test#Headercode#$ThisString="DHCP Server, Is NAP Enabled?, Final Status"
DHCP Server NAP Enabled Test#Headercode#Add-Content "$TestCSVFile" $ThisString
DHCP Server NAP Enabled Test#CredCode#
DHCP Server NAP Enabled Test#CredCode#
DHCP Server NAP Enabled Test#CredCode#
DHCP Server NAP Enabled Test#CredCode#$AnyGap = "No"
DHCP Server NAP Enabled Test#CredCode#
DHCP Server NAP Enabled Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server NAP Enabled Test#CredCode#{
DHCP Server NAP Enabled Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server NAP Enabled Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server NAP Enabled Test#CredCode#    $TotScopeInUse = 0
DHCP Server NAP Enabled Test#CredCode#
DHCP Server NAP Enabled Test#CredCode#    $Error.Clear()
DHCP Server NAP Enabled Test#CredCode#    $results=Get-DhcpServerSetting -ComputerName $ThisServerNow
DHCP Server NAP Enabled Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server NAP Enabled Test#CredCode#    {     
DHCP Server NAP Enabled Test#CredCode#        $ConfSetting = $results.NapEnabled
DHCP Server NAP Enabled Test#CredCode#        
DHCP Server NAP Enabled Test#CredCode#        IF ($ConfSetting -eq $true)
DHCP Server NAP Enabled Test#CredCode#        {
DHCP Server NAP Enabled Test#CredCode#            $STR = $ThisServerNow+",Enabled, Ok"
DHCP Server NAP Enabled Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server NAP Enabled Test#CredCode#        }
DHCP Server NAP Enabled Test#CredCode#        else
DHCP Server NAP Enabled Test#CredCode#        {
DHCP Server NAP Enabled Test#CredCode#            $AnyGap = "Yes"
DHCP Server NAP Enabled Test#CredCode#            $STR = $ThisServerNow+",Not Enabled, Not Ok"
DHCP Server NAP Enabled Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server NAP Enabled Test#CredCode#        }
DHCP Server NAP Enabled Test#CredCode#
DHCP Server NAP Enabled Test#CredCode#    }
DHCP Server NAP Enabled Test#CredCode#    else
DHCP Server NAP Enabled Test#CredCode#    {
DHCP Server NAP Enabled Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server NAP Enabled Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server NAP Enabled Test#CredCode#    }
DHCP Server NAP Enabled Test#CredCode#}
DHCP Server NAP Enabled Test#CredCode#
DHCP Server NAP Enabled Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server NAP Enabled Test#CredCode#    {
DHCP Server NAP Enabled Test#CredCode#        $TestStatus="High"
DHCP Server NAP Enabled Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server NAP Enabled Test#CredCode#    }
DHCP Server NAP Enabled Test#CredCode#    else
DHCP Server NAP Enabled Test#CredCode#    {
DHCP Server NAP Enabled Test#CredCode#        $TestStatus="Passed"
DHCP Server NAP Enabled Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server NAP Enabled Test#CredCode#    }
DHCP Server NAP Enabled Test#CredCode#
DHCP Server NAP Enabled Test#CredCode#
DHCP Server NAP Enabled Test#CredCode#
DHCP Server NAP Enabled Test#CredCode#$AnyGap = "No"
DHCP Server NAP Enabled Test#CredCode#
DHCP Server NAP Enabled Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server NAP Enabled Test#CredCode#{
DHCP Server NAP Enabled Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server NAP Enabled Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server NAP Enabled Test#CredCode#    $TotScopeInUse = 0
DHCP Server NAP Enabled Test#CredCode#
DHCP Server NAP Enabled Test#CredCode#    $Error.Clear()
DHCP Server NAP Enabled Test#CredCode#    $results=Invoke-Command -ComputerName $ThisServerNow -Script { param($R1Now) Get-DhcpServerSetting -ComputerName $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
DHCP Server NAP Enabled Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server NAP Enabled Test#CredCode#    {     
DHCP Server NAP Enabled Test#CredCode#        $ConfSetting = $results.NapEnabled
DHCP Server NAP Enabled Test#CredCode#        
DHCP Server NAP Enabled Test#CredCode#        IF ($ConfSetting -eq $true)
DHCP Server NAP Enabled Test#CredCode#        {
DHCP Server NAP Enabled Test#CredCode#            $STR = $ThisServerNow+",Enabled, Ok"
DHCP Server NAP Enabled Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server NAP Enabled Test#CredCode#        }
DHCP Server NAP Enabled Test#CredCode#        else
DHCP Server NAP Enabled Test#CredCode#        {
DHCP Server NAP Enabled Test#CredCode#            $AnyGap = "Yes"
DHCP Server NAP Enabled Test#CredCode#            $STR = $ThisServerNow+",Not Enabled, Not Ok"
DHCP Server NAP Enabled Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server NAP Enabled Test#CredCode#        }
DHCP Server NAP Enabled Test#CredCode#
DHCP Server NAP Enabled Test#CredCode#    }
DHCP Server NAP Enabled Test#CredCode#    else
DHCP Server NAP Enabled Test#CredCode#    {
DHCP Server NAP Enabled Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server NAP Enabled Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server NAP Enabled Test#CredCode#    }
DHCP Server NAP Enabled Test#CredCode#}
DHCP Server NAP Enabled Test#CredCode#
DHCP Server NAP Enabled Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server NAP Enabled Test#CredCode#    {
DHCP Server NAP Enabled Test#CredCode#        $TestStatus="High"
DHCP Server NAP Enabled Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server NAP Enabled Test#CredCode#    }
DHCP Server NAP Enabled Test#CredCode#    else
DHCP Server NAP Enabled Test#CredCode#    {
DHCP Server NAP Enabled Test#CredCode#        $TestStatus="Passed"
DHCP Server NAP Enabled Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server NAP Enabled Test#CredCode#    }
DHCP Server Dynamic Updates Test#Headercode#$ThisString="DHCP Server, Dynamic Updates Setting, Final Status"
DHCP Server Dynamic Updates Test#Headercode#Add-Content "$TestCSVFile" $ThisString
DHCP Server Dynamic Updates Test#CredCode#
DHCP Server Dynamic Updates Test#CredCode#
DHCP Server Dynamic Updates Test#CredCode#
DHCP Server Dynamic Updates Test#CredCode#$AnyGap = "No"
DHCP Server Dynamic Updates Test#CredCode#
DHCP Server Dynamic Updates Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server Dynamic Updates Test#CredCode#{
DHCP Server Dynamic Updates Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server Dynamic Updates Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server Dynamic Updates Test#CredCode#    $TotScopeInUse = 0
DHCP Server Dynamic Updates Test#CredCode#
DHCP Server Dynamic Updates Test#CredCode#    $Error.Clear()
DHCP Server Dynamic Updates Test#CredCode#    $results=Get-DhcpServerv4DnsSetting -ComputerName $ThisServerNow
DHCP Server Dynamic Updates Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server Dynamic Updates Test#CredCode#    {     
DHCP Server Dynamic Updates Test#CredCode#        $ConfSetting = $results.DynamicUpdates
DHCP Server Dynamic Updates Test#CredCode#        
DHCP Server Dynamic Updates Test#CredCode#        IF ($ConfSetting -eq "")
DHCP Server Dynamic Updates Test#CredCode#        {
DHCP Server Dynamic Updates Test#CredCode#            $AnyGap = "Yes"
DHCP Server Dynamic Updates Test#CredCode#            $STR = $ThisServerNow+",Not Configured, Not Ok"
DHCP Server Dynamic Updates Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Dynamic Updates Test#CredCode#        }
DHCP Server Dynamic Updates Test#CredCode#        else
DHCP Server Dynamic Updates Test#CredCode#        {            
DHCP Server Dynamic Updates Test#CredCode#            $STR = $ThisServerNow+","+$ConfSetting+",Ok"
DHCP Server Dynamic Updates Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Dynamic Updates Test#CredCode#        }
DHCP Server Dynamic Updates Test#CredCode#
DHCP Server Dynamic Updates Test#CredCode#    }
DHCP Server Dynamic Updates Test#CredCode#    else
DHCP Server Dynamic Updates Test#CredCode#    {
DHCP Server Dynamic Updates Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server Dynamic Updates Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Dynamic Updates Test#CredCode#    }
DHCP Server Dynamic Updates Test#CredCode#}
DHCP Server Dynamic Updates Test#CredCode#
DHCP Server Dynamic Updates Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server Dynamic Updates Test#CredCode#    {
DHCP Server Dynamic Updates Test#CredCode#        $TestStatus="High"
DHCP Server Dynamic Updates Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server Dynamic Updates Test#CredCode#    }
DHCP Server Dynamic Updates Test#CredCode#    else
DHCP Server Dynamic Updates Test#CredCode#    {
DHCP Server Dynamic Updates Test#CredCode#        $TestStatus="Passed"
DHCP Server Dynamic Updates Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server Dynamic Updates Test#CredCode#    }
DHCP Server Dynamic Updates Test#CredCode#
DHCP Server Dynamic Updates Test#CredCode#
DHCP Server Dynamic Updates Test#CredCode#
DHCP Server Dynamic Updates Test#CredCode#$AnyGap = "No"
DHCP Server Dynamic Updates Test#CredCode#
DHCP Server Dynamic Updates Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server Dynamic Updates Test#CredCode#{
DHCP Server Dynamic Updates Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server Dynamic Updates Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server Dynamic Updates Test#CredCode#    $TotScopeInUse = 0
DHCP Server Dynamic Updates Test#CredCode#
DHCP Server Dynamic Updates Test#CredCode#    $Error.Clear()
DHCP Server Dynamic Updates Test#CredCode#    $results=Invoke-Command -ComputerName $ThisServerNow -Script { param($R1Now) Get-DhcpServerv4DnsSetting -ComputerName $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
DHCP Server Dynamic Updates Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server Dynamic Updates Test#CredCode#    {     
DHCP Server Dynamic Updates Test#CredCode#        $ConfSetting = $results.DynamicUpdates
DHCP Server Dynamic Updates Test#CredCode#        
DHCP Server Dynamic Updates Test#CredCode#        IF ($ConfSetting -eq "")
DHCP Server Dynamic Updates Test#CredCode#        {
DHCP Server Dynamic Updates Test#CredCode#            $AnyGap = "Yes"
DHCP Server Dynamic Updates Test#CredCode#            $STR = $ThisServerNow+",Not Configured, Not Ok"
DHCP Server Dynamic Updates Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Dynamic Updates Test#CredCode#        }
DHCP Server Dynamic Updates Test#CredCode#        else
DHCP Server Dynamic Updates Test#CredCode#        {            
DHCP Server Dynamic Updates Test#CredCode#            $STR = $ThisServerNow+","+$ConfSetting+",Ok"
DHCP Server Dynamic Updates Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server Dynamic Updates Test#CredCode#        }
DHCP Server Dynamic Updates Test#CredCode#
DHCP Server Dynamic Updates Test#CredCode#    }
DHCP Server Dynamic Updates Test#CredCode#    else
DHCP Server Dynamic Updates Test#CredCode#    {
DHCP Server Dynamic Updates Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server Dynamic Updates Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Dynamic Updates Test#CredCode#    }
DHCP Server Dynamic Updates Test#CredCode#}
DHCP Server Dynamic Updates Test#CredCode#
DHCP Server Dynamic Updates Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server Dynamic Updates Test#CredCode#    {
DHCP Server Dynamic Updates Test#CredCode#        $TestStatus="High"
DHCP Server Dynamic Updates Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server Dynamic Updates Test#CredCode#    }
DHCP Server Dynamic Updates Test#CredCode#    else
DHCP Server Dynamic Updates Test#CredCode#    {
DHCP Server Dynamic Updates Test#CredCode#        $TestStatus="Passed"
DHCP Server Dynamic Updates Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server Dynamic Updates Test#CredCode#    }
DHCP Server V4 Scope Exclusion Test#Headercode#$ThisString="DHCP Server, Total Scopes, Exclusion Not Configured for Scopes, Final Status, Data File Location"
DHCP Server V4 Scope Exclusion Test#Headercode#Add-Content "$TestCSVFile" $ThisString
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#$DataFileLocation=$CurrentLoc+"Data\"+$UniqueTest+"_DATA.CSV"
DHCP Server V4 Scope Exclusion Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Server V4 Scope Exclusion Test#CredCode#$STR = "DHCP Server, Scope ID, Exclusion Start Range, Exclusion End Range"
DHCP Server V4 Scope Exclusion Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#$AnyGap = "No"
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server V4 Scope Exclusion Test#CredCode#{
DHCP Server V4 Scope Exclusion Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server V4 Scope Exclusion Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server V4 Scope Exclusion Test#CredCode#    $TotScopeInUse = 0
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#    $Error.Clear()
DHCP Server V4 Scope Exclusion Test#CredCode#    $results=Get-DhcpServerv4ExclusionRange -ComputerName $ThisServerNow
DHCP Server V4 Scope Exclusion Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server V4 Scope Exclusion Test#CredCode#    {     
DHCP Server V4 Scope Exclusion Test#CredCode#        
DHCP Server V4 Scope Exclusion Test#CredCode#        $TotScopes = Get-DhcpServerv4Scope -ComputerName $ThisServerNow
DHCP Server V4 Scope Exclusion Test#CredCode#        $TotScopesCount = $TotScopes.ScopeID.Count
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#        $TotScopesConfigured = 0
DHCP Server V4 Scope Exclusion Test#CredCode#        ForEach ($Item in $results)
DHCP Server V4 Scope Exclusion Test#CredCode#        {
DHCP Server V4 Scope Exclusion Test#CredCode#            $TotScopesConfigured++
DHCP Server V4 Scope Exclusion Test#CredCode#        }
DHCP Server V4 Scope Exclusion Test#CredCode#        
DHCP Server V4 Scope Exclusion Test#CredCode#        $TotNotNow = $TotScopesCount - $TotScopesConfigured
DHCP Server V4 Scope Exclusion Test#CredCode#        
DHCP Server V4 Scope Exclusion Test#CredCode#        IF ($TotNotNow -eq 0)
DHCP Server V4 Scope Exclusion Test#CredCode#        {
DHCP Server V4 Scope Exclusion Test#CredCode#            $STR = $ThisServerNow+","+$TotScopesCount+","+$TotNotNow+",Ok,"+$DataFileLocation
DHCP Server V4 Scope Exclusion Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server V4 Scope Exclusion Test#CredCode#        }
DHCP Server V4 Scope Exclusion Test#CredCode#        else
DHCP Server V4 Scope Exclusion Test#CredCode#        {            
DHCP Server V4 Scope Exclusion Test#CredCode#            $AnyGap = "Yes"
DHCP Server V4 Scope Exclusion Test#CredCode#            $STR = $ThisServerNow+","+$TotScopesCount+","+$TotNotNow+",Not Ok,"+$DataFileLocation
DHCP Server V4 Scope Exclusion Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server V4 Scope Exclusion Test#CredCode#        }
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#    }
DHCP Server V4 Scope Exclusion Test#CredCode#    else
DHCP Server V4 Scope Exclusion Test#CredCode#    {
DHCP Server V4 Scope Exclusion Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server V4 Scope Exclusion Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server V4 Scope Exclusion Test#CredCode#    }
DHCP Server V4 Scope Exclusion Test#CredCode#}
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server V4 Scope Exclusion Test#CredCode#    {
DHCP Server V4 Scope Exclusion Test#CredCode#        $TestStatus="Medium"
DHCP Server V4 Scope Exclusion Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server V4 Scope Exclusion Test#CredCode#    }
DHCP Server V4 Scope Exclusion Test#CredCode#    else
DHCP Server V4 Scope Exclusion Test#CredCode#    {
DHCP Server V4 Scope Exclusion Test#CredCode#        $TestStatus="Passed"
DHCP Server V4 Scope Exclusion Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server V4 Scope Exclusion Test#CredCode#    }
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#$DataFileLocation=$CurrentLoc+"Data\"+$UniqueTest+"_DATA.CSV"
DHCP Server V4 Scope Exclusion Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Server V4 Scope Exclusion Test#CredCode#$STR = "DHCP Server, Scope ID, Exclusion Start Range, Exclusion End Range"
DHCP Server V4 Scope Exclusion Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#$AnyGap = "No"
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server V4 Scope Exclusion Test#CredCode#{
DHCP Server V4 Scope Exclusion Test#CredCode#    $ThisServerNow = $Server.Instances
DHCP Server V4 Scope Exclusion Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server V4 Scope Exclusion Test#CredCode#    $TotScopeInUse = 0
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#    $Error.Clear()
DHCP Server V4 Scope Exclusion Test#CredCode#    $results=Invoke-Command -ComputerName $ThisServerNow -Script { param($R1Now) Get-DhcpServerv4ExclusionRange -ComputerName $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
DHCP Server V4 Scope Exclusion Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server V4 Scope Exclusion Test#CredCode#    {     
DHCP Server V4 Scope Exclusion Test#CredCode#        
DHCP Server V4 Scope Exclusion Test#CredCode#        $TotScopes = Get-DhcpServerv4Scope -ComputerName $ThisServerNow
DHCP Server V4 Scope Exclusion Test#CredCode#        $TotScopesCount = $TotScopes.ScopeID.Count
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#        $TotScopesConfigured = 0
DHCP Server V4 Scope Exclusion Test#CredCode#        ForEach ($Item in $results)
DHCP Server V4 Scope Exclusion Test#CredCode#        {
DHCP Server V4 Scope Exclusion Test#CredCode#            $TotScopesConfigured++
DHCP Server V4 Scope Exclusion Test#CredCode#        }
DHCP Server V4 Scope Exclusion Test#CredCode#        
DHCP Server V4 Scope Exclusion Test#CredCode#        $TotNotNow = $TotScopesCount - $TotScopesConfigured
DHCP Server V4 Scope Exclusion Test#CredCode#        
DHCP Server V4 Scope Exclusion Test#CredCode#        IF ($TotNotNow -eq 0)
DHCP Server V4 Scope Exclusion Test#CredCode#        {
DHCP Server V4 Scope Exclusion Test#CredCode#            $STR = $ThisServerNow+","+$TotScopesCount+","+$TotNotNow+",Ok,"+$DataFileLocation
DHCP Server V4 Scope Exclusion Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server V4 Scope Exclusion Test#CredCode#        }
DHCP Server V4 Scope Exclusion Test#CredCode#        else
DHCP Server V4 Scope Exclusion Test#CredCode#        {            
DHCP Server V4 Scope Exclusion Test#CredCode#            $AnyGap = "Yes"
DHCP Server V4 Scope Exclusion Test#CredCode#            $STR = $ThisServerNow+","+$TotScopesCount+","+$TotNotNow+",Not Ok,"+$DataFileLocation
DHCP Server V4 Scope Exclusion Test#CredCode#            Add-Content $TestCSVFile $STR
DHCP Server V4 Scope Exclusion Test#CredCode#        }
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#    }
DHCP Server V4 Scope Exclusion Test#CredCode#    else
DHCP Server V4 Scope Exclusion Test#CredCode#    {
DHCP Server V4 Scope Exclusion Test#CredCode#        $STR = $ThisServerNow+", Error Connecting to DHCP Server"
DHCP Server V4 Scope Exclusion Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server V4 Scope Exclusion Test#CredCode#    }
DHCP Server V4 Scope Exclusion Test#CredCode#}
DHCP Server V4 Scope Exclusion Test#CredCode#
DHCP Server V4 Scope Exclusion Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server V4 Scope Exclusion Test#CredCode#    {
DHCP Server V4 Scope Exclusion Test#CredCode#        $TestStatus="Medium"
DHCP Server V4 Scope Exclusion Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server V4 Scope Exclusion Test#CredCode#    }
DHCP Server V4 Scope Exclusion Test#CredCode#    else
DHCP Server V4 Scope Exclusion Test#CredCode#    {
DHCP Server V4 Scope Exclusion Test#CredCode#        $TestStatus="Passed"
DHCP Server V4 Scope Exclusion Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server V4 Scope Exclusion Test#CredCode#    }
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#$ThisString = "Office Domain, Domain Type, Notification Days, Validity Period, Final Status"
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#$AnyGap = "No"
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#$AllSubs = Get-MSOlDomain
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#ForEach ($EachSub in $AllSubs)
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#{
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#	$ThisSub = $EachSub.Name
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#	$DomType = $EachSub.Authentication
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#	
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#	$DomType
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#	IF ($DomType -eq "Managed")
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#	{		
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#		$Error.Clear()
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#		$AllProp = Get-MsolPasswordPolicy -DomainName $ThisSub
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#		IF ($Error.Count -eq 0)
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#		{
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#			ForEach ($EachItem in $AllProp)
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#			{				
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#				$NotDays = $EachItem.NotificationDays
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#				$ValDays = $EachItem.ValidityPeriod
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#				$FinalStatus = "Ok"
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#				
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#				IF ($ValDays -eq $null -or $ValDays -eq "")
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#				{
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#					$FinalStatus = "Not Ok"
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#					$AnyGap = "Yes"
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#				}
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#				
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#				$STR = $ThisSub + "," +$DomType+","+$NotDays + "," + $ValDays + "," + $FinalStatus
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#				Add-Content $TestCSVFile $STR
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#			}
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#		}
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#		else
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#		{
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#			$NotDays = "Not Available"
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#			$ValDays = "Not Available"
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#			$FinalStatus = "Ok"			
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#			$STR = $ThisSub + "," +$DomType+","+$NotDays + "," + $ValDays + "," + $FinalStatus
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#			Add-Content $TestCSVFile $STR			
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#		}
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#	}
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#	else
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#	{
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#		$NotDays = "Not Applicable"
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#		$ValDays = "Not Applicable"
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#		$FinalStatus = "Ok"
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#		
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#		$STR = $ThisSub + "," +$DomType+","+$NotDays + "," + $ValDays + "," + $FinalStatus
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#		Add-Content $TestCSVFile $STR				
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#	}
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#}
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#IF ($AnyGap -eq "Yes")
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#{
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#	$TestStatus = "High"
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#	$TestText = "HIGH ISSUE"
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#}
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#else
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#{
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#	$TestStatus = "Passed"
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure that Office 365 Passwords Are Not Set to Expire#CredCode#}
Ensure modern authentication for Skype for Business Online is enabled#CredCode#$ThisString = "Modern Authentication, Status"
Ensure modern authentication for Skype for Business Online is enabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure modern authentication for Skype for Business Online is enabled#CredCode#
Ensure modern authentication for Skype for Business Online is enabled#CredCode#$AnyGap = "No"
Ensure modern authentication for Skype for Business Online is enabled#CredCode#
Ensure modern authentication for Skype for Business Online is enabled#CredCode#$AllSubs = Get-CsOAuthConfiguration
Ensure modern authentication for Skype for Business Online is enabled#CredCode#ForEach ($EachSub in $AllSubs)
Ensure modern authentication for Skype for Business Online is enabled#CredCode#{
Ensure modern authentication for Skype for Business Online is enabled#CredCode#	$ThisItem = $EachSub.ClientAdalAuthOverride
Ensure modern authentication for Skype for Business Online is enabled#CredCode#	
Ensure modern authentication for Skype for Business Online is enabled#CredCode#	IF ($ThisItem -eq "NoOverride")
Ensure modern authentication for Skype for Business Online is enabled#CredCode#	{
Ensure modern authentication for Skype for Business Online is enabled#CredCode#		$AnyGap = "Yes"
Ensure modern authentication for Skype for Business Online is enabled#CredCode#		$STR = $ThisItem + ", Not Enabled"
Ensure modern authentication for Skype for Business Online is enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure modern authentication for Skype for Business Online is enabled#CredCode#	}
Ensure modern authentication for Skype for Business Online is enabled#CredCode#	else
Ensure modern authentication for Skype for Business Online is enabled#CredCode#	{
Ensure modern authentication for Skype for Business Online is enabled#CredCode#		$STR = $ThisItem + ", Enabled"
Ensure modern authentication for Skype for Business Online is enabled#CredCode#		Add-Content $TestCSVFile $STR		
Ensure modern authentication for Skype for Business Online is enabled#CredCode#	}
Ensure modern authentication for Skype for Business Online is enabled#CredCode#}
Ensure modern authentication for Skype for Business Online is enabled#CredCode#
Ensure modern authentication for Skype for Business Online is enabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure modern authentication for Skype for Business Online is enabled#CredCode#{
Ensure modern authentication for Skype for Business Online is enabled#CredCode#	$TestStatus = "High"
Ensure modern authentication for Skype for Business Online is enabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure modern authentication for Skype for Business Online is enabled#CredCode#}
Ensure modern authentication for Skype for Business Online is enabled#CredCode#else
Ensure modern authentication for Skype for Business Online is enabled#CredCode#{
Ensure modern authentication for Skype for Business Online is enabled#CredCode#	$TestStatus = "Passed"
Ensure modern authentication for Skype for Business Online is enabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure modern authentication for Skype for Business Online is enabled#CredCode#}
Ensure modern authentication for Exchange Online is enabled#CredCode#$ThisString = "Item, Status"
Ensure modern authentication for Exchange Online is enabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure modern authentication for Exchange Online is enabled#CredCode#
Ensure modern authentication for Exchange Online is enabled#CredCode#$AnyGap = "No"
Ensure modern authentication for Exchange Online is enabled#CredCode#
Ensure modern authentication for Exchange Online is enabled#CredCode#$AllSubs = Get-OrganizationConfig
Ensure modern authentication for Exchange Online is enabled#CredCode#ForEach ($EachSub in $AllSubs)
Ensure modern authentication for Exchange Online is enabled#CredCode#{
Ensure modern authentication for Exchange Online is enabled#CredCode#	$ThisItem = $EachSub.OAuth2ClientProfileEnabled
Ensure modern authentication for Exchange Online is enabled#CredCode#	
Ensure modern authentication for Exchange Online is enabled#CredCode#	IF ($ThisItem -eq "True")
Ensure modern authentication for Exchange Online is enabled#CredCode#	{
Ensure modern authentication for Exchange Online is enabled#CredCode#		$STR = "Modern Authentication" + ", Enabled"
Ensure modern authentication for Exchange Online is enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure modern authentication for Exchange Online is enabled#CredCode#	}
Ensure modern authentication for Exchange Online is enabled#CredCode#	else
Ensure modern authentication for Exchange Online is enabled#CredCode#	{
Ensure modern authentication for Exchange Online is enabled#CredCode#		$AnyGap = "Yes"
Ensure modern authentication for Exchange Online is enabled#CredCode#		$STR = "Modern Authentication" + ", Not Enabled"
Ensure modern authentication for Exchange Online is enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure modern authentication for Exchange Online is enabled#CredCode#	}
Ensure modern authentication for Exchange Online is enabled#CredCode#}
Ensure modern authentication for Exchange Online is enabled#CredCode#
Ensure modern authentication for Exchange Online is enabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure modern authentication for Exchange Online is enabled#CredCode#{
Ensure modern authentication for Exchange Online is enabled#CredCode#	$TestStatus = "High"
Ensure modern authentication for Exchange Online is enabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure modern authentication for Exchange Online is enabled#CredCode#}
Ensure modern authentication for Exchange Online is enabled#CredCode#else
Ensure modern authentication for Exchange Online is enabled#CredCode#{
Ensure modern authentication for Exchange Online is enabled#CredCode#	$TestStatus = "Passed"
Ensure modern authentication for Exchange Online is enabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure modern authentication for Exchange Online is enabled#CredCode#}
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#$ThisString = "Item, Status"
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#$AnyGap = "No"
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#$AllSubs = Get-OrganizationConfig
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#ForEach ($EachSub in $AllSubs)
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#{
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#	$ThisItem = $EachSub.OAuth2ClientProfileEnabled
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#	
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#	IF ($ThisItem -eq "True")
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#	{
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#		$STR = "Modern Authentication" + ", Enabled"
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#	}
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#	else
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#	{
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#		$AnyGap = "Yes"
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#		$STR = "Modern Authentication" + ", Not Enabled"
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#	}
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#}
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#{
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#	$TestStatus = "High"
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#}
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#else
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#{
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#	$TestStatus = "Passed"
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure the Advanced Threat Protection SafeAttachments policy is enabled#CredCode#}
Ensure calendar details sharing with external users is disabled#CredCode#$ThisString = "Item, Status"
Ensure calendar details sharing with external users is disabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure calendar details sharing with external users is disabled#CredCode#
Ensure calendar details sharing with external users is disabled#CredCode#$AnyGap = "No"
Ensure calendar details sharing with external users is disabled#CredCode#
Ensure calendar details sharing with external users is disabled#CredCode#$AllSubs = Get-SharingPolicy | Where-Object { $_.Domains -like '*CalendarSharing*' }
Ensure calendar details sharing with external users is disabled#CredCode#ForEach ($EachSub in $AllSubs)
Ensure calendar details sharing with external users is disabled#CredCode#{
Ensure calendar details sharing with external users is disabled#CredCode#	$ThisItem = $EachSub.Enabled
Ensure calendar details sharing with external users is disabled#CredCode#	
Ensure calendar details sharing with external users is disabled#CredCode#	IF ($ThisItem -eq "True")
Ensure calendar details sharing with external users is disabled#CredCode#	{
Ensure calendar details sharing with external users is disabled#CredCode#		$STR = "Calendar Sharing" + ", Enabled"
Ensure calendar details sharing with external users is disabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure calendar details sharing with external users is disabled#CredCode#	}
Ensure calendar details sharing with external users is disabled#CredCode#	else
Ensure calendar details sharing with external users is disabled#CredCode#	{
Ensure calendar details sharing with external users is disabled#CredCode#		$AnyGap = "Yes"
Ensure calendar details sharing with external users is disabled#CredCode#		$STR = "Calendar Sharing" + ", Not Enabled"
Ensure calendar details sharing with external users is disabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure calendar details sharing with external users is disabled#CredCode#	}
Ensure calendar details sharing with external users is disabled#CredCode#}
Ensure calendar details sharing with external users is disabled#CredCode#
Ensure calendar details sharing with external users is disabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure calendar details sharing with external users is disabled#CredCode#{
Ensure calendar details sharing with external users is disabled#CredCode#	$TestStatus = "High"
Ensure calendar details sharing with external users is disabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure calendar details sharing with external users is disabled#CredCode#}
Ensure calendar details sharing with external users is disabled#CredCode#else
Ensure calendar details sharing with external users is disabled#CredCode#{
Ensure calendar details sharing with external users is disabled#CredCode#	$TestStatus = "Passed"
Ensure calendar details sharing with external users is disabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure calendar details sharing with external users is disabled#CredCode#}
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#$ThisString = "Item, Status"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode##Get-AtpPolicyForO365 | fl Name, AllowClickThrough, EnableSafeLinksForClients, EnableSafeLinksForWebAccessCompanion
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#$AnyGap = "No"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#$AllSubs = Get-AtpPolicyForO365
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#ForEach ($EachSub in $AllSubs)
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#{
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	$RR = $EachSub.AllowClickThrough
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	IF ($RR -eq "True")
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	{
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		$STR = "AllowClickThrough" + ", Enabled"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	}
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	else
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	{
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		$AnyGap = "Yes"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		$STR = "AllowClickThrough" + ", Not Enabled"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	}
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	$RR = $EachSub.EnableSafeLinksForClients
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	IF ($RR -eq "True")
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	{
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		$STR = "EnableSafeLinksForClients" + ", Enabled"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	}
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	else
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	{
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		$AnyGap = "Yes"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		$STR = "EnableSafeLinksForClients" + ", Not Enabled"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	}
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	$RR = $EachSub.EnableSafeLinksForWebAccessCompanion
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	IF ($RR -eq "True")
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	{
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		$STR = "EnableSafeLinksForWebAccessCompanion" + ", Enabled"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	}
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	else
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	{
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		$AnyGap = "Yes"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		$STR = "EnableSafeLinksForWebAccessCompanion" + ", Not Enabled"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	}
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#}
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#{
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	$TestStatus = "Medium"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#}
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#else
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#{
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	$TestStatus = "Passed"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure O365 ATP SafeLinks for Office Applications is Enabled#CredCode#}
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#$ThisString = "Item, Status"
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#$AnyGap = "No"
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#$AllSubs = Get-AtpPolicyForO365
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#ForEach ($EachSub in $AllSubs)
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#{
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#	$RR = $EachSub.EnableATPForSPOTeamsODB
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#	IF ($RR -eq "True")
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#	{
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#		$STR = "Office 365 ATP For SharePoint-OneDrive and Teams" + ", Enabled"
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#	}
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#	else
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#	{		
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#		$AnyGap = "Yes"
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#		$STR = "Office 365 ATP For SharePoint-OneDrive and Teams" + ", Not Enabled"
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#	}
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#}
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#{
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#	$TestStatus = "Medium"
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#}
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#else
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#{
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#	$TestStatus = "Passed"
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure Office 365 ATP for SharePoint-OneDrive and Microsoft Teams is Enabled#CredCode#}
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#$ThisString = "Item, Status"
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#$AnyGap = "No"
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#$AllSubs = Get-MsolCompanyInformation
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#ForEach ($EachSub in $AllSubs)
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#{
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#		$ThisItem = $EachSub.UsersPermissionToUserConsentToAppEnabled
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#		IF ($ThisItem -eq "True")
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#		{
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#			$STR = "UsersPermissionToUserConsentToAppEnabled" + ", Enabled"
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#			Add-Content $TestCSVFile $STR
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#		}
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#		else
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#		{
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#			$AnyGap = "Yes"
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#			$STR = "UsersPermissionToUserConsentToAppEnabled" + ", Not Enabled"
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#			Add-Content $TestCSVFile $STR
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#		}
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#}
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#IF ($AnyGap -eq "Yes")
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#{
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#	$TestStatus = "Medium"
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#	$TestText = "HIGH ISSUE"
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#}
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#else
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#{
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#	$TestStatus = "Passed"
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure user consent to apps accessing company data on their behalf is not allowed#CredCode#}
Ensure the Common Attachment Types Filter is enabled#CredCode#$ThisString = "Item, Status"
Ensure the Common Attachment Types Filter is enabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure the Common Attachment Types Filter is enabled#CredCode#
Ensure the Common Attachment Types Filter is enabled#CredCode#$AnyGap = "No"
Ensure the Common Attachment Types Filter is enabled#CredCode#
Ensure the Common Attachment Types Filter is enabled#CredCode#$AllSubs = Get-MalwareFilterPolicy -Identity Default | Select-Object *
Ensure the Common Attachment Types Filter is enabled#CredCode#ForEach ($EachSub in $AllSubs)
Ensure the Common Attachment Types Filter is enabled#CredCode#{
Ensure the Common Attachment Types Filter is enabled#CredCode#	$RR = $EachSub.EnableFileFilter
Ensure the Common Attachment Types Filter is enabled#CredCode#	
Ensure the Common Attachment Types Filter is enabled#CredCode#	IF ($RR -eq "True")
Ensure the Common Attachment Types Filter is enabled#CredCode#	{
Ensure the Common Attachment Types Filter is enabled#CredCode#		$STR = "EnableFileFilter" + ", Enabled"
Ensure the Common Attachment Types Filter is enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure the Common Attachment Types Filter is enabled#CredCode#	}
Ensure the Common Attachment Types Filter is enabled#CredCode#	else
Ensure the Common Attachment Types Filter is enabled#CredCode#	{
Ensure the Common Attachment Types Filter is enabled#CredCode#		$AnyGap = "Yes"
Ensure the Common Attachment Types Filter is enabled#CredCode#		$STR = "EnableFileFilter" + ", Not Enabled"
Ensure the Common Attachment Types Filter is enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure the Common Attachment Types Filter is enabled#CredCode#		
Ensure the Common Attachment Types Filter is enabled#CredCode#	}
Ensure the Common Attachment Types Filter is enabled#CredCode#	
Ensure the Common Attachment Types Filter is enabled#CredCode#}
Ensure the Common Attachment Types Filter is enabled#CredCode#
Ensure the Common Attachment Types Filter is enabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure the Common Attachment Types Filter is enabled#CredCode#{
Ensure the Common Attachment Types Filter is enabled#CredCode#	$TestStatus = "High"
Ensure the Common Attachment Types Filter is enabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure the Common Attachment Types Filter is enabled#CredCode#}
Ensure the Common Attachment Types Filter is enabled#CredCode#else
Ensure the Common Attachment Types Filter is enabled#CredCode#{
Ensure the Common Attachment Types Filter is enabled#CredCode#	$TestStatus = "Passed"
Ensure the Common Attachment Types Filter is enabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure the Common Attachment Types Filter is enabled#CredCode#}
Ensure Exchange Online Spam Policies are set correctly#CredCode#$ThisString = "Item, Status"
Ensure Exchange Online Spam Policies are set correctly#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure Exchange Online Spam Policies are set correctly#CredCode#
Ensure Exchange Online Spam Policies are set correctly#CredCode#$AnyGap = "No"
Ensure Exchange Online Spam Policies are set correctly#CredCode#
Ensure Exchange Online Spam Policies are set correctly#CredCode#$AllSubs = Get-MalwareFilterPolicy -Identity Default | Select-Object *
Ensure Exchange Online Spam Policies are set correctly#CredCode#ForEach ($EachSub in $AllSubs)
Ensure Exchange Online Spam Policies are set correctly#CredCode#{
Ensure Exchange Online Spam Policies are set correctly#CredCode#	$RR = $EachSub.EnableFileFilter
Ensure Exchange Online Spam Policies are set correctly#CredCode#	
Ensure Exchange Online Spam Policies are set correctly#CredCode#	IF ($RR -eq "True")
Ensure Exchange Online Spam Policies are set correctly#CredCode#	{
Ensure Exchange Online Spam Policies are set correctly#CredCode#		$STR = "EnableFileFilter" + ", Enabled"
Ensure Exchange Online Spam Policies are set correctly#CredCode#		Add-Content $TestCSVFile $STR
Ensure Exchange Online Spam Policies are set correctly#CredCode#	}
Ensure Exchange Online Spam Policies are set correctly#CredCode#	else
Ensure Exchange Online Spam Policies are set correctly#CredCode#	{
Ensure Exchange Online Spam Policies are set correctly#CredCode#		$AnyGap = "Yes"
Ensure Exchange Online Spam Policies are set correctly#CredCode#		$STR = "EnableFileFilter" + ", Not Enabled"
Ensure Exchange Online Spam Policies are set correctly#CredCode#		Add-Content $TestCSVFile $STR
Ensure Exchange Online Spam Policies are set correctly#CredCode#		
Ensure Exchange Online Spam Policies are set correctly#CredCode#	}
Ensure Exchange Online Spam Policies are set correctly#CredCode#	
Ensure Exchange Online Spam Policies are set correctly#CredCode#}
Ensure Exchange Online Spam Policies are set correctly#CredCode#
Ensure Exchange Online Spam Policies are set correctly#CredCode#IF ($AnyGap -eq "Yes")
Ensure Exchange Online Spam Policies are set correctly#CredCode#{
Ensure Exchange Online Spam Policies are set correctly#CredCode#	$TestStatus = "High"
Ensure Exchange Online Spam Policies are set correctly#CredCode#	$TestText = "HIGH ISSUE"
Ensure Exchange Online Spam Policies are set correctly#CredCode#}
Ensure Exchange Online Spam Policies are set correctly#CredCode#else
Ensure Exchange Online Spam Policies are set correctly#CredCode#{
Ensure Exchange Online Spam Policies are set correctly#CredCode#	$TestStatus = "Passed"
Ensure Exchange Online Spam Policies are set correctly#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure Exchange Online Spam Policies are set correctly#CredCode#}
Ensure Exchange Online Spam Policies are set correctly#CredCode#$ThisString = "Item, Status"
Ensure Exchange Online Spam Policies are set correctly#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure Exchange Online Spam Policies are set correctly#CredCode#
Ensure Exchange Online Spam Policies are set correctly#CredCode#$AnyGap = "No"
Ensure Exchange Online Spam Policies are set correctly#CredCode#
Ensure Exchange Online Spam Policies are set correctly#CredCode#$AllSubs = Get-HostedOutboundSpamFilterPolicy | Select-Object Bcc*, Notify*
Ensure Exchange Online Spam Policies are set correctly#CredCode#ForEach ($EachSub in $AllSubs)
Ensure Exchange Online Spam Policies are set correctly#CredCode#{
Ensure Exchange Online Spam Policies are set correctly#CredCode#	$ThisItem = $EachSub.NotifyOutboundSpam
Ensure Exchange Online Spam Policies are set correctly#CredCode#	
Ensure Exchange Online Spam Policies are set correctly#CredCode#	IF ($ThisItem -eq "True")
Ensure Exchange Online Spam Policies are set correctly#CredCode#	{
Ensure Exchange Online Spam Policies are set correctly#CredCode#		$STR = "Notify Outbound Spam" + ", Enabled"
Ensure Exchange Online Spam Policies are set correctly#CredCode#		Add-Content $TestCSVFile $STR
Ensure Exchange Online Spam Policies are set correctly#CredCode#	}
Ensure Exchange Online Spam Policies are set correctly#CredCode#	else
Ensure Exchange Online Spam Policies are set correctly#CredCode#	{
Ensure Exchange Online Spam Policies are set correctly#CredCode#		$AnyGap = "Yes"
Ensure Exchange Online Spam Policies are set correctly#CredCode#		$STR = "Notify Outbound Spam" + ", Not Enabled"
Ensure Exchange Online Spam Policies are set correctly#CredCode#		Add-Content $TestCSVFile $STR
Ensure Exchange Online Spam Policies are set correctly#CredCode#	}
Ensure Exchange Online Spam Policies are set correctly#CredCode#	
Ensure Exchange Online Spam Policies are set correctly#CredCode#	$ThisItem = $EachSub.NotifyOutboundSpamRecipients
Ensure Exchange Online Spam Policies are set correctly#CredCode#	
Ensure Exchange Online Spam Policies are set correctly#CredCode#	$STR = "Notify Outbound Spam Recipients" + '"' + $ThisItem + '"'
Ensure Exchange Online Spam Policies are set correctly#CredCode#	Add-Content $TestCSVFile $STR
Ensure Exchange Online Spam Policies are set correctly#CredCode#	
Ensure Exchange Online Spam Policies are set correctly#CredCode#}
Ensure Exchange Online Spam Policies are set correctly#CredCode#
Ensure Exchange Online Spam Policies are set correctly#CredCode#IF ($AnyGap -eq "Yes")
Ensure Exchange Online Spam Policies are set correctly#CredCode#{
Ensure Exchange Online Spam Policies are set correctly#CredCode#	$TestStatus = "High"
Ensure Exchange Online Spam Policies are set correctly#CredCode#	$TestText = "HIGH ISSUE"
Ensure Exchange Online Spam Policies are set correctly#CredCode#}
Ensure Exchange Online Spam Policies are set correctly#CredCode#else
Ensure Exchange Online Spam Policies are set correctly#CredCode#{
Ensure Exchange Online Spam Policies are set correctly#CredCode#	$TestStatus = "Passed"
Ensure Exchange Online Spam Policies are set correctly#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure Exchange Online Spam Policies are set correctly#CredCode#}
Ensure mail transport rules do not forward email to external domains#CredCode#$ThisString = "Item, Status"
Ensure mail transport rules do not forward email to external domains#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure mail transport rules do not forward email to external domains#CredCode#
Ensure mail transport rules do not forward email to external domains#CredCode#$AnyGap = "No"
Ensure mail transport rules do not forward email to external domains#CredCode#
Ensure mail transport rules do not forward email to external domains#CredCode#$AllSubs = Get-TransportRule | Select-Object Name, RedirectMessageTo
Ensure mail transport rules do not forward email to external domains#CredCode#ForEach ($EachSub in $AllSubs)
Ensure mail transport rules do not forward email to external domains#CredCode#{
Ensure mail transport rules do not forward email to external domains#CredCode#	$ThisItem = $EachSub.RedirectMessageTo
Ensure mail transport rules do not forward email to external domains#CredCode#	
Ensure mail transport rules do not forward email to external domains#CredCode#	IF ($ThisItem -eq $null)
Ensure mail transport rules do not forward email to external domains#CredCode#	{
Ensure mail transport rules do not forward email to external domains#CredCode#		$AnyGap = "Yes"
Ensure mail transport rules do not forward email to external domains#CredCode#	}
Ensure mail transport rules do not forward email to external domains#CredCode#	
Ensure mail transport rules do not forward email to external domains#CredCode#	$STR = $EachSub.Name + "," + $EachSub.RedirectMessageTo
Ensure mail transport rules do not forward email to external domains#CredCode#	Add-Content $TestCSVFile $STR
Ensure mail transport rules do not forward email to external domains#CredCode#	
Ensure mail transport rules do not forward email to external domains#CredCode#}
Ensure mail transport rules do not forward email to external domains#CredCode#
Ensure mail transport rules do not forward email to external domains#CredCode#IF ($AnyGap -eq "Yes")
Ensure mail transport rules do not forward email to external domains#CredCode#{
Ensure mail transport rules do not forward email to external domains#CredCode#	$TestStatus = "High"
Ensure mail transport rules do not forward email to external domains#CredCode#	$TestText = "HIGH ISSUE"
Ensure mail transport rules do not forward email to external domains#CredCode#}
Ensure mail transport rules do not forward email to external domains#CredCode#else
Ensure mail transport rules do not forward email to external domains#CredCode#{
Ensure mail transport rules do not forward email to external domains#CredCode#	$TestStatus = "Passed"
Ensure mail transport rules do not forward email to external domains#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure mail transport rules do not forward email to external domains#CredCode#}
Ensure automatic forwarding options are disabled#CredCode#$ThisString = "Item, Status"
Ensure automatic forwarding options are disabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure automatic forwarding options are disabled#CredCode#
Ensure automatic forwarding options are disabled#CredCode#$AnyGap = "No"
Ensure automatic forwarding options are disabled#CredCode#
Ensure automatic forwarding options are disabled#CredCode#$AllSubs = Get-RemoteDomain Default | Select-Object AllowedOOFType, AutoForwardEnabled
Ensure automatic forwarding options are disabled#CredCode#ForEach ($EachSub in $AllSubs)
Ensure automatic forwarding options are disabled#CredCode#{
Ensure automatic forwarding options are disabled#CredCode#	$ThisItem = $EachSub.AutoForwardEnabled
Ensure automatic forwarding options are disabled#CredCode#	IF ($ThisItem -eq "True")
Ensure automatic forwarding options are disabled#CredCode#	{
Ensure automatic forwarding options are disabled#CredCode#		$AnyGap = "Yes"
Ensure automatic forwarding options are disabled#CredCode#	}	
Ensure automatic forwarding options are disabled#CredCode#	$STR = "AutoForwardEnabled" + ",Enabled"
Ensure automatic forwarding options are disabled#CredCode#	Add-Content $TestCSVFile $STR
Ensure automatic forwarding options are disabled#CredCode#	
Ensure automatic forwarding options are disabled#CredCode#	$ThisItem = $EachSub.AllowedOOFType
Ensure automatic forwarding options are disabled#CredCode#	$STR = "AllowedOOFType" + "," + $ThisItem	
Ensure automatic forwarding options are disabled#CredCode#	Add-Content $TestCSVFile $STR
Ensure automatic forwarding options are disabled#CredCode#	
Ensure automatic forwarding options are disabled#CredCode#}
Ensure automatic forwarding options are disabled#CredCode#
Ensure automatic forwarding options are disabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure automatic forwarding options are disabled#CredCode#{
Ensure automatic forwarding options are disabled#CredCode#	$TestStatus = "High"
Ensure automatic forwarding options are disabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure automatic forwarding options are disabled#CredCode#}
Ensure automatic forwarding options are disabled#CredCode#else
Ensure automatic forwarding options are disabled#CredCode#{
Ensure automatic forwarding options are disabled#CredCode#	$TestStatus = "Passed"
Ensure automatic forwarding options are disabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure automatic forwarding options are disabled#CredCode#}
Ensure the Client Rules Forwarding Block is enabled#CredCode#$ThisString = "Item, Status"
Ensure the Client Rules Forwarding Block is enabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure the Client Rules Forwarding Block is enabled#CredCode#
Ensure the Client Rules Forwarding Block is enabled#CredCode#$AnyGap = "No"
Ensure the Client Rules Forwarding Block is enabled#CredCode#
Ensure the Client Rules Forwarding Block is enabled#CredCode#$AllSubs = Get-TransportRule | where { $_.Identity -like '*Client Rules To External Block*' }
Ensure the Client Rules Forwarding Block is enabled#CredCode#$TotCount = $AllSubs.Count
Ensure the Client Rules Forwarding Block is enabled#CredCode#IF ($TotCount -eq 0)
Ensure the Client Rules Forwarding Block is enabled#CredCode#{
Ensure the Client Rules Forwarding Block is enabled#CredCode#	$AnyGap = "Yes"
Ensure the Client Rules Forwarding Block is enabled#CredCode#	$STR = "Client Rules Forwarding Block" + ",Disabled"
Ensure the Client Rules Forwarding Block is enabled#CredCode#	Add-Content $TestCSVFile $STR
Ensure the Client Rules Forwarding Block is enabled#CredCode#}
Ensure the Client Rules Forwarding Block is enabled#CredCode#else
Ensure the Client Rules Forwarding Block is enabled#CredCode#{
Ensure the Client Rules Forwarding Block is enabled#CredCode#	$STR = "Client Rules Forwarding Block" + ",Enabled"
Ensure the Client Rules Forwarding Block is enabled#CredCode#	Add-Content $TestCSVFile $STR
Ensure the Client Rules Forwarding Block is enabled#CredCode#}
Ensure the Client Rules Forwarding Block is enabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure the Client Rules Forwarding Block is enabled#CredCode#{
Ensure the Client Rules Forwarding Block is enabled#CredCode#	$TestStatus = "High"
Ensure the Client Rules Forwarding Block is enabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure the Client Rules Forwarding Block is enabled#CredCode#}
Ensure the Client Rules Forwarding Block is enabled#CredCode#else
Ensure the Client Rules Forwarding Block is enabled#CredCode#{
Ensure the Client Rules Forwarding Block is enabled#CredCode#	$TestStatus = "Passed"
Ensure the Client Rules Forwarding Block is enabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure the Client Rules Forwarding Block is enabled#CredCode#}
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#$ThisString = "Policy Name, Is Enabled?, Scan URLs?, Enable For Internal Senders?, Allow Click Through?, Status"
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#$AnyGap = "No"
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#$AllSubs = Get-SafeLinksPolicy | Select-Object Name, IsEnabled, ScanUrls, EnableForInternalSenders, AllowClickThrough
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#ForEach ($Item in $AllSubs)
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#{
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	$FinalStatus = "OK"
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	$ItemNow = $Item.IsEnabled
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	IF ($ItemNow -eq "True")
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	{
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#		$FinalStatus = "Ok"
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	}
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	else
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	{
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#		$AnyGap = "Yes"
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#		$FinalStatus = "Not Ok"
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	}
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	$STR = $ITem.Name + "," + $Item.IsEnabled + "," + $Item.ScanURLs + "," + $Item.EnableForInternalSenders + "," + $Item.AllowClickThrough + "," + $FinalStatus
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	Add-Content $TestCSVFile $STR
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#}
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#{
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	$TestStatus = "High"
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#}
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#else
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#{
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	$TestStatus = "Passed"
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure the Advanced Threat Protection Safe Links policy is enabled#CredCode#}
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#$ThisString = "Domain Name, DKIM Signing Status, Final Status"
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#$AnyGap = "No"
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#$AllSubs = Get-DkimSigningConfig
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#ForEach ($Item in $AllSubs)
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#{
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	$ItemNow = $Item.Enabled
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	$FinalStatus = "Ok"
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	IF ($ItemNow -eq "True")
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	{
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	}
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	else
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	{
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#		$AnyGap = "Yes"
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#		$FinalStatus = "Not Ok"
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	}
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	$STR = $ITem.Domain + "," + $Item.Enabled+","+$FinalStatus
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	Add-Content $TestCSVFile $STR
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#}
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#IF ($AnyGap -eq "Yes")
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#{
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	$TestStatus = "High"
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	$TestText = "HIGH ISSUE"
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#}
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#else
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#{
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	$TestStatus = "Passed"
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure that DKIM is enabled for all Exchange Online Domains#CredCode#}
Ensure notifications for internal users sending malware is Enabled#CredCode#
Ensure notifications for internal users sending malware is Enabled#CredCode#$ThisString = "Identity, Enable Internal Sender Admin Notifications, Internal Sender Admin Address"
Ensure notifications for internal users sending malware is Enabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure notifications for internal users sending malware is Enabled#CredCode#
Ensure notifications for internal users sending malware is Enabled#CredCode#$AnyGap = "No"
Ensure notifications for internal users sending malware is Enabled#CredCode#
Ensure notifications for internal users sending malware is Enabled#CredCode#$AllSubs = Get-MalwareFilterPolicy | Select-Object Identity, EnableInternalSenderAdminNotifications, InternalSenderAdminAddress
Ensure notifications for internal users sending malware is Enabled#CredCode#
Ensure notifications for internal users sending malware is Enabled#CredCode#ForEach ($Item in $AllSubs)
Ensure notifications for internal users sending malware is Enabled#CredCode#{
Ensure notifications for internal users sending malware is Enabled#CredCode#	
Ensure notifications for internal users sending malware is Enabled#CredCode#	$ItemNow = $Item.EnableInternalSenderAdminNotifications
Ensure notifications for internal users sending malware is Enabled#CredCode#	IF ($ItemNow -eq "True" -and $Item.Identity -eq "Default")	
Ensure notifications for internal users sending malware is Enabled#CredCode#	{
Ensure notifications for internal users sending malware is Enabled#CredCode#	}
Ensure notifications for internal users sending malware is Enabled#CredCode#	else
Ensure notifications for internal users sending malware is Enabled#CredCode#	{
Ensure notifications for internal users sending malware is Enabled#CredCode#		$AnyGap = "Yes"
Ensure notifications for internal users sending malware is Enabled#CredCode#	}
Ensure notifications for internal users sending malware is Enabled#CredCode#	
Ensure notifications for internal users sending malware is Enabled#CredCode#	$STR = $ITem.Identity + "," + $Item.EnableInternalSenderAdminNotifications + "," + $Item.InternalSenderAdminAddress
Ensure notifications for internal users sending malware is Enabled#CredCode#	Add-Content $TestCSVFile $STR
Ensure notifications for internal users sending malware is Enabled#CredCode#}
Ensure notifications for internal users sending malware is Enabled#CredCode#
Ensure notifications for internal users sending malware is Enabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure notifications for internal users sending malware is Enabled#CredCode#{
Ensure notifications for internal users sending malware is Enabled#CredCode#	$TestStatus = "High"
Ensure notifications for internal users sending malware is Enabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure notifications for internal users sending malware is Enabled#CredCode#}
Ensure notifications for internal users sending malware is Enabled#CredCode#else
Ensure notifications for internal users sending malware is Enabled#CredCode#{
Ensure notifications for internal users sending malware is Enabled#CredCode#	$TestStatus = "Passed"
Ensure notifications for internal users sending malware is Enabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure notifications for internal users sending malware is Enabled#CredCode#}
Ensure notifications for internal users sending malware is Enabled#CredCode#
Ensure MailTips are enabled for end users#CredCode#$ThisString = "Item, Status"
Ensure MailTips are enabled for end users#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure MailTips are enabled for end users#CredCode#
Ensure MailTips are enabled for end users#CredCode#$AnyGap = "No"
Ensure MailTips are enabled for end users#CredCode#
Ensure MailTips are enabled for end users#CredCode#$AllSubs = Get-OrganizationConfig | Select-Object MailTipsAllTipsEnabled, MailTipsExternalRecipientsTipsEnabled, MailTipsGroupMetricsEnabled, MailTipsLargeAudienceThreshold
Ensure MailTips are enabled for end users#CredCode#ForEach ($EachSub in $AllSubs)
Ensure MailTips are enabled for end users#CredCode#{
Ensure MailTips are enabled for end users#CredCode#	$ThisItem = $EachSub.MailTipsAllTipsEnabled
Ensure MailTips are enabled for end users#CredCode#	IF ($ThisItem -eq "True")
Ensure MailTips are enabled for end users#CredCode#	{
Ensure MailTips are enabled for end users#CredCode#		$STR = "MailTipsAllTipsEnabled" + ", Enabled"
Ensure MailTips are enabled for end users#CredCode#		Add-Content $TestCSVFile $STR
Ensure MailTips are enabled for end users#CredCode#	}
Ensure MailTips are enabled for end users#CredCode#	else
Ensure MailTips are enabled for end users#CredCode#	{
Ensure MailTips are enabled for end users#CredCode#		$AnyGap = "Yes"
Ensure MailTips are enabled for end users#CredCode#		$STR = "MailTipsAllTipsEnabled" + ", Not Enabled"
Ensure MailTips are enabled for end users#CredCode#		Add-Content $TestCSVFile $STR
Ensure MailTips are enabled for end users#CredCode#	}
Ensure MailTips are enabled for end users#CredCode#	$ThisItem = $EachSub.MailTipsExternalRecipientsTipsEnabled
Ensure MailTips are enabled for end users#CredCode#	IF ($ThisItem -eq "True")
Ensure MailTips are enabled for end users#CredCode#	{
Ensure MailTips are enabled for end users#CredCode#		$STR = "MailTipsExternalRecipientsTipsEnabled" + ", Enabled"
Ensure MailTips are enabled for end users#CredCode#		Add-Content $TestCSVFile $STR
Ensure MailTips are enabled for end users#CredCode#	}
Ensure MailTips are enabled for end users#CredCode#	else
Ensure MailTips are enabled for end users#CredCode#	{
Ensure MailTips are enabled for end users#CredCode#		$AnyGap = "Yes"
Ensure MailTips are enabled for end users#CredCode#		$STR = "MailTipsExternalRecipientsTipsEnabled" + ", Not Enabled"
Ensure MailTips are enabled for end users#CredCode#		Add-Content $TestCSVFile $STR
Ensure MailTips are enabled for end users#CredCode#	}
Ensure MailTips are enabled for end users#CredCode#	$ThisItem = $EachSub.MailTipsGroupMetricsEnabled
Ensure MailTips are enabled for end users#CredCode#	IF ($ThisItem -eq "True")
Ensure MailTips are enabled for end users#CredCode#	{
Ensure MailTips are enabled for end users#CredCode#		$STR = "MailTipsGroupMetricsEnabled" + ", Enabled"
Ensure MailTips are enabled for end users#CredCode#		Add-Content $TestCSVFile $STR
Ensure MailTips are enabled for end users#CredCode#	}
Ensure MailTips are enabled for end users#CredCode#	else
Ensure MailTips are enabled for end users#CredCode#	{
Ensure MailTips are enabled for end users#CredCode#		$AnyGap = "Yes"
Ensure MailTips are enabled for end users#CredCode#		$STR = "MailTipsGroupMetricsEnabled" + ", Not Enabled"
Ensure MailTips are enabled for end users#CredCode#		Add-Content $TestCSVFile $STR
Ensure MailTips are enabled for end users#CredCode#	}
Ensure MailTips are enabled for end users#CredCode#	$ThisItem = $EachSub.MailTipsLargeAudienceThreshold
Ensure MailTips are enabled for end users#CredCode#	IF ($ThisItem -eq "True")
Ensure MailTips are enabled for end users#CredCode#	{
Ensure MailTips are enabled for end users#CredCode#		$STR = "MailTipsLargeAudienceThreshold" + ", Enabled"
Ensure MailTips are enabled for end users#CredCode#		Add-Content $TestCSVFile $STR
Ensure MailTips are enabled for end users#CredCode#	}
Ensure MailTips are enabled for end users#CredCode#	else
Ensure MailTips are enabled for end users#CredCode#	{
Ensure MailTips are enabled for end users#CredCode#		$AnyGap = "Yes"
Ensure MailTips are enabled for end users#CredCode#		$STR = "MailTipsLargeAudienceThreshold" + ", Not Enabled"
Ensure MailTips are enabled for end users#CredCode#		Add-Content $TestCSVFile $STR
Ensure MailTips are enabled for end users#CredCode#	}
Ensure MailTips are enabled for end users#CredCode#	
Ensure MailTips are enabled for end users#CredCode#	
Ensure MailTips are enabled for end users#CredCode#}
Ensure MailTips are enabled for end users#CredCode#
Ensure MailTips are enabled for end users#CredCode#IF ($AnyGap -eq "Yes")
Ensure MailTips are enabled for end users#CredCode#{
Ensure MailTips are enabled for end users#CredCode#	$TestStatus = "Medium"
Ensure MailTips are enabled for end users#CredCode#	$TestText = "Medium ISSUE"
Ensure MailTips are enabled for end users#CredCode#}
Ensure MailTips are enabled for end users#CredCode#else
Ensure MailTips are enabled for end users#CredCode#{
Ensure MailTips are enabled for end users#CredCode#	$TestStatus = "Passed"
Ensure MailTips are enabled for end users#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure MailTips are enabled for end users#CredCode#}
Ensure that Facebook contact synchronization is disabled#CredCode#$ThisString = "Item, Status"
Ensure that Facebook contact synchronization is disabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure that Facebook contact synchronization is disabled#CredCode#
Ensure that Facebook contact synchronization is disabled#CredCode#$AnyGap = "No"
Ensure that Facebook contact synchronization is disabled#CredCode#
Ensure that Facebook contact synchronization is disabled#CredCode#$AllSubs = Get-OwaMailboxPolicy | select FacebookEnabled
Ensure that Facebook contact synchronization is disabled#CredCode#ForEach ($EachSub in $AllSubs)
Ensure that Facebook contact synchronization is disabled#CredCode#{
Ensure that Facebook contact synchronization is disabled#CredCode#	$ThisItem = $EachSub.FacebookEnabled
Ensure that Facebook contact synchronization is disabled#CredCode#	IF ($ThisItem -eq "True")
Ensure that Facebook contact synchronization is disabled#CredCode#	{
Ensure that Facebook contact synchronization is disabled#CredCode#		$AnyGap = "Yes"
Ensure that Facebook contact synchronization is disabled#CredCode#		$STR = "FacebookEnabled" + ", Enabled"
Ensure that Facebook contact synchronization is disabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure that Facebook contact synchronization is disabled#CredCode#	}
Ensure that Facebook contact synchronization is disabled#CredCode#	else
Ensure that Facebook contact synchronization is disabled#CredCode#	{
Ensure that Facebook contact synchronization is disabled#CredCode#		$STR = "FacebookEnabled" + ", Not Enabled"
Ensure that Facebook contact synchronization is disabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure that Facebook contact synchronization is disabled#CredCode#	}
Ensure that Facebook contact synchronization is disabled#CredCode#	
Ensure that Facebook contact synchronization is disabled#CredCode#}
Ensure that Facebook contact synchronization is disabled#CredCode#
Ensure that Facebook contact synchronization is disabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure that Facebook contact synchronization is disabled#CredCode#{
Ensure that Facebook contact synchronization is disabled#CredCode#	$TestStatus = "Medium"
Ensure that Facebook contact synchronization is disabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure that Facebook contact synchronization is disabled#CredCode#}
Ensure that Facebook contact synchronization is disabled#CredCode#else
Ensure that Facebook contact synchronization is disabled#CredCode#{
Ensure that Facebook contact synchronization is disabled#CredCode#	$TestStatus = "Passed"
Ensure that Facebook contact synchronization is disabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure that Facebook contact synchronization is disabled#CredCode#}
Ensure that LinkedIn contact synchronization is disabled#CredCode#$ThisString = "Item, Status"
Ensure that LinkedIn contact synchronization is disabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure that LinkedIn contact synchronization is disabled#CredCode#
Ensure that LinkedIn contact synchronization is disabled#CredCode#$AnyGap = "No"
Ensure that LinkedIn contact synchronization is disabled#CredCode#
Ensure that LinkedIn contact synchronization is disabled#CredCode#$AllSubs = Get-OwaMailboxPolicy | select LinkedInEnabled
Ensure that LinkedIn contact synchronization is disabled#CredCode#ForEach ($EachSub in $AllSubs)
Ensure that LinkedIn contact synchronization is disabled#CredCode#{
Ensure that LinkedIn contact synchronization is disabled#CredCode#	$ThisItem = $EachSub.LinkedInEnabled
Ensure that LinkedIn contact synchronization is disabled#CredCode#	IF ($ThisItem -eq "True")
Ensure that LinkedIn contact synchronization is disabled#CredCode#	{
Ensure that LinkedIn contact synchronization is disabled#CredCode#		$AnyGap = "Yes"
Ensure that LinkedIn contact synchronization is disabled#CredCode#		$STR = "LinkedInEnabled" + ", Enabled"
Ensure that LinkedIn contact synchronization is disabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure that LinkedIn contact synchronization is disabled#CredCode#	}
Ensure that LinkedIn contact synchronization is disabled#CredCode#	else
Ensure that LinkedIn contact synchronization is disabled#CredCode#	{
Ensure that LinkedIn contact synchronization is disabled#CredCode#		$STR = "LinkedInEnabled" + ", Not Enabled"
Ensure that LinkedIn contact synchronization is disabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure that LinkedIn contact synchronization is disabled#CredCode#	}
Ensure that LinkedIn contact synchronization is disabled#CredCode#	
Ensure that LinkedIn contact synchronization is disabled#CredCode#}
Ensure that LinkedIn contact synchronization is disabled#CredCode#
Ensure that LinkedIn contact synchronization is disabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure that LinkedIn contact synchronization is disabled#CredCode#{
Ensure that LinkedIn contact synchronization is disabled#CredCode#	$TestStatus = "Medium"
Ensure that LinkedIn contact synchronization is disabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure that LinkedIn contact synchronization is disabled#CredCode#}
Ensure that LinkedIn contact synchronization is disabled#CredCode#else
Ensure that LinkedIn contact synchronization is disabled#CredCode#{
Ensure that LinkedIn contact synchronization is disabled#CredCode#	$TestStatus = "Passed"
Ensure that LinkedIn contact synchronization is disabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure that LinkedIn contact synchronization is disabled#CredCode#}
Ensure Microsoft 365 audit log search is Enabled#CredCode#$ThisString = "Item, Status"
Ensure Microsoft 365 audit log search is Enabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure Microsoft 365 audit log search is Enabled#CredCode#
Ensure Microsoft 365 audit log search is Enabled#CredCode#$AnyGap = "No"
Ensure Microsoft 365 audit log search is Enabled#CredCode#
Ensure Microsoft 365 audit log search is Enabled#CredCode#$AllSubs = Get-AdminAuditLogConfig | Select-Object AdminAuditLogEnabled, UnifiedAuditLogIngestionEnabled
Ensure Microsoft 365 audit log search is Enabled#CredCode#ForEach ($EachSub in $AllSubs)
Ensure Microsoft 365 audit log search is Enabled#CredCode#{
Ensure Microsoft 365 audit log search is Enabled#CredCode#	$ThisItem = $EachSub.AdminAuditLogEnabled
Ensure Microsoft 365 audit log search is Enabled#CredCode#	IF ($ThisItem -eq "True")
Ensure Microsoft 365 audit log search is Enabled#CredCode#	{
Ensure Microsoft 365 audit log search is Enabled#CredCode#		$STR = "AdminAuditLogEnabled" + ", Enabled"
Ensure Microsoft 365 audit log search is Enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure Microsoft 365 audit log search is Enabled#CredCode#	}
Ensure Microsoft 365 audit log search is Enabled#CredCode#	else
Ensure Microsoft 365 audit log search is Enabled#CredCode#	{
Ensure Microsoft 365 audit log search is Enabled#CredCode#		$AnyGap = "Yes"
Ensure Microsoft 365 audit log search is Enabled#CredCode#		$STR = "AdminAuditLogEnabled" + ", Not Enabled"
Ensure Microsoft 365 audit log search is Enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure Microsoft 365 audit log search is Enabled#CredCode#	}
Ensure Microsoft 365 audit log search is Enabled#CredCode#	$ThisItem = $EachSub.UnifiedAuditLogIngestionEnabled
Ensure Microsoft 365 audit log search is Enabled#CredCode#	IF ($ThisItem -eq "True")
Ensure Microsoft 365 audit log search is Enabled#CredCode#	{
Ensure Microsoft 365 audit log search is Enabled#CredCode#		$STR = "UnifiedAuditLogIngestionEnabled" + ", Enabled"
Ensure Microsoft 365 audit log search is Enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure Microsoft 365 audit log search is Enabled#CredCode#	}
Ensure Microsoft 365 audit log search is Enabled#CredCode#	else
Ensure Microsoft 365 audit log search is Enabled#CredCode#	{
Ensure Microsoft 365 audit log search is Enabled#CredCode#		$AnyGap = "Yes"
Ensure Microsoft 365 audit log search is Enabled#CredCode#		$STR = "UnifiedAuditLogIngestionEnabled" + ", Not Enabled"
Ensure Microsoft 365 audit log search is Enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure Microsoft 365 audit log search is Enabled#CredCode#	}
Ensure Microsoft 365 audit log search is Enabled#CredCode#	
Ensure Microsoft 365 audit log search is Enabled#CredCode#}
Ensure Microsoft 365 audit log search is Enabled#CredCode#
Ensure Microsoft 365 audit log search is Enabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure Microsoft 365 audit log search is Enabled#CredCode#{
Ensure Microsoft 365 audit log search is Enabled#CredCode#	$TestStatus = "Medium"
Ensure Microsoft 365 audit log search is Enabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure Microsoft 365 audit log search is Enabled#CredCode#}
Ensure Microsoft 365 audit log search is Enabled#CredCode#else
Ensure Microsoft 365 audit log search is Enabled#CredCode#{
Ensure Microsoft 365 audit log search is Enabled#CredCode#	$TestStatus = "Passed"
Ensure Microsoft 365 audit log search is Enabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure Microsoft 365 audit log search is Enabled#CredCode#}
Ensure mailbox auditing for all users is Enabled#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Ensure mailbox auditing for all users is Enabled#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Ensure mailbox auditing for all users is Enabled#CredCode#
Ensure mailbox auditing for all users is Enabled#CredCode#$ThisString = "Item, Status, Data File Location"
Ensure mailbox auditing for all users is Enabled#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure mailbox auditing for all users is Enabled#CredCode#
Ensure mailbox auditing for all users is Enabled#CredCode#$AnyGap = "No"
Ensure mailbox auditing for all users is Enabled#CredCode#
Ensure mailbox auditing for all users is Enabled#CredCode#$AllSubs = Get-OrganizationConfig | Select-Object AuditDisabled
Ensure mailbox auditing for all users is Enabled#CredCode#ForEach ($EachSub in $AllSubs)
Ensure mailbox auditing for all users is Enabled#CredCode#{
Ensure mailbox auditing for all users is Enabled#CredCode#	$ThisItem = $EachSub.AuditDisabled
Ensure mailbox auditing for all users is Enabled#CredCode#	IF ($ThisItem -eq "True")
Ensure mailbox auditing for all users is Enabled#CredCode#	{
Ensure mailbox auditing for all users is Enabled#CredCode#		$STR = "AuditDisabled" + ", Enabled"+","+$DataFileLocation
Ensure mailbox auditing for all users is Enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure mailbox auditing for all users is Enabled#CredCode#	}
Ensure mailbox auditing for all users is Enabled#CredCode#	else
Ensure mailbox auditing for all users is Enabled#CredCode#	{
Ensure mailbox auditing for all users is Enabled#CredCode#		$AnyGap = "Yes"
Ensure mailbox auditing for all users is Enabled#CredCode#		$STR = "AuditDisabled" + ", Not Enabled"+","+$DataFileLocation
Ensure mailbox auditing for all users is Enabled#CredCode#		Add-Content $TestCSVFile $STR
Ensure mailbox auditing for all users is Enabled#CredCode#	}
Ensure mailbox auditing for all users is Enabled#CredCode#	
Ensure mailbox auditing for all users is Enabled#CredCode#}
Ensure mailbox auditing for all users is Enabled#CredCode#
Ensure mailbox auditing for all users is Enabled#CredCode#Get-Mailbox -ResultSize Unlimited | Where-Object { $_.AuditEnabled -ne $true -and ($_.RecipientTypeDetails -ne "UserMailbox" -or $_.RecipientTypeDetails -ne "SharedMailbox") } | Select-Object Name, RecipientType | Export-CSV $DataFileLocation -NoTypeInformation
Ensure mailbox auditing for all users is Enabled#CredCode#
Ensure mailbox auditing for all users is Enabled#CredCode#IF ($AnyGap -eq "Yes")
Ensure mailbox auditing for all users is Enabled#CredCode#{
Ensure mailbox auditing for all users is Enabled#CredCode#	$TestStatus = "Medium"
Ensure mailbox auditing for all users is Enabled#CredCode#	$TestText = "HIGH ISSUE"
Ensure mailbox auditing for all users is Enabled#CredCode#}
Ensure mailbox auditing for all users is Enabled#CredCode#else
Ensure mailbox auditing for all users is Enabled#CredCode#{
Ensure mailbox auditing for all users is Enabled#CredCode#	$TestStatus = "Passed"
Ensure mailbox auditing for all users is Enabled#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure mailbox auditing for all users is Enabled#CredCode#}
Ensure the spoofed domains report is review weekly#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Ensure the spoofed domains report is review weekly#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Ensure the spoofed domains report is review weekly#CredCode#
Ensure the spoofed domains report is review weekly#CredCode#$ThisString = "Item, Status, Data File Location"
Ensure the spoofed domains report is review weekly#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure the spoofed domains report is review weekly#CredCode#
Ensure the spoofed domains report is review weekly#CredCode#$AnyGap = "No"
Ensure the spoofed domains report is review weekly#CredCode#
Ensure the spoofed domains report is review weekly#CredCode#$AllSubs = Get-PhishFilterPolicy -Detailed -SpoofAllowBlockList -SpoofType Internal
Ensure the spoofed domains report is review weekly#CredCode#$TotNumber = 0
Ensure the spoofed domains report is review weekly#CredCode#ForEach ($EachSub in $AllSubs)
Ensure the spoofed domains report is review weekly#CredCode#{
Ensure the spoofed domains report is review weekly#CredCode#	$TotNumber++
Ensure the spoofed domains report is review weekly#CredCode#}
Ensure the spoofed domains report is review weekly#CredCode#
Ensure the spoofed domains report is review weekly#CredCode#IF ($TotNumber -eq 0)
Ensure the spoofed domains report is review weekly#CredCode#{
Ensure the spoofed domains report is review weekly#CredCode#	$STR = "Total Spoofed Domains In List" + "," + $TotNumber+","+$DataFileLocation
Ensure the spoofed domains report is review weekly#CredCode#	Add-Content $TestCSVFile $STR
Ensure the spoofed domains report is review weekly#CredCode#}
Ensure the spoofed domains report is review weekly#CredCode#else
Ensure the spoofed domains report is review weekly#CredCode#{
Ensure the spoofed domains report is review weekly#CredCode#	$STR = "Total Spoofed Domains In List" + "," + $TotNumber+","+$DataFileLocation
Ensure the spoofed domains report is review weekly#CredCode#	Add-Content $TestCSVFile $STR
Ensure the spoofed domains report is review weekly#CredCode#	$AnyGap = "Yes"
Ensure the spoofed domains report is review weekly#CredCode#	
Ensure the spoofed domains report is review weekly#CredCode#}
Ensure the spoofed domains report is review weekly#CredCode#
Ensure the spoofed domains report is review weekly#CredCode#
Ensure the spoofed domains report is review weekly#CredCode#Get-PhishFilterPolicy -Detailed -SpoofAllowBlockList -SpoofType Internal | Export-CSV $DataFileLocation -NoTypeInformation
Ensure the spoofed domains report is review weekly#CredCode#
Ensure the spoofed domains report is review weekly#CredCode#IF ($AnyGap -eq "Yes")
Ensure the spoofed domains report is review weekly#CredCode#{
Ensure the spoofed domains report is review weekly#CredCode#	$TestStatus = "Medium"
Ensure the spoofed domains report is review weekly#CredCode#	$TestText = "HIGH ISSUE"
Ensure the spoofed domains report is review weekly#CredCode#}
Ensure the spoofed domains report is review weekly#CredCode#else
Ensure the spoofed domains report is review weekly#CredCode#{
Ensure the spoofed domains report is review weekly#CredCode#	$TestStatus = "Passed"
Ensure the spoofed domains report is review weekly#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure the spoofed domains report is review weekly#CredCode#}
Ensure the spoofed domains report is review weekly#CredCode#
Ensure Guest Users are reviewed at least biweekly#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Ensure Guest Users are reviewed at least biweekly#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Ensure Guest Users are reviewed at least biweekly#CredCode#
Ensure Guest Users are reviewed at least biweekly#CredCode#$ThisString = "Item, Status, Data File Location"
Ensure Guest Users are reviewed at least biweekly#CredCode#Add-Content "$TestCSVFile" $ThisString
Ensure Guest Users are reviewed at least biweekly#CredCode#
Ensure Guest Users are reviewed at least biweekly#CredCode#$AnyGap = "No"
Ensure Guest Users are reviewed at least biweekly#CredCode#
Ensure Guest Users are reviewed at least biweekly#CredCode#$AllSubs = Get-MsolUser -all | Where-Object { $_.UserType -ne "Member" } | Select-Object UserPrincipalName, UserType, CreatedDate
Ensure Guest Users are reviewed at least biweekly#CredCode#$TotNumber = 0
Ensure Guest Users are reviewed at least biweekly#CredCode#ForEach ($EachSub in $AllSubs)
Ensure Guest Users are reviewed at least biweekly#CredCode#{
Ensure Guest Users are reviewed at least biweekly#CredCode#	$TotNumber++
Ensure Guest Users are reviewed at least biweekly#CredCode#}
Ensure Guest Users are reviewed at least biweekly#CredCode#
Ensure Guest Users are reviewed at least biweekly#CredCode#IF ($TotNumber -eq 0)
Ensure Guest Users are reviewed at least biweekly#CredCode#{
Ensure Guest Users are reviewed at least biweekly#CredCode#	$STR = "Total Guest Accounts" + "," + $TotNumber+","+$DataFileLocation
Ensure Guest Users are reviewed at least biweekly#CredCode#	Add-Content $TestCSVFile $STR
Ensure Guest Users are reviewed at least biweekly#CredCode#}
Ensure Guest Users are reviewed at least biweekly#CredCode#else
Ensure Guest Users are reviewed at least biweekly#CredCode#{
Ensure Guest Users are reviewed at least biweekly#CredCode#	$STR = "Total Guest Accounts" + "," + $TotNumber+","+$DataFileLocation
Ensure Guest Users are reviewed at least biweekly#CredCode#	Add-Content $TestCSVFile $STR
Ensure Guest Users are reviewed at least biweekly#CredCode#	$AnyGap = "Yes"
Ensure Guest Users are reviewed at least biweekly#CredCode#	
Ensure Guest Users are reviewed at least biweekly#CredCode#}
Ensure Guest Users are reviewed at least biweekly#CredCode#
Ensure Guest Users are reviewed at least biweekly#CredCode#
Ensure Guest Users are reviewed at least biweekly#CredCode#Get-MsolUser -all | Where-Object { $_.UserType -ne "Member" } | Select-Object UserPrincipalName, UserType, CreatedDate | Export-CSV $DataFileLocation -NoTypeInformation
Ensure Guest Users are reviewed at least biweekly#CredCode#
Ensure Guest Users are reviewed at least biweekly#CredCode#
Ensure Guest Users are reviewed at least biweekly#CredCode#IF ($AnyGap -eq "Yes")
Ensure Guest Users are reviewed at least biweekly#CredCode#{
Ensure Guest Users are reviewed at least biweekly#CredCode#	$TestStatus = "Medium"
Ensure Guest Users are reviewed at least biweekly#CredCode#	$TestText = "HIGH ISSUE"
Ensure Guest Users are reviewed at least biweekly#CredCode#}
Ensure Guest Users are reviewed at least biweekly#CredCode#else
Ensure Guest Users are reviewed at least biweekly#CredCode#{
Ensure Guest Users are reviewed at least biweekly#CredCode#	$TestStatus = "Passed"
Ensure Guest Users are reviewed at least biweekly#CredCode#	$TestText = "MEDIUM ISSUE"
Ensure Guest Users are reviewed at least biweekly#CredCode#}
Test SMB1 Protocol on Domain Controllers#CredCode#$ThisString = "Domain Controller,Connection,Command Status, SMB1 Protocol, Final Status"
Test SMB1 Protocol on Domain Controllers#CredCode#Add-Content "$TestCSVFile" $ThisString
Test SMB1 Protocol on Domain Controllers#CredCode#
Test SMB1 Protocol on Domain Controllers#CredCode#$TotNo = 0
Test SMB1 Protocol on Domain Controllers#CredCode#$ItemCount = 0
Test SMB1 Protocol on Domain Controllers#CredCode#$TestText = ""
Test SMB1 Protocol on Domain Controllers#CredCode#$TestStatus = ""
Test SMB1 Protocol on Domain Controllers#CredCode#$SumVal = ""
Test SMB1 Protocol on Domain Controllers#CredCode#$AnyGap = "No"
Test SMB1 Protocol on Domain Controllers#CredCode#$ErrorOrNot = "No"
Test SMB1 Protocol on Domain Controllers#CredCode#$AnyOneOk = "No"
Test SMB1 Protocol on Domain Controllers#CredCode#$TotDCsInError = 0
Test SMB1 Protocol on Domain Controllers#CredCode#
Test SMB1 Protocol on Domain Controllers#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Test SMB1 Protocol on Domain Controllers#CredCode#{
Test SMB1 Protocol on Domain Controllers#CredCode#	$DCConError = "Ok"
Test SMB1 Protocol on Domain Controllers#CredCode#	$DCConStatus = "Ok"
Test SMB1 Protocol on Domain Controllers#CredCode#	$ProceedOrNot = "Yes"
Test SMB1 Protocol on Domain Controllers#CredCode#	$Error.Clear()
Test SMB1 Protocol on Domain Controllers#CredCode#	$AllServices = Get-WMIObject Win32_Service -computer $ItemName
Test SMB1 Protocol on Domain Controllers#CredCode#	IF ($Error.Count -ne 0)
Test SMB1 Protocol on Domain Controllers#CredCode#	{
Test SMB1 Protocol on Domain Controllers#CredCode#		$ProceedOrNot = "No"
Test SMB1 Protocol on Domain Controllers#CredCode#		$TotDCsInError++
Test SMB1 Protocol on Domain Controllers#CredCode#		$DCConError = $Error[0].Exception.Message
Test SMB1 Protocol on Domain Controllers#CredCode#		
Test SMB1 Protocol on Domain Controllers#CredCode#		$FinalSTR = $ItemName + ",Not OK: Error: $DCConError"
Test SMB1 Protocol on Domain Controllers#CredCode#		Add-Content "$TestCSVFile" $FinalSTR
Test SMB1 Protocol on Domain Controllers#CredCode#	}
Test SMB1 Protocol on Domain Controllers#CredCode#	
Test SMB1 Protocol on Domain Controllers#CredCode#	IF ($ProceedOrNot -eq "Yes")
Test SMB1 Protocol on Domain Controllers#CredCode#	{
Test SMB1 Protocol on Domain Controllers#CredCode#		$ComConError = "Ok"
Test SMB1 Protocol on Domain Controllers#CredCode#		
Test SMB1 Protocol on Domain Controllers#CredCode#		$Error.Clear()
Test SMB1 Protocol on Domain Controllers#CredCode#		$RCNow = Invoke-Command -ComputerName $ItemName -Script { Get-SmbServerConfiguration | select enableSMB1Protocol }
Test SMB1 Protocol on Domain Controllers#CredCode#		IF ($Error.count -eq 0)
Test SMB1 Protocol on Domain Controllers#CredCode#		{
Test SMB1 Protocol on Domain Controllers#CredCode#			$AnyOneOk = "Yes"
Test SMB1 Protocol on Domain Controllers#CredCode#			$TotCFNow = $RCNow.enableSMB1Protocol
Test SMB1 Protocol on Domain Controllers#CredCode#			
Test SMB1 Protocol on Domain Controllers#CredCode#			$FinStatus = "Ok"
Test SMB1 Protocol on Domain Controllers#CredCode#			IF ($TotCFNow -eq "True")
Test SMB1 Protocol on Domain Controllers#CredCode#			{
Test SMB1 Protocol on Domain Controllers#CredCode#				$AnyGap = "Yes"
Test SMB1 Protocol on Domain Controllers#CredCode#				$FinStatus = "Not Ok"
Test SMB1 Protocol on Domain Controllers#CredCode#			}
Test SMB1 Protocol on Domain Controllers#CredCode#			
Test SMB1 Protocol on Domain Controllers#CredCode#			$FinalSTR = $ItemName + ",$DCConError," + $ComConError + "," + $TotCFNow + "," + $FinStatus
Test SMB1 Protocol on Domain Controllers#CredCode#			Add-Content "$TestCSVFile" $FinalSTR
Test SMB1 Protocol on Domain Controllers#CredCode#		}
Test SMB1 Protocol on Domain Controllers#CredCode#		else
Test SMB1 Protocol on Domain Controllers#CredCode#		{
Test SMB1 Protocol on Domain Controllers#CredCode#			$ComConError = $Error[0].Exception.Message
Test SMB1 Protocol on Domain Controllers#CredCode#			$FinalSTR = $ItemName + ",$DCConError," + $ComConError
Test SMB1 Protocol on Domain Controllers#CredCode#			Add-Content "$TestCSVFile" $FinalSTR
Test SMB1 Protocol on Domain Controllers#CredCode#		}
Test SMB1 Protocol on Domain Controllers#CredCode#		
Test SMB1 Protocol on Domain Controllers#CredCode#	}
Test SMB1 Protocol on Domain Controllers#CredCode#	
Test SMB1 Protocol on Domain Controllers#CredCode#}
Test SMB1 Protocol on Domain Controllers#CredCode#
Test SMB1 Protocol on Domain Controllers#CredCode#$OthText = ""
Test SMB1 Protocol on Domain Controllers#CredCode#IF ($TotDCsInError -ne 0)
Test SMB1 Protocol on Domain Controllers#CredCode#{
Test SMB1 Protocol on Domain Controllers#CredCode#	$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Test SMB1 Protocol on Domain Controllers#CredCode#}
Test SMB1 Protocol on Domain Controllers#CredCode#IF ($AnyGap -eq "Yes")
Test SMB1 Protocol on Domain Controllers#CredCode#{
Test SMB1 Protocol on Domain Controllers#CredCode#	$SumVal = $TotNo
Test SMB1 Protocol on Domain Controllers#CredCode#	$TestStatus = "Critical"
Test SMB1 Protocol on Domain Controllers#CredCode#}
Test SMB1 Protocol on Domain Controllers#CredCode#IF ($AnyGap -eq "No")
Test SMB1 Protocol on Domain Controllers#CredCode#{
Test SMB1 Protocol on Domain Controllers#CredCode#	$SumVal = ""
Test SMB1 Protocol on Domain Controllers#CredCode#	$TestStatus = "Passed"
Test SMB1 Protocol on Domain Controllers#CredCode#	
Test SMB1 Protocol on Domain Controllers#CredCode#	IF ($AnyOneOk -eq "No")
Test SMB1 Protocol on Domain Controllers#CredCode#	{
Test SMB1 Protocol on Domain Controllers#CredCode#		$TestText = "Error Executing Dynamic Pack."
Test SMB1 Protocol on Domain Controllers#CredCode#		$SumVal = ""
Test SMB1 Protocol on Domain Controllers#CredCode#		$TestStatus = "Completed with Errors."
Test SMB1 Protocol on Domain Controllers#CredCode#	}
Test SMB1 Protocol on Domain Controllers#CredCode#}
Test SMB1 Protocol on Domain Controllers#CredCode#
Test SMB1 Protocol on Domain Controllers#CredCode#$STR = $ADTestName + "," + $TestStartTime + "," + $TestStatus + "," + $SumVal + "," + $TestText
Test User accounts that can accept blank passwords#CredCode#$ThisString = "AD Domain, Total Users With Blank Password,Data File Location"
Test User accounts that can accept blank passwords#CredCode#Add-Content "$TestCSVFile" $ThisString
Test User accounts that can accept blank passwords#CredCode#
Test User accounts that can accept blank passwords#CredCode#$DataFileLocation=$CurrentLoc+"\Data\"+$FinalLine+"_DATA.CSV"
Test User accounts that can accept blank passwords#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Test User accounts that can accept blank passwords#CredCode#
Test User accounts that can accept blank passwords#CredCode#$ThisString = "AD Domain, AD User, Blank Password?"
Test User accounts that can accept blank passwords#CredCode#Add-Content "$DataFileLocation" $ThisString
Test User accounts that can accept blank passwords#CredCode#
Test User accounts that can accept blank passwords#CredCode#$AnyGap = "No"
Test User accounts that can accept blank passwords#CredCode#$TotNo = 0
Test User accounts that can accept blank passwords#CredCode#$ItemCount = 0
Test User accounts that can accept blank passwords#CredCode#$TestText = "Please check result"
Test User accounts that can accept blank passwords#CredCode#$TestStatus = "Completed"
Test User accounts that can accept blank passwords#CredCode#$SumVal = "NA"
Test User accounts that can accept blank passwords#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Test User accounts that can accept blank passwords#CredCode#{
Test User accounts that can accept blank passwords#CredCode#	$AllUsers = Get-ADUser -Filter * -Server $ThisDomain
Test User accounts that can accept blank passwords#CredCode#	$TotWithBlankUsers = 0
Test User accounts that can accept blank passwords#CredCode#	ForEach ($Item in $AllUsers)
Test User accounts that can accept blank passwords#CredCode#	{
Test User accounts that can accept blank passwords#CredCode#		$ThisUser = $Item.SamAccountName
Test User accounts that can accept blank passwords#CredCode#		$RR = (new-object directoryservices.directoryentry "", ("domain\" + $ThisUser), "").psbase.name -ne $null		
Test User accounts that can accept blank passwords#CredCode#		IF ($RR -eq "True")
Test User accounts that can accept blank passwords#CredCode#		{
Test User accounts that can accept blank passwords#CredCode#			$AnyGap = "Yes"
Test User accounts that can accept blank passwords#CredCode#			$TotWithBlankUsers++
Test User accounts that can accept blank passwords#CredCode#			$FinalSTR = $ThisDomain+","+$ThisUser+",Yes"
Test User accounts that can accept blank passwords#CredCode#			Add-Content "$DataFileLocation" $FinalSTR						
Test User accounts that can accept blank passwords#CredCode#		}		
Test User accounts that can accept blank passwords#CredCode#	}
Test User accounts that can accept blank passwords#CredCode#	
Test User accounts that can accept blank passwords#CredCode#	$FinalSTR = $ThisDomain + "," + $TotWithBlankUsers + ","+$DataFileLocation
Test User accounts that can accept blank passwords#CredCode#	Add-Content "$TestCSVFile" $FinalSTR
Test User accounts that can accept blank passwords#CredCode#}
Test User accounts that can accept blank passwords#CredCode#
Test User accounts that can accept blank passwords#CredCode#If ($AnyGap -eq "Yes")
Test User accounts that can accept blank passwords#CredCode#{
Test User accounts that can accept blank passwords#CredCode#	$TestStatus="Critical"	
Test User accounts that can accept blank passwords#CredCode#}
Test User accounts that can accept blank passwords#CredCode#else
Test User accounts that can accept blank passwords#CredCode#{
Test User accounts that can accept blank passwords#CredCode#	$TestStatus="Passed"
Test User accounts that can accept blank passwords#CredCode#}
Test User accounts that can accept blank passwords#CredCode#
Test User accounts that can accept blank passwords#CredCode#$STR = $ADTestName + "," + $TestStartTime + "," + $TestStatus + "," + $SumVal + "," + $TestText
Test Pre-Windows 2000 Compatibility Group membership#CredCode#$ThisString = "AD Domain, Found Anonymous Logon?, Found Everyone?, Total Members, Data File Location"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#Add-Content "$TestCSVFile" $ThisString
Test Pre-Windows 2000 Compatibility Group membership#CredCode#
Test Pre-Windows 2000 Compatibility Group membership#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Test Pre-Windows 2000 Compatibility Group membership#CredCode#
Test Pre-Windows 2000 Compatibility Group membership#CredCode#$ThisString = "AD Domain, Group, Member"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#Add-Content "$DataFileLocation" $ThisString
Test Pre-Windows 2000 Compatibility Group membership#CredCode#
Test Pre-Windows 2000 Compatibility Group membership#CredCode#$AnyGap = "No"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#$TotNo = 0
Test Pre-Windows 2000 Compatibility Group membership#CredCode#$ItemCount = 0
Test Pre-Windows 2000 Compatibility Group membership#CredCode#$TestText = "Please check result"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#$TestStatus = "Completed"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#$SumVal = "NA"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#$ErrorOrNot = "No"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#
Test Pre-Windows 2000 Compatibility Group membership#CredCode#ForEach ($DomainName in Get-Content $GDomList)
Test Pre-Windows 2000 Compatibility Group membership#CredCode#{
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	$ItemName = "Pre-Windows 2000 Compatible Access"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	$AllMem = Get-ADGroupMember -Identity "$ItemName" -Server $DomainName -ErrorAction SilentlyContinue
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	$TotNow = 0
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	$FoundAny = "No"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	$FoundEveryone = "No"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	foreach ($ItemGRP in $AllMem)
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	{
Test Pre-Windows 2000 Compatibility Group membership#CredCode#		$ThisName = $ItemGRP.Name
Test Pre-Windows 2000 Compatibility Group membership#CredCode#		$ThisGroupNow = $ItemName
Test Pre-Windows 2000 Compatibility Group membership#CredCode#		
Test Pre-Windows 2000 Compatibility Group membership#CredCode#		IF ($ThisName -eq "ANONYMOUS LOGON" -or $ThisName -eq "Everyone")
Test Pre-Windows 2000 Compatibility Group membership#CredCode#		{
Test Pre-Windows 2000 Compatibility Group membership#CredCode#			$AnyGap = "Yes"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#			
Test Pre-Windows 2000 Compatibility Group membership#CredCode#			IF ($ThisName -eq "ANONYMOUS LOGON")
Test Pre-Windows 2000 Compatibility Group membership#CredCode#			{
Test Pre-Windows 2000 Compatibility Group membership#CredCode#				$FoundAny = "Yes"	
Test Pre-Windows 2000 Compatibility Group membership#CredCode#			}			
Test Pre-Windows 2000 Compatibility Group membership#CredCode#			IF ($ThisName -eq "Everyone")
Test Pre-Windows 2000 Compatibility Group membership#CredCode#			{
Test Pre-Windows 2000 Compatibility Group membership#CredCode#				$FoundEveryone = "Yes"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#			}
Test Pre-Windows 2000 Compatibility Group membership#CredCode#		}
Test Pre-Windows 2000 Compatibility Group membership#CredCode#		
Test Pre-Windows 2000 Compatibility Group membership#CredCode#		$FinalSTR = $ThisDomain + "," + $ItemName + "," + $ThisName
Test Pre-Windows 2000 Compatibility Group membership#CredCode#		Add-Content "$DataFileLocation" $FinalSTR
Test Pre-Windows 2000 Compatibility Group membership#CredCode#		$TotNow++
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	}
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	$FinalSTR = $ThisDomain + "," + $FoundAny + "," + $FoundEveryone + "," + $TotNow + "," + $DataFileLocation	
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	Add-Content "$TestCSVFile" $FinalSTR
Test Pre-Windows 2000 Compatibility Group membership#CredCode#}
Test Pre-Windows 2000 Compatibility Group membership#CredCode#
Test Pre-Windows 2000 Compatibility Group membership#CredCode#IF ($AnyGap -eq "Yes")
Test Pre-Windows 2000 Compatibility Group membership#CredCode#{
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	$SumVal = $TotNo
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	$TestStatus = "Critical"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#}
Test Pre-Windows 2000 Compatibility Group membership#CredCode#IF ($AnyGap -eq "No")
Test Pre-Windows 2000 Compatibility Group membership#CredCode#{
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	$SumVal = ""
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	$TestStatus = "Passed"
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	IF ($AnyOneOk -eq "No")
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	{
Test Pre-Windows 2000 Compatibility Group membership#CredCode#		$TestText = "Error Executing Dynamic Pack."
Test Pre-Windows 2000 Compatibility Group membership#CredCode#		$SumVal = ""
Test Pre-Windows 2000 Compatibility Group membership#CredCode#		$TestStatus = "Completed with Errors."
Test Pre-Windows 2000 Compatibility Group membership#CredCode#	}
Test Pre-Windows 2000 Compatibility Group membership#CredCode#}
Test Pre-Windows 2000 Compatibility Group membership#CredCode#
Test Pre-Windows 2000 Compatibility Group membership#CredCode#$STR = $ADTestName + "," + $TestStartTime + "," + $TestStatus + "," + $SumVal + "," + $TestText
Test Active Directory Database size#CredCode#$ThisString = "Domain Controller,Connection,Command Status, AD Database Size In GB"
Test Active Directory Database size#CredCode#Add-Content "$TestCSVFile" $ThisString
Test Active Directory Database size#CredCode#
Test Active Directory Database size#CredCode#$TotNo = 0
Test Active Directory Database size#CredCode#$ItemCount = 0
Test Active Directory Database size#CredCode#$TestText = ""
Test Active Directory Database size#CredCode#$TestStatus = ""
Test Active Directory Database size#CredCode#$SumVal = ""
Test Active Directory Database size#CredCode#$AnyGap = "No"
Test Active Directory Database size#CredCode#$ErrorOrNot = "No"
Test Active Directory Database size#CredCode#$AnyOneOk = "No"
Test Active Directory Database size#CredCode#$TotDCsInError = 0
Test Active Directory Database size#CredCode#
Test Active Directory Database size#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Test Active Directory Database size#CredCode#{
Test Active Directory Database size#CredCode#	$DCConError = "Ok"
Test Active Directory Database size#CredCode#	$DCConStatus = "Ok"
Test Active Directory Database size#CredCode#	$ProceedOrNot = "Yes"
Test Active Directory Database size#CredCode#	$Error.Clear()
Test Active Directory Database size#CredCode#	$AllServices = Get-WMIObject Win32_Service -computer $ItemName
Test Active Directory Database size#CredCode#	IF ($Error.Count -ne 0)
Test Active Directory Database size#CredCode#	{
Test Active Directory Database size#CredCode#		$ProceedOrNot = "No"
Test Active Directory Database size#CredCode#		$TotDCsInError++
Test Active Directory Database size#CredCode#		$DCConError = $Error[0].Exception.Message
Test Active Directory Database size#CredCode#		
Test Active Directory Database size#CredCode#		$FinalSTR = $ItemName + ",Not OK: Error: $DCConError"
Test Active Directory Database size#CredCode#		Add-Content "$TestCSVFile" $FinalSTR
Test Active Directory Database size#CredCode#	}
Test Active Directory Database size#CredCode#	
Test Active Directory Database size#CredCode#	IF ($ProceedOrNot -eq "Yes")
Test Active Directory Database size#CredCode#	{
Test Active Directory Database size#CredCode#		$ComConError = "Ok"
Test Active Directory Database size#CredCode#		
Test Active Directory Database size#CredCode#		$Error.Clear()
Test Active Directory Database size#CredCode#		
Test Active Directory Database size#CredCode#		$dbs = Invoke-Command -ComputerName $ItemName -ScriptBlock { Get-ItemProperty -Path HKLM:\System\CurrentControlSet\Services\NTDS\Parameters }
Test Active Directory Database size#CredCode#		$FilePath = $dbs.'DSA Database File'
Test Active Directory Database size#CredCode#		$size = (Get-ItemProperty -Path $FilePath).Length /1GB
Test Active Directory Database size#CredCode#		
Test Active Directory Database size#CredCode#		IF ($Error.count -eq 0)
Test Active Directory Database size#CredCode#		{
Test Active Directory Database size#CredCode#			$TotSizeNow = $size			
Test Active Directory Database size#CredCode#			$FinalSTR = $ItemName + ",$DCConError," + $ComConError + "," + $TotSizeNow
Test Active Directory Database size#CredCode#			Add-Content "$TestCSVFile" $FinalSTR
Test Active Directory Database size#CredCode#		}
Test Active Directory Database size#CredCode#		else
Test Active Directory Database size#CredCode#		{
Test Active Directory Database size#CredCode#			$ComConError = $Error[0].Exception.Message
Test Active Directory Database size#CredCode#			$FinalSTR = $ItemName + ",$DCConError," + $ComConError
Test Active Directory Database size#CredCode#			Add-Content "$TestCSVFile" $FinalSTR
Test Active Directory Database size#CredCode#		}
Test Active Directory Database size#CredCode#		
Test Active Directory Database size#CredCode#	}
Test Active Directory Database size#CredCode#	
Test Active Directory Database size#CredCode#}
Test Active Directory Database size#CredCode#
Test Active Directory Database size#CredCode#$OthText = ""
Test Active Directory Database size#CredCode#IF ($TotDCsInError -ne 0)
Test Active Directory Database size#CredCode#{
Test Active Directory Database size#CredCode#	$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Test Active Directory Database size#CredCode#}
Test Active Directory Database size#CredCode#IF ($AnyGap -eq "Yes")
Test Active Directory Database size#CredCode#{
Test Active Directory Database size#CredCode#	$SumVal = $TotNo
Test Active Directory Database size#CredCode#	$TestStatus = "Critical"
Test Active Directory Database size#CredCode#}
Test Active Directory Database size#CredCode#IF ($AnyGap -eq "No")
Test Active Directory Database size#CredCode#{
Test Active Directory Database size#CredCode#	$SumVal = ""
Test Active Directory Database size#CredCode#	$TestStatus = "Passed"
Test Active Directory Database size#CredCode#	
Test Active Directory Database size#CredCode#	IF ($AnyOneOk -eq "No")
Test Active Directory Database size#CredCode#	{
Test Active Directory Database size#CredCode#		$TestText = "Error Executing Dynamic Pack."
Test Active Directory Database size#CredCode#		$SumVal = ""
Test Active Directory Database size#CredCode#		$TestStatus = "Completed with Errors."
Test Active Directory Database size#CredCode#	}
Test Active Directory Database size#CredCode#}
Test Active Directory Database size#CredCode#
Test Active Directory Database size#CredCode#$STR = $ADTestName + "," + $TestStartTime + "," + $TestStatus + "," + $SumVal + "," + $TestText
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#$ThisString = "AD Domain, Total Users With PasswowrdLastSet Not Set,Data File Location"
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#Add-Content "$TestCSVFile" $ThisString
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#$ThisString = "AD Domain, AD User, Is PasswordLastSet Null?"
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#Add-Content "$DataFileLocation" $ThisString
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#$AnyGap = "No"
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#$TotNo = 0
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#$ItemCount = 0
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#$TestText = "Please check result"
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#$TestStatus = "Completed"
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#$SumVal = "NA"
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#{
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#	
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#	$AllUsers = Get-ADUser -Filter * -Server $ThisDomain
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#	$TotWithBlankUsers = 0
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#	ForEach ($Item in $AllUsers)
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#	{
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#		$ThisUser = $Item.SamAccountName
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#		$ThisPassSet = $Item.PasswordLastSet	
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#		IF ($ThisPassSet -eq $null)
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#		{
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#			$AnyGap = "Yes"
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#			$TotWithBlankUsers++
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#			$FinalSTR = $ThisDomain + "," + $ThisUser + ",Yes"
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#			Add-Content "$DataFileLocation" $FinalSTR
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#		}
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#	}
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#	
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#	$FinalSTR = $ThisDomain + "," + $TotWithBlankUsers + "," + $DataFileLocation
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#	Add-Content "$TestCSVFile" $FinalSTR
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#}
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#If ($AnyGap -eq "Yes")
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#{
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#	$TestStatus = "Critical"
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#}
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#else
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#{
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#	$TestStatus = "Passed"
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#}
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#
Test User Accounts Whose LastPasswordSet Was Never Set#CredCode#$STR = $ADTestName + "," + $TestStartTime + "," + $TestStatus + "," + $SumVal + "," + $TestText
DHCP Server Versions Test#CredCode#$ThisString="DHCP Server, Major Version, Minor Version"
DHCP Server Versions Test#CredCode#Add-Content "$TestCSVFile" $ThisString
DHCP Server Versions Test#CredCode#
DHCP Server Versions Test#CredCode#$AnyGap = "No"
DHCP Server Versions Test#CredCode#
DHCP Server Versions Test#CredCode#ForEach ($ItemName in Import-CSV $DHCPServerFile)
DHCP Server Versions Test#CredCode#{
DHCP Server Versions Test#CredCode#    $ThisServerNow = $ItemName.Instances
DHCP Server Versions Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server Versions Test#CredCode#    $TotScopeInUse = 0
DHCP Server Versions Test#CredCode#
DHCP Server Versions Test#CredCode#    $Error.Clear()
DHCP Server Versions Test#CredCode#    $results=Get-DhcpServerVersion -ComputerName $ThisServerNow
DHCP Server Versions Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server Versions Test#CredCode#    {     
DHCP Server Versions Test#CredCode#        $MajVerion = $results.MajorVersion
DHCP Server Versions Test#CredCode#        $MinVerion = $results.MinorVersion
DHCP Server Versions Test#CredCode#        
DHCP Server Versions Test#CredCode#        $AnyGap = "Yes"
DHCP Server Versions Test#CredCode#        $STR = $ThisServerNow+","+$MajVerion+","+$MinVerion
DHCP Server Versions Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Versions Test#CredCode#    }
DHCP Server Versions Test#CredCode#    else
DHCP Server Versions Test#CredCode#    {
DHCP Server Versions Test#CredCode#        $STR = $ThisServerNow+",Error Connecting to DHCP Server"
DHCP Server Versions Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Versions Test#CredCode#    }
DHCP Server Versions Test#CredCode#}
DHCP Server Versions Test#CredCode#
DHCP Server Versions Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server Versions Test#CredCode#    {
DHCP Server Versions Test#CredCode#        $TestStatus="Low"
DHCP Server Versions Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server Versions Test#CredCode#    }
DHCP Server Versions Test#CredCode#    else
DHCP Server Versions Test#CredCode#    {
DHCP Server Versions Test#CredCode#        $TestStatus="Passed"
DHCP Server Versions Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server Versions Test#CredCode#    }
DHCP Server Versions Test#CredCode#$ThisString="DHCP Server, Major Version, Minor Version"
DHCP Server Versions Test#CredCode#Add-Content "$TestCSVFile" $ThisString
DHCP Server Versions Test#CredCode#
DHCP Server Versions Test#CredCode#$AnyGap = "No"
DHCP Server Versions Test#CredCode#
DHCP Server Versions Test#CredCode#ForEach ($ItemName in Import-CSV $DHCPServerFile)
DHCP Server Versions Test#CredCode#{
DHCP Server Versions Test#CredCode#    $ThisServerNow = $ItemName.Instances
DHCP Server Versions Test#CredCode#    $TotScopeNotInUse = 0
DHCP Server Versions Test#CredCode#    $TotScopeInUse = 0
DHCP Server Versions Test#CredCode#
DHCP Server Versions Test#CredCode#    $Error.Clear()
DHCP Server Versions Test#CredCode#    $results=Invoke-Command -ComputerName $ThisServerNow -Script { param($R1Now) Get-DhcpServerVersion -ComputerName $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
DHCP Server Versions Test#CredCode#    IF ($Error.Count -eq 0)
DHCP Server Versions Test#CredCode#    {     
DHCP Server Versions Test#CredCode#        $MajVerion = $results.MajorVersion
DHCP Server Versions Test#CredCode#        $MinVerion = $results.MinorVersion
DHCP Server Versions Test#CredCode#        
DHCP Server Versions Test#CredCode#        $AnyGap = "Yes"
DHCP Server Versions Test#CredCode#        $STR = $ThisServerNow+","+$MajVerion+","+$MinVerion
DHCP Server Versions Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Versions Test#CredCode#    }
DHCP Server Versions Test#CredCode#    else
DHCP Server Versions Test#CredCode#    {
DHCP Server Versions Test#CredCode#        $STR = $ThisServerNow+",Error Connecting to DHCP Server"
DHCP Server Versions Test#CredCode#        Add-Content $TestCSVFile $STR
DHCP Server Versions Test#CredCode#    }
DHCP Server Versions Test#CredCode#}
DHCP Server Versions Test#CredCode#
DHCP Server Versions Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server Versions Test#CredCode#    {
DHCP Server Versions Test#CredCode#        $TestStatus="Low"
DHCP Server Versions Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server Versions Test#CredCode#    }
DHCP Server Versions Test#CredCode#    else
DHCP Server Versions Test#CredCode#    {
DHCP Server Versions Test#CredCode#        $TestStatus="Passed"
DHCP Server Versions Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server Versions Test#CredCode#    }
DHCP Server All Scopes Use Test#CredCode#$ThisString="Scope ID, Name, Scope Type, Percent Use, Final Status"
DHCP Server All Scopes Use Test#CredCode#Add-Content "$TestCSVFile" $ThisString
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#$AnyGap = "No"
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#$SubnetList = @() 
DHCP Server All Scopes Use Test#CredCode# 
DHCP Server All Scopes Use Test#CredCode## Fetch scopes from Dhcp Server, ignore disabled scopes 
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#$AnyGap = "No"
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#ForEach ($Server in import-CSV $DHCPServerFile)
DHCP Server All Scopes Use Test#CredCode#{
DHCP Server All Scopes Use Test#CredCode#    $ComputerName = $Server.Instances
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#    Write-Verbose "Fetching scopes from $ComputerName" 
DHCP Server All Scopes Use Test#CredCode#    $AllScopes = Get-DhcpServerv4Scope -ComputerName $ComputerName 
DHCP Server All Scopes Use Test#CredCode#    $ActiveScopes = @() 
DHCP Server All Scopes Use Test#CredCode#    foreach ($CurrentScope in $AllScopes) 
DHCP Server All Scopes Use Test#CredCode#    { 
DHCP Server All Scopes Use Test#CredCode#        if ("Active" -eq $CurrentScope.State) 
DHCP Server All Scopes Use Test#CredCode#        { 
DHCP Server All Scopes Use Test#CredCode#            $ActiveScopes += $CurrentScope 
DHCP Server All Scopes Use Test#CredCode#        } 
DHCP Server All Scopes Use Test#CredCode#    } 
DHCP Server All Scopes Use Test#CredCode# 
DHCP Server All Scopes Use Test#CredCode#    # List super scopes from busiest to least busy 
DHCP Server All Scopes Use Test#CredCode#    $ScopeAlreadyHandled = @{} 
DHCP Server All Scopes Use Test#CredCode#    foreach ($CurrentScope in $ActiveScopes) 
DHCP Server All Scopes Use Test#CredCode#    { 
DHCP Server All Scopes Use Test#CredCode#        # Skip it if we've seen it 
DHCP Server All Scopes Use Test#CredCode#        $CurrentScopeID = $CurrentScope.ScopeId.ToString() 
DHCP Server All Scopes Use Test#CredCode#        if($ScopeAlreadyHandled.ContainsKey($CurrentScopeID)) 
DHCP Server All Scopes Use Test#CredCode#        { 
DHCP Server All Scopes Use Test#CredCode#            Write-Verbose "Scope $CurrentScopeID already processed. Skipping it this time." 
DHCP Server All Scopes Use Test#CredCode#            continue 
DHCP Server All Scopes Use Test#CredCode#        } 
DHCP Server All Scopes Use Test#CredCode# 
DHCP Server All Scopes Use Test#CredCode#        Write-Verbose "Processing scope $CurrentScopeID" 
DHCP Server All Scopes Use Test#CredCode#     
DHCP Server All Scopes Use Test#CredCode#        # Track the scope id 
DHCP Server All Scopes Use Test#CredCode#        $ScopeAlreadyHandled.Add($CurrentScopeID, $true) 
DHCP Server All Scopes Use Test#CredCode#     
DHCP Server All Scopes Use Test#CredCode#        $SubnetHash = @{} 
DHCP Server All Scopes Use Test#CredCode#        $SubnetHash.Type = "Scope" 
DHCP Server All Scopes Use Test#CredCode#        $SubnetHash.Name = $CurrentScope.Name 
DHCP Server All Scopes Use Test#CredCode#        $SubnetHash.ScopeId = @($CurrentScope.ScopeId) 
DHCP Server All Scopes Use Test#CredCode#     
DHCP Server All Scopes Use Test#CredCode#        $ScopeStats = Get-DhcpServerv4ScopeStatistics -ScopeId $CurrentScope.ScopeId -ComputerName $ComputerName 
DHCP Server All Scopes Use Test#CredCode#        $SubnetHash.PercentInUse = $ScopeStats.PercentageInUse 
DHCP Server All Scopes Use Test#CredCode# 
DHCP Server All Scopes Use Test#CredCode#    # If this scope is a part of a super scope, 
DHCP Server All Scopes Use Test#CredCode#    # consolidate the information about other scopes in same super scope 
DHCP Server All Scopes Use Test#CredCode#    $CurrentSuperScope = $CurrentScope.SuperscopeName 
DHCP Server All Scopes Use Test#CredCode#    if ("" -ne $CurrentSuperScope) 
DHCP Server All Scopes Use Test#CredCode#    { 
DHCP Server All Scopes Use Test#CredCode#        Write-Verbose "Scope $CurrentScopeID is a part of super scope $CurrentSuperScope" 
DHCP Server All Scopes Use Test#CredCode#        Write-Verbose "Getting list of scopes in the super scope" 
DHCP Server All Scopes Use Test#CredCode#     
DHCP Server All Scopes Use Test#CredCode#        # Change the type and name of subnet to that of the super scope 
DHCP Server All Scopes Use Test#CredCode#        $SubnetHash.Type = "SuperScope" 
DHCP Server All Scopes Use Test#CredCode#        $SubnetHash.Name = $CurrentSuperScope 
DHCP Server All Scopes Use Test#CredCode#         
DHCP Server All Scopes Use Test#CredCode#        # Get the info about other scopes within the same super scope 
DHCP Server All Scopes Use Test#CredCode#        $CurrentSuperScope = Get-DhcpServerv4SuperScope -SuperscopeName $CurrentSuperScope -ComputerName $ComputerName 
DHCP Server All Scopes Use Test#CredCode#        foreach($PeerScopeID in $CurrentSuperScope.ScopeId) 
DHCP Server All Scopes Use Test#CredCode#        { 
DHCP Server All Scopes Use Test#CredCode#            if($PeerScopeID -eq $CurrentScope.ScopeId) 
DHCP Server All Scopes Use Test#CredCode#            { 
DHCP Server All Scopes Use Test#CredCode#                continue 
DHCP Server All Scopes Use Test#CredCode#            } 
DHCP Server All Scopes Use Test#CredCode# 
DHCP Server All Scopes Use Test#CredCode#            $PeerScopeIDStr = $PeerScopeID.ToString() 
DHCP Server All Scopes Use Test#CredCode#            Write-Verbose "Processing scope $PeerScopeIDStr" 
DHCP Server All Scopes Use Test#CredCode#             
DHCP Server All Scopes Use Test#CredCode#            # Track it 
DHCP Server All Scopes Use Test#CredCode#            $ScopeAlreadyHandled.Add($PeerScopeIDStr, $true) 
DHCP Server All Scopes Use Test#CredCode#             
DHCP Server All Scopes Use Test#CredCode#            $SubnetHash.ScopeId += $PeerScopeID 
DHCP Server All Scopes Use Test#CredCode#             
DHCP Server All Scopes Use Test#CredCode#            $ScopeStats = Get-DhcpServerv4ScopeStatistics -ScopeId $PeerScopeID -ComputerName $ComputerName 
DHCP Server All Scopes Use Test#CredCode#            $SubnetHash.PercentInUse = $SubnetHash.PercentInUse + $ScopeStats.PercentageInUse 
DHCP Server All Scopes Use Test#CredCode#        } 
DHCP Server All Scopes Use Test#CredCode#         
DHCP Server All Scopes Use Test#CredCode#        # Take an average of the PercentInUse of all scopes within the super scope 
DHCP Server All Scopes Use Test#CredCode#        $SubnetHash.PercentInUse = $SubnetHash.PercentInUse / $SubnetHash.ScopeId.Count 
DHCP Server All Scopes Use Test#CredCode#    } 
DHCP Server All Scopes Use Test#CredCode# 
DHCP Server All Scopes Use Test#CredCode#    # Convert the scope hash table into an object and out it into the list 
DHCP Server All Scopes Use Test#CredCode#    $SubnetObj = New-Object psobject -Property $SubnetHash 
DHCP Server All Scopes Use Test#CredCode#    $SubnetList += $SubnetObj 
DHCP Server All Scopes Use Test#CredCode#} 
DHCP Server All Scopes Use Test#CredCode#     
DHCP Server All Scopes Use Test#CredCode## Sort the list in decreasing order of PercentInUse 
DHCP Server All Scopes Use Test#CredCode#$SubnetList = $SubnetList | sort -property PercentInUse -descending 
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#$SubnetList 
DHCP Server All Scopes Use Test#CredCode#$AnyGap = "No"
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#ForEach ($Item in $SubnetList)
DHCP Server All Scopes Use Test#CredCode#{
DHCP Server All Scopes Use Test#CredCode#    $ID = $Item.ScopeID.IPAddressToString
DHCP Server All Scopes Use Test#CredCode#    $Name = $Item.Name
DHCP Server All Scopes Use Test#CredCode#    $Type = $Item.Type
DHCP Server All Scopes Use Test#CredCode#    $PUse = $Item.PercentInUse
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#    $FinStatus = "Ok"
DHCP Server All Scopes Use Test#CredCode#    IF ($PUse -gt 80)
DHCP Server All Scopes Use Test#CredCode#    {
DHCP Server All Scopes Use Test#CredCode#        $AnyGap = "Yes"
DHCP Server All Scopes Use Test#CredCode#        $FinStatus = "Not Ok"
DHCP Server All Scopes Use Test#CredCode#    }
DHCP Server All Scopes Use Test#CredCode#    $STR = $ID+","+$Name+","+$Type+","+$Puse+","+$FinStatus
DHCP Server All Scopes Use Test#CredCode#    Add-Content $TestCSVFile $STR
DHCP Server All Scopes Use Test#CredCode#   
DHCP Server All Scopes Use Test#CredCode#}
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#}
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server All Scopes Use Test#CredCode#    {
DHCP Server All Scopes Use Test#CredCode#        $TestStatus="High"
DHCP Server All Scopes Use Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server All Scopes Use Test#CredCode#    }
DHCP Server All Scopes Use Test#CredCode#    else
DHCP Server All Scopes Use Test#CredCode#    {
DHCP Server All Scopes Use Test#CredCode#        $TestStatus="Passed"
DHCP Server All Scopes Use Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server All Scopes Use Test#CredCode#    }
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#    $TestStatus
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#$ThisString = "Scope ID, Name, Scope Type, Percent Use, Final Status"
DHCP Server All Scopes Use Test#CredCode#Add-Content "$TestCSVFile" $ThisString
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#$AnyGap = "No"
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#$SubnetList = @()
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode## Fetch scopes from Dhcp Server, ignore disabled scopes
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#$AnyGap = "No"
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#ForEach ($Server in import-CSV $DHCPServerFile)
DHCP Server All Scopes Use Test#CredCode#{
DHCP Server All Scopes Use Test#CredCode#	$ComputerName = $Server.Instances
DHCP Server All Scopes Use Test#CredCode#	
DHCP Server All Scopes Use Test#CredCode#	Write-Verbose "Fetching scopes from $ComputerName"
DHCP Server All Scopes Use Test#CredCode#	$AllScopes = Invoke-Command -ComputerName $ComputerName -Script { param ($R1Now) Get-DhcpServerv4Scope -ComputerName $R1Now } -Credential $Creds -ArgumentList $ComputerName
DHCP Server All Scopes Use Test#CredCode#	$ActiveScopes = @()
DHCP Server All Scopes Use Test#CredCode#	foreach ($CurrentScope in $AllScopes)
DHCP Server All Scopes Use Test#CredCode#	{
DHCP Server All Scopes Use Test#CredCode#		if ("Active" -eq $CurrentScope.State)
DHCP Server All Scopes Use Test#CredCode#		{
DHCP Server All Scopes Use Test#CredCode#			$ActiveScopes += $CurrentScope
DHCP Server All Scopes Use Test#CredCode#			
DHCP Server All Scopes Use Test#CredCode#		}
DHCP Server All Scopes Use Test#CredCode#		
DHCP Server All Scopes Use Test#CredCode#	}
DHCP Server All Scopes Use Test#CredCode#	
DHCP Server All Scopes Use Test#CredCode#	# List super scopes from busiest to least busy 
DHCP Server All Scopes Use Test#CredCode#	$ScopeAlreadyHandled = @{ }
DHCP Server All Scopes Use Test#CredCode#	foreach ($CurrentScope in $ActiveScopes)
DHCP Server All Scopes Use Test#CredCode#	{
DHCP Server All Scopes Use Test#CredCode#		# Skip it if we've seen it 
DHCP Server All Scopes Use Test#CredCode#		$CurrentScopeID = $CurrentScope.ScopeId.ToString()
DHCP Server All Scopes Use Test#CredCode#		if ($ScopeAlreadyHandled.ContainsKey($CurrentScopeID))
DHCP Server All Scopes Use Test#CredCode#		{
DHCP Server All Scopes Use Test#CredCode#			Write-Verbose "Scope $CurrentScopeID already processed. Skipping it this time."
DHCP Server All Scopes Use Test#CredCode#			continue
DHCP Server All Scopes Use Test#CredCode#			
DHCP Server All Scopes Use Test#CredCode#		}
DHCP Server All Scopes Use Test#CredCode#		
DHCP Server All Scopes Use Test#CredCode#		Write-Verbose "Processing scope $CurrentScopeID"
DHCP Server All Scopes Use Test#CredCode#		
DHCP Server All Scopes Use Test#CredCode#		# Track the scope id 
DHCP Server All Scopes Use Test#CredCode#		$ScopeAlreadyHandled.Add($CurrentScopeID, $true)
DHCP Server All Scopes Use Test#CredCode#		
DHCP Server All Scopes Use Test#CredCode#		$SubnetHash = @{ }
DHCP Server All Scopes Use Test#CredCode#		$SubnetHash.Type = "Scope"
DHCP Server All Scopes Use Test#CredCode#		$SubnetHash.Name = $CurrentScope.Name
DHCP Server All Scopes Use Test#CredCode#		$SubnetHash.ScopeId = @($CurrentScope.ScopeId)
DHCP Server All Scopes Use Test#CredCode#		
DHCP Server All Scopes Use Test#CredCode#		$ScopeStats = Get-DhcpServerv4ScopeStatistics -ScopeId $CurrentScope.ScopeId -ComputerName $ComputerName
DHCP Server All Scopes Use Test#CredCode#		$SubnetHash.PercentInUse = $ScopeStats.PercentageInUse
DHCP Server All Scopes Use Test#CredCode#		
DHCP Server All Scopes Use Test#CredCode#		# If this scope is a part of a super scope, 
DHCP Server All Scopes Use Test#CredCode#		# consolidate the information about other scopes in same super scope 
DHCP Server All Scopes Use Test#CredCode#		$CurrentSuperScope = $CurrentScope.SuperscopeName
DHCP Server All Scopes Use Test#CredCode#		if ("" -ne $CurrentSuperScope)
DHCP Server All Scopes Use Test#CredCode#		{
DHCP Server All Scopes Use Test#CredCode#			Write-Verbose "Scope $CurrentScopeID is a part of super scope $CurrentSuperScope"
DHCP Server All Scopes Use Test#CredCode#			Write-Verbose "Getting list of scopes in the super scope"
DHCP Server All Scopes Use Test#CredCode#			
DHCP Server All Scopes Use Test#CredCode#			# Change the type and name of subnet to that of the super scope 
DHCP Server All Scopes Use Test#CredCode#			$SubnetHash.Type = "SuperScope"
DHCP Server All Scopes Use Test#CredCode#			$SubnetHash.Name = $CurrentSuperScope
DHCP Server All Scopes Use Test#CredCode#			
DHCP Server All Scopes Use Test#CredCode#			# Get the info about other scopes within the same super scope 
DHCP Server All Scopes Use Test#CredCode#			$CurrentSuperScope = Invoke-Command -ComputerName $ComputerName -Script { param ($R1Now,
DHCP Server All Scopes Use Test#CredCode#					$CurrentSuperScope) Get-DhcpServerv4SuperScope -SuperscopeName $CurrentSuperScope -ComputerName $R1Now } -Credential $Creds -ArgumentList $ComputerName, $CurrentSuperScope			
DHCP Server All Scopes Use Test#CredCode#			foreach ($PeerScopeID in $CurrentSuperScope.ScopeId)
DHCP Server All Scopes Use Test#CredCode#			{
DHCP Server All Scopes Use Test#CredCode#				if ($PeerScopeID -eq $CurrentScope.ScopeId)
DHCP Server All Scopes Use Test#CredCode#				{
DHCP Server All Scopes Use Test#CredCode#					continue
DHCP Server All Scopes Use Test#CredCode#					
DHCP Server All Scopes Use Test#CredCode#				}
DHCP Server All Scopes Use Test#CredCode#				
DHCP Server All Scopes Use Test#CredCode#				$PeerScopeIDStr = $PeerScopeID.ToString()
DHCP Server All Scopes Use Test#CredCode#				Write-Verbose "Processing scope $PeerScopeIDStr"
DHCP Server All Scopes Use Test#CredCode#				
DHCP Server All Scopes Use Test#CredCode#				# Track it 
DHCP Server All Scopes Use Test#CredCode#				$ScopeAlreadyHandled.Add($PeerScopeIDStr, $true)
DHCP Server All Scopes Use Test#CredCode#				
DHCP Server All Scopes Use Test#CredCode#				$SubnetHash.ScopeId += $PeerScopeID
DHCP Server All Scopes Use Test#CredCode#				
DHCP Server All Scopes Use Test#CredCode#				$ScopeStats = Invoke-Command -ComputerName $ComputerName -Script {
DHCP Server All Scopes Use Test#CredCode#					param ($R1Now,
DHCP Server All Scopes Use Test#CredCode#						$PeerScopeID) Get-DhcpServerv4ScopeStatistics -ScopeId $PeerScopeID -ComputerName $R1Now
DHCP Server All Scopes Use Test#CredCode#				} -Credential $Creds -ArgumentList $ComputerName, $PeerScopeID
DHCP Server All Scopes Use Test#CredCode#								
DHCP Server All Scopes Use Test#CredCode#				
DHCP Server All Scopes Use Test#CredCode#				$SubnetHash.PercentInUse = $SubnetHash.PercentInUse + $ScopeStats.PercentageInUse
DHCP Server All Scopes Use Test#CredCode#				
DHCP Server All Scopes Use Test#CredCode#			}
DHCP Server All Scopes Use Test#CredCode#			
DHCP Server All Scopes Use Test#CredCode#			# Take an average of the PercentInUse of all scopes within the super scope 
DHCP Server All Scopes Use Test#CredCode#			$SubnetHash.PercentInUse = $SubnetHash.PercentInUse / $SubnetHash.ScopeId.Count
DHCP Server All Scopes Use Test#CredCode#			
DHCP Server All Scopes Use Test#CredCode#		}
DHCP Server All Scopes Use Test#CredCode#		
DHCP Server All Scopes Use Test#CredCode#		# Convert the scope hash table into an object and out it into the list 
DHCP Server All Scopes Use Test#CredCode#		$SubnetObj = New-Object psobject -Property $SubnetHash
DHCP Server All Scopes Use Test#CredCode#		$SubnetList += $SubnetObj
DHCP Server All Scopes Use Test#CredCode#		
DHCP Server All Scopes Use Test#CredCode#	}
DHCP Server All Scopes Use Test#CredCode#	
DHCP Server All Scopes Use Test#CredCode#	# Sort the list in decreasing order of PercentInUse
DHCP Server All Scopes Use Test#CredCode#	$SubnetList = $SubnetList | sort -property PercentInUse -descending
DHCP Server All Scopes Use Test#CredCode#	
DHCP Server All Scopes Use Test#CredCode#	$SubnetList
DHCP Server All Scopes Use Test#CredCode#	$AnyGap = "No"
DHCP Server All Scopes Use Test#CredCode#	
DHCP Server All Scopes Use Test#CredCode#	ForEach ($Item in $SubnetList)
DHCP Server All Scopes Use Test#CredCode#	{
DHCP Server All Scopes Use Test#CredCode#		$ID = $Item.ScopeID.IPAddressToString
DHCP Server All Scopes Use Test#CredCode#		$Name = $Item.Name
DHCP Server All Scopes Use Test#CredCode#		$Type = $Item.Type
DHCP Server All Scopes Use Test#CredCode#		$PUse = $Item.PercentInUse
DHCP Server All Scopes Use Test#CredCode#		
DHCP Server All Scopes Use Test#CredCode#		$FinStatus = "Ok"
DHCP Server All Scopes Use Test#CredCode#		IF ($PUse -gt 80)
DHCP Server All Scopes Use Test#CredCode#		{
DHCP Server All Scopes Use Test#CredCode#			$AnyGap = "Yes"
DHCP Server All Scopes Use Test#CredCode#			$FinStatus = "Not Ok"
DHCP Server All Scopes Use Test#CredCode#			
DHCP Server All Scopes Use Test#CredCode#		}
DHCP Server All Scopes Use Test#CredCode#		$STR = $ID + "," + $Name + "," + $Type + "," + $Puse + "," + $FinStatus
DHCP Server All Scopes Use Test#CredCode#		Add-Content $TestCSVFile $STR
DHCP Server All Scopes Use Test#CredCode#		
DHCP Server All Scopes Use Test#CredCode#		
DHCP Server All Scopes Use Test#CredCode#	}
DHCP Server All Scopes Use Test#CredCode#	
DHCP Server All Scopes Use Test#CredCode#	
DHCP Server All Scopes Use Test#CredCode#}
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#IF ($AnyGap -eq "Yes")
DHCP Server All Scopes Use Test#CredCode#{
DHCP Server All Scopes Use Test#CredCode#	$TestStatus = "High"
DHCP Server All Scopes Use Test#CredCode#	$TestText = "HIGH ISSUE"
DHCP Server All Scopes Use Test#CredCode#	
DHCP Server All Scopes Use Test#CredCode#}
DHCP Server All Scopes Use Test#CredCode#else
DHCP Server All Scopes Use Test#CredCode#{
DHCP Server All Scopes Use Test#CredCode#	$TestStatus = "Passed"
DHCP Server All Scopes Use Test#CredCode#	$TestText = "MEDIUM ISSUE"
DHCP Server All Scopes Use Test#CredCode#	
DHCP Server All Scopes Use Test#CredCode#}
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Use Test#CredCode#$TestStatus
DHCP Server All Scopes Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#$ThisString="Scope ID, Name, Scope Type, Percent Use, Final Status"
DHCP Server All Scopes Not In Use Test#CredCode#Add-Content "$TestCSVFile" $ThisString
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#$AnyGap = "No"
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#$SubnetList = @() 
DHCP Server All Scopes Not In Use Test#CredCode# 
DHCP Server All Scopes Not In Use Test#CredCode## Fetch scopes from Dhcp Server, ignore disabled scopes 
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#$AnyGap = "No"
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#ForEach ($Server in import-CSV $DHCPServerFile)
DHCP Server All Scopes Not In Use Test#CredCode#{
DHCP Server All Scopes Not In Use Test#CredCode#    $ComputerName = $Server.Instances
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#    Write-Verbose "Fetching scopes from $ComputerName" 
DHCP Server All Scopes Not In Use Test#CredCode#    $AllScopes = Get-DhcpServerv4Scope -ComputerName $ComputerName 
DHCP Server All Scopes Not In Use Test#CredCode#    $ActiveScopes = @() 
DHCP Server All Scopes Not In Use Test#CredCode#    foreach ($CurrentScope in $AllScopes) 
DHCP Server All Scopes Not In Use Test#CredCode#    { 
DHCP Server All Scopes Not In Use Test#CredCode#        if ("Active" -eq $CurrentScope.State) 
DHCP Server All Scopes Not In Use Test#CredCode#        { 
DHCP Server All Scopes Not In Use Test#CredCode#            $ActiveScopes += $CurrentScope 
DHCP Server All Scopes Not In Use Test#CredCode#        } 
DHCP Server All Scopes Not In Use Test#CredCode#    } 
DHCP Server All Scopes Not In Use Test#CredCode# 
DHCP Server All Scopes Not In Use Test#CredCode#    # List super scopes from busiest to least busy 
DHCP Server All Scopes Not In Use Test#CredCode#    $ScopeAlreadyHandled = @{} 
DHCP Server All Scopes Not In Use Test#CredCode#    foreach ($CurrentScope in $ActiveScopes) 
DHCP Server All Scopes Not In Use Test#CredCode#    { 
DHCP Server All Scopes Not In Use Test#CredCode#        # Skip it if we've seen it 
DHCP Server All Scopes Not In Use Test#CredCode#        $CurrentScopeID = $CurrentScope.ScopeId.ToString() 
DHCP Server All Scopes Not In Use Test#CredCode#        if($ScopeAlreadyHandled.ContainsKey($CurrentScopeID)) 
DHCP Server All Scopes Not In Use Test#CredCode#        { 
DHCP Server All Scopes Not In Use Test#CredCode#            Write-Verbose "Scope $CurrentScopeID already processed. Skipping it this time." 
DHCP Server All Scopes Not In Use Test#CredCode#            continue 
DHCP Server All Scopes Not In Use Test#CredCode#        } 
DHCP Server All Scopes Not In Use Test#CredCode# 
DHCP Server All Scopes Not In Use Test#CredCode#        Write-Verbose "Processing scope $CurrentScopeID" 
DHCP Server All Scopes Not In Use Test#CredCode#     
DHCP Server All Scopes Not In Use Test#CredCode#        # Track the scope id 
DHCP Server All Scopes Not In Use Test#CredCode#        $ScopeAlreadyHandled.Add($CurrentScopeID, $true) 
DHCP Server All Scopes Not In Use Test#CredCode#     
DHCP Server All Scopes Not In Use Test#CredCode#        $SubnetHash = @{} 
DHCP Server All Scopes Not In Use Test#CredCode#        $SubnetHash.Type = "Scope" 
DHCP Server All Scopes Not In Use Test#CredCode#        $SubnetHash.Name = $CurrentScope.Name 
DHCP Server All Scopes Not In Use Test#CredCode#        $SubnetHash.ScopeId = @($CurrentScope.ScopeId) 
DHCP Server All Scopes Not In Use Test#CredCode#     
DHCP Server All Scopes Not In Use Test#CredCode#        $ScopeStats = Get-DhcpServerv4ScopeStatistics -ScopeId $CurrentScope.ScopeId -ComputerName $ComputerName 
DHCP Server All Scopes Not In Use Test#CredCode#        $SubnetHash.PercentInUse = $ScopeStats.PercentageInUse 
DHCP Server All Scopes Not In Use Test#CredCode# 
DHCP Server All Scopes Not In Use Test#CredCode#    # If this scope is a part of a super scope, 
DHCP Server All Scopes Not In Use Test#CredCode#    # consolidate the information about other scopes in same super scope 
DHCP Server All Scopes Not In Use Test#CredCode#    $CurrentSuperScope = $CurrentScope.SuperscopeName 
DHCP Server All Scopes Not In Use Test#CredCode#    if ("" -ne $CurrentSuperScope) 
DHCP Server All Scopes Not In Use Test#CredCode#    { 
DHCP Server All Scopes Not In Use Test#CredCode#        Write-Verbose "Scope $CurrentScopeID is a part of super scope $CurrentSuperScope" 
DHCP Server All Scopes Not In Use Test#CredCode#        Write-Verbose "Getting list of scopes in the super scope" 
DHCP Server All Scopes Not In Use Test#CredCode#     
DHCP Server All Scopes Not In Use Test#CredCode#        # Change the type and name of subnet to that of the super scope 
DHCP Server All Scopes Not In Use Test#CredCode#        $SubnetHash.Type = "SuperScope" 
DHCP Server All Scopes Not In Use Test#CredCode#        $SubnetHash.Name = $CurrentSuperScope 
DHCP Server All Scopes Not In Use Test#CredCode#         
DHCP Server All Scopes Not In Use Test#CredCode#        # Get the info about other scopes within the same super scope 
DHCP Server All Scopes Not In Use Test#CredCode#        $CurrentSuperScope = Get-DhcpServerv4SuperScope -SuperscopeName $CurrentSuperScope -ComputerName $ComputerName 
DHCP Server All Scopes Not In Use Test#CredCode#        foreach($PeerScopeID in $CurrentSuperScope.ScopeId) 
DHCP Server All Scopes Not In Use Test#CredCode#        { 
DHCP Server All Scopes Not In Use Test#CredCode#            if($PeerScopeID -eq $CurrentScope.ScopeId) 
DHCP Server All Scopes Not In Use Test#CredCode#            { 
DHCP Server All Scopes Not In Use Test#CredCode#                continue 
DHCP Server All Scopes Not In Use Test#CredCode#            } 
DHCP Server All Scopes Not In Use Test#CredCode# 
DHCP Server All Scopes Not In Use Test#CredCode#            $PeerScopeIDStr = $PeerScopeID.ToString() 
DHCP Server All Scopes Not In Use Test#CredCode#            Write-Verbose "Processing scope $PeerScopeIDStr" 
DHCP Server All Scopes Not In Use Test#CredCode#             
DHCP Server All Scopes Not In Use Test#CredCode#            # Track it 
DHCP Server All Scopes Not In Use Test#CredCode#            $ScopeAlreadyHandled.Add($PeerScopeIDStr, $true) 
DHCP Server All Scopes Not In Use Test#CredCode#             
DHCP Server All Scopes Not In Use Test#CredCode#            $SubnetHash.ScopeId += $PeerScopeID 
DHCP Server All Scopes Not In Use Test#CredCode#             
DHCP Server All Scopes Not In Use Test#CredCode#            $ScopeStats = Get-DhcpServerv4ScopeStatistics -ScopeId $PeerScopeID -ComputerName $ComputerName 
DHCP Server All Scopes Not In Use Test#CredCode#            $SubnetHash.PercentInUse = $SubnetHash.PercentInUse + $ScopeStats.PercentageInUse 
DHCP Server All Scopes Not In Use Test#CredCode#        } 
DHCP Server All Scopes Not In Use Test#CredCode#         
DHCP Server All Scopes Not In Use Test#CredCode#        # Take an average of the PercentInUse of all scopes within the super scope 
DHCP Server All Scopes Not In Use Test#CredCode#        $SubnetHash.PercentInUse = $SubnetHash.PercentInUse / $SubnetHash.ScopeId.Count 
DHCP Server All Scopes Not In Use Test#CredCode#    } 
DHCP Server All Scopes Not In Use Test#CredCode# 
DHCP Server All Scopes Not In Use Test#CredCode#    # Convert the scope hash table into an object and out it into the list 
DHCP Server All Scopes Not In Use Test#CredCode#    $SubnetObj = New-Object psobject -Property $SubnetHash 
DHCP Server All Scopes Not In Use Test#CredCode#    $SubnetList += $SubnetObj 
DHCP Server All Scopes Not In Use Test#CredCode#} 
DHCP Server All Scopes Not In Use Test#CredCode#     
DHCP Server All Scopes Not In Use Test#CredCode## Sort the list in decreasing order of PercentInUse 
DHCP Server All Scopes Not In Use Test#CredCode#$SubnetList = $SubnetList | sort -property PercentInUse -descending 
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#$SubnetList 
DHCP Server All Scopes Not In Use Test#CredCode#$AnyGap = "No"
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#ForEach ($Item in $SubnetList)
DHCP Server All Scopes Not In Use Test#CredCode#{
DHCP Server All Scopes Not In Use Test#CredCode#    $ID = $Item.ScopeID.IPAddressToString
DHCP Server All Scopes Not In Use Test#CredCode#    $Name = $Item.Name
DHCP Server All Scopes Not In Use Test#CredCode#    $Type = $Item.Type
DHCP Server All Scopes Not In Use Test#CredCode#    $PUse = $Item.PercentInUse
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#    $FinStatus = "Ok"
DHCP Server All Scopes Not In Use Test#CredCode#    IF ($PUse -gt 80)
DHCP Server All Scopes Not In Use Test#CredCode#    {
DHCP Server All Scopes Not In Use Test#CredCode#        $AnyGap = "Yes"
DHCP Server All Scopes Not In Use Test#CredCode#        $FinStatus = "Not Ok"
DHCP Server All Scopes Not In Use Test#CredCode#    }
DHCP Server All Scopes Not In Use Test#CredCode#    $STR = $ID+","+$Name+","+$Type+","+$Puse+","+$FinStatus
DHCP Server All Scopes Not In Use Test#CredCode#    Add-Content $TestCSVFile $STR
DHCP Server All Scopes Not In Use Test#CredCode#   
DHCP Server All Scopes Not In Use Test#CredCode#}
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#}
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#    IF ($AnyGap -eq "Yes")
DHCP Server All Scopes Not In Use Test#CredCode#    {
DHCP Server All Scopes Not In Use Test#CredCode#        $TestStatus="High"
DHCP Server All Scopes Not In Use Test#CredCode#        $TestText="HIGH ISSUE"
DHCP Server All Scopes Not In Use Test#CredCode#    }
DHCP Server All Scopes Not In Use Test#CredCode#    else
DHCP Server All Scopes Not In Use Test#CredCode#    {
DHCP Server All Scopes Not In Use Test#CredCode#        $TestStatus="Passed"
DHCP Server All Scopes Not In Use Test#CredCode#        $TestText="MEDIUM ISSUE"    
DHCP Server All Scopes Not In Use Test#CredCode#    }
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#    $TestStatus
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#$ThisString = "Scope ID, Name, Scope Type, Percent Use, Final Status"
DHCP Server All Scopes Not In Use Test#CredCode#Add-Content "$TestCSVFile" $ThisString
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#$AnyGap = "No"
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#$SubnetList = @()
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode## Fetch scopes from Dhcp Server, ignore disabled scopes
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#$AnyGap = "No"
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#ForEach ($Server in import-CSV $DHCPServerFile)
DHCP Server All Scopes Not In Use Test#CredCode#{
DHCP Server All Scopes Not In Use Test#CredCode#	$ComputerName = $Server.Instances
DHCP Server All Scopes Not In Use Test#CredCode#	
DHCP Server All Scopes Not In Use Test#CredCode#	Write-Verbose "Fetching scopes from $ComputerName"
DHCP Server All Scopes Not In Use Test#CredCode#	$AllScopes = Invoke-Command -ComputerName $ComputerName -Script { param ($R1Now) Get-DhcpServerv4Scope -ComputerName $R1Now } -Credential $Creds -ArgumentList $ComputerName
DHCP Server All Scopes Not In Use Test#CredCode#	$ActiveScopes = @()
DHCP Server All Scopes Not In Use Test#CredCode#	foreach ($CurrentScope in $AllScopes)
DHCP Server All Scopes Not In Use Test#CredCode#	{
DHCP Server All Scopes Not In Use Test#CredCode#		if ("Active" -eq $CurrentScope.State)
DHCP Server All Scopes Not In Use Test#CredCode#		{
DHCP Server All Scopes Not In Use Test#CredCode#			$ActiveScopes += $CurrentScope
DHCP Server All Scopes Not In Use Test#CredCode#			
DHCP Server All Scopes Not In Use Test#CredCode#		}
DHCP Server All Scopes Not In Use Test#CredCode#		
DHCP Server All Scopes Not In Use Test#CredCode#	}
DHCP Server All Scopes Not In Use Test#CredCode#	
DHCP Server All Scopes Not In Use Test#CredCode#	# List super scopes from busiest to least busy 
DHCP Server All Scopes Not In Use Test#CredCode#	$ScopeAlreadyHandled = @{ }
DHCP Server All Scopes Not In Use Test#CredCode#	foreach ($CurrentScope in $ActiveScopes)
DHCP Server All Scopes Not In Use Test#CredCode#	{
DHCP Server All Scopes Not In Use Test#CredCode#		# Skip it if we've seen it 
DHCP Server All Scopes Not In Use Test#CredCode#		$CurrentScopeID = $CurrentScope.ScopeId.ToString()
DHCP Server All Scopes Not In Use Test#CredCode#		if ($ScopeAlreadyHandled.ContainsKey($CurrentScopeID))
DHCP Server All Scopes Not In Use Test#CredCode#		{
DHCP Server All Scopes Not In Use Test#CredCode#			Write-Verbose "Scope $CurrentScopeID already processed. Skipping it this time."
DHCP Server All Scopes Not In Use Test#CredCode#			continue
DHCP Server All Scopes Not In Use Test#CredCode#			
DHCP Server All Scopes Not In Use Test#CredCode#		}
DHCP Server All Scopes Not In Use Test#CredCode#		
DHCP Server All Scopes Not In Use Test#CredCode#		Write-Verbose "Processing scope $CurrentScopeID"
DHCP Server All Scopes Not In Use Test#CredCode#		
DHCP Server All Scopes Not In Use Test#CredCode#		# Track the scope id 
DHCP Server All Scopes Not In Use Test#CredCode#		$ScopeAlreadyHandled.Add($CurrentScopeID, $true)
DHCP Server All Scopes Not In Use Test#CredCode#		
DHCP Server All Scopes Not In Use Test#CredCode#		$SubnetHash = @{ }
DHCP Server All Scopes Not In Use Test#CredCode#		$SubnetHash.Type = "Scope"
DHCP Server All Scopes Not In Use Test#CredCode#		$SubnetHash.Name = $CurrentScope.Name
DHCP Server All Scopes Not In Use Test#CredCode#		$SubnetHash.ScopeId = @($CurrentScope.ScopeId)
DHCP Server All Scopes Not In Use Test#CredCode#		
DHCP Server All Scopes Not In Use Test#CredCode#		$FinalScopeID = $CurrentScope.ScopeID
DHCP Server All Scopes Not In Use Test#CredCode#		$ScopeStats = Invoke-Command -ComputerName $ComputerName -Script {
DHCP Server All Scopes Not In Use Test#CredCode#			param ($R1Now,
DHCP Server All Scopes Not In Use Test#CredCode#				$FinalScopeID) Get-DhcpServerv4ScopeStatistics -ScopeId $FinalScopeID -ComputerName $R1Now
DHCP Server All Scopes Not In Use Test#CredCode#		} -Credential $Creds -ArgumentList $ComputerName, $FinalScopeID
DHCP Server All Scopes Not In Use Test#CredCode#				
DHCP Server All Scopes Not In Use Test#CredCode#		$SubnetHash.PercentInUse = $ScopeStats.PercentageInUse
DHCP Server All Scopes Not In Use Test#CredCode#		
DHCP Server All Scopes Not In Use Test#CredCode#		# If this scope is a part of a super scope, 
DHCP Server All Scopes Not In Use Test#CredCode#		# consolidate the information about other scopes in same super scope 
DHCP Server All Scopes Not In Use Test#CredCode#		$CurrentSuperScope = $CurrentScope.SuperscopeName
DHCP Server All Scopes Not In Use Test#CredCode#		if ("" -ne $CurrentSuperScope)
DHCP Server All Scopes Not In Use Test#CredCode#		{
DHCP Server All Scopes Not In Use Test#CredCode#			Write-Verbose "Scope $CurrentScopeID is a part of super scope $CurrentSuperScope"
DHCP Server All Scopes Not In Use Test#CredCode#			Write-Verbose "Getting list of scopes in the super scope"
DHCP Server All Scopes Not In Use Test#CredCode#			
DHCP Server All Scopes Not In Use Test#CredCode#			# Change the type and name of subnet to that of the super scope 
DHCP Server All Scopes Not In Use Test#CredCode#			$SubnetHash.Type = "SuperScope"
DHCP Server All Scopes Not In Use Test#CredCode#			$SubnetHash.Name = $CurrentSuperScope
DHCP Server All Scopes Not In Use Test#CredCode#			
DHCP Server All Scopes Not In Use Test#CredCode#			# Get the info about other scopes within the same super scope 
DHCP Server All Scopes Not In Use Test#CredCode#			$CurrentSuperScope = Invoke-Command -ComputerName $ComputerName -Script {
DHCP Server All Scopes Not In Use Test#CredCode#				param ($R1Now,
DHCP Server All Scopes Not In Use Test#CredCode#					$CurrentSuperScope) Get-DhcpServerv4SuperScope -SuperscopeName $CurrentSuperScope -ComputerName $ComputerName
DHCP Server All Scopes Not In Use Test#CredCode#			} -Credential $Creds -ArgumentList $ComputerName, $CurrentSuperScope
DHCP Server All Scopes Not In Use Test#CredCode#					
DHCP Server All Scopes Not In Use Test#CredCode#			foreach ($PeerScopeID in $CurrentSuperScope.ScopeId)
DHCP Server All Scopes Not In Use Test#CredCode#			{
DHCP Server All Scopes Not In Use Test#CredCode#				if ($PeerScopeID -eq $CurrentScope.ScopeId)
DHCP Server All Scopes Not In Use Test#CredCode#				{
DHCP Server All Scopes Not In Use Test#CredCode#					continue
DHCP Server All Scopes Not In Use Test#CredCode#					
DHCP Server All Scopes Not In Use Test#CredCode#				}
DHCP Server All Scopes Not In Use Test#CredCode#				
DHCP Server All Scopes Not In Use Test#CredCode#				$PeerScopeIDStr = $PeerScopeID.ToString()
DHCP Server All Scopes Not In Use Test#CredCode#				Write-Verbose "Processing scope $PeerScopeIDStr"
DHCP Server All Scopes Not In Use Test#CredCode#				
DHCP Server All Scopes Not In Use Test#CredCode#				# Track it 
DHCP Server All Scopes Not In Use Test#CredCode#				$ScopeAlreadyHandled.Add($PeerScopeIDStr, $true)
DHCP Server All Scopes Not In Use Test#CredCode#				
DHCP Server All Scopes Not In Use Test#CredCode#				$SubnetHash.ScopeId += $PeerScopeID
DHCP Server All Scopes Not In Use Test#CredCode#				
DHCP Server All Scopes Not In Use Test#CredCode#				$ScopeStats = Invoke-Command -ComputerName $ComputerName -Script {
DHCP Server All Scopes Not In Use Test#CredCode#					param ($R1Now,
DHCP Server All Scopes Not In Use Test#CredCode#						$PeerScopeID) Get-DhcpServerv4ScopeStatistics -ScopeId $PeerScopeID -ComputerName $R1Now
DHCP Server All Scopes Not In Use Test#CredCode#				} -Credential $Creds -ArgumentList $ComputerName, $PeerScopeID
DHCP Server All Scopes Not In Use Test#CredCode#								
DHCP Server All Scopes Not In Use Test#CredCode#				$SubnetHash.PercentInUse = $SubnetHash.PercentInUse + $ScopeStats.PercentageInUse
DHCP Server All Scopes Not In Use Test#CredCode#				
DHCP Server All Scopes Not In Use Test#CredCode#			}
DHCP Server All Scopes Not In Use Test#CredCode#			
DHCP Server All Scopes Not In Use Test#CredCode#			# Take an average of the PercentInUse of all scopes within the super scope 
DHCP Server All Scopes Not In Use Test#CredCode#			$SubnetHash.PercentInUse = $SubnetHash.PercentInUse / $SubnetHash.ScopeId.Count
DHCP Server All Scopes Not In Use Test#CredCode#			
DHCP Server All Scopes Not In Use Test#CredCode#		}
DHCP Server All Scopes Not In Use Test#CredCode#		
DHCP Server All Scopes Not In Use Test#CredCode#		# Convert the scope hash table into an object and out it into the list 
DHCP Server All Scopes Not In Use Test#CredCode#		$SubnetObj = New-Object psobject -Property $SubnetHash
DHCP Server All Scopes Not In Use Test#CredCode#		$SubnetList += $SubnetObj
DHCP Server All Scopes Not In Use Test#CredCode#		
DHCP Server All Scopes Not In Use Test#CredCode#	}
DHCP Server All Scopes Not In Use Test#CredCode#	
DHCP Server All Scopes Not In Use Test#CredCode#	# Sort the list in decreasing order of PercentInUse
DHCP Server All Scopes Not In Use Test#CredCode#	$SubnetList = $SubnetList | sort -property PercentInUse -descending
DHCP Server All Scopes Not In Use Test#CredCode#	
DHCP Server All Scopes Not In Use Test#CredCode#	$SubnetList
DHCP Server All Scopes Not In Use Test#CredCode#	$AnyGap = "No"
DHCP Server All Scopes Not In Use Test#CredCode#	
DHCP Server All Scopes Not In Use Test#CredCode#	ForEach ($Item in $SubnetList)
DHCP Server All Scopes Not In Use Test#CredCode#	{
DHCP Server All Scopes Not In Use Test#CredCode#		$ID = $Item.ScopeID.IPAddressToString
DHCP Server All Scopes Not In Use Test#CredCode#		$Name = $Item.Name
DHCP Server All Scopes Not In Use Test#CredCode#		$Type = $Item.Type
DHCP Server All Scopes Not In Use Test#CredCode#		$PUse = $Item.PercentInUse
DHCP Server All Scopes Not In Use Test#CredCode#		
DHCP Server All Scopes Not In Use Test#CredCode#		$FinStatus = "Ok"
DHCP Server All Scopes Not In Use Test#CredCode#		IF ($PUse -gt 80)
DHCP Server All Scopes Not In Use Test#CredCode#		{
DHCP Server All Scopes Not In Use Test#CredCode#			$AnyGap = "Yes"
DHCP Server All Scopes Not In Use Test#CredCode#			$FinStatus = "Not Ok"
DHCP Server All Scopes Not In Use Test#CredCode#			
DHCP Server All Scopes Not In Use Test#CredCode#		}
DHCP Server All Scopes Not In Use Test#CredCode#		$STR = $ID + "," + $Name + "," + $Type + "," + $Puse + "," + $FinStatus
DHCP Server All Scopes Not In Use Test#CredCode#		Add-Content $TestCSVFile $STR
DHCP Server All Scopes Not In Use Test#CredCode#		
DHCP Server All Scopes Not In Use Test#CredCode#		
DHCP Server All Scopes Not In Use Test#CredCode#	}
DHCP Server All Scopes Not In Use Test#CredCode#	
DHCP Server All Scopes Not In Use Test#CredCode#	
DHCP Server All Scopes Not In Use Test#CredCode#}
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#IF ($AnyGap -eq "Yes")
DHCP Server All Scopes Not In Use Test#CredCode#{
DHCP Server All Scopes Not In Use Test#CredCode#	$TestStatus = "High"
DHCP Server All Scopes Not In Use Test#CredCode#	$TestText = "HIGH ISSUE"
DHCP Server All Scopes Not In Use Test#CredCode#	
DHCP Server All Scopes Not In Use Test#CredCode#}
DHCP Server All Scopes Not In Use Test#CredCode#else
DHCP Server All Scopes Not In Use Test#CredCode#{
DHCP Server All Scopes Not In Use Test#CredCode#	$TestStatus = "Passed"
DHCP Server All Scopes Not In Use Test#CredCode#	$TestText = "MEDIUM ISSUE"
DHCP Server All Scopes Not In Use Test#CredCode#	
DHCP Server All Scopes Not In Use Test#CredCode#}
DHCP Server All Scopes Not In Use Test#CredCode#
DHCP Server All Scopes Not In Use Test#CredCode#$TestStatus
DHCP Server All Scopes Not In Use Test#CredCode#
Get AD Users Token Size Test#CredCode#$STR = "DistinguishedName, User Token Size, Global Groups, Universal Groups, Domain Local Groups, Groups With SID History, All Groups"
Get AD Users Token Size Test#CredCode#Add-Content $TestCSVFile $STR
Get AD Users Token Size Test#CredCode#$TotNo = 0
Get AD Users Token Size Test#CredCode#$ItemCount = 0
Get AD Users Token Size Test#CredCode#$TestText = "Please check result"
Get AD Users Token Size Test#CredCode#$TestStatus = "Completed"
Get AD Users Token Size Test#CredCode#$SumVal = "NA"
Get AD Users Token Size Test#CredCode#$AnyGap = "No"
Get AD Users Token Size Test#CredCode#
Get AD Users Token Size Test#CredCode#function Get-ADTokenSize
Get AD Users Token Size Test#CredCode#{
Get AD Users Token Size Test#CredCode#	#>	
Get AD Users Token Size Test#CredCode#	[CmdletBinding()]
Get AD Users Token Size Test#CredCode#	param ([Parameter(Mandatory = $True, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]
Get AD Users Token Size Test#CredCode#		[Alias('SamAccountName', 'DistinguishedName', 'ObjectGUID', 'SID')]
Get AD Users Token Size Test#CredCode#		[string]$Identity,
Get AD Users Token Size Test#CredCode#		[string]$Server)
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#	BEGIN { }
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#	PROCESS
Get AD Users Token Size Test#CredCode#	{		
Get AD Users Token Size Test#CredCode#		# Make sure the user exists and that we have the distinguished name of it.
Get AD Users Token Size Test#CredCode#		try
Get AD Users Token Size Test#CredCode#		{
Get AD Users Token Size Test#CredCode#			$UserDN = Get-ADUser -Identity $Identity -Server $Server -ErrorAction Stop | select -ExpandProperty DistinguishedName -ErrorAction Stop
Get AD Users Token Size Test#CredCode#		}
Get AD Users Token Size Test#CredCode#		catch
Get AD Users Token Size Test#CredCode#		{
Get AD Users Token Size Test#CredCode#			Write-Error "Failed to locate the user in Active Directory. The error was: $($Error[0])"
Get AD Users Token Size Test#CredCode#			return
Get AD Users Token Size Test#CredCode#		}
Get AD Users Token Size Test#CredCode#		
Get AD Users Token Size Test#CredCode#		# Get the group memberships using LDAP_MATCHING_RULE_IN_CHAIN
Get AD Users Token Size Test#CredCode#		try
Get AD Users Token Size Test#CredCode#		{
Get AD Users Token Size Test#CredCode#			$Groups = Get-ADGroup -LDAPFilter "(member:1.2.840.113556.1.4.1941:=$UserDN)" -Properties sIDHistory -Server $Server -ErrorAction Stop
Get AD Users Token Size Test#CredCode#		}
Get AD Users Token Size Test#CredCode#		catch
Get AD Users Token Size Test#CredCode#		{
Get AD Users Token Size Test#CredCode#			Write-Error "Failed to lookup group memberships. The error was: $($Error[0])"
Get AD Users Token Size Test#CredCode#			return
Get AD Users Token Size Test#CredCode#		}
Get AD Users Token Size Test#CredCode#		
Get AD Users Token Size Test#CredCode#		# Initialize the variables and set token size to 1200 (ticket penalty)
Get AD Users Token Size Test#CredCode#		[int]$UserTokenSize = 1200
Get AD Users Token Size Test#CredCode#		[int]$GlobalGroups = 0
Get AD Users Token Size Test#CredCode#		[int]$UniversalGroups = 0
Get AD Users Token Size Test#CredCode#		[int]$DomainLocalGroups = 0
Get AD Users Token Size Test#CredCode#		[int]$GroupsWithSidHistory = 0
Get AD Users Token Size Test#CredCode#		
Get AD Users Token Size Test#CredCode#		# loop through them and check the type and token size of them
Get AD Users Token Size Test#CredCode#		foreach ($Group in $Groups)
Get AD Users Token Size Test#CredCode#		{			
Get AD Users Token Size Test#CredCode#			Remove-Variable GroupTokenSize -ErrorAction SilentlyContinue
Get AD Users Token Size Test#CredCode#			
Get AD Users Token Size Test#CredCode#			# If they have a sidhistory the size is always 40
Get AD Users Token Size Test#CredCode#			if ($Group.SIDHistory.Count -ge 1)
Get AD Users Token Size Test#CredCode#			{
Get AD Users Token Size Test#CredCode#				[int]$GroupTokenSize = 40
Get AD Users Token Size Test#CredCode#				$GroupsWithSidHistory++
Get AD Users Token Size Test#CredCode#			}
Get AD Users Token Size Test#CredCode#			else
Get AD Users Token Size Test#CredCode#			{
Get AD Users Token Size Test#CredCode#				# otherwise set it according to the group scope
Get AD Users Token Size Test#CredCode#				[int]$GroupTokenSize = switch ($Group.GroupScope)
Get AD Users Token Size Test#CredCode#				{
Get AD Users Token Size Test#CredCode#					'Global'       { 8; $GlobalGroups++ }
Get AD Users Token Size Test#CredCode#					'Universal'    { 8; $UniversalGroups++ }
Get AD Users Token Size Test#CredCode#					'DomainLocal'  { 40; $DomainLocalGroups++ }
Get AD Users Token Size Test#CredCode#				}
Get AD Users Token Size Test#CredCode#			}
Get AD Users Token Size Test#CredCode#			
Get AD Users Token Size Test#CredCode#			# add it to the total size
Get AD Users Token Size Test#CredCode#			$UserTokenSize += $GroupTokenSize
Get AD Users Token Size Test#CredCode#			
Get AD Users Token Size Test#CredCode#		}
Get AD Users Token Size Test#CredCode#		
Get AD Users Token Size Test#CredCode#		# count all the groups
Get AD Users Token Size Test#CredCode#		[int]$AllGroups = $GlobalGroups + $UniversalGroups + $DomainLocalGroups
Get AD Users Token Size Test#CredCode#		
Get AD Users Token Size Test#CredCode#		# create the object
Get AD Users Token Size Test#CredCode#		$returnObject = New-Object System.Object
Get AD Users Token Size Test#CredCode#		$returnObject | Add-Member -Type NoteProperty -Name DistinguishedName -Value $UserDN
Get AD Users Token Size Test#CredCode#		$returnObject | Add-Member -Type NoteProperty -Name EstimatedTokenSize -Value $UserTokenSize
Get AD Users Token Size Test#CredCode#		$returnObject | Add-Member -Type NoteProperty -Name GlobalGroups -Value $GlobalGroups
Get AD Users Token Size Test#CredCode#		$returnObject | Add-Member -Type NoteProperty -Name UniversalGroups -Value $UniversalGroups
Get AD Users Token Size Test#CredCode#		$returnObject | Add-Member -Type NoteProperty -Name DomainLocalGroups -Value $DomainLocalGroups
Get AD Users Token Size Test#CredCode#		$returnObject | Add-Member -Type NoteProperty -Name GroupsWithSidHistory -Value $GroupsWithSidHistory
Get AD Users Token Size Test#CredCode#		$returnObject | Add-Member -Type NoteProperty -Name AllGroups -Value $AllGroups
Get AD Users Token Size Test#CredCode#				
Get AD Users Token Size Test#CredCode#		Write-Output $returnObject
Get AD Users Token Size Test#CredCode#	}	
Get AD Users Token Size Test#CredCode#	END {}
Get AD Users Token Size Test#CredCode#}
Get AD Users Token Size Test#CredCode#
Get AD Users Token Size Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Get AD Users Token Size Test#CredCode#{
Get AD Users Token Size Test#CredCode#	$Error.Clear()
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#	$R = Get-ADUser -Filter * | Get-ADTokenSize -Server $ThisDomain
Get AD Users Token Size Test#CredCode#	foreach ($ItemNow in $R)
Get AD Users Token Size Test#CredCode#	{
Get AD Users Token Size Test#CredCode#		$STR = '"' + $ItemNow.DistinguishedName + '"' + "," + $ItemNow.EstimatedTokenSize + "," + $ItemNow.GlobalGroups + "," + $ItemNow.UniversalGroups + "," + $ItemNow.DomainLocalGroups + "," + $ItemNow.GroupsWithSidHistory + "," + $ItemNow.AllGroups		
Get AD Users Token Size Test#CredCode#		Add-Content $TestCSVFile $STR
Get AD Users Token Size Test#CredCode#		$AnyGap = "Yes"
Get AD Users Token Size Test#CredCode#	}
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#}
Get AD Users Token Size Test#CredCode#
Get AD Users Token Size Test#CredCode#IF ($AnyGap -eq "Yes")
Get AD Users Token Size Test#CredCode#{
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#	$TestText = " "
Get AD Users Token Size Test#CredCode#	$SumVal = ""
Get AD Users Token Size Test#CredCode#	$TestStatus = "High"
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#}
Get AD Users Token Size Test#CredCode#else
Get AD Users Token Size Test#CredCode#{
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#	$TestText = " "
Get AD Users Token Size Test#CredCode#	$SumVal = ""
Get AD Users Token Size Test#CredCode#	$TestStatus = "Passed"
Get AD Users Token Size Test#CredCode#}
DHCP Server Disk Space Test#CredCode#$ThisStr="DHCP Server,Connection,Command Status, Volume, Total Size in GB, Free Space in GB,Final Status"
DHCP Server Disk Space Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
DHCP Server Disk Space Test#CredCode#$TotNo=0
DHCP Server Disk Space Test#CredCode#$ItemCount=0
DHCP Server Disk Space Test#CredCode#$TestText = ""
DHCP Server Disk Space Test#CredCode#$TestStatus=""
DHCP Server Disk Space Test#CredCode#$SumVal = ""
DHCP Server Disk Space Test#CredCode#$AnyGap = "No"
DHCP Server Disk Space Test#CredCode#$ErrorOrNot = "No"
DHCP Server Disk Space Test#CredCode#$AnyOneOk = "No"
DHCP Server Disk Space Test#CredCode#$TotDCsInError = 0
DHCP Server Disk Space Test#CredCode#
DHCP Server Disk Space Test#CredCode#Foreach ($ItemName in import-CSV $DHCPServerFile)
DHCP Server Disk Space Test#CredCode#{
DHCP Server Disk Space Test#CredCode#	$ItemName = $ItemName.Instances
DHCP Server Disk Space Test#CredCode#	
DHCP Server Disk Space Test#CredCode#	$DCConError = "Ok"
DHCP Server Disk Space Test#CredCode#	$DCConStatus = "Ok"
DHCP Server Disk Space Test#CredCode#	$ProceedOrNot = "Yes"
DHCP Server Disk Space Test#CredCode#	$Error.Clear()
DHCP Server Disk Space Test#CredCode#	$AllServices = Get-WMIObject Win32_Service -computer $ItemName
DHCP Server Disk Space Test#CredCode#	IF ($Error.Count -ne 0)
DHCP Server Disk Space Test#CredCode#	{
DHCP Server Disk Space Test#CredCode#		$ProceedOrNot = "No"
DHCP Server Disk Space Test#CredCode#		$TotDCsInError++
DHCP Server Disk Space Test#CredCode#		$DCConError = $Error[0].Exception.Message
DHCP Server Disk Space Test#CredCode#		
DHCP Server Disk Space Test#CredCode#		$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
DHCP Server Disk Space Test#CredCode#		Add-Content "$TestCSVFile" $FinalSTR
DHCP Server Disk Space Test#CredCode#		
DHCP Server Disk Space Test#CredCode#	}
DHCP Server Disk Space Test#CredCode#	
DHCP Server Disk Space Test#CredCode#	IF ($ProceedOrNot -eq "Yes")
DHCP Server Disk Space Test#CredCode#	{
DHCP Server Disk Space Test#CredCode#		$ComConError="Ok"
DHCP Server Disk Space Test#CredCode#		$Error.Clear()
DHCP Server Disk Space Test#CredCode#		$disk = Get-WmiObject Win32_Volume -ComputerName $ItemName
DHCP Server Disk Space Test#CredCode#		IF ($Error.count -eq 0)
DHCP Server Disk Space Test#CredCode#		{
DHCP Server Disk Space Test#CredCode#			$AnyOneOk="Yes"
DHCP Server Disk Space Test#CredCode#			ForEach ($R in $disk)
DHCP Server Disk Space Test#CredCode#			{
DHCP Server Disk Space Test#CredCode#				$SizeOk = "Ok"
DHCP Server Disk Space Test#CredCode#				$RSize = $R.Capacity / 1024/1024/1024
DHCP Server Disk Space Test#CredCode#				$RFreeSpace = $R.Freespace/1024/1024/1024
DHCP Server Disk Space Test#CredCode#				$ThisDriveType = $R.DriveType
DHCP Server Disk Space Test#CredCode#				
DHCP Server Disk Space Test#CredCode#				IF ($ThisDriveType -eq 3 -and $RFreeSpace -lt 10)
DHCP Server Disk Space Test#CredCode#				{
DHCP Server Disk Space Test#CredCode#					$SizeOk = "WARNING:10 GB or less disk space available."
DHCP Server Disk Space Test#CredCode#					$AnyGap = "Yes"
DHCP Server Disk Space Test#CredCode#					
DHCP Server Disk Space Test#CredCode#				}
DHCP Server Disk Space Test#CredCode#				$ThisStr=$ItemName+","+$DCConError+","+$ComConError+","+$R.Caption+","+$RSize+","+$RFreeSpace+","+$SizeOk
DHCP Server Disk Space Test#CredCode#				Add-Content "$TestCSVFile" $ThisStr
DHCP Server Disk Space Test#CredCode#				
DHCP Server Disk Space Test#CredCode#			}
DHCP Server Disk Space Test#CredCode#			
DHCP Server Disk Space Test#CredCode#			IF ($AnyGap -eq "Yes")
DHCP Server Disk Space Test#CredCode#			{
DHCP Server Disk Space Test#CredCode#				$TotNo++
DHCP Server Disk Space Test#CredCode#				
DHCP Server Disk Space Test#CredCode#			}
DHCP Server Disk Space Test#CredCode#			
DHCP Server Disk Space Test#CredCode#		}
DHCP Server Disk Space Test#CredCode#		else
DHCP Server Disk Space Test#CredCode#		{
DHCP Server Disk Space Test#CredCode#			$ComConError = $Error[0].Exception.Message
DHCP Server Disk Space Test#CredCode#			$FinalSTR = $ItemName+",$DCConError,"+$ComConError
DHCP Server Disk Space Test#CredCode#			Add-Content "$TestCSVFile" $FinalSTR
DHCP Server Disk Space Test#CredCode#			
DHCP Server Disk Space Test#CredCode#		}
DHCP Server Disk Space Test#CredCode#		
DHCP Server Disk Space Test#CredCode#	}
DHCP Server Disk Space Test#CredCode#	else
DHCP Server Disk Space Test#CredCode#	{
DHCP Server Disk Space Test#CredCode#		$ComConError = $Error[0].Exception.Message
DHCP Server Disk Space Test#CredCode#		$FinalSTR = $ItemName+",$DCConError,"+$ComConError
DHCP Server Disk Space Test#CredCode#		Add-Content "$TestCSVFile" $FinalSTR
DHCP Server Disk Space Test#CredCode#		
DHCP Server Disk Space Test#CredCode#	}
DHCP Server Disk Space Test#CredCode#	
DHCP Server Disk Space Test#CredCode#}
DHCP Server Disk Space Test#CredCode#
DHCP Server Disk Space Test#CredCode#$OthText = ""
DHCP Server Disk Space Test#CredCode#IF ($TotDCsInError -ne 0)
DHCP Server Disk Space Test#CredCode#{
DHCP Server Disk Space Test#CredCode#	$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
DHCP Server Disk Space Test#CredCode#	
DHCP Server Disk Space Test#CredCode#}
DHCP Server Disk Space Test#CredCode#IF ($AnyGap -eq "Yes")
DHCP Server Disk Space Test#CredCode#{
DHCP Server Disk Space Test#CredCode#	$TestText = "Disks on Domain Controllers have less than 10 GB of disk space available. Depending on the size of your Active Directory database you must consider freeing up some space on the disk or add more storage to disks on the domain controllers. Please load and check FinalStatus column indicating the domain controller and disk which are running low on space. $OthText"
DHCP Server Disk Space Test#CredCode#	$SumVal = $TotNo
DHCP Server Disk Space Test#CredCode#	$TestStatus="High"
DHCP Server Disk Space Test#CredCode#	
DHCP Server Disk Space Test#CredCode#}
DHCP Server Disk Space Test#CredCode#IF ($AnyGap -eq "No")
DHCP Server Disk Space Test#CredCode#{
DHCP Server Disk Space Test#CredCode#	$TestText = "Domain Controllers have more than 10 GB of disk space available. $OthText"
DHCP Server Disk Space Test#CredCode#	$SumVal = ""
DHCP Server Disk Space Test#CredCode#	$TestStatus="Passed"
DHCP Server Disk Space Test#CredCode#	
DHCP Server Disk Space Test#CredCode#	IF ($AnyOneOk -eq "No")
DHCP Server Disk Space Test#CredCode#	{
DHCP Server Disk Space Test#CredCode#		$TestText = "Error Executing Dynamic Pack."
DHCP Server Disk Space Test#CredCode#		$SumVal = ""
DHCP Server Disk Space Test#CredCode#		$TestStatus="Completed with Errors."
DHCP Server Disk Space Test#CredCode#		
DHCP Server Disk Space Test#CredCode#	}
DHCP Server Disk Space Test#CredCode#	
DHCP Server Disk Space Test#CredCode#}
DHCP Server Disk Space Test#CredCode#
DHCP Server Disk Space Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DHCP Server Disk Space Test#CredCode#
DHCP Server Disk Space Test#CredCode#$ThisStr="DHCP Server,Connection,Command Status, Volume, Total Size in GB, Free Space in GB,Final Status"
DHCP Server Disk Space Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
DHCP Server Disk Space Test#CredCode#
DHCP Server Disk Space Test#CredCode#$TotNo=0
DHCP Server Disk Space Test#CredCode#$ItemCount=0
DHCP Server Disk Space Test#CredCode#$TestText = ""
DHCP Server Disk Space Test#CredCode#$TestStatus=""
DHCP Server Disk Space Test#CredCode#$SumVal = ""
DHCP Server Disk Space Test#CredCode#$AnyGap = "No"
DHCP Server Disk Space Test#CredCode#$ErrorOrNot = "No"
DHCP Server Disk Space Test#CredCode#$AnyOneOk = "No"
DHCP Server Disk Space Test#CredCode#$TotDCsInError = 0
DHCP Server Disk Space Test#CredCode#
DHCP Server Disk Space Test#CredCode#Foreach ($ItemName in import-CSV $DHCPServerFile)
DHCP Server Disk Space Test#CredCode#{
DHCP Server Disk Space Test#CredCode#	$ItemName = $ItemName.Instances
DHCP Server Disk Space Test#CredCode#	
DHCP Server Disk Space Test#CredCode#	$DCConError = "Ok"
DHCP Server Disk Space Test#CredCode#	$DCConStatus = "Ok"
DHCP Server Disk Space Test#CredCode#	$ProceedOrNot = "Yes"
DHCP Server Disk Space Test#CredCode#	$Error.Clear()
DHCP Server Disk Space Test#CredCode#	$AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
DHCP Server Disk Space Test#CredCode#	IF ($Error.Count -ne 0)
DHCP Server Disk Space Test#CredCode#	{
DHCP Server Disk Space Test#CredCode#		$ProceedOrNot = "No"
DHCP Server Disk Space Test#CredCode#		$TotDCsInError++
DHCP Server Disk Space Test#CredCode#		$DCConError = $Error[0].Exception.Message
DHCP Server Disk Space Test#CredCode#		
DHCP Server Disk Space Test#CredCode#		$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
DHCP Server Disk Space Test#CredCode#		Add-Content "$TestCSVFile" $FinalSTR
DHCP Server Disk Space Test#CredCode#		
DHCP Server Disk Space Test#CredCode#	}
DHCP Server Disk Space Test#CredCode#	
DHCP Server Disk Space Test#CredCode#	IF ($ProceedOrNot -eq "Yes")
DHCP Server Disk Space Test#CredCode#	{
DHCP Server Disk Space Test#CredCode#		$ComConError="Ok"
DHCP Server Disk Space Test#CredCode#		$Error.Clear()
DHCP Server Disk Space Test#CredCode#		$disk = Get-WmiObject Win32_Volume -ComputerName $ItemName -Credential $Creds
DHCP Server Disk Space Test#CredCode#		IF ($Error.count -eq 0)
DHCP Server Disk Space Test#CredCode#		{
DHCP Server Disk Space Test#CredCode#			$AnyOneOk="Yes"
DHCP Server Disk Space Test#CredCode#			ForEach ($R in $disk)
DHCP Server Disk Space Test#CredCode#			{
DHCP Server Disk Space Test#CredCode#				$SizeOk = "Ok"
DHCP Server Disk Space Test#CredCode#				$RSize = $R.Capacity / 1024/1024/1024
DHCP Server Disk Space Test#CredCode#				$RFreeSpace = $R.Freespace/1024/1024/1024
DHCP Server Disk Space Test#CredCode#				$ThisDriveType = $R.DriveType
DHCP Server Disk Space Test#CredCode#				
DHCP Server Disk Space Test#CredCode#				IF ($ThisDriveType -eq 3 -and $RFreeSpace -lt 10)
DHCP Server Disk Space Test#CredCode#				{
DHCP Server Disk Space Test#CredCode#					$SizeOk = "WARNING:10 GB or less disk space available."
DHCP Server Disk Space Test#CredCode#					$AnyGap = "Yes"
DHCP Server Disk Space Test#CredCode#					
DHCP Server Disk Space Test#CredCode#				}
DHCP Server Disk Space Test#CredCode#				$ThisStr = $ItemName + "," + $DCConError + "," + $ComConError + "," + $R.Caption + "," + $RSize + "," + $RFreeSpace + "," + $SizeOk				
DHCP Server Disk Space Test#CredCode#				Add-Content "$TestCSVFile" $ThisStr
DHCP Server Disk Space Test#CredCode#				
DHCP Server Disk Space Test#CredCode#			}
DHCP Server Disk Space Test#CredCode#			
DHCP Server Disk Space Test#CredCode#			IF ($AnyGap -eq "Yes")
DHCP Server Disk Space Test#CredCode#			{
DHCP Server Disk Space Test#CredCode#				$TotNo++
DHCP Server Disk Space Test#CredCode#				
DHCP Server Disk Space Test#CredCode#			}
DHCP Server Disk Space Test#CredCode#			
DHCP Server Disk Space Test#CredCode#		}
DHCP Server Disk Space Test#CredCode#		else
DHCP Server Disk Space Test#CredCode#		{
DHCP Server Disk Space Test#CredCode#			$ComConError = $Error[0].Exception.Message
DHCP Server Disk Space Test#CredCode#			$FinalSTR = $ItemName+",$DCConError,"+$ComConError
DHCP Server Disk Space Test#CredCode#			Add-Content "$TestCSVFile" $FinalSTR
DHCP Server Disk Space Test#CredCode#			
DHCP Server Disk Space Test#CredCode#		}
DHCP Server Disk Space Test#CredCode#		
DHCP Server Disk Space Test#CredCode#	}
DHCP Server Disk Space Test#CredCode#	else
DHCP Server Disk Space Test#CredCode#	{
DHCP Server Disk Space Test#CredCode#		$ComConError = $Error[0].Exception.Message
DHCP Server Disk Space Test#CredCode#		$FinalSTR = $ItemName+",$DCConError,"+$ComConError
DHCP Server Disk Space Test#CredCode#		Add-Content "$TestCSVFile" $FinalSTR
DHCP Server Disk Space Test#CredCode#		
DHCP Server Disk Space Test#CredCode#	}
DHCP Server Disk Space Test#CredCode#	
DHCP Server Disk Space Test#CredCode#}
DHCP Server Disk Space Test#CredCode#
DHCP Server Disk Space Test#CredCode#$OthText = ""
DHCP Server Disk Space Test#CredCode#IF ($TotDCsInError -ne 0)
DHCP Server Disk Space Test#CredCode#{
DHCP Server Disk Space Test#CredCode#	$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
DHCP Server Disk Space Test#CredCode#	
DHCP Server Disk Space Test#CredCode#}
DHCP Server Disk Space Test#CredCode#IF ($AnyGap -eq "Yes")
DHCP Server Disk Space Test#CredCode#{
DHCP Server Disk Space Test#CredCode#	$TestText = "Disks on Domain Controllers have less than 10 GB of disk space available. Depending on the size of your Active Directory database you must consider freeing up some space on the disk or add more storage to disks on the domain controllers. Please load and check FinalStatus column indicating the domain controller and disk which are running low on space. $OthText"
DHCP Server Disk Space Test#CredCode#	$SumVal = $TotNo
DHCP Server Disk Space Test#CredCode#	$TestStatus="High"
DHCP Server Disk Space Test#CredCode#	
DHCP Server Disk Space Test#CredCode#}
DHCP Server Disk Space Test#CredCode#IF ($AnyGap -eq "No")
DHCP Server Disk Space Test#CredCode#{
DHCP Server Disk Space Test#CredCode#	$TestText = "Domain Controllers have more than 10 GB of disk space available. $OthText"
DHCP Server Disk Space Test#CredCode#	$SumVal = ""
DHCP Server Disk Space Test#CredCode#	$TestStatus="Passed"
DHCP Server Disk Space Test#CredCode#	
DHCP Server Disk Space Test#CredCode#	IF ($AnyOneOk -eq "No")
DHCP Server Disk Space Test#CredCode#	{
DHCP Server Disk Space Test#CredCode#		$TestText = "Error Executing Dynamic Pack."
DHCP Server Disk Space Test#CredCode#		$SumVal = ""
DHCP Server Disk Space Test#CredCode#		$TestStatus="Completed with Errors."
DHCP Server Disk Space Test#CredCode#		
DHCP Server Disk Space Test#CredCode#	}
DHCP Server Disk Space Test#CredCode#	
DHCP Server Disk Space Test#CredCode#}
DHCP Server Disk Space Test#CredCode#
DHCP Server Disk Space Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DHCP Server Event Log Test#CredCode#$ThisStr="DHCP Server,Connection,Command Status, Log Name, Number Of Errors Since last 10 Days, Number Of Warnings Since last 10 Days, Final Status"
DHCP Server Event Log Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
DHCP Server Event Log Test#CredCode#
DHCP Server Event Log Test#CredCode#$TotNo=0
DHCP Server Event Log Test#CredCode#$ItemCount=0
DHCP Server Event Log Test#CredCode#$TestText = ""
DHCP Server Event Log Test#CredCode#$TestStatus=""
DHCP Server Event Log Test#CredCode#$SumVal = ""
DHCP Server Event Log Test#CredCode#$AnyGap = "No"
DHCP Server Event Log Test#CredCode#$ErrorOrNot = "No"
DHCP Server Event Log Test#CredCode#$AnyOneOk = "No"
DHCP Server Event Log Test#CredCode#$TotDCsInError = 0
DHCP Server Event Log Test#CredCode#
DHCP Server Event Log Test#CredCode#$DCLogs="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCLogs.DPC"
DHCP Server Event Log Test#CredCode#$DCLogCSVNow = Import-CSV $DCLogs -Delimiter ";"
DHCP Server Event Log Test#CredCode#
DHCP Server Event Log Test#CredCode#$AfterDate = (get-date).AddDays(-10)
DHCP Server Event Log Test#CredCode#
DHCP Server Event Log Test#CredCode#Foreach ($ItemName in Import-CSV $DHCPServerFile)
DHCP Server Event Log Test#CredCode#{
DHCP Server Event Log Test#CredCode#	$ItemName = $ItemName.Instances
DHCP Server Event Log Test#CredCode#	
DHCP Server Event Log Test#CredCode#	$DCConError = "Ok"
DHCP Server Event Log Test#CredCode#	$DCConStatus = "Ok"
DHCP Server Event Log Test#CredCode#	$ProceedOrNot = "Yes"
DHCP Server Event Log Test#CredCode#	$Error.Clear()
DHCP Server Event Log Test#CredCode#	$AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
DHCP Server Event Log Test#CredCode#	IF ($Error.Count -ne 0)
DHCP Server Event Log Test#CredCode#	{
DHCP Server Event Log Test#CredCode#		$ProceedOrNot = "No"
DHCP Server Event Log Test#CredCode#		$TotDCsInError++
DHCP Server Event Log Test#CredCode#		$DCConError = $Error[0].Exception.Message
DHCP Server Event Log Test#CredCode#		
DHCP Server Event Log Test#CredCode#		$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
DHCP Server Event Log Test#CredCode#		Add-Content "$TestCSVFile" $FinalSTR
DHCP Server Event Log Test#CredCode#		
DHCP Server Event Log Test#CredCode#	}
DHCP Server Event Log Test#CredCode#	
DHCP Server Event Log Test#CredCode#	IF ($ProceedOrNot -eq "Yes")
DHCP Server Event Log Test#CredCode#	{
DHCP Server Event Log Test#CredCode#		$ComConError="Ok"
DHCP Server Event Log Test#CredCode#		
DHCP Server Event Log Test#CredCode#		ForEach ($ThisLog in $DCLogCSVNow)
DHCP Server Event Log Test#CredCode#		{
DHCP Server Event Log Test#CredCode#			$ThisLogToCheck = $ThisLog.EventLogName
DHCP Server Event Log Test#CredCode#			$Error.Clear()
DHCP Server Event Log Test#CredCode#			$LogError = Invoke-Command -ComputerName $ItemName -Script { param ($R1Now,
DHCP Server Event Log Test#CredCode#					$R2Now) Get-eventlog -log "$R1Now" -EntryType Error -After $R2Now } -ArgumentList $ThisLogToCheck, $AfterDate -Credential $Creds
DHCP Server Event Log Test#CredCode#			IF ($Error.count -eq 0)
DHCP Server Event Log Test#CredCode#			{
DHCP Server Event Log Test#CredCode#				$FinStatus = "Ok"
DHCP Server Event Log Test#CredCode#				$AnyOneOk="Yes"
DHCP Server Event Log Test#CredCode#				$LogErrCnt = $LogError.Count
DHCP Server Event Log Test#CredCode#				IF ($LogErrCnt -ne 0)
DHCP Server Event Log Test#CredCode#				{
DHCP Server Event Log Test#CredCode#					$IsErrAva = "Yes"
DHCP Server Event Log Test#CredCode#					$AnyGap = "Yes"
DHCP Server Event Log Test#CredCode#					$FinStatus = "Not Ok"
DHCP Server Event Log Test#CredCode#					
DHCP Server Event Log Test#CredCode#				}
DHCP Server Event Log Test#CredCode#				
DHCP Server Event Log Test#CredCode#				$LogWarnings = Invoke-Command -ComputerName $ItemName -Script { param ($R1Now,
DHCP Server Event Log Test#CredCode#						$R2Now) Get-eventlog -log "$R1Now" -EntryType Warning -After $R2Now } -ArgumentList $ThisLogToCheck, $AfterDate -Credential $Creds
DHCP Server Event Log Test#CredCode#				$LogWarningsCnt = $LogWarnings.Count
DHCP Server Event Log Test#CredCode#				
DHCP Server Event Log Test#CredCode#				$ThisSTr = $ItemName+","+$DCConError+","+$ComConError+","+$ThisLogToCheck+","+$LogErrCnt+","+$LogWarningsCnt+","+$FinStatus
DHCP Server Event Log Test#CredCode#				Add-Content "$TestCSVFile" $ThisStr
DHCP Server Event Log Test#CredCode#				
DHCP Server Event Log Test#CredCode#				IF ($AnyGap -eq "Yes")
DHCP Server Event Log Test#CredCode#				{
DHCP Server Event Log Test#CredCode#					$TotNo++
DHCP Server Event Log Test#CredCode#					
DHCP Server Event Log Test#CredCode#				}
DHCP Server Event Log Test#CredCode#				
DHCP Server Event Log Test#CredCode#			}
DHCP Server Event Log Test#CredCode#			else
DHCP Server Event Log Test#CredCode#			{
DHCP Server Event Log Test#CredCode#				$ComConError = $Error[0].Exception.Message
DHCP Server Event Log Test#CredCode#				$FinalSTR = $ItemName+",$DCConError,"+$ComConError
DHCP Server Event Log Test#CredCode#				Add-Content "$TestCSVFile" $FinalSTR
DHCP Server Event Log Test#CredCode#				
DHCP Server Event Log Test#CredCode#			}
DHCP Server Event Log Test#CredCode#			
DHCP Server Event Log Test#CredCode#		}
DHCP Server Event Log Test#CredCode#		
DHCP Server Event Log Test#CredCode#	}
DHCP Server Event Log Test#CredCode#	else
DHCP Server Event Log Test#CredCode#	{
DHCP Server Event Log Test#CredCode#		$ComConError = $Error[0].Exception.Message
DHCP Server Event Log Test#CredCode#		$FinalSTR = $ItemName+",$DCConError,"+$ComConError
DHCP Server Event Log Test#CredCode#		Add-Content "$TestCSVFile" $FinalSTR
DHCP Server Event Log Test#CredCode#		
DHCP Server Event Log Test#CredCode#	}
DHCP Server Event Log Test#CredCode#	
DHCP Server Event Log Test#CredCode#}
DHCP Server Event Log Test#CredCode#
DHCP Server Event Log Test#CredCode#$OthText = ""
DHCP Server Event Log Test#CredCode#IF ($TotDCsInError -ne 0)
DHCP Server Event Log Test#CredCode#{
DHCP Server Event Log Test#CredCode#	$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
DHCP Server Event Log Test#CredCode#	
DHCP Server Event Log Test#CredCode#}
DHCP Server Event Log Test#CredCode#IF ($AnyGap -eq "Yes")
DHCP Server Event Log Test#CredCode#{
DHCP Server Event Log Test#CredCode#	$TestText = "Domain Controllers have errors in Event Logs. Test reports number of errors and warnings reported since last 10 days. You might want to check domain controllers event log to ensure the errors and warnings can be ignored safely or consult a technician to resolve these errors. $OthText"
DHCP Server Event Log Test#CredCode#	$SumVal = $TotNo
DHCP Server Event Log Test#CredCode#	$TestStatus="High"
DHCP Server Event Log Test#CredCode#	
DHCP Server Event Log Test#CredCode#}
DHCP Server Event Log Test#CredCode#IF ($AnyGap -eq "No")
DHCP Server Event Log Test#CredCode#{
DHCP Server Event Log Test#CredCode#	$TestText = "There are no errors found in Event Logs of Domain Controllers. $OthText"
DHCP Server Event Log Test#CredCode#	$SumVal = ""
DHCP Server Event Log Test#CredCode#	$TestStatus="Passed"
DHCP Server Event Log Test#CredCode#	
DHCP Server Event Log Test#CredCode#	IF ($AnyOneOk -eq "No")
DHCP Server Event Log Test#CredCode#	{
DHCP Server Event Log Test#CredCode#		$TestText = "Error Executing Dynamic Pack."
DHCP Server Event Log Test#CredCode#		$SumVal = ""
DHCP Server Event Log Test#CredCode#		$TestStatus="Completed with Errors."
DHCP Server Event Log Test#CredCode#		
DHCP Server Event Log Test#CredCode#	}
DHCP Server Event Log Test#CredCode#	
DHCP Server Event Log Test#CredCode#}
DHCP Server Event Log Test#CredCode#
DHCP Server Event Log Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DHCP Server Event Log Test#CredCode#$ThisStr = "DHCP Server,Connection,Command Status, Log Name, Number Of Errors Since last 10 Days, Number Of Warnings Since last 10 Days, Final Status"
DHCP Server Event Log Test#CredCode#Add-Content "$TestCSVFile" $ThisStr
DHCP Server Event Log Test#CredCode#
DHCP Server Event Log Test#CredCode#$TotNo=0
DHCP Server Event Log Test#CredCode#$ItemCount=0
DHCP Server Event Log Test#CredCode#$TestText = ""
DHCP Server Event Log Test#CredCode#$TestStatus=""
DHCP Server Event Log Test#CredCode#$SumVal = ""
DHCP Server Event Log Test#CredCode#$AnyGap = "No"
DHCP Server Event Log Test#CredCode#$ErrorOrNot = "No"
DHCP Server Event Log Test#CredCode#$AnyOneOk = "No"
DHCP Server Event Log Test#CredCode#$TotDCsInError = 0
DHCP Server Event Log Test#CredCode#
DHCP Server Event Log Test#CredCode#$DCLogs="$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCLogs.DPC"
DHCP Server Event Log Test#CredCode#$DCLogCSVNow = Import-CSV $DCLogs -Delimiter ";"
DHCP Server Event Log Test#CredCode#
DHCP Server Event Log Test#CredCode#$AfterDate = (get-date).AddDays(-10)
DHCP Server Event Log Test#CredCode#
DHCP Server Event Log Test#CredCode#Foreach ($ItemName in Import-CSV $DHCPServerFile)
DHCP Server Event Log Test#CredCode#{
DHCP Server Event Log Test#CredCode#	$ItemName = $ItemName.Instances
DHCP Server Event Log Test#CredCode#	
DHCP Server Event Log Test#CredCode#	$DCConError = "Ok"
DHCP Server Event Log Test#CredCode#	$DCConStatus = "Ok"
DHCP Server Event Log Test#CredCode#	$ProceedOrNot = "Yes"
DHCP Server Event Log Test#CredCode#	$Error.Clear()
DHCP Server Event Log Test#CredCode#	$AllServices = Get-WMIObject Win32_Service -computer $ItemName
DHCP Server Event Log Test#CredCode#	IF ($Error.Count -ne 0)
DHCP Server Event Log Test#CredCode#	{
DHCP Server Event Log Test#CredCode#		$ProceedOrNot = "No"
DHCP Server Event Log Test#CredCode#		$TotDCsInError++
DHCP Server Event Log Test#CredCode#		$DCConError = $Error[0].Exception.Message
DHCP Server Event Log Test#CredCode#		
DHCP Server Event Log Test#CredCode#		$FinalSTR = $ItemName+",Not OK: Error: $DCConError"
DHCP Server Event Log Test#CredCode#		Add-Content "$TestCSVFile" $FinalSTR
DHCP Server Event Log Test#CredCode#		
DHCP Server Event Log Test#CredCode#	}
DHCP Server Event Log Test#CredCode#	
DHCP Server Event Log Test#CredCode#	IF ($ProceedOrNot -eq "Yes")
DHCP Server Event Log Test#CredCode#	{
DHCP Server Event Log Test#CredCode#		$ComConError="Ok"
DHCP Server Event Log Test#CredCode#		
DHCP Server Event Log Test#CredCode#		ForEach ($ThisLog in $DCLogCSVNow)
DHCP Server Event Log Test#CredCode#		{
DHCP Server Event Log Test#CredCode#			$ThisLogToCheck = $ThisLog.EventLogName
DHCP Server Event Log Test#CredCode#			$Error.Clear()
DHCP Server Event Log Test#CredCode#			$LogError = Invoke-Command -ComputerName $ItemName -Script { param ($R1Now,
DHCP Server Event Log Test#CredCode#					$R2Now) Get-eventlog -log "$R1Now" -EntryType Error -After $R2Now } -ArgumentList $ThisLogToCheck, $AfterDate
DHCP Server Event Log Test#CredCode#			IF ($Error.count -eq 0)
DHCP Server Event Log Test#CredCode#			{
DHCP Server Event Log Test#CredCode#				$FinStatus = "Ok"
DHCP Server Event Log Test#CredCode#				$AnyOneOk="Yes"
DHCP Server Event Log Test#CredCode#				$LogErrCnt = $LogError.Count
DHCP Server Event Log Test#CredCode#				IF ($LogErrCnt -ne 0)
DHCP Server Event Log Test#CredCode#				{
DHCP Server Event Log Test#CredCode#					$IsErrAva = "Yes"
DHCP Server Event Log Test#CredCode#					$AnyGap = "Yes"
DHCP Server Event Log Test#CredCode#					$FinStatus = "Not Ok"
DHCP Server Event Log Test#CredCode#					
DHCP Server Event Log Test#CredCode#				}
DHCP Server Event Log Test#CredCode#				
DHCP Server Event Log Test#CredCode#				$LogWarnings = Invoke-Command -ComputerName $ItemName -Script { param ($R1Now,
DHCP Server Event Log Test#CredCode#						$R2Now) Get-eventlog -log "$R1Now" -EntryType Warning -After $R2Now } -ArgumentList $ThisLogToCheck, $AfterDate
DHCP Server Event Log Test#CredCode#				$LogWarningsCnt = $LogWarnings.Count
DHCP Server Event Log Test#CredCode#				
DHCP Server Event Log Test#CredCode#				$ThisSTr = $ItemName+","+$DCConError+","+$ComConError+","+$ThisLogToCheck+","+$LogErrCnt+","+$LogWarningsCnt+","+$FinStatus
DHCP Server Event Log Test#CredCode#				Add-Content "$TestCSVFile" $ThisStr
DHCP Server Event Log Test#CredCode#				
DHCP Server Event Log Test#CredCode#				IF ($AnyGap -eq "Yes")
DHCP Server Event Log Test#CredCode#				{
DHCP Server Event Log Test#CredCode#					$TotNo++
DHCP Server Event Log Test#CredCode#					
DHCP Server Event Log Test#CredCode#				}
DHCP Server Event Log Test#CredCode#				
DHCP Server Event Log Test#CredCode#			}
DHCP Server Event Log Test#CredCode#			else
DHCP Server Event Log Test#CredCode#			{
DHCP Server Event Log Test#CredCode#				$ComConError = $Error[0].Exception.Message
DHCP Server Event Log Test#CredCode#				$FinalSTR = $ItemName+",$DCConError,"+$ComConError
DHCP Server Event Log Test#CredCode#				Add-Content "$TestCSVFile" $FinalSTR
DHCP Server Event Log Test#CredCode#				
DHCP Server Event Log Test#CredCode#			}
DHCP Server Event Log Test#CredCode#			
DHCP Server Event Log Test#CredCode#		}
DHCP Server Event Log Test#CredCode#		
DHCP Server Event Log Test#CredCode#	}
DHCP Server Event Log Test#CredCode#	else
DHCP Server Event Log Test#CredCode#	{
DHCP Server Event Log Test#CredCode#		$ComConError = $Error[0].Exception.Message
DHCP Server Event Log Test#CredCode#		$FinalSTR = $ItemName+",$DCConError,"+$ComConError
DHCP Server Event Log Test#CredCode#		Add-Content "$TestCSVFile" $FinalSTR
DHCP Server Event Log Test#CredCode#		
DHCP Server Event Log Test#CredCode#	}
DHCP Server Event Log Test#CredCode#	
DHCP Server Event Log Test#CredCode#}
DHCP Server Event Log Test#CredCode#
DHCP Server Event Log Test#CredCode#$OthText = ""
DHCP Server Event Log Test#CredCode#IF ($TotDCsInError -ne 0)
DHCP Server Event Log Test#CredCode#{
DHCP Server Event Log Test#CredCode#	$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
DHCP Server Event Log Test#CredCode#	
DHCP Server Event Log Test#CredCode#}
DHCP Server Event Log Test#CredCode#IF ($AnyGap -eq "Yes")
DHCP Server Event Log Test#CredCode#{
DHCP Server Event Log Test#CredCode#	$TestText = "Domain Controllers have errors in Event Logs. Test reports number of errors and warnings reported since last 10 days. You might want to check domain controllers event log to ensure the errors and warnings can be ignored safely or consult a technician to resolve these errors. $OthText"
DHCP Server Event Log Test#CredCode#	$SumVal = $TotNo
DHCP Server Event Log Test#CredCode#	$TestStatus="High"
DHCP Server Event Log Test#CredCode#	
DHCP Server Event Log Test#CredCode#}
DHCP Server Event Log Test#CredCode#IF ($AnyGap -eq "No")
DHCP Server Event Log Test#CredCode#{
DHCP Server Event Log Test#CredCode#	$TestText = "There are no errors found in Event Logs of Domain Controllers. $OthText"
DHCP Server Event Log Test#CredCode#	$SumVal = ""
DHCP Server Event Log Test#CredCode#	$TestStatus="Passed"
DHCP Server Event Log Test#CredCode#	
DHCP Server Event Log Test#CredCode#	IF ($AnyOneOk -eq "No")
DHCP Server Event Log Test#CredCode#	{
DHCP Server Event Log Test#CredCode#		$TestText = "Error Executing Dynamic Pack."
DHCP Server Event Log Test#CredCode#		$SumVal = ""
DHCP Server Event Log Test#CredCode#		$TestStatus="Completed with Errors."
DHCP Server Event Log Test#CredCode#		
DHCP Server Event Log Test#CredCode#	}
DHCP Server Event Log Test#CredCode#	
DHCP Server Event Log Test#CredCode#}
DHCP Server Event Log Test#CredCode#
DHCP Server Event Log Test#CredCode#$STR = $ADTestName +","+$TestStartTime+","+$TestStatus+","+$SumVal +","+$TestText
DHCP Server Event Log Test#CredCode#
DHCP Server V4 Scope Reservation Test#CredCode#$ThisString = "DHCP Server, Scope ID, Total Reservations, Final Status, Data File Location"
DHCP Server V4 Scope Reservation Test#CredCode#Add-Content "$TestCSVFile" $ThisString
DHCP Server V4 Scope Reservation Test#CredCode#
DHCP Server V4 Scope Reservation Test#CredCode#Import-Module DHCPServer
DHCP Server V4 Scope Reservation Test#CredCode#$DataFileLocation = $CurrentLoc + "Data\" + $UniqueTest + "_DATA.CSV"
DHCP Server V4 Scope Reservation Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Server V4 Scope Reservation Test#CredCode#$STR = "DHCP Server, IP Address, Scope ID, Client ID, Reservation Name, Type, Description"
DHCP Server V4 Scope Reservation Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Server V4 Scope Reservation Test#CredCode#
DHCP Server V4 Scope Reservation Test#CredCode#$AnyGap = "No"
DHCP Server V4 Scope Reservation Test#CredCode#
DHCP Server V4 Scope Reservation Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server V4 Scope Reservation Test#CredCode#{
DHCP Server V4 Scope Reservation Test#CredCode#	$ThisServerNow = $Server.Instances
DHCP Server V4 Scope Reservation Test#CredCode#	$TotScopeActive = 0
DHCP Server V4 Scope Reservation Test#CredCode#	$TotScopeInActive = 0
DHCP Server V4 Scope Reservation Test#CredCode#	
DHCP Server V4 Scope Reservation Test#CredCode#	$Error.Clear()
DHCP Server V4 Scope Reservation Test#CredCode#	$results = Get-DhcpServerv4Scope -ComputerName $ThisServerNow
DHCP Server V4 Scope Reservation Test#CredCode#	IF ($Error.Count -eq 0)
DHCP Server V4 Scope Reservation Test#CredCode#	{
DHCP Server V4 Scope Reservation Test#CredCode#				
DHCP Server V4 Scope Reservation Test#CredCode#		ForEach ($EachScope in $Results)
DHCP Server V4 Scope Reservation Test#CredCode#		{
DHCP Server V4 Scope Reservation Test#CredCode#			$ThisScopeID = $EachScope.ScopeID
DHCP Server V4 Scope Reservation Test#CredCode#			$AllResForScope = Get-DhcpServerv4Reservation -ComputerName $ThisServerNow -ScopeId $ThisScopeID
DHCP Server V4 Scope Reservation Test#CredCode#			$TotRes = 0
DHCP Server V4 Scope Reservation Test#CredCode#			$FinalStatus = "Ok"
DHCP Server V4 Scope Reservation Test#CredCode#			foreach ($ItemRes in $AllResForScope)
DHCP Server V4 Scope Reservation Test#CredCode#			{
DHCP Server V4 Scope Reservation Test#CredCode#				$STR = $ThisServerNow + "," + $ItemRes.IPAddress + "," + $ItemRes.ScopeID + "," + $ItemRes.ClientID + "," + $ItemRes.Name + "," + $ItemRes.Type + "," + $ItemRes.Description
DHCP Server V4 Scope Reservation Test#CredCode#				Add-Content $DataFileLocation $STR
DHCP Server V4 Scope Reservation Test#CredCode#				$TotRes++				
DHCP Server V4 Scope Reservation Test#CredCode#			}
DHCP Server V4 Scope Reservation Test#CredCode#			
DHCP Server V4 Scope Reservation Test#CredCode#			IF ($TotRes -eq 0)
DHCP Server V4 Scope Reservation Test#CredCode#			{
DHCP Server V4 Scope Reservation Test#CredCode#				$AnyGap = "Yes"
DHCP Server V4 Scope Reservation Test#CredCode#				$FinalStatus = "NotOK"
DHCP Server V4 Scope Reservation Test#CredCode#			}
DHCP Server V4 Scope Reservation Test#CredCode#			
DHCP Server V4 Scope Reservation Test#CredCode#			$STR = $ThisServerNow + "," + $ThisScopeID + "," + $TotRes.ToString() + "," + $FinalStatus + "," + $DataFileLocation			
DHCP Server V4 Scope Reservation Test#CredCode#			Add-Content $TestCSVFile $STR			
DHCP Server V4 Scope Reservation Test#CredCode#		}
DHCP Server V4 Scope Reservation Test#CredCode#				
DHCP Server V4 Scope Reservation Test#CredCode#	}
DHCP Server V4 Scope Reservation Test#CredCode#	else
DHCP Server V4 Scope Reservation Test#CredCode#	{
DHCP Server V4 Scope Reservation Test#CredCode#		$STR = $ThisServerNow + ", Error Connecting to DHCP Server"
DHCP Server V4 Scope Reservation Test#CredCode#		Add-Content $TestCSVFile $STR
DHCP Server V4 Scope Reservation Test#CredCode#		
DHCP Server V4 Scope Reservation Test#CredCode#	}
DHCP Server V4 Scope Reservation Test#CredCode#	
DHCP Server V4 Scope Reservation Test#CredCode#}
DHCP Server V4 Scope Reservation Test#CredCode#
DHCP Server V4 Scope Reservation Test#CredCode#IF ($AnyGap -eq "Yes")
DHCP Server V4 Scope Reservation Test#CredCode#{
DHCP Server V4 Scope Reservation Test#CredCode#	$TestStatus = "Medium"
DHCP Server V4 Scope Reservation Test#CredCode#	$TestText = "HIGH ISSUE"
DHCP Server V4 Scope Reservation Test#CredCode#	
DHCP Server V4 Scope Reservation Test#CredCode#}
DHCP Server V4 Scope Reservation Test#CredCode#else
DHCP Server V4 Scope Reservation Test#CredCode#{
DHCP Server V4 Scope Reservation Test#CredCode#	$TestStatus = "Passed"
DHCP Server V4 Scope Reservation Test#CredCode#	$TestText = "MEDIUM ISSUE"
DHCP Server V4 Scope Reservation Test#CredCode#	
DHCP Server V4 Scope Reservation Test#CredCode#}
DHCP Server V4 Scope Reservation Test#CredCode#$ThisString = "DHCP Server, Scope ID, Total Reservations, Final Status, Data File Location"
DHCP Server V4 Scope Reservation Test#CredCode#Add-Content "$TestCSVFile" $ThisString
DHCP Server V4 Scope Reservation Test#CredCode#
DHCP Server V4 Scope Reservation Test#CredCode#Import-Module DHCPServer
DHCP Server V4 Scope Reservation Test#CredCode#$DataFileLocation = $CurrentLoc + "Data\" + $UniqueTest + "_DATA.CSV"
DHCP Server V4 Scope Reservation Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
DHCP Server V4 Scope Reservation Test#CredCode#$STR = "DHCP Server, IP Address, Scope ID, Client ID, Reservation Name, Type, Description"
DHCP Server V4 Scope Reservation Test#CredCode#Add-Content $DataFileLocation $STR
DHCP Server V4 Scope Reservation Test#CredCode#
DHCP Server V4 Scope Reservation Test#CredCode#$AnyGap = "No"
DHCP Server V4 Scope Reservation Test#CredCode#
DHCP Server V4 Scope Reservation Test#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
DHCP Server V4 Scope Reservation Test#CredCode#{
DHCP Server V4 Scope Reservation Test#CredCode#	$ThisServerNow = $Server.Instances
DHCP Server V4 Scope Reservation Test#CredCode#	$TotScopeActive = 0
DHCP Server V4 Scope Reservation Test#CredCode#	$TotScopeInActive = 0
DHCP Server V4 Scope Reservation Test#CredCode#	
DHCP Server V4 Scope Reservation Test#CredCode#	$Error.Clear()
DHCP Server V4 Scope Reservation Test#CredCode#	$results = Invoke-Command -ComputerName $ThisServerNow -Script { param ($R1Now) Get-DhcpServerv4Scope -ComputerName $R1Now } -Credential $Creds -ArgumentList $ThisServerNow	
DHCP Server V4 Scope Reservation Test#CredCode#	IF ($Error.Count -eq 0)
DHCP Server V4 Scope Reservation Test#CredCode#	{
DHCP Server V4 Scope Reservation Test#CredCode#		
DHCP Server V4 Scope Reservation Test#CredCode#		ForEach ($EachScope in $Results)
DHCP Server V4 Scope Reservation Test#CredCode#		{
DHCP Server V4 Scope Reservation Test#CredCode#			$ThisScopeID = $EachScope.ScopeID
DHCP Server V4 Scope Reservation Test#CredCode#			$AllResForScope = Invoke-Command -ComputerName $ThisServerNow -Script { param ($R1Now, $ThisScopeID) Get-DhcpServerv4Reservation -ComputerName $ThisServerNow -ScopeId $ThisScopeID } -Credential $Creds -ArgumentList $ThisServerNow
DHCP Server V4 Scope Reservation Test#CredCode#			$TotRes = 0
DHCP Server V4 Scope Reservation Test#CredCode#			$FinalStatus = "Ok"
DHCP Server V4 Scope Reservation Test#CredCode#			foreach ($ItemRes in $AllResForScope)
DHCP Server V4 Scope Reservation Test#CredCode#			{
DHCP Server V4 Scope Reservation Test#CredCode#				$STR = $ThisServerNow + "," + $ItemRes.IPAddress + "," + $ItemRes.ScopeID + "," + $ItemRes.ClientID + "," + $ItemRes.Name + "," + $ItemRes.Type + "," + $ItemRes.Description
DHCP Server V4 Scope Reservation Test#CredCode#				Add-Content $DataFileLocation $STR
DHCP Server V4 Scope Reservation Test#CredCode#				$TotRes++
DHCP Server V4 Scope Reservation Test#CredCode#			}
DHCP Server V4 Scope Reservation Test#CredCode#			
DHCP Server V4 Scope Reservation Test#CredCode#			IF ($TotRes -eq 0)
DHCP Server V4 Scope Reservation Test#CredCode#			{
DHCP Server V4 Scope Reservation Test#CredCode#				$AnyGap = "Yes"
DHCP Server V4 Scope Reservation Test#CredCode#				$FinalStatus = "NotOK"
DHCP Server V4 Scope Reservation Test#CredCode#			}
DHCP Server V4 Scope Reservation Test#CredCode#			
DHCP Server V4 Scope Reservation Test#CredCode#			$STR = $ThisServerNow + "," + $ThisScopeID + "," + $TotRes.ToString() + "," + $FinalStatus + "," + $DataFileLocation
DHCP Server V4 Scope Reservation Test#CredCode#			Add-Content $TestCSVFile $STR
DHCP Server V4 Scope Reservation Test#CredCode#		}
DHCP Server V4 Scope Reservation Test#CredCode#		
DHCP Server V4 Scope Reservation Test#CredCode#	}
DHCP Server V4 Scope Reservation Test#CredCode#	else
DHCP Server V4 Scope Reservation Test#CredCode#	{
DHCP Server V4 Scope Reservation Test#CredCode#		$STR = $ThisServerNow + ", Error Connecting to DHCP Server"
DHCP Server V4 Scope Reservation Test#CredCode#		Add-Content $TestCSVFile $STR
DHCP Server V4 Scope Reservation Test#CredCode#		
DHCP Server V4 Scope Reservation Test#CredCode#	}
DHCP Server V4 Scope Reservation Test#CredCode#	
DHCP Server V4 Scope Reservation Test#CredCode#}
DHCP Server V4 Scope Reservation Test#CredCode#
DHCP Server V4 Scope Reservation Test#CredCode#IF ($AnyGap -eq "Yes")
DHCP Server V4 Scope Reservation Test#CredCode#{
DHCP Server V4 Scope Reservation Test#CredCode#	$TestStatus = "Medium"
DHCP Server V4 Scope Reservation Test#CredCode#	$TestText = "HIGH ISSUE"
DHCP Server V4 Scope Reservation Test#CredCode#	
DHCP Server V4 Scope Reservation Test#CredCode#}
DHCP Server V4 Scope Reservation Test#CredCode#else
DHCP Server V4 Scope Reservation Test#CredCode#{
DHCP Server V4 Scope Reservation Test#CredCode#	$TestStatus = "Passed"
DHCP Server V4 Scope Reservation Test#CredCode#	$TestText = "MEDIUM ISSUE"
DHCP Server V4 Scope Reservation Test#CredCode#	
DHCP Server V4 Scope Reservation Test#CredCode#}
DHCP Server V4 Scope Reservation Test#CredCode#
DHCP Server V4 Scope Reservation Test#CredCode#
AD Migration Prepration Files#CredCode#$STR = "AD Domain, Total Users"
AD Migration Prepration Files#CredCode#Add-Content $TestCSVFile $STR
AD Migration Prepration Files#CredCode#
AD Migration Prepration Files#CredCode#$TotNo = 0
AD Migration Prepration Files#CredCode#$ItemCount = 0
AD Migration Prepration Files#CredCode#$TestText = "Please check result"
AD Migration Prepration Files#CredCode#$TestStatus = "Completed"
AD Migration Prepration Files#CredCode#$SumVal = "NA"
AD Migration Prepration Files#CredCode#$AnyGap = "No"
AD Migration Prepration Files#CredCode#
AD Migration Prepration Files#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
AD Migration Prepration Files#CredCode#{
AD Migration Prepration Files#CredCode#	$DataFileLocation = $CurrentLoc + "\Data\" + $ThisDomain + "Migration_Users.CSV"
AD Migration Prepration Files#CredCode#	Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
AD Migration Prepration Files#CredCode#	$STR = "AD Domain, DistinguishedName, SamAccountName, UPN, Display Name, Given Name, Email Address, Proxy Addresses, Last Modified"
AD Migration Prepration Files#CredCode#	Add-Content $DataFileLocation $STR
AD Migration Prepration Files#CredCode#	
AD Migration Prepration Files#CredCode#	$Error.Clear()
AD Migration Prepration Files#CredCode#	
AD Migration Prepration Files#CredCode#	$TotUsers = 0
AD Migration Prepration Files#CredCode#	$R = Get-ADUser -Filter * -Properties * -ResultPageSize 2000 -resultSetSize $null -Server $ThisDomain
AD Migration Prepration Files#CredCode#	foreach ($ItemNow in $R)
AD Migration Prepration Files#CredCode#	{
AD Migration Prepration Files#CredCode#		$AllPAddresses = $ItemNow.ProxyAddresses
AD Migration Prepration Files#CredCode#		
AD Migration Prepration Files#CredCode#		$AllAccess = $ItemNow.proxyAddresses
AD Migration Prepration Files#CredCode#		$JoinedPA = $AllAccess -join " "
AD Migration Prepration Files#CredCode#		
AD Migration Prepration Files#CredCode#		$STR = $ThisDomain+","+'"' + $ItemNow.DistinguishedName + '"' + "," + $ItemNow.SamAccountName + "," + $ItemNow.UserPrincipalName + "," + $ItemNow.DisplayName + "," + $ItemNow.GivenName + "," + $ItemNow.EmailAddress + "," + $JoinedPA + "," + $ItemNow.modifyTimeStamp
AD Migration Prepration Files#CredCode#		Add-Content $DataFileLocation $STR
AD Migration Prepration Files#CredCode#		$TotUsers++
AD Migration Prepration Files#CredCode#	}
AD Migration Prepration Files#CredCode#	
AD Migration Prepration Files#CredCode#	$STR = $ThisDomain + "," + $TotUsers.ToString()
AD Migration Prepration Files#CredCode#	Add-Content $TestCSVFile $STR
AD Migration Prepration Files#CredCode#}
AD Migration Prepration Files#CredCode#
AD Migration Prepration Files#CredCode#IF ($AnyGap -eq "Yes")
AD Migration Prepration Files#CredCode#{
AD Migration Prepration Files#CredCode#	
AD Migration Prepration Files#CredCode#	$TestText = " "
AD Migration Prepration Files#CredCode#	$SumVal = ""
AD Migration Prepration Files#CredCode#	$TestStatus = "High"
AD Migration Prepration Files#CredCode#	
AD Migration Prepration Files#CredCode#}
AD Migration Prepration Files#CredCode#else
AD Migration Prepration Files#CredCode#{
AD Migration Prepration Files#CredCode#	
AD Migration Prepration Files#CredCode#	$TestText = " "
AD Migration Prepration Files#CredCode#	$SumVal = ""
AD Migration Prepration Files#CredCode#	$TestStatus = "Passed"
AD Migration Prepration Files#CredCode#	
AD Migration Prepration Files#CredCode#}
AD Migration Prepration Files#CredCode#$STR = "AD Domain, Total Users"
AD Migration Prepration Files#CredCode#Add-Content $TestCSVFile $STR
AD Migration Prepration Files#CredCode#
AD Migration Prepration Files#CredCode#$TotNo = 0
AD Migration Prepration Files#CredCode#$ItemCount = 0
AD Migration Prepration Files#CredCode#$TestText = "Please check result"
AD Migration Prepration Files#CredCode#$TestStatus = "Completed"
AD Migration Prepration Files#CredCode#$SumVal = "NA"
AD Migration Prepration Files#CredCode#$AnyGap = "No"
AD Migration Prepration Files#CredCode#
AD Migration Prepration Files#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
AD Migration Prepration Files#CredCode#{
AD Migration Prepration Files#CredCode#	$DataFileLocation = $CurrentLoc + "\Data\" + $ThisDomain + "Migration_Users.CSV"
AD Migration Prepration Files#CredCode#	Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
AD Migration Prepration Files#CredCode#	$STR = "AD Domain, DistinguishedName, SamAccountName, UPN, Display Name, Given Name, Email Address, Proxy Addresses, Last Modified"
AD Migration Prepration Files#CredCode#	Add-Content $DataFileLocation $STR
AD Migration Prepration Files#CredCode#	
AD Migration Prepration Files#CredCode#	$Error.Clear()
AD Migration Prepration Files#CredCode#	
AD Migration Prepration Files#CredCode#	$TotUsers = 0
AD Migration Prepration Files#CredCode#	$R = Get-ADUser -Filter * -Properties * -ResultPageSize 2000 -resultSetSize $null -Server $ThisDomain -Credential $Creds
AD Migration Prepration Files#CredCode#	foreach ($ItemNow in $R)
AD Migration Prepration Files#CredCode#	{
AD Migration Prepration Files#CredCode#		$AllPAddresses = $ItemNow.ProxyAddresses
AD Migration Prepration Files#CredCode#		
AD Migration Prepration Files#CredCode#		$AllAccess = $ItemNow.proxyAddresses
AD Migration Prepration Files#CredCode#		$JoinedPA = $AllAccess -join " "
AD Migration Prepration Files#CredCode#		
AD Migration Prepration Files#CredCode#		$STR = $ThisDomain+","+ '"' + $ItemNow.DistinguishedName + '"' + "," + $ItemNow.SamAccountName + "," + $ItemNow.UserPrincipalName + "," + $ItemNow.DisplayName + "," + $ItemNow.GivenName + "," + $ItemNow.EmailAddress + "," + $JoinedPA + "," + $ItemNow.modifyTimeStamp
AD Migration Prepration Files#CredCode#		Add-Content $DataFileLocation $STR
AD Migration Prepration Files#CredCode#		$TotUsers++
AD Migration Prepration Files#CredCode#	}
AD Migration Prepration Files#CredCode#	
AD Migration Prepration Files#CredCode#	$STR = $ThisDomain + "," + $TotUsers.ToString()
AD Migration Prepration Files#CredCode#	Add-Content $TestCSVFile $STR
AD Migration Prepration Files#CredCode#}
AD Migration Prepration Files#CredCode#
AD Migration Prepration Files#CredCode#IF ($AnyGap -eq "Yes")
AD Migration Prepration Files#CredCode#{
AD Migration Prepration Files#CredCode#	
AD Migration Prepration Files#CredCode#	$TestText = " "
AD Migration Prepration Files#CredCode#	$SumVal = ""
AD Migration Prepration Files#CredCode#	$TestStatus = "High"
AD Migration Prepration Files#CredCode#	
AD Migration Prepration Files#CredCode#}
AD Migration Prepration Files#CredCode#else
AD Migration Prepration Files#CredCode#{
AD Migration Prepration Files#CredCode#	
AD Migration Prepration Files#CredCode#	$TestText = " "
AD Migration Prepration Files#CredCode#	$SumVal = ""
AD Migration Prepration Files#CredCode#	$TestStatus = "Passed"
AD Migration Prepration Files#CredCode#	
AD Migration Prepration Files#CredCode#}
AD Domain Summary Reporter#CredCode#$ThisString = "AD Domain, Summary Data"
AD Domain Summary Reporter#CredCode#Add-Content "$TestCSVFile" $ThisString
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode##Users Cannot Change Password CannotChangePassword
AD Domain Summary Reporter#CredCode##TrustedForDelegation
AD Domain Summary Reporter#CredCode##Password Expired PasswordExpired
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$DomSumFile = "$CurrentLoc\Data\DomSummary" + $CurForestName + ".DPC"
AD Domain Summary Reporter#CredCode#Remove-Item $DomSumFile -ErrorAction SilentlyContinue
AD Domain Summary Reporter#CredCode#$STR = "AD Domain, DCs, GCs, RODCs, OUs, Users, Servers, Workstations, GPOs, Groups, Local Groups, Universal Groups, Global Groups, Disabled Users, Disabled Computers, Stale Users, Stale Computer, Password Never Expires, Expired Accounts, Cannot Change Password, Trusted For Delegation, Password Expired"
AD Domain Summary Reporter#CredCode#Add-Content $DomSumFile $STR
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$DomOUSumFile = "$CurrentLoc\Data\DomOUSummary" + $CurForestName + ".DPC"
AD Domain Summary Reporter#CredCode#Remove-Item $DomOUSumFile -ErrorAction SilentlyContinue
AD Domain Summary Reporter#CredCode#$STR = "AD Domain, OU Name, OU DN, Users, Servers, Workstations, GPOs Linked, Groups, Local Groups, Universal Groups, Distribution Groups, Disabled Users, Disabled Computers, Stale Users, Stale Computer, Password Never Expires, Expired Accounts, Cannot Change Password, Trusted For Delegation, Password Expired"
AD Domain Summary Reporter#CredCode#Add-Content $DomOUSumFile $STR
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$DomGRPSumFile = "$CurrentLoc\Data\GroupSummary" + $CurForestName + ".DPC"
AD Domain Summary Reporter#CredCode#Remove-Item $DomGRPSumFile -ErrorAction SilentlyContinue
AD Domain Summary Reporter#CredCode#$STR = "AD Domain, Group Name, Group DN, Total Members"
AD Domain Summary Reporter#CredCode#Add-Content $DomGRPSumFile $STR
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$DomGPOSumFile = "$CurrentLoc\Data\NewGPOSummary" + $CurForestName + ".DPC"
AD Domain Summary Reporter#CredCode#Remove-Item $DomGPOSumFile -ErrorAction SilentlyContinue
AD Domain Summary Reporter#CredCode#$STR = "AD Domain, GPO Name, GPO Status, Last Modified"
AD Domain Summary Reporter#CredCode#Add-Content $DomGPOSumFile $STR
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$DomServerWorkSumFile = "$CurrentLoc\Data\NewServerWorkSummary" + $CurForestName + ".DPC"
AD Domain Summary Reporter#CredCode#Remove-Item $DomServerWorkSumFile -ErrorAction SilentlyContinue
AD Domain Summary Reporter#CredCode#$STR = "AD Domain, Name, DN, Operating System, Status"
AD Domain Summary Reporter#CredCode#Add-Content $DomServerWorkSumFile $STR
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$DomDCSiteSumFile = "$CurrentLoc\Data\NewDCSiteSummary" + $CurForestName + ".DPC"
AD Domain Summary Reporter#CredCode#Remove-Item $DomDCSiteSumFile -ErrorAction SilentlyContinue
AD Domain Summary Reporter#CredCode#$STR = "AD Site,DC,Domain,Global Cataloga?,RODC?,Operating System"
AD Domain Summary Reporter#CredCode#Add-Content $DomDCSiteSumFile $STR
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$RAll = Get-addomaincontroller -Credential $Creds -Filter * -Server $CurForestName | Select-Object HostName, Domain, IsGlobalCatalog, IsReadOnly, OperatingSystem, Site
AD Domain Summary Reporter#CredCode#foreach ($Item in $RAll)
AD Domain Summary Reporter#CredCode#{
AD Domain Summary Reporter#CredCode#	$STR = $Item.Site + "," + $Item.HostName + "," + $Item.Domain + "," + $Item.IsGlobalCatalog + "," + $Item.IsReadOnly + "," + $Item.OperatingSystem
AD Domain Summary Reporter#CredCode#	Add-Content $DomDCSiteSumFile $STR	
AD Domain Summary Reporter#CredCode#}
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$Error.Clear()
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$PermLog = "$CurrentLoc\Data\" + $CurForestName + "DomSummary.LOG"
AD Domain Summary Reporter#CredCode#Remove-Item $PermLog -ErrorAction SilentlyContinue
AD Domain Summary Reporter#CredCode#$STR = "Collecting Domain Summary..."
AD Domain Summary Reporter#CredCode#Add-Content $PermLog $STR
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#foreach ($DomName in Get-Content $GDomList)
AD Domain Summary Reporter#CredCode#{
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$ThisString = $DomName + ",Collected-Please use AD Summary Reporter"
AD Domain Summary Reporter#CredCode#	Add-Content "$TestCSVFile" $ThisString
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADComputer -Filter * -Server $DomName -Credential $Creds -Properties Name, OperatingSystem, DistinguishedName, Enabled
AD Domain Summary Reporter#CredCode#	ForEach ($ThisItem in $R)
AD Domain Summary Reporter#CredCode#	{
AD Domain Summary Reporter#CredCode#		$CompStatus = $ThisItem.Enabled
AD Domain Summary Reporter#CredCode#		$NameNow = $ThisItem.Name
AD Domain Summary Reporter#CredCode#		$OSName = $ThisItem.OperatingSystem
AD Domain Summary Reporter#CredCode#		$ThisDN = $ThisItem.DistinguishedName
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$ThisStr = $DomName + "," + $NameNow + "," + '"' + $ThisDN + '"' + "," + $OSName + "," + $CompStatus
AD Domain Summary Reporter#CredCode#		Add-Content "$DomServerWorkSumFile" $ThisStr
AD Domain Summary Reporter#CredCode#	}
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$AllGPODes = Invoke-Command -ComputerName $DomName -Script { param ($R1Now) Get-GPO -ALL -Domain $R1Now } -Credential $Creds -ArgumentList $DomName
AD Domain Summary Reporter#CredCode#	ForEach ($GPO in $AllGPODes)
AD Domain Summary Reporter#CredCode#	{		
AD Domain Summary Reporter#CredCode#		$GPOStatus = $GPO.GPOStatus
AD Domain Summary Reporter#CredCode#		$GPOLastModified = $GPO.ModificationTime
AD Domain Summary Reporter#CredCode#		$GPOName = $GPO.DisplayName
AD Domain Summary Reporter#CredCode#				
AD Domain Summary Reporter#CredCode#		$STR = $DomName + "," + $GPOName + "," + $GPOStatus + "," + $GPOLastModified
AD Domain Summary Reporter#CredCode#		Add-Content $DomGPOSumFile $STR				
AD Domain Summary Reporter#CredCode#	}	
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$Error.Clear()
AD Domain Summary Reporter#CredCode#	$SGsNoMemCount = Get-ADGroup -Filter * -properties * -Server $DomName -ResultPageSize 2000 -resultSetSize $null -Credential $Creds	
AD Domain Summary Reporter#CredCode#	ForEach ($ThisGroupNow in $SGsNoMemCount)
AD Domain Summary Reporter#CredCode#	{
AD Domain Summary Reporter#CredCode#		$ThisGroupName = $ThisGroupNow.DistinguishedName
AD Domain Summary Reporter#CredCode#		$RemovedCommaGRPName = $ThisGroupNow.Name.replace(",", " ")
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$RValue = (Get-ADGroupMember $ThisGroupName -Server $DomName -Credential $Creds).count
AD Domain Summary Reporter#CredCode#		IF ($RValue -eq 0)
AD Domain Summary Reporter#CredCode#		{
AD Domain Summary Reporter#CredCode#			$TotEmptyGroups++
AD Domain Summary Reporter#CredCode#		}
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$ThisStr = $DomName + "," + $RemovedCommaGRPName + "," + '"' + $ThisGroupName + '"' + "," + $RValue.ToString()
AD Domain Summary Reporter#CredCode#		Add-Content "$DomGRPSumFile" $ThisStr		
AD Domain Summary Reporter#CredCode#	}
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-addomaincontroller -Filter * -Server $DomName -Credential $Creds
AD Domain Summary Reporter#CredCode#	$AllDCs = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-addomaincontroller -Server $DomName -Filter { (IsGlobalCatalog -eq $True) } -Credential $Creds
AD Domain Summary Reporter#CredCode#	$AllGCs = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-addomaincontroller -Server $DomName -Filter { (isreadonly -eq $True) } -Credential $Creds
AD Domain Summary Reporter#CredCode#	$AllRODCs = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$AllOUs = Get-ADOrganizationalUnit -Filter * -Server $DomName -Credential $Creds
AD Domain Summary Reporter#CredCode#	$AllOusCount = $AllOUs.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADUser -Filter * -Server $DomName -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName
AD Domain Summary Reporter#CredCode#	$AllUsersCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADUser -Server $DomName -Filter { (CannotChangePassword -eq $false) } -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName, CannotChangePassword
AD Domain Summary Reporter#CredCode#	$AllUsersCannotChangePass = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADUser -Server $DomName -Filter { (PasswordExpired -eq $true) } -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName, PasswordExpired
AD Domain Summary Reporter#CredCode#	$AllUsersPassExpired = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADUser -Server $DomName -Filter { (TrustedForDelegation -eq $true) } -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName, TrustedForDelegation
AD Domain Summary Reporter#CredCode#	$AllUsersDelTrusted = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADGroup -Filter * -Server $DomName -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName
AD Domain Summary Reporter#CredCode#	$AllGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADGroup -Filter { (GroupScope -eq "Universal") } -Server $DomName -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName, GroupScope
AD Domain Summary Reporter#CredCode#	$AllUniGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADGroup -Filter { (GroupScope -eq "DomainLocal") } -Server $DomName -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName, GroupScope
AD Domain Summary Reporter#CredCode#	$AllDomainLocalGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADGroup -Filter { (GroupScope -eq "Global") } -Server $DomName -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName, GroupScope
AD Domain Summary Reporter#CredCode#	$AllGlobalGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$TotCompsCount = 0
AD Domain Summary Reporter#CredCode#	$TotServersCount = 0
AD Domain Summary Reporter#CredCode#	$R = Get-ADComputer -Filter * -Server $DomName -Credential $Creds -Properties Name, OperatingSystem
AD Domain Summary Reporter#CredCode#	ForEach ($ThisItem in $R)
AD Domain Summary Reporter#CredCode#	{
AD Domain Summary Reporter#CredCode#		IF ($ThisItem.OperatingSystem -like "*Server*")
AD Domain Summary Reporter#CredCode#		{
AD Domain Summary Reporter#CredCode#			$TotServersCount++
AD Domain Summary Reporter#CredCode#		}
AD Domain Summary Reporter#CredCode#		else
AD Domain Summary Reporter#CredCode#		{
AD Domain Summary Reporter#CredCode#			$TotCompsCount++
AD Domain Summary Reporter#CredCode#		}
AD Domain Summary Reporter#CredCode#	}
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$AllGPOs = Invoke-Command -ComputerName $DomName -Script { param ($R1Now) Get-GPO -ALL -Server $R1Now } -Credential $Creds -ArgumentList $DomName
AD Domain Summary Reporter#CredCode#	$AllGPOsCount = $AllGPOs.DisplayName.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$DisabledUsersCount = 0
AD Domain Summary Reporter#CredCode#	$CompsDisabledCount = 0
AD Domain Summary Reporter#CredCode#	$CompsInactiveCount = 0
AD Domain Summary Reporter#CredCode#	$UsersInactiveAccountListCount = 0
AD Domain Summary Reporter#CredCode#	$UsersPassNeverExpireListCount = 0
AD Domain Summary Reporter#CredCode#	$TotUsersAccountExpiredCount = 0
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Search-ADAccount -Server $DomName -Credential $Creds -AccountExpired -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#	$TotUsersAccountExpiredCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Search-ADAccount -Server $DomName -Credential $Creds -AccountDisabled -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#	$DisabledUsersCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADComputer -Filter { (enabled -eq $false) } -Credential $Creds -ResultPageSize 2000 -resultSetSize $null -Server $DomName -Properties Name, OperatingSystem, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#	$CompsDisabledCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$DaysInactive = 90
AD Domain Summary Reporter#CredCode#	$time = (Get-Date).Adddays(- ($DaysInactive))
AD Domain Summary Reporter#CredCode#	$R = Get-ADComputer -Filter { LastLogonTimeStamp -lt $time } -Credential $Creds -ResultPageSize 2000 -resultSetSize $null -Server $DomName -Properties Name, OperatingSystem, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#	$CompsInactiveCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Search-ADAccount -Server $DomName -Credential $Creds -AccountInactive -TimeSpan 90.00:00:00 -ResultPageSize 2000 -resultSetSize $null | ?{ $_.enabled -eq $true } | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#	$UsersInactiveAccountListCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Search-ADAccount -Server $DomName -Credential $Creds -PasswordNeverExpires -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#	$UsersPassNeverExpireListCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$RemAttr = $DisabledUsersCount.ToString() + "," + $CompsDisabledCount.ToString() + "," + $CompsInactiveCount.ToString() + "," + $UsersInactiveAccountListCount.ToString() + "," + $UsersPassNeverExpireListCount.ToString() + "," + $TotUsersAccountExpiredCount.ToString() + "," + $AllUsersCannotChangePass.ToString() + "," + $AllUsersDelTrusted.ToString() + "," + $AllUsersPassExpired.ToString()
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$STR = $DomName + "," + $AllDCs.ToString() + "," + $AllGCs.ToString() + "," + $AllRODCs.ToString() + "," + $AllOusCount.ToString() + "," + $AllUsersCount.ToString() + "," + $TotServersCount.ToString() + "," + $TotCompsCount.ToString() + "," + $AllGPOsCount.ToString() + "," + $AllGroupsCount.ToString() + "," + $AllDomainLocalGroupsCount.ToString() + "," + $AllUniGroupsCount.ToString() + "," + $AllGlobalGroupsCount.ToString() + "," + $RemAttr
AD Domain Summary Reporter#CredCode#	Add-Content $DomSumFile $STR
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	ForEach ($OU in $AllOUs)
AD Domain Summary Reporter#CredCode#	{
AD Domain Summary Reporter#CredCode#		$OUDN = $OU.DistinguishedName
AD Domain Summary Reporter#CredCode#		$OUName = $OU.Name
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADUser -Filter * -Server $DomName -SearchBase $OUDN -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName
AD Domain Summary Reporter#CredCode#		$AllUsersCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADUser -SearchBase $OUDN -Server $DomName -Filter { (CannotChangePassword -eq $false) } -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName, CannotChangePassword
AD Domain Summary Reporter#CredCode#		$AllUsersCannotChangePass = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADUser -SearchBase $OUDN -Server $DomName -Filter { (PasswordExpired -eq $true) } -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName, PasswordExpired
AD Domain Summary Reporter#CredCode#		$AllUsersPassExpired = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADUser -SearchBase $OUDN -Server $DomName -Filter { (TrustedForDelegation -eq $true) } -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName, TrustedForDelegation
AD Domain Summary Reporter#CredCode#		$AllUsersDelTrusted = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADGroup -Filter * -Server $DomName -SearchBase $OUDN -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName
AD Domain Summary Reporter#CredCode#		$AllGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADGroup -Filter { (GroupScope -eq "Universal") } -Server $DomName -SearchBase $OUDN -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName, GroupScope
AD Domain Summary Reporter#CredCode#		$AllUniGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADGroup -Filter { (GroupScope -eq "DomainLocal") } -Server $DomName -SearchBase $OUDN -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName, GroupScope
AD Domain Summary Reporter#CredCode#		$AllDomainLocalGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADGroup -Filter { (GroupScope -eq "Global") } -Server $DomName -SearchBase $OUDN -Credential $Creds | Select-object DistinguishedName, Name, UserPrincipalName, GroupScope
AD Domain Summary Reporter#CredCode#		$AllGlobalGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$TotCompsCount = 0
AD Domain Summary Reporter#CredCode#		$TotServersCount = 0
AD Domain Summary Reporter#CredCode#		$R = Get-ADComputer -Filter * -Server $DomName -SearchBase $OUDN -Properties Name, OperatingSystem -Credential $Creds
AD Domain Summary Reporter#CredCode#		ForEach ($ThisItem in $R)
AD Domain Summary Reporter#CredCode#		{
AD Domain Summary Reporter#CredCode#			IF ($ThisItem.OperatingSystem -like "*Server*")
AD Domain Summary Reporter#CredCode#			{
AD Domain Summary Reporter#CredCode#				$TotServersCount++
AD Domain Summary Reporter#CredCode#			}
AD Domain Summary Reporter#CredCode#			else
AD Domain Summary Reporter#CredCode#			{
AD Domain Summary Reporter#CredCode#				$TotCompsCount++
AD Domain Summary Reporter#CredCode#			}
AD Domain Summary Reporter#CredCode#		}
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		#Get-ADOrganizationalUnit -Identity "OU=NewOUNow,DC=ironman,DC=com"
AD Domain Summary Reporter#CredCode#		$AllGPOInch = Get-ADOrganizationalUnit -Identity $OUDN -Credential $Creds | Get-GPInheritance
AD Domain Summary Reporter#CredCode#		$R = $AllGPOInch.GpoLinks
AD Domain Summary Reporter#CredCode#		$AllGPOsCount = $R.DisplayName.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$DisabledUsersCount = 0
AD Domain Summary Reporter#CredCode#		$CompsDisabledCount = 0
AD Domain Summary Reporter#CredCode#		$CompsInactiveCount = 0
AD Domain Summary Reporter#CredCode#		$UsersInactiveAccountListCount = 0
AD Domain Summary Reporter#CredCode#		$UsersPassNeverExpireListCount = 0
AD Domain Summary Reporter#CredCode#		$TotUsersAccountExpiredCount = 0
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Search-ADAccount -Server $DomName -Credential $Creds -AccountExpired -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#		$TotUsersAccountExpiredCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Search-ADAccount -Server $DomName -Credential $Creds -SearchBase $OUDN -AccountDisabled -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#		$DisabledUsersCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADComputer -SearchBase $OUDN -Credential $Creds -Filter { (enabled -eq $false) } -ResultPageSize 2000 -resultSetSize $null -Server $DomName -Properties Name, OperatingSystem, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#		$CompsDisabledCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$DaysInactive = 90
AD Domain Summary Reporter#CredCode#		$time = (Get-Date).Adddays(- ($DaysInactive))
AD Domain Summary Reporter#CredCode#		$R = Get-ADComputer -SearchBase $OUDN -Credential $Creds -Filter { LastLogonTimeStamp -lt $time } -ResultPageSize 2000 -resultSetSize $null -Server $DomName -Properties Name, OperatingSystem, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#		$CompsInactiveCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Search-ADAccount -SearchBase $OUDN -Credential $Creds -Server $DomName -AccountInactive -TimeSpan 90.00:00:00 -ResultPageSize 2000 -resultSetSize $null | ?{ $_.enabled -eq $true } | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#		$UsersInactiveAccountListCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Search-ADAccount -SearchBase $OUDN -Credential $Creds -Server $DomName -PasswordNeverExpires -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#		$UsersPassNeverExpireListCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$RemAttr = $DisabledUsersCount.ToString() + "," + $CompsDisabledCount.ToString() + "," + $CompsInactiveCount.ToString() + "," + $UsersInactiveAccountListCount.ToString() + "," + $UsersPassNeverExpireListCount.ToString() + "," + $TotUsersAccountExpiredCount.ToString() + "," + $AllUsersCannotChangePass.ToString() + "," + $AllUsersDelTrusted.ToString() + "," + $AllUsersPassExpired.ToString()
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$STR = $DomName + "," + $OUName + "," + '"' + $OUDN + '"' + "," + $AllOusCount.ToString() + "," + $AllUsersCount.ToString() + "," + $TotServersCount.ToString() + "," + $TotCompsCount.ToString() + "," + $AllGPOsCount + "," + $AllGroupsCount + "," + $AllDomainLocalGroupsCount.ToString() + "," + $AllUniGroupsCount.ToString() + "," + $AllGlobalGroupsCount.ToString() + "," + $RemAttr
AD Domain Summary Reporter#CredCode#		Add-Content $DomOUSumFile $STR
AD Domain Summary Reporter#CredCode#	}
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#}
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$AnyGap = "No"
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#IF ($AnyGap -eq "No")
AD Domain Summary Reporter#CredCode#{
AD Domain Summary Reporter#CredCode#	$TestText = "There are no errors found in Event Logs of Domain Controllers. $OthText"
AD Domain Summary Reporter#CredCode#	$SumVal = ""
AD Domain Summary Reporter#CredCode#	$TestStatus = "Passed"
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	IF ($AnyOneOk -eq "No")
AD Domain Summary Reporter#CredCode#	{
AD Domain Summary Reporter#CredCode#		$TestText = "Error Executing Dynamic Pack."
AD Domain Summary Reporter#CredCode#		$SumVal = ""
AD Domain Summary Reporter#CredCode#		$TestStatus = "Completed with Errors."
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#	}
AD Domain Summary Reporter#CredCode#}
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$STR = $ADTestName + "," + $TestStartTime + "," + $TestStatus + "," + $SumVal + "," + $TestText
AD Domain Summary Reporter#CredCode#$ThisString = "AD Domain, Summary Data"
AD Domain Summary Reporter#CredCode#Add-Content "$TestCSVFile" $ThisString
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode##Users Cannot Change Password CannotChangePassword
AD Domain Summary Reporter#CredCode##TrustedForDelegation
AD Domain Summary Reporter#CredCode##Password Expired PasswordExpired
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$DomSumFile = "$CurrentLoc\Data\DomSummary" + $CurForestName + ".DPC"
AD Domain Summary Reporter#CredCode#Remove-Item $DomSumFile -ErrorAction SilentlyContinue
AD Domain Summary Reporter#CredCode#$STR = "AD Domain, DCs, GCs, RODCs, OUs, Users, Servers, Workstations, GPOs, Groups, Local Groups, Universal Groups, Global Groups, Disabled Users, Disabled Computers, Stale Users, Stale Computer, Password Never Expires, Expired Accounts, Cannot Change Password, Trusted For Delegation, Password Expired"
AD Domain Summary Reporter#CredCode#Add-Content $DomSumFile $STR
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$DomOUSumFile = "$CurrentLoc\Data\DomOUSummary" + $CurForestName + ".DPC"
AD Domain Summary Reporter#CredCode#Remove-Item $DomOUSumFile -ErrorAction SilentlyContinue
AD Domain Summary Reporter#CredCode#$STR = "AD Domain, OU Name, OU DN, Users, Servers, Workstations, GPOs Linked, Groups, Local Groups, Universal Groups, Distribution Groups, Disabled Users, Disabled Computers, Stale Users, Stale Computer, Password Never Expires, Expired Accounts, Cannot Change Password, Trusted For Delegation, Password Expired"
AD Domain Summary Reporter#CredCode#Add-Content $DomOUSumFile $STR
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$DomGRPSumFile = "$CurrentLoc\Data\GroupSummary" + $CurForestName + ".DPC"
AD Domain Summary Reporter#CredCode#Remove-Item $DomGRPSumFile -ErrorAction SilentlyContinue
AD Domain Summary Reporter#CredCode#$STR = "AD Domain, Group Name, Group DN, Total Members"
AD Domain Summary Reporter#CredCode#Add-Content $DomGRPSumFile $STR
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$DomGPOSumFile = "$CurrentLoc\Data\NewGPOSummary" + $CurForestName + ".DPC"
AD Domain Summary Reporter#CredCode#Remove-Item $DomGPOSumFile -ErrorAction SilentlyContinue
AD Domain Summary Reporter#CredCode#$STR = "AD Domain, GPO Name, GPO Status, Last Modified"
AD Domain Summary Reporter#CredCode#Add-Content $DomGPOSumFile $STR
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$DomServerWorkSumFile = "$CurrentLoc\Data\NewServerWorkSummary" + $CurForestName + ".DPC"
AD Domain Summary Reporter#CredCode#Remove-Item $DomServerWorkSumFile -ErrorAction SilentlyContinue
AD Domain Summary Reporter#CredCode#$STR = "AD Domain, Name, DN, Operating System, Status"
AD Domain Summary Reporter#CredCode#Add-Content $DomServerWorkSumFile $STR
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$DomDCSiteSumFile = "$CurrentLoc\Data\NewDCSiteSummary" + $CurForestName + ".DPC"
AD Domain Summary Reporter#CredCode#Remove-Item $DomDCSiteSumFile -ErrorAction SilentlyContinue
AD Domain Summary Reporter#CredCode#$STR = "AD Site,DC,Domain,Global Cataloga?,RODC?,Operating System"
AD Domain Summary Reporter#CredCode#Add-Content $DomDCSiteSumFile $STR
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$RAll = Get-addomaincontroller  -Filter * -Server $CurForestName | Select-Object HostName, Domain, IsGlobalCatalog, IsReadOnly, OperatingSystem, Site
AD Domain Summary Reporter#CredCode#foreach ($Item in $RAll)
AD Domain Summary Reporter#CredCode#{
AD Domain Summary Reporter#CredCode#	$STR = $Item.Site + "," + $Item.HostName + "," + $Item.Domain + "," + $Item.IsGlobalCatalog + "," + $Item.IsReadOnly + "," + $Item.OperatingSystem
AD Domain Summary Reporter#CredCode#	Add-Content $DomDCSiteSumFile $STR	
AD Domain Summary Reporter#CredCode#}
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$Error.Clear()
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$PermLog = "$CurrentLoc\Data\" + $CurForestName + "DomSummary.LOG"
AD Domain Summary Reporter#CredCode#Remove-Item $PermLog -ErrorAction SilentlyContinue
AD Domain Summary Reporter#CredCode#$STR = "Collecting Domain Summary..."
AD Domain Summary Reporter#CredCode#Add-Content $PermLog $STR
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#foreach ($DomName in Get-Content $GDomList)
AD Domain Summary Reporter#CredCode#{
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$ThisString = $DomName + ",Collected-Please use AD Summary Reporter"
AD Domain Summary Reporter#CredCode#	Add-Content "$TestCSVFile" $ThisString
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADComputer -Filter * -Server $DomName  -Properties Name, OperatingSystem, DistinguishedName, Enabled
AD Domain Summary Reporter#CredCode#	ForEach ($ThisItem in $R)
AD Domain Summary Reporter#CredCode#	{
AD Domain Summary Reporter#CredCode#		$CompStatus = $ThisItem.Enabled
AD Domain Summary Reporter#CredCode#		$NameNow = $ThisItem.Name
AD Domain Summary Reporter#CredCode#		$OSName = $ThisItem.OperatingSystem
AD Domain Summary Reporter#CredCode#		$ThisDN = $ThisItem.DistinguishedName
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$ThisStr = $DomName + "," + $NameNow + "," + '"' + $ThisDN + '"' + "," + $OSName + "," + $CompStatus
AD Domain Summary Reporter#CredCode#		Add-Content "$DomServerWorkSumFile" $ThisStr
AD Domain Summary Reporter#CredCode#	}
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$AllGPODes = Get-GPO -ALL -Domain $DomName
AD Domain Summary Reporter#CredCode#	ForEach ($GPO in $AllGPODes)
AD Domain Summary Reporter#CredCode#	{		
AD Domain Summary Reporter#CredCode#		$GPOStatus = $GPO.GPOStatus
AD Domain Summary Reporter#CredCode#		$GPOLastModified = $GPO.ModificationTime
AD Domain Summary Reporter#CredCode#		$GPOName = $GPO.DisplayName
AD Domain Summary Reporter#CredCode#				
AD Domain Summary Reporter#CredCode#		$STR = $DomName + "," + $GPOName + "," + $GPOStatus + "," + $GPOLastModified
AD Domain Summary Reporter#CredCode#		Add-Content $DomGPOSumFile $STR				
AD Domain Summary Reporter#CredCode#	}	
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$Error.Clear()
AD Domain Summary Reporter#CredCode#	$SGsNoMemCount = Get-ADGroup -Filter * -properties * -Server $DomName -ResultPageSize 2000 -resultSetSize $null 	
AD Domain Summary Reporter#CredCode#	ForEach ($ThisGroupNow in $SGsNoMemCount)
AD Domain Summary Reporter#CredCode#	{
AD Domain Summary Reporter#CredCode#		$ThisGroupName = $ThisGroupNow.DistinguishedName
AD Domain Summary Reporter#CredCode#		$RemovedCommaGRPName = $ThisGroupNow.Name.replace(",", " ")
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$RValue = (Get-ADGroupMember $ThisGroupName -Server $DomName ).count
AD Domain Summary Reporter#CredCode#		IF ($RValue -eq 0)
AD Domain Summary Reporter#CredCode#		{
AD Domain Summary Reporter#CredCode#			$TotEmptyGroups++
AD Domain Summary Reporter#CredCode#		}
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$ThisStr = $DomName + "," + $RemovedCommaGRPName + "," + '"' + $ThisGroupName + '"' + "," + $RValue.ToString()
AD Domain Summary Reporter#CredCode#		Add-Content "$DomGRPSumFile" $ThisStr		
AD Domain Summary Reporter#CredCode#	}
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-addomaincontroller -Filter * -Server $DomName 
AD Domain Summary Reporter#CredCode#	$AllDCs = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-addomaincontroller -Server $DomName -Filter { (IsGlobalCatalog -eq $True) } 
AD Domain Summary Reporter#CredCode#	$AllGCs = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-addomaincontroller -Server $DomName -Filter { (isreadonly -eq $True) } 
AD Domain Summary Reporter#CredCode#	$AllRODCs = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$AllOUs = Get-ADOrganizationalUnit -Filter * -Server $DomName 
AD Domain Summary Reporter#CredCode#	$AllOusCount = $AllOUs.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADUser -Filter * -Server $DomName  | Select-object DistinguishedName, Name, UserPrincipalName
AD Domain Summary Reporter#CredCode#	$AllUsersCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADUser -Server $DomName -Filter { (CannotChangePassword -eq $false) }  | Select-object DistinguishedName, Name, UserPrincipalName, CannotChangePassword
AD Domain Summary Reporter#CredCode#	$AllUsersCannotChangePass = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADUser -Server $DomName -Filter { (PasswordExpired -eq $true) }  | Select-object DistinguishedName, Name, UserPrincipalName, PasswordExpired
AD Domain Summary Reporter#CredCode#	$AllUsersPassExpired = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADUser -Server $DomName -Filter { (TrustedForDelegation -eq $true) }  | Select-object DistinguishedName, Name, UserPrincipalName, TrustedForDelegation
AD Domain Summary Reporter#CredCode#	$AllUsersDelTrusted = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADGroup -Filter * -Server $DomName  | Select-object DistinguishedName, Name, UserPrincipalName
AD Domain Summary Reporter#CredCode#	$AllGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADGroup -Filter { (GroupScope -eq "Universal") } -Server $DomName  | Select-object DistinguishedName, Name, UserPrincipalName, GroupScope
AD Domain Summary Reporter#CredCode#	$AllUniGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADGroup -Filter { (GroupScope -eq "DomainLocal") } -Server $DomName  | Select-object DistinguishedName, Name, UserPrincipalName, GroupScope
AD Domain Summary Reporter#CredCode#	$AllDomainLocalGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADGroup -Filter { (GroupScope -eq "Global") } -Server $DomName  | Select-object DistinguishedName, Name, UserPrincipalName, GroupScope
AD Domain Summary Reporter#CredCode#	$AllGlobalGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$TotCompsCount = 0
AD Domain Summary Reporter#CredCode#	$TotServersCount = 0
AD Domain Summary Reporter#CredCode#	$R = Get-ADComputer -Filter * -Server $DomName  -Properties Name, OperatingSystem
AD Domain Summary Reporter#CredCode#	ForEach ($ThisItem in $R)
AD Domain Summary Reporter#CredCode#	{
AD Domain Summary Reporter#CredCode#		IF ($ThisItem.OperatingSystem -like "*Server*")
AD Domain Summary Reporter#CredCode#		{
AD Domain Summary Reporter#CredCode#			$TotServersCount++
AD Domain Summary Reporter#CredCode#		}
AD Domain Summary Reporter#CredCode#		else
AD Domain Summary Reporter#CredCode#		{
AD Domain Summary Reporter#CredCode#			$TotCompsCount++
AD Domain Summary Reporter#CredCode#		}
AD Domain Summary Reporter#CredCode#	}
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$AllGPOs = Get-GPO -ALL -Server $ThisDomain
AD Domain Summary Reporter#CredCode#	$AllGPOsCount = $AllGPOs.DisplayName.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$DisabledUsersCount = 0
AD Domain Summary Reporter#CredCode#	$CompsDisabledCount = 0
AD Domain Summary Reporter#CredCode#	$CompsInactiveCount = 0
AD Domain Summary Reporter#CredCode#	$UsersInactiveAccountListCount = 0
AD Domain Summary Reporter#CredCode#	$UsersPassNeverExpireListCount = 0
AD Domain Summary Reporter#CredCode#	$TotUsersAccountExpiredCount = 0
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Search-ADAccount -Server $DomName  -AccountExpired -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#	$TotUsersAccountExpiredCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Search-ADAccount -Server $DomName  -AccountDisabled -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#	$DisabledUsersCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Get-ADComputer -Filter { (enabled -eq $false) }  -ResultPageSize 2000 -resultSetSize $null -Server $DomName -Properties Name, OperatingSystem, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#	$CompsDisabledCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$DaysInactive = 90
AD Domain Summary Reporter#CredCode#	$time = (Get-Date).Adddays(- ($DaysInactive))
AD Domain Summary Reporter#CredCode#	$R = Get-ADComputer -Filter { LastLogonTimeStamp -lt $time }  -ResultPageSize 2000 -resultSetSize $null -Server $DomName -Properties Name, OperatingSystem, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#	$CompsInactiveCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Search-ADAccount -Server $DomName  -AccountInactive -TimeSpan 90.00:00:00 -ResultPageSize 2000 -resultSetSize $null | ?{ $_.enabled -eq $true } | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#	$UsersInactiveAccountListCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$R = Search-ADAccount -Server $DomName  -PasswordNeverExpires -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#	$UsersPassNeverExpireListCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$RemAttr = $DisabledUsersCount.ToString() + "," + $CompsDisabledCount.ToString() + "," + $CompsInactiveCount.ToString() + "," + $UsersInactiveAccountListCount.ToString() + "," + $UsersPassNeverExpireListCount.ToString() + "," + $TotUsersAccountExpiredCount.ToString() + "," + $AllUsersCannotChangePass.ToString() + "," + $AllUsersDelTrusted.ToString() + "," + $AllUsersPassExpired.ToString()
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	$STR = $DomName + "," + $AllDCs.ToString() + "," + $AllGCs.ToString() + "," + $AllRODCs.ToString() + "," + $AllOusCount.ToString() + "," + $AllUsersCount.ToString() + "," + $TotServersCount.ToString() + "," + $TotCompsCount.ToString() + "," + $AllGPOsCount.ToString() + "," + $AllGroupsCount.ToString() + "," + $AllDomainLocalGroupsCount.ToString() + "," + $AllUniGroupsCount.ToString() + "," + $AllGlobalGroupsCount.ToString() + "," + $RemAttr
AD Domain Summary Reporter#CredCode#	Add-Content $DomSumFile $STR
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	ForEach ($OU in $AllOUs)
AD Domain Summary Reporter#CredCode#	{
AD Domain Summary Reporter#CredCode#		$OUDN = $OU.DistinguishedName
AD Domain Summary Reporter#CredCode#		$OUName = $OU.Name
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADUser -Filter * -Server $DomName -SearchBase $OUDN  | Select-object DistinguishedName, Name, UserPrincipalName
AD Domain Summary Reporter#CredCode#		$AllUsersCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADUser -SearchBase $OUDN -Server $DomName -Filter { (CannotChangePassword -eq $false) }  | Select-object DistinguishedName, Name, UserPrincipalName, CannotChangePassword
AD Domain Summary Reporter#CredCode#		$AllUsersCannotChangePass = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADUser -SearchBase $OUDN -Server $DomName -Filter { (PasswordExpired -eq $true) }  | Select-object DistinguishedName, Name, UserPrincipalName, PasswordExpired
AD Domain Summary Reporter#CredCode#		$AllUsersPassExpired = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADUser -SearchBase $OUDN -Server $DomName -Filter { (TrustedForDelegation -eq $true) }  | Select-object DistinguishedName, Name, UserPrincipalName, TrustedForDelegation
AD Domain Summary Reporter#CredCode#		$AllUsersDelTrusted = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADGroup -Filter * -Server $DomName -SearchBase $OUDN  | Select-object DistinguishedName, Name, UserPrincipalName
AD Domain Summary Reporter#CredCode#		$AllGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADGroup -Filter { (GroupScope -eq "Universal") } -Server $DomName -SearchBase $OUDN  | Select-object DistinguishedName, Name, UserPrincipalName, GroupScope
AD Domain Summary Reporter#CredCode#		$AllUniGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADGroup -Filter { (GroupScope -eq "DomainLocal") } -Server $DomName -SearchBase $OUDN  | Select-object DistinguishedName, Name, UserPrincipalName, GroupScope
AD Domain Summary Reporter#CredCode#		$AllDomainLocalGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADGroup -Filter { (GroupScope -eq "Global") } -Server $DomName -SearchBase $OUDN  | Select-object DistinguishedName, Name, UserPrincipalName, GroupScope
AD Domain Summary Reporter#CredCode#		$AllGlobalGroupsCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$TotCompsCount = 0
AD Domain Summary Reporter#CredCode#		$TotServersCount = 0
AD Domain Summary Reporter#CredCode#		$R = Get-ADComputer -Filter * -Server $DomName -SearchBase $OUDN -Properties Name, OperatingSystem 
AD Domain Summary Reporter#CredCode#		ForEach ($ThisItem in $R)
AD Domain Summary Reporter#CredCode#		{
AD Domain Summary Reporter#CredCode#			IF ($ThisItem.OperatingSystem -like "*Server*")
AD Domain Summary Reporter#CredCode#			{
AD Domain Summary Reporter#CredCode#				$TotServersCount++
AD Domain Summary Reporter#CredCode#			}
AD Domain Summary Reporter#CredCode#			else
AD Domain Summary Reporter#CredCode#			{
AD Domain Summary Reporter#CredCode#				$TotCompsCount++
AD Domain Summary Reporter#CredCode#			}
AD Domain Summary Reporter#CredCode#		}
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		#Get-ADOrganizationalUnit -Identity "OU=NewOUNow,DC=ironman,DC=com"
AD Domain Summary Reporter#CredCode#		$AllGPOInch = Get-ADOrganizationalUnit -Identity $OUDN | Get-GPInheritance
AD Domain Summary Reporter#CredCode#		$R = $AllGPOInch.GpoLinks
AD Domain Summary Reporter#CredCode#		$AllGPOsCount = $R.DisplayName.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$DisabledUsersCount = 0
AD Domain Summary Reporter#CredCode#		$CompsDisabledCount = 0
AD Domain Summary Reporter#CredCode#		$CompsInactiveCount = 0
AD Domain Summary Reporter#CredCode#		$UsersInactiveAccountListCount = 0
AD Domain Summary Reporter#CredCode#		$UsersPassNeverExpireListCount = 0
AD Domain Summary Reporter#CredCode#		$TotUsersAccountExpiredCount = 0
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Search-ADAccount -Server $DomName  -AccountExpired -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#		$TotUsersAccountExpiredCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Search-ADAccount -Server $DomName  -SearchBase $OUDN -AccountDisabled -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#		$DisabledUsersCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Get-ADComputer -SearchBase $OUDN  -Filter { (enabled -eq $false) } -ResultPageSize 2000 -resultSetSize $null -Server $DomName -Properties Name, OperatingSystem, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#		$CompsDisabledCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$DaysInactive = 90
AD Domain Summary Reporter#CredCode#		$time = (Get-Date).Adddays(- ($DaysInactive))
AD Domain Summary Reporter#CredCode#		$R = Get-ADComputer -SearchBase $OUDN  -Filter { LastLogonTimeStamp -lt $time } -ResultPageSize 2000 -resultSetSize $null -Server $DomName -Properties Name, OperatingSystem, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#		$CompsInactiveCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Search-ADAccount -SearchBase $OUDN  -Server $DomName -AccountInactive -TimeSpan 90.00:00:00 -ResultPageSize 2000 -resultSetSize $null | ?{ $_.enabled -eq $true } | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#		$UsersInactiveAccountListCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$R = Search-ADAccount -SearchBase $OUDN  -Server $DomName -PasswordNeverExpires -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
AD Domain Summary Reporter#CredCode#		$UsersPassNeverExpireListCount = $R.Name.Count
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$RemAttr = $DisabledUsersCount.ToString() + "," + $CompsDisabledCount.ToString() + "," + $CompsInactiveCount.ToString() + "," + $UsersInactiveAccountListCount.ToString() + "," + $UsersPassNeverExpireListCount.ToString() + "," + $TotUsersAccountExpiredCount.ToString() + "," + $AllUsersCannotChangePass.ToString() + "," + $AllUsersDelTrusted.ToString() + "," + $AllUsersPassExpired.ToString()
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#		$STR = $DomName + "," + $OUName + "," + '"' + $OUDN + '"' + "," + $AllOusCount.ToString() + "," + $AllUsersCount.ToString() + "," + $TotServersCount.ToString() + "," + $TotCompsCount.ToString() + "," + $AllGPOsCount + "," + $AllGroupsCount + "," + $AllDomainLocalGroupsCount.ToString() + "," + $AllUniGroupsCount.ToString() + "," + $AllGlobalGroupsCount.ToString() + "," + $RemAttr
AD Domain Summary Reporter#CredCode#		Add-Content $DomOUSumFile $STR
AD Domain Summary Reporter#CredCode#	}
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#}
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$AnyGap = "No"
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#IF ($AnyGap -eq "No")
AD Domain Summary Reporter#CredCode#{
AD Domain Summary Reporter#CredCode#	$TestText = "There are no errors found in Event Logs of Domain Controllers. $OthText"
AD Domain Summary Reporter#CredCode#	$SumVal = ""
AD Domain Summary Reporter#CredCode#	$TestStatus = "Passed"
AD Domain Summary Reporter#CredCode#	
AD Domain Summary Reporter#CredCode#	IF ($AnyOneOk -eq "No")
AD Domain Summary Reporter#CredCode#	{
AD Domain Summary Reporter#CredCode#		$TestText = "Error Executing Dynamic Pack."
AD Domain Summary Reporter#CredCode#		$SumVal = ""
AD Domain Summary Reporter#CredCode#		$TestStatus = "Completed with Errors."
AD Domain Summary Reporter#CredCode#		
AD Domain Summary Reporter#CredCode#	}
AD Domain Summary Reporter#CredCode#}
AD Domain Summary Reporter#CredCode#
AD Domain Summary Reporter#CredCode#$STR = $ADTestName + "," + $TestStartTime + "," + $TestStatus + "," + $SumVal + "," + $TestText
Get DHCP Server Server Options#CredCode#$ThisString = "DHCP Server, Option ID, Name, Type, Value, Vendor Class, User Class, Policy Name"
Get DHCP Server Server Options#CredCode#Add-Content "$TestCSVFile" $ThisString
Get DHCP Server Server Options#CredCode#
Get DHCP Server Server Options#CredCode#Import-Module DHCPServer
Get DHCP Server Server Options#CredCode#
Get DHCP Server Server Options#CredCode#$AnyGap = "No"
Get DHCP Server Server Options#CredCode#
Get DHCP Server Server Options#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
Get DHCP Server Server Options#CredCode#{
Get DHCP Server Server Options#CredCode#	$ThisServerNow = $Server.Instances
Get DHCP Server Server Options#CredCode#	
Get DHCP Server Server Options#CredCode#	$Error.Clear()
Get DHCP Server Server Options#CredCode#	$results = Get-DhcpServerv4OptionValue -ComputerName $ThisServerNow
Get DHCP Server Server Options#CredCode#	IF ($Error.Count -eq 0)
Get DHCP Server Server Options#CredCode#	{
Get DHCP Server Server Options#CredCode#		ForEach ($EachItem in $Results)
Get DHCP Server Server Options#CredCode#		{
Get DHCP Server Server Options#CredCode#			$STR = $ThisServerNow + "," + $EachItem.OptionID + "," + $EachItem.Name + "," + $EachItem.Type + "," + $EachItem.Value + "," + $EachItem.VendorClass + "," + $EachItem.UserClass + "," + $EachItem.PolicyName			
Get DHCP Server Server Options#CredCode#			Add-Content $TestCSVFile $STR			
Get DHCP Server Server Options#CredCode#		}				
Get DHCP Server Server Options#CredCode#	}
Get DHCP Server Server Options#CredCode#	else
Get DHCP Server Server Options#CredCode#	{
Get DHCP Server Server Options#CredCode#		$STR = $ThisServerNow + ", Error Connecting to DHCP Server"
Get DHCP Server Server Options#CredCode#		Add-Content $TestCSVFile $STR		
Get DHCP Server Server Options#CredCode#	}
Get DHCP Server Server Options#CredCode#	
Get DHCP Server Server Options#CredCode#}
Get DHCP Server Server Options#CredCode#
Get DHCP Server Server Options#CredCode#IF ($AnyGap -eq "Yes")
Get DHCP Server Server Options#CredCode#{
Get DHCP Server Server Options#CredCode#	$TestStatus = "High"
Get DHCP Server Server Options#CredCode#	$TestText = "HIGH ISSUE"
Get DHCP Server Server Options#CredCode#	
Get DHCP Server Server Options#CredCode#}
Get DHCP Server Server Options#CredCode#else
Get DHCP Server Server Options#CredCode#{
Get DHCP Server Server Options#CredCode#	$TestStatus = "Completed"
Get DHCP Server Server Options#CredCode#	$TestText = "MEDIUM ISSUE"
Get DHCP Server Server Options#CredCode#	
Get DHCP Server Server Options#CredCode#}
Get DHCP Server Server Options#CredCode#$ThisString = "DHCP Server, Option ID, Name, Type, Value, Vendor Class, User Class, Policy Name"
Get DHCP Server Server Options#CredCode#Add-Content "$TestCSVFile" $ThisString
Get DHCP Server Server Options#CredCode#
Get DHCP Server Server Options#CredCode#Import-Module DHCPServer
Get DHCP Server Server Options#CredCode#
Get DHCP Server Server Options#CredCode#$AnyGap = "No"
Get DHCP Server Server Options#CredCode#
Get DHCP Server Server Options#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
Get DHCP Server Server Options#CredCode#{
Get DHCP Server Server Options#CredCode#	$ThisServerNow = $Server.Instances
Get DHCP Server Server Options#CredCode#	
Get DHCP Server Server Options#CredCode#	$Error.Clear()
Get DHCP Server Server Options#CredCode#	$results=Invoke-Command -ComputerName $ThisServerNow -Script { param ($R1Now) Get-DhcpServerv4OptionValue -ComputerName $R1Now } -Credential $Creds -ArgumentList $ThisServerNow		
Get DHCP Server Server Options#CredCode#	IF ($Error.Count -eq 0)
Get DHCP Server Server Options#CredCode#	{
Get DHCP Server Server Options#CredCode#		ForEach ($EachItem in $Results)
Get DHCP Server Server Options#CredCode#		{
Get DHCP Server Server Options#CredCode#			$STR = $ThisServerNow + "," + $EachItem.OptionID + "," + $EachItem.Name + "," + $EachItem.Type + "," + $EachItem.Value + "," + $EachItem.VendorClass + "," + $EachItem.UserClass + "," + $EachItem.PolicyName			
Get DHCP Server Server Options#CredCode#			Add-Content $TestCSVFile $STR			
Get DHCP Server Server Options#CredCode#		}				
Get DHCP Server Server Options#CredCode#	}
Get DHCP Server Server Options#CredCode#	else
Get DHCP Server Server Options#CredCode#	{
Get DHCP Server Server Options#CredCode#		$STR = $ThisServerNow + ", Error Connecting to DHCP Server"
Get DHCP Server Server Options#CredCode#		Add-Content $TestCSVFile $STR		
Get DHCP Server Server Options#CredCode#	}
Get DHCP Server Server Options#CredCode#	
Get DHCP Server Server Options#CredCode#}
Get DHCP Server Server Options#CredCode#
Get DHCP Server Server Options#CredCode#IF ($AnyGap -eq "Yes")
Get DHCP Server Server Options#CredCode#{
Get DHCP Server Server Options#CredCode#	$TestStatus = "High"
Get DHCP Server Server Options#CredCode#	$TestText = "HIGH ISSUE"
Get DHCP Server Server Options#CredCode#	
Get DHCP Server Server Options#CredCode#}
Get DHCP Server Server Options#CredCode#else
Get DHCP Server Server Options#CredCode#{
Get DHCP Server Server Options#CredCode#	$TestStatus = "Completed"
Get DHCP Server Server Options#CredCode#	$TestText = "MEDIUM ISSUE"
Get DHCP Server Server Options#CredCode#	
Get DHCP Server Server Options#CredCode#}
Get DHCP Server Scope Options#CredCode#$ThisString = "DHCP Server, ScopeID, Option ID, Name, Type, Value, Vendor Class, User Class, Policy Name"
Get DHCP Server Scope Options#CredCode#Add-Content "$TestCSVFile" $ThisString
Get DHCP Server Scope Options#CredCode#
Get DHCP Server Scope Options#CredCode#Import-Module DHCPServer
Get DHCP Server Scope Options#CredCode#
Get DHCP Server Scope Options#CredCode#$AnyGap = "No"
Get DHCP Server Scope Options#CredCode#
Get DHCP Server Scope Options#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
Get DHCP Server Scope Options#CredCode#{
Get DHCP Server Scope Options#CredCode#	$ThisServerNow = $Server.Instances
Get DHCP Server Scope Options#CredCode#	
Get DHCP Server Scope Options#CredCode#	$AllScopesNow = Get-DhcpServerv4Scope -ComputerName $ThisServerNow
Get DHCP Server Scope Options#CredCode#	foreach ($EachScope in $AllScopesNow)
Get DHCP Server Scope Options#CredCode#	{
Get DHCP Server Scope Options#CredCode#		$ThisScopeID = $EachScope.ScopeID
Get DHCP Server Scope Options#CredCode#		$Error.Clear()
Get DHCP Server Scope Options#CredCode#		$results = Get-DhcpServerv4OptionValue -ComputerName $ThisServerNow -ScopeID $ThisScopeID
Get DHCP Server Scope Options#CredCode#		IF ($Error.Count -eq 0)
Get DHCP Server Scope Options#CredCode#		{
Get DHCP Server Scope Options#CredCode#			ForEach ($EachItem in $Results)
Get DHCP Server Scope Options#CredCode#			{
Get DHCP Server Scope Options#CredCode#				$STR = $ThisServerNow + "," + $ThisScopeID + "," + $EachItem.OptionID + "," + $EachItem.Name + "," + $EachItem.Type + "," + $EachItem.Value + "," + $EachItem.VendorClass + "," + $EachItem.UserClass + "," + $EachItem.PolicyName				
Get DHCP Server Scope Options#CredCode#				Add-Content $TestCSVFile $STR
Get DHCP Server Scope Options#CredCode#			}
Get DHCP Server Scope Options#CredCode#		}
Get DHCP Server Scope Options#CredCode#		else
Get DHCP Server Scope Options#CredCode#		{
Get DHCP Server Scope Options#CredCode#			$STR = $ThisServerNow + ", Error Connecting to DHCP Server"
Get DHCP Server Scope Options#CredCode#			Add-Content $TestCSVFile $STR
Get DHCP Server Scope Options#CredCode#		}
Get DHCP Server Scope Options#CredCode#	}
Get DHCP Server Scope Options#CredCode#}
Get DHCP Server Scope Options#CredCode#
Get DHCP Server Scope Options#CredCode#IF ($AnyGap -eq "Yes")
Get DHCP Server Scope Options#CredCode#{
Get DHCP Server Scope Options#CredCode#	$TestStatus = "High"
Get DHCP Server Scope Options#CredCode#	$TestText = "HIGH ISSUE"
Get DHCP Server Scope Options#CredCode#	
Get DHCP Server Scope Options#CredCode#}
Get DHCP Server Scope Options#CredCode#else
Get DHCP Server Scope Options#CredCode#{
Get DHCP Server Scope Options#CredCode#	$TestStatus = "Completed"
Get DHCP Server Scope Options#CredCode#	$TestText = "MEDIUM ISSUE"
Get DHCP Server Scope Options#CredCode#	
Get DHCP Server Scope Options#CredCode#}
Get DHCP Server Scope Options#CredCode#$ThisString = "DHCP Server, ScopeID, Option ID, Name, Type, Value, Vendor Class, User Class, Policy Name"
Get DHCP Server Scope Options#CredCode#Add-Content "$TestCSVFile" $ThisString
Get DHCP Server Scope Options#CredCode#
Get DHCP Server Scope Options#CredCode#Import-Module DHCPServer
Get DHCP Server Scope Options#CredCode#
Get DHCP Server Scope Options#CredCode#$AnyGap = "No"
Get DHCP Server Scope Options#CredCode#
Get DHCP Server Scope Options#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
Get DHCP Server Scope Options#CredCode#{
Get DHCP Server Scope Options#CredCode#	$ThisServerNow = $Server.Instances
Get DHCP Server Scope Options#CredCode#	
Get DHCP Server Scope Options#CredCode#	$AllScopesNow = Invoke-Command -ComputerName $ThisServerNow -Script { param ($R1Now) Get-DhcpServerv4Scope -ComputerName $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
Get DHCP Server Scope Options#CredCode#	foreach ($EachScope in $AllScopesNow)
Get DHCP Server Scope Options#CredCode#	{
Get DHCP Server Scope Options#CredCode#		
Get DHCP Server Scope Options#CredCode#		$ThisScopeID = $EachScope.ScopeID
Get DHCP Server Scope Options#CredCode#		$Error.Clear()
Get DHCP Server Scope Options#CredCode#		$results = Invoke-Command -ComputerName $ThisServerNow -Script { param ($R1Now, $ThisScopeID) Get-DhcpServerv4OptionValue -ComputerName $ThisServerNow -ScopeID $ThisScopeID } -Credential $Creds -ArgumentList $ThisServerNow, $ThisScopeID
Get DHCP Server Scope Options#CredCode#		IF ($Error.Count -eq 0)
Get DHCP Server Scope Options#CredCode#		{
Get DHCP Server Scope Options#CredCode#			ForEach ($EachItem in $Results)
Get DHCP Server Scope Options#CredCode#			{
Get DHCP Server Scope Options#CredCode#				$STR = $ThisServerNow + "," + $ThisScopeID + "," + $EachItem.OptionID + "," + $EachItem.Name + "," + $EachItem.Type + "," + $EachItem.Value + "," + $EachItem.VendorClass + "," + $EachItem.UserClass + "," + $EachItem.PolicyName				
Get DHCP Server Scope Options#CredCode#				Add-Content $TestCSVFile $STR
Get DHCP Server Scope Options#CredCode#			}
Get DHCP Server Scope Options#CredCode#		}
Get DHCP Server Scope Options#CredCode#		else
Get DHCP Server Scope Options#CredCode#		{
Get DHCP Server Scope Options#CredCode#			$STR = $ThisServerNow + ", Error Connecting to DHCP Server"
Get DHCP Server Scope Options#CredCode#			Add-Content $TestCSVFile $STR
Get DHCP Server Scope Options#CredCode#		}
Get DHCP Server Scope Options#CredCode#	}
Get DHCP Server Scope Options#CredCode#}
Get DHCP Server Scope Options#CredCode#
Get DHCP Server Scope Options#CredCode#IF ($AnyGap -eq "Yes")
Get DHCP Server Scope Options#CredCode#{
Get DHCP Server Scope Options#CredCode#	$TestStatus = "High"
Get DHCP Server Scope Options#CredCode#	$TestText = "HIGH ISSUE"
Get DHCP Server Scope Options#CredCode#	
Get DHCP Server Scope Options#CredCode#}
Get DHCP Server Scope Options#CredCode#else
Get DHCP Server Scope Options#CredCode#{
Get DHCP Server Scope Options#CredCode#	$TestStatus = "Completed"
Get DHCP Server Scope Options#CredCode#	$TestText = "MEDIUM ISSUE"
Get DHCP Server Scope Options#CredCode#	
Get DHCP Server Scope Options#CredCode#}
Get DHCP Server DNS Credentials#CredCode#$ThisString = "DHCP Server, DNS Credential, Domain"
Get DHCP Server DNS Credentials#CredCode#Add-Content "$TestCSVFile" $ThisString
Get DHCP Server DNS Credentials#CredCode#
Get DHCP Server DNS Credentials#CredCode#Import-Module DHCPServer
Get DHCP Server DNS Credentials#CredCode#
Get DHCP Server DNS Credentials#CredCode#$AnyGap = "No"
Get DHCP Server DNS Credentials#CredCode#
Get DHCP Server DNS Credentials#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
Get DHCP Server DNS Credentials#CredCode#{
Get DHCP Server DNS Credentials#CredCode#	$ThisServerNow = $Server.Instances
Get DHCP Server DNS Credentials#CredCode#	
Get DHCP Server DNS Credentials#CredCode#	$Error.Clear()
Get DHCP Server DNS Credentials#CredCode#	$results = Get-DhcpServerDnsCredential -Computer $ThisServerNow
Get DHCP Server DNS Credentials#CredCode#	IF ($Error.Count -eq 0)
Get DHCP Server DNS Credentials#CredCode#	{
Get DHCP Server DNS Credentials#CredCode#		ForEach ($EachItem in $Results)
Get DHCP Server DNS Credentials#CredCode#		{
Get DHCP Server DNS Credentials#CredCode#			$STR = $ThisServerNow + "," + $EachItem.UserName + "," + $EachItem.DomainName
Get DHCP Server DNS Credentials#CredCode#			Add-Content $TestCSVFile $STR
Get DHCP Server DNS Credentials#CredCode#		}
Get DHCP Server DNS Credentials#CredCode#	}
Get DHCP Server DNS Credentials#CredCode#	else
Get DHCP Server DNS Credentials#CredCode#	{
Get DHCP Server DNS Credentials#CredCode#		$STR = $ThisServerNow + ", Error Connecting to DHCP Server"
Get DHCP Server DNS Credentials#CredCode#		Add-Content $TestCSVFile $STR
Get DHCP Server DNS Credentials#CredCode#	}
Get DHCP Server DNS Credentials#CredCode#	
Get DHCP Server DNS Credentials#CredCode#}
Get DHCP Server DNS Credentials#CredCode#
Get DHCP Server DNS Credentials#CredCode#IF ($AnyGap -eq "Yes")
Get DHCP Server DNS Credentials#CredCode#{
Get DHCP Server DNS Credentials#CredCode#	$TestStatus = "High"
Get DHCP Server DNS Credentials#CredCode#	$TestText = "HIGH ISSUE"
Get DHCP Server DNS Credentials#CredCode#	
Get DHCP Server DNS Credentials#CredCode#}
Get DHCP Server DNS Credentials#CredCode#else
Get DHCP Server DNS Credentials#CredCode#{
Get DHCP Server DNS Credentials#CredCode#	$TestStatus = "Completed"
Get DHCP Server DNS Credentials#CredCode#	$TestText = "MEDIUM ISSUE"
Get DHCP Server DNS Credentials#CredCode#	
Get DHCP Server DNS Credentials#CredCode#}
Get DHCP Server DNS Credentials#CredCode#$ThisString = "DHCP Server, DNS Credential, Domain"
Get DHCP Server DNS Credentials#CredCode#Add-Content "$TestCSVFile" $ThisString
Get DHCP Server DNS Credentials#CredCode#
Get DHCP Server DNS Credentials#CredCode#Import-Module DHCPServer
Get DHCP Server DNS Credentials#CredCode#
Get DHCP Server DNS Credentials#CredCode#$AnyGap = "No"
Get DHCP Server DNS Credentials#CredCode#
Get DHCP Server DNS Credentials#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
Get DHCP Server DNS Credentials#CredCode#{
Get DHCP Server DNS Credentials#CredCode#	$ThisServerNow = $Server.Instances
Get DHCP Server DNS Credentials#CredCode#	
Get DHCP Server DNS Credentials#CredCode#	$Error.Clear()	
Get DHCP Server DNS Credentials#CredCode#	$results = Invoke-Command -ComputerName $ThisServerNow -Script { param ($R1Now) Get-DhcpServerDnsCredential -Computer $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
Get DHCP Server DNS Credentials#CredCode#	IF ($Error.Count -eq 0)
Get DHCP Server DNS Credentials#CredCode#	{
Get DHCP Server DNS Credentials#CredCode#		ForEach ($EachItem in $Results)
Get DHCP Server DNS Credentials#CredCode#		{
Get DHCP Server DNS Credentials#CredCode#			$STR = $ThisServerNow + "," + $EachItem.UserName + "," + $EachItem.DomainName
Get DHCP Server DNS Credentials#CredCode#			Add-Content $TestCSVFile $STR
Get DHCP Server DNS Credentials#CredCode#		}
Get DHCP Server DNS Credentials#CredCode#	}
Get DHCP Server DNS Credentials#CredCode#	else
Get DHCP Server DNS Credentials#CredCode#	{
Get DHCP Server DNS Credentials#CredCode#		$STR = $ThisServerNow + ", Error Connecting to DHCP Server"
Get DHCP Server DNS Credentials#CredCode#		Add-Content $TestCSVFile $STR
Get DHCP Server DNS Credentials#CredCode#	}
Get DHCP Server DNS Credentials#CredCode#	
Get DHCP Server DNS Credentials#CredCode#}
Get DHCP Server DNS Credentials#CredCode#
Get DHCP Server DNS Credentials#CredCode#IF ($AnyGap -eq "Yes")
Get DHCP Server DNS Credentials#CredCode#{
Get DHCP Server DNS Credentials#CredCode#	$TestStatus = "High"
Get DHCP Server DNS Credentials#CredCode#	$TestText = "HIGH ISSUE"
Get DHCP Server DNS Credentials#CredCode#	
Get DHCP Server DNS Credentials#CredCode#}
Get DHCP Server DNS Credentials#CredCode#else
Get DHCP Server DNS Credentials#CredCode#{
Get DHCP Server DNS Credentials#CredCode#	$TestStatus = "Completed"
Get DHCP Server DNS Credentials#CredCode#	$TestText = "MEDIUM ISSUE"
Get DHCP Server DNS Credentials#CredCode#	
Get DHCP Server DNS Credentials#CredCode#}
Get DHCP Server Settings#CredCode#$ThisString = "DHCP Server, Is Domain Joined?, Is Authorized?, Dynamic BootP?, Restore Status?, Confilt Detect Settings, NPS Unreachable Action, NAP Enabled?, Active Policies?"
Get DHCP Server Settings#CredCode#Add-Content "$TestCSVFile" $ThisString
Get DHCP Server Settings#CredCode#
Get DHCP Server Settings#CredCode#Import-Module DHCPServer
Get DHCP Server Settings#CredCode#
Get DHCP Server Settings#CredCode#$AnyGap = "No"
Get DHCP Server Settings#CredCode#
Get DHCP Server Settings#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
Get DHCP Server Settings#CredCode#{
Get DHCP Server Settings#CredCode#	$ThisServerNow = $Server.Instances
Get DHCP Server Settings#CredCode#	
Get DHCP Server Settings#CredCode#	$Error.Clear()	
Get DHCP Server Settings#CredCode#	#$results = Invoke-Command -ComputerName $ThisServerNow -Script { param ($R1Now) Get-DhcpServerDnsCredential -Computer $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
Get DHCP Server Settings#CredCode#	$results = Get-DhcpServerSetting -Computer $ThisServerNow 
Get DHCP Server Settings#CredCode#	IF ($Error.Count -eq 0)
Get DHCP Server Settings#CredCode#	{
Get DHCP Server Settings#CredCode#		ForEach ($EachItem in $Results)
Get DHCP Server Settings#CredCode#		{
Get DHCP Server Settings#CredCode#			$STR = $ThisServerNow + "," + $EachItem.IsDomainJoined + "," + $EachItem.IsAuthorized + "," + $EachItem.DynamicBootp + "," + $EachItem.RestoreStatus + "," + $EachItem.ConflictDetectionAttempts + "," + $EachItem.NpsUnreachableAction + "," + $EachItem.NapEnabled + "," + $EachItem.ActivatePolicies			
Get DHCP Server Settings#CredCode#			Add-Content $TestCSVFile $STR
Get DHCP Server Settings#CredCode#		}
Get DHCP Server Settings#CredCode#	}
Get DHCP Server Settings#CredCode#	else
Get DHCP Server Settings#CredCode#	{
Get DHCP Server Settings#CredCode#		$STR = $ThisServerNow + ", Error Connecting to DHCP Server"
Get DHCP Server Settings#CredCode#		Add-Content $TestCSVFile $STR
Get DHCP Server Settings#CredCode#	}
Get DHCP Server Settings#CredCode#	
Get DHCP Server Settings#CredCode#}
Get DHCP Server Settings#CredCode#
Get DHCP Server Settings#CredCode#IF ($AnyGap -eq "Yes")
Get DHCP Server Settings#CredCode#{
Get DHCP Server Settings#CredCode#	$TestStatus = "High"
Get DHCP Server Settings#CredCode#	$TestText = "HIGH ISSUE"
Get DHCP Server Settings#CredCode#	
Get DHCP Server Settings#CredCode#}
Get DHCP Server Settings#CredCode#else
Get DHCP Server Settings#CredCode#{
Get DHCP Server Settings#CredCode#	$TestStatus = "Completed"
Get DHCP Server Settings#CredCode#	$TestText = "MEDIUM ISSUE"
Get DHCP Server Settings#CredCode#	
Get DHCP Server Settings#CredCode#}
Get DHCP Server Settings#CredCode#$ThisString = "DHCP Server, Is Domain Joined?, Is Authorized?, Dynamic BootP?, Restore Status?, Confilt Detect Settings, NPS Unreachable Action, NAP Enabled?, Active Policies?"
Get DHCP Server Settings#CredCode#Add-Content "$TestCSVFile" $ThisString
Get DHCP Server Settings#CredCode#
Get DHCP Server Settings#CredCode#Import-Module DHCPServer
Get DHCP Server Settings#CredCode#
Get DHCP Server Settings#CredCode#$AnyGap = "No"
Get DHCP Server Settings#CredCode#
Get DHCP Server Settings#CredCode#ForEach ($Server in Import-CSV $DHCPServerFile)
Get DHCP Server Settings#CredCode#{
Get DHCP Server Settings#CredCode#	$ThisServerNow = $Server.Instances
Get DHCP Server Settings#CredCode#	
Get DHCP Server Settings#CredCode#	$Error.Clear()	
Get DHCP Server Settings#CredCode#	$results = Invoke-Command -ComputerName $ThisServerNow -Script { param ($R1Now) Get-DhcpServerSetting -Computer $R1Now } -Credential $Creds -ArgumentList $ThisServerNow
Get DHCP Server Settings#CredCode#	#$results = Get-DhcpServerSetting -Computer $ThisServerNow 
Get DHCP Server Settings#CredCode#	IF ($Error.Count -eq 0)
Get DHCP Server Settings#CredCode#	{
Get DHCP Server Settings#CredCode#		ForEach ($EachItem in $Results)
Get DHCP Server Settings#CredCode#		{
Get DHCP Server Settings#CredCode#			$STR = $ThisServerNow + "," + $EachItem.IsDomainJoined + "," + $EachItem.IsAuthorized + "," + $EachItem.DynamicBootp + "," + $EachItem.RestoreStatus + "," + $EachItem.ConflictDetectionAttempts + "," + $EachItem.NpsUnreachableAction + "," + $EachItem.NapEnabled + "," + $EachItem.ActivatePolicies			
Get DHCP Server Settings#CredCode#			Add-Content $TestCSVFile $STR
Get DHCP Server Settings#CredCode#		}
Get DHCP Server Settings#CredCode#	}
Get DHCP Server Settings#CredCode#	else
Get DHCP Server Settings#CredCode#	{
Get DHCP Server Settings#CredCode#		$STR = $ThisServerNow + ", Error Connecting to DHCP Server"
Get DHCP Server Settings#CredCode#		Add-Content $TestCSVFile $STR
Get DHCP Server Settings#CredCode#	}
Get DHCP Server Settings#CredCode#	
Get DHCP Server Settings#CredCode#}
Get DHCP Server Settings#CredCode#
Get DHCP Server Settings#CredCode#IF ($AnyGap -eq "Yes")
Get DHCP Server Settings#CredCode#{
Get DHCP Server Settings#CredCode#	$TestStatus = "High"
Get DHCP Server Settings#CredCode#	$TestText = "HIGH ISSUE"
Get DHCP Server Settings#CredCode#	
Get DHCP Server Settings#CredCode#}
Get DHCP Server Settings#CredCode#else
Get DHCP Server Settings#CredCode#{
Get DHCP Server Settings#CredCode#	$TestStatus = "Completed"
Get DHCP Server Settings#CredCode#	$TestText = "MEDIUM ISSUE"
Get DHCP Server Settings#CredCode#	
Get DHCP Server Settings#CredCode#}
Domain Controller NIC Dynamic Updates Test#CredCode#$TotNo = 0
Domain Controller NIC Dynamic Updates Test#CredCode#$ItemCount = 0
Domain Controller NIC Dynamic Updates Test#CredCode#$TestText = ""
Domain Controller NIC Dynamic Updates Test#CredCode#$TestStatus = ""
Domain Controller NIC Dynamic Updates Test#CredCode#$SumVal = ""
Domain Controller NIC Dynamic Updates Test#CredCode#$AnyGap = "No"
Domain Controller NIC Dynamic Updates Test#CredCode#$ErrorOrNot = "No"
Domain Controller NIC Dynamic Updates Test#CredCode#$AnyOneOk = "No"
Domain Controller NIC Dynamic Updates Test#CredCode#$TotDCsInError = 0
Domain Controller NIC Dynamic Updates Test#CredCode#
Domain Controller NIC Dynamic Updates Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller NIC Dynamic Updates Test#CredCode#{
Domain Controller NIC Dynamic Updates Test#CredCode#	$DCConError = "Ok"
Domain Controller NIC Dynamic Updates Test#CredCode#	$DCConStatus = "Ok"
Domain Controller NIC Dynamic Updates Test#CredCode#	$ProceedOrNot = "Yes"
Domain Controller NIC Dynamic Updates Test#CredCode#	$Error.Clear()
Domain Controller NIC Dynamic Updates Test#CredCode#	$AllServices = Get-WMIObject Win32_Service -computer $ItemName -Credential $Creds
Domain Controller NIC Dynamic Updates Test#CredCode#	IF ($Error.Count -ne 0)
Domain Controller NIC Dynamic Updates Test#CredCode#	{
Domain Controller NIC Dynamic Updates Test#CredCode#		$ProceedOrNot = "No"
Domain Controller NIC Dynamic Updates Test#CredCode#		$TotDCsInError++
Domain Controller NIC Dynamic Updates Test#CredCode#		$DCConError = $Error[0].Exception.Message
Domain Controller NIC Dynamic Updates Test#CredCode#		
Domain Controller NIC Dynamic Updates Test#CredCode#		$FinalSTR = $ItemName + ",Not OK: Error: $DCConError"
Domain Controller NIC Dynamic Updates Test#CredCode#		Add-Content "$TestCSVFile" $FinalSTR
Domain Controller NIC Dynamic Updates Test#CredCode#		
Domain Controller NIC Dynamic Updates Test#CredCode#	}
Domain Controller NIC Dynamic Updates Test#CredCode#	
Domain Controller NIC Dynamic Updates Test#CredCode#	IF ($ProceedOrNot -eq "Yes")
Domain Controller NIC Dynamic Updates Test#CredCode#	{
Domain Controller NIC Dynamic Updates Test#CredCode#		$ComConError = "Ok"
Domain Controller NIC Dynamic Updates Test#CredCode#		$Error.Clear()
Domain Controller NIC Dynamic Updates Test#CredCode#		$nwINFO = Get-WmiObject -ComputerName $ItemName Win32_NetworkAdapterConfiguration -Credential $Creds | Where-Object { $_.IPAddress -ne $null }
Domain Controller NIC Dynamic Updates Test#CredCode#		IF ($Error.count -eq 0)
Domain Controller NIC Dynamic Updates Test#CredCode#		{
Domain Controller NIC Dynamic Updates Test#CredCode#			$AnyOneOk = "Yes"
Domain Controller NIC Dynamic Updates Test#CredCode#			foreach ($NIC in $nwINFO)
Domain Controller NIC Dynamic Updates Test#CredCode#			{
Domain Controller NIC Dynamic Updates Test#CredCode#				$FinStatus = "Ok"
Domain Controller NIC Dynamic Updates Test#CredCode#				IF ($Nic.FullDNSRegistrationEnabled -eq $False)
Domain Controller NIC Dynamic Updates Test#CredCode#				{
Domain Controller NIC Dynamic Updates Test#CredCode#					$AnyGap = "Yes"
Domain Controller NIC Dynamic Updates Test#CredCode#					$FinStatus = "WARNING : Domain Controller Dynamic DNS Registration is Disabled for this Network Card."
Domain Controller NIC Dynamic Updates Test#CredCode#					
Domain Controller NIC Dynamic Updates Test#CredCode#				}
Domain Controller NIC Dynamic Updates Test#CredCode#				
Domain Controller NIC Dynamic Updates Test#CredCode#				$DNStatus = $Nic.FullDNSRegistrationEnabled
Domain Controller NIC Dynamic Updates Test#CredCode#				$FinalSTR = $ItemName + "," + $DCConError + "," + $ComConError + "," + $DNStatus + "," + $FinStatus
Domain Controller NIC Dynamic Updates Test#CredCode#				Add-Content "$TestCSVFile" $FinalSTR
Domain Controller NIC Dynamic Updates Test#CredCode#				
Domain Controller NIC Dynamic Updates Test#CredCode#			}
Domain Controller NIC Dynamic Updates Test#CredCode#			
Domain Controller NIC Dynamic Updates Test#CredCode#			IF ($AnyGap -eq "Yes")
Domain Controller NIC Dynamic Updates Test#CredCode#			{
Domain Controller NIC Dynamic Updates Test#CredCode#				$TotNo++
Domain Controller NIC Dynamic Updates Test#CredCode#				
Domain Controller NIC Dynamic Updates Test#CredCode#			}
Domain Controller NIC Dynamic Updates Test#CredCode#			
Domain Controller NIC Dynamic Updates Test#CredCode#		}
Domain Controller NIC Dynamic Updates Test#CredCode#		else
Domain Controller NIC Dynamic Updates Test#CredCode#		{
Domain Controller NIC Dynamic Updates Test#CredCode#			$ComConError = $Error[0].Exception.Message
Domain Controller NIC Dynamic Updates Test#CredCode#			$FinalSTR = $ItemName + ",$DCConError," + $ComConError
Domain Controller NIC Dynamic Updates Test#CredCode#			Add-Content "$TestCSVFile" $FinalSTR
Domain Controller NIC Dynamic Updates Test#CredCode#			
Domain Controller NIC Dynamic Updates Test#CredCode#		}
Domain Controller NIC Dynamic Updates Test#CredCode#		
Domain Controller NIC Dynamic Updates Test#CredCode#	}
Domain Controller NIC Dynamic Updates Test#CredCode#	else
Domain Controller NIC Dynamic Updates Test#CredCode#	{
Domain Controller NIC Dynamic Updates Test#CredCode#		$ComConError = $Error[0].Exception.Message
Domain Controller NIC Dynamic Updates Test#CredCode#		$FinalSTR = $ItemName + ",$DCConError," + $ComConError
Domain Controller NIC Dynamic Updates Test#CredCode#		Add-Content "$TestCSVFile" $FinalSTR
Domain Controller NIC Dynamic Updates Test#CredCode#		
Domain Controller NIC Dynamic Updates Test#CredCode#	}
Domain Controller NIC Dynamic Updates Test#CredCode#	
Domain Controller NIC Dynamic Updates Test#CredCode#}
Domain Controller NIC Dynamic Updates Test#CredCode#
Domain Controller NIC Dynamic Updates Test#CredCode#
Domain Controller NIC Dynamic Updates Test#CredCode#$OthText = ""
Domain Controller NIC Dynamic Updates Test#CredCode#IF ($TotDCsInError -ne 0)
Domain Controller NIC Dynamic Updates Test#CredCode#{
Domain Controller NIC Dynamic Updates Test#CredCode#	$OthText = "Some Domain Controllers have not been checked due to connectivity or command issues."
Domain Controller NIC Dynamic Updates Test#CredCode#	
Domain Controller NIC Dynamic Updates Test#CredCode#}
Domain Controller NIC Dynamic Updates Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller NIC Dynamic Updates Test#CredCode#{
Domain Controller NIC Dynamic Updates Test#CredCode#	$TestText = "Domain Controllers have Dynamic DNS Registration disabled for active NICs. Please ensure it is enabled. Disabling Dynamic DNS Registration will disable the ability for domain controller to register its resource records dynamically to configured DNS Servers. $OthText"
Domain Controller NIC Dynamic Updates Test#CredCode#	$SumVal = $TotNo
Domain Controller NIC Dynamic Updates Test#CredCode#	$TestStatus = "High"
Domain Controller NIC Dynamic Updates Test#CredCode#	
Domain Controller NIC Dynamic Updates Test#CredCode#}
Domain Controller NIC Dynamic Updates Test#CredCode#IF ($AnyGap -eq "No")
Domain Controller NIC Dynamic Updates Test#CredCode#{
Domain Controller NIC Dynamic Updates Test#CredCode#	$TestText = "Dynamic Pack DNS Registration is enabled for all domain controllers. $OthText"
Domain Controller NIC Dynamic Updates Test#CredCode#	$SumVal = ""
Domain Controller NIC Dynamic Updates Test#CredCode#	$TestStatus = "Passed"
Domain Controller NIC Dynamic Updates Test#CredCode#	
Domain Controller NIC Dynamic Updates Test#CredCode#	IF ($AnyOneOk -eq "No")
Domain Controller NIC Dynamic Updates Test#CredCode#	{
Domain Controller NIC Dynamic Updates Test#CredCode#		$TestText = "Error Executing Dynamic Pack."
Domain Controller NIC Dynamic Updates Test#CredCode#		$SumVal = ""
Domain Controller NIC Dynamic Updates Test#CredCode#		$TestStatus = "Completed with Errors."
Domain Controller NIC Dynamic Updates Test#CredCode#		
Domain Controller NIC Dynamic Updates Test#CredCode#	}
Domain Controller NIC Dynamic Updates Test#CredCode#	
Domain Controller NIC Dynamic Updates Test#CredCode#}
Domain Controller NIC Dynamic Updates Test#CredCode#
Domain Controller NIC Dynamic Updates Test#CredCode#$STR = $ADTestName + "," + $TestStartTime + "," + $TestStatus + "," + $SumVal + "," + $TestText
Domain Controller NIC Dynamic Updates Test#CredCode#
Domain OU Empty Test#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Domain OU Empty Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain OU Empty Test#CredCode#$STR = "Organizational Unit Name, Organizational Unit DN, AD Domain"
Domain OU Empty Test#CredCode#Add-Content $DataFileLocation $STR
Domain OU Empty Test#CredCode#
Domain OU Empty Test#CredCode#$TotNo = 0
Domain OU Empty Test#CredCode#$ItemCount = 0
Domain OU Empty Test#CredCode#$TestText = ""
Domain OU Empty Test#CredCode#$TestStatus = ""
Domain OU Empty Test#CredCode#$SumVal = ""
Domain OU Empty Test#CredCode#$AnyGap = "No"
Domain OU Empty Test#CredCode#
Domain OU Empty Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain OU Empty Test#CredCode#{
Domain OU Empty Test#CredCode#	$Error.Clear()
Domain OU Empty Test#CredCode#	$GetEmptyOUList = Get-ADOrganizationalUnit -credential $Creds -Server $ThisDomain -Filter 'Name -like "*"' | Where { -not (Get-ADObject -Server $ThisDomain -Filter 'Name -like "*"' -SearchBase $_.DistinguishedName -SearchScope OneLevel -ResultPageSize 2000 -resultSetSize $null -ErrorAction SilentlyContinue) } |
Domain OU Empty Test#CredCode#	Select-Object Name, DistinguishedName
Domain OU Empty Test#CredCode#	
Domain OU Empty Test#CredCode#	IF ($Error.count -eq 0)
Domain OU Empty Test#CredCode#	{
Domain OU Empty Test#CredCode#		$Items = $GetEmptyOUList
Domain OU Empty Test#CredCode#		$ItemCount = $GetEmptyOUList.Name.Count
Domain OU Empty Test#CredCode#		
Domain OU Empty Test#CredCode#		IF ($ItemCount -ne 0)
Domain OU Empty Test#CredCode#		{
Domain OU Empty Test#CredCode#			$AnyGap = "Yes"
Domain OU Empty Test#CredCode#			
Domain OU Empty Test#CredCode#		}
Domain OU Empty Test#CredCode#		$FinalVal = $ItemCount.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain OU Empty Test#CredCode#		Add-Content "$TestCSVFile" $FinalVal
Domain OU Empty Test#CredCode#		
Domain OU Empty Test#CredCode#		ForEach ($ThisItem in $Items)
Domain OU Empty Test#CredCode#		{
Domain OU Empty Test#CredCode#			$RemovedComma = $ThisItem.DistinguishedName.replace(",", " ")
Domain OU Empty Test#CredCode#			$FinalVal = $ThisItem.Name + "," + '"' + $RemovedComma + '"' + "," + $ThisDomain
Domain OU Empty Test#CredCode#			Add-Content "$DataFileLocation" $FinalVal
Domain OU Empty Test#CredCode#			
Domain OU Empty Test#CredCode#		}
Domain OU Empty Test#CredCode#		
Domain OU Empty Test#CredCode#	}
Domain OU Empty Test#CredCode#	else
Domain OU Empty Test#CredCode#	{
Domain OU Empty Test#CredCode#		$FinalVal = "Could not connect to AD Server," + $ThisDomain
Domain OU Empty Test#CredCode#		Add-Content "$TestCSVFile" $FinalVal
Domain OU Empty Test#CredCode#		
Domain OU Empty Test#CredCode#	}
Domain OU Empty Test#CredCode#	
Domain OU Empty Test#CredCode#}
Domain OU Empty Test#CredCode#
Domain OU Empty Test#CredCode#IF ($AnyGap -eq "Yes")
Domain OU Empty Test#CredCode#{
Domain OU Empty Test#CredCode#	$TestText = ""
Domain OU Empty Test#CredCode#	$TestStatus = "High"
Domain OU Empty Test#CredCode#	$SumVal = ""
Domain OU Empty Test#CredCode#	
Domain OU Empty Test#CredCode#}
Domain OU Empty Test#CredCode#else
Domain OU Empty Test#CredCode#{
Domain OU Empty Test#CredCode#	$TestText = ""
Domain OU Empty Test#CredCode#	$TestStatus = "Passed"
Domain OU Empty Test#CredCode#	$SumVal = ""
Domain OU Empty Test#CredCode#	
Domain OU Empty Test#CredCode#}
Domain OU Empty Test#CredCode#
Domain OU Empty Test#CredCode#$STR = $ADTestName + "," + $TestStartTime + "," + $TestStatus + "," + $SumVal + "," + $TestText
Domain Users Disabled Test#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Domain Users Disabled Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Users Disabled Test#CredCode#$STR = "User Name, SamAccountName, User DN, AD Domain"
Domain Users Disabled Test#CredCode#Add-Content $DataFileLocation $STR
Domain Users Disabled Test#CredCode#
Domain Users Disabled Test#CredCode#$TotNo = 0
Domain Users Disabled Test#CredCode#$ItemCount = 0
Domain Users Disabled Test#CredCode#$TestText = ""
Domain Users Disabled Test#CredCode#$TestStatus = ""
Domain Users Disabled Test#CredCode#$SumVal = ""
Domain Users Disabled Test#CredCode#$AnyGap = "No"
Domain Users Disabled Test#CredCode#
Domain Users Disabled Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Users Disabled Test#CredCode#{
Domain Users Disabled Test#CredCode#	$Error.Clear()
Domain Users Disabled Test#CredCode#	$UsersDisabledList = Search-ADAccount -Server $ThisDomain -Credential $Creds -AccountDisabled -UsersOnly -ResultPageSize 2000 -resultSetSize $null | Select-Object Name, SamAccountName, DistinguishedName
Domain Users Disabled Test#CredCode#	IF ($Error.count -eq 0)
Domain Users Disabled Test#CredCode#	{
Domain Users Disabled Test#CredCode#		$Items = $UsersDisabledList
Domain Users Disabled Test#CredCode#		$ItemCount = $UsersDisabledList.Name.Count
Domain Users Disabled Test#CredCode#		
Domain Users Disabled Test#CredCode#		$FinalVal = $ItemCount.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Disabled Test#CredCode#		Add-Content "$TestCSVFile" $FinalVal
Domain Users Disabled Test#CredCode#		
Domain Users Disabled Test#CredCode#		ForEach ($ThisItem in $Items)
Domain Users Disabled Test#CredCode#		{
Domain Users Disabled Test#CredCode#			$RemovedComma = $ThisItem.DistinguishedName.replace(",", " ")
Domain Users Disabled Test#CredCode#			$FinalVal = $ThisItem.Name + "," + $ThisItem.SamAccountName + "," + '"' + $RemovedComma + '"' + "," + $ThisDomain
Domain Users Disabled Test#CredCode#			Add-Content "$DataFileLocation" $FinalVal
Domain Users Disabled Test#CredCode#			$AnyGap = "Yes"			
Domain Users Disabled Test#CredCode#		}		
Domain Users Disabled Test#CredCode#	}
Domain Users Disabled Test#CredCode#	
Domain Users Disabled Test#CredCode#}
Domain Users Disabled Test#CredCode#
Domain Users Disabled Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Users Disabled Test#CredCode#{
Domain Users Disabled Test#CredCode#	$TestText = ""
Domain Users Disabled Test#CredCode#	$TestStatus = "High"
Domain Users Disabled Test#CredCode#	$SumVal = ""
Domain Users Disabled Test#CredCode#	
Domain Users Disabled Test#CredCode#}
Domain Users Disabled Test#CredCode#else
Domain Users Disabled Test#CredCode#{
Domain Users Disabled Test#CredCode#	$TestText = ""
Domain Users Disabled Test#CredCode#	$TestStatus = "Passed"
Domain Users Disabled Test#CredCode#	$SumVal = $TotNo
Domain Users Disabled Test#CredCode#	
Domain Users Disabled Test#CredCode#}
Domain Users Disabled Test#CredCode#
Domain Users Disabled Test#CredCode#$STR = $ADTestName + "," + $TestStartTime + "," + $TestStatus + "," + $SumVal + "," + $TestText
Domain Security Groups with No Members Test#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Domain Security Groups with No Members Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Security Groups with No Members Test#CredCode#$STR = "Group, AD Domain"
Domain Security Groups with No Members Test#CredCode#Add-Content $DataFileLocation $STR
Domain Security Groups with No Members Test#CredCode#
Domain Security Groups with No Members Test#CredCode#$TotNo = 0
Domain Security Groups with No Members Test#CredCode#$ItemCount = 0
Domain Security Groups with No Members Test#CredCode#$TestText = ""
Domain Security Groups with No Members Test#CredCode#$TestStatus = ""
Domain Security Groups with No Members Test#CredCode#$SumVal = ""
Domain Security Groups with No Members Test#CredCode#$AnyGap = "No"
Domain Security Groups with No Members Test#CredCode#$IsErr = "No"
Domain Security Groups with No Members Test#CredCode#
Domain Security Groups with No Members Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Security Groups with No Members Test#CredCode#{
Domain Security Groups with No Members Test#CredCode#	$TotEmptyGroups = 0
Domain Security Groups with No Members Test#CredCode#	$Error.Clear()
Domain Security Groups with No Members Test#CredCode#	$SGsNoMemCount = Get-ADGroup -Filter * -properties * -Server $ThisDomain -ResultPageSize 2000 -resultSetSize $null -Credential $Creds
Domain Security Groups with No Members Test#CredCode#	IF ($Error.count -eq 0)
Domain Security Groups with No Members Test#CredCode#	{
Domain Security Groups with No Members Test#CredCode#		$Items = $SGsNoMemCount
Domain Security Groups with No Members Test#CredCode#		$ItemCount = $SGsNoMemCount.Count
Domain Security Groups with No Members Test#CredCode#		
Domain Security Groups with No Members Test#CredCode#		ForEach ($AllGPOs in $Items)
Domain Security Groups with No Members Test#CredCode#		{
Domain Security Groups with No Members Test#CredCode#			$ThisGroupName = $AllGPOS.DistinguishedName
Domain Security Groups with No Members Test#CredCode#			$RValue = (Get-ADGroupMember $AllGPOs.DistinguishedName -Server $ThisDomain).count
Domain Security Groups with No Members Test#CredCode#			IF ($RValue -eq 0)
Domain Security Groups with No Members Test#CredCode#			{
Domain Security Groups with No Members Test#CredCode#				$TotEmptyGroups++
Domain Security Groups with No Members Test#CredCode#				$AnyGap = "Yes"
Domain Security Groups with No Members Test#CredCode#				$RemovedComma = $ThisGroupName.replace(",", " ")
Domain Security Groups with No Members Test#CredCode#				$FinalVal = '"' + $RemovedComma + '"' + "," + $ThisDomain
Domain Security Groups with No Members Test#CredCode#				Add-Content "$DataFileLocation" $FinalVal
Domain Security Groups with No Members Test#CredCode#				
Domain Security Groups with No Members Test#CredCode#			}
Domain Security Groups with No Members Test#CredCode#			
Domain Security Groups with No Members Test#CredCode#		}
Domain Security Groups with No Members Test#CredCode#		
Domain Security Groups with No Members Test#CredCode#		$ThisStr = $ItemCount.ToString() + "," + $TotEmptyGroups.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Security Groups with No Members Test#CredCode#		Add-Content "$TestCSVFile" $ThisStr
Domain Security Groups with No Members Test#CredCode#		
Domain Security Groups with No Members Test#CredCode#	}
Domain Security Groups with No Members Test#CredCode#	else
Domain Security Groups with No Members Test#CredCode#	{
Domain Security Groups with No Members Test#CredCode#		$ThisStr = "Could not connect to AD Server,," + $ThisDomain
Domain Security Groups with No Members Test#CredCode#		Add-Content "$TestCSVFile" $ThisStr		
Domain Security Groups with No Members Test#CredCode#	}
Domain Security Groups with No Members Test#CredCode#	
Domain Security Groups with No Members Test#CredCode#}
Domain Security Groups with No Members Test#CredCode#
Domain Security Groups with No Members Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Security Groups with No Members Test#CredCode#{
Domain Security Groups with No Members Test#CredCode#	$TestText = "Security Groups have been created in Domain but they do not hold any members. Please check why empty Security Groups have been created in Domain. The output also contains the pre-defined security groups other than user-defined security groups. For example Print Operators group might not have any group members. Similarly RDS Endpoint Servers group will not have any members if you have created another security group for same purpose. However, test shows the list of empty security groups in each domain."
Domain Security Groups with No Members Test#CredCode#	$TestStatus = "High"
Domain Security Groups with No Members Test#CredCode#	$SumVal = ""
Domain Security Groups with No Members Test#CredCode#	
Domain Security Groups with No Members Test#CredCode#}
Domain Security Groups with No Members Test#CredCode#
Domain Security Groups with No Members Test#CredCode#IF ($AnyGap -eq "No")
Domain Security Groups with No Members Test#CredCode#{
Domain Security Groups with No Members Test#CredCode#	$TestText = "All Security Groups in domains have members added to them."
Domain Security Groups with No Members Test#CredCode#	$TestStatus = "Passed"
Domain Security Groups with No Members Test#CredCode#	$SumVal = ""
Domain Security Groups with No Members Test#CredCode#	
Domain Security Groups with No Members Test#CredCode#}
Domain Security Groups with No Members Test#CredCode#$STR = $ADTestName + "," + $TestStartTime + "," + $TestStatus + "," + $SumVal + "," + $TestText
Domain Security Groups with No Members Test#CredCode#
Domain Account Policies Test#CredCode#$TotNo = 0
Domain Account Policies Test#CredCode#$ItemCount = 0
Domain Account Policies Test#CredCode#$TestText = "Please check result"
Domain Account Policies Test#CredCode#$TestStatus = "Completed"
Domain Account Policies Test#CredCode#$SumVal = "NA"
Domain Account Policies Test#CredCode#$AnyGap = "No"
Domain Account Policies Test#CredCode#
Domain Account Policies Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Account Policies Test#CredCode#{
Domain Account Policies Test#CredCode#	$R = Get-ADDefaultDomainPasswordPolicy -Identity $ThisDomain -Credential $Creds
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#	$ThisNow = $R.ComplexityEnabled
Domain Account Policies Test#CredCode#	$STR = "Password Complexity," + $ThisNow + "," + $ThisDomain
Domain Account Policies Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#	IF ($ThisNow -ne $true)
Domain Account Policies Test#CredCode#	{
Domain Account Policies Test#CredCode#		$AnyGap = "Yes"
Domain Account Policies Test#CredCode#		
Domain Account Policies Test#CredCode#	}
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#	$ThisNow = $R.LockoutDuration
Domain Account Policies Test#CredCode#	$STR = "Lockout Duration," + $ThisNow + "," + $ThisDomain
Domain Account Policies Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#	$ThisNow = $R.LockoutObservationWindow
Domain Account Policies Test#CredCode#	$STR = "Lockout Observation Window," + $ThisNow + "," + $ThisDomain
Domain Account Policies Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#	$ThisNow = $R.LockoutThreshold
Domain Account Policies Test#CredCode#	$STR = "Lockout Threshold," + $ThisNow + "," + $ThisDomain
Domain Account Policies Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#	$ThisNow = $R.MaxPasswordAge
Domain Account Policies Test#CredCode#	$STR = "Maximum Password Age," + $ThisNow + "," + $ThisDomain
Domain Account Policies Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#	$ThisNow = $R.MinPasswordAge
Domain Account Policies Test#CredCode#	$STR = "Minimum Password Age," + $ThisNow + "," + $ThisDomain
Domain Account Policies Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#	$ThisNow = $R.MinPasswordLength
Domain Account Policies Test#CredCode#	$STR = "Minimum Password Length," + $ThisNow + "," + $ThisDomain
Domain Account Policies Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#	$ThisNow = $R.PasswordHistoryCount
Domain Account Policies Test#CredCode#	$STR = "Password History Count," + $ThisNow + "," + $ThisDomain
Domain Account Policies Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#}
Domain Account Policies Test#CredCode#
Domain Account Policies Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Account Policies Test#CredCode#{
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#	$TestText = " "
Domain Account Policies Test#CredCode#	$SumVal = ""
Domain Account Policies Test#CredCode#	$TestStatus = "High"
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#}
Domain Account Policies Test#CredCode#else
Domain Account Policies Test#CredCode#{
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#	$TestText = " "
Domain Account Policies Test#CredCode#	$SumVal = ""
Domain Account Policies Test#CredCode#	$TestStatus = "Passed"
Domain Account Policies Test#CredCode#	
Domain Account Policies Test#CredCode#}
Domain FGPP Policies Test#CredCode#
Domain FGPP Policies Test#CredCode#$TotNo = 0
Domain FGPP Policies Test#CredCode#$ItemCount = 0
Domain FGPP Policies Test#CredCode#$TestText = "Please check result"
Domain FGPP Policies Test#CredCode#$TestStatus = "Completed"
Domain FGPP Policies Test#CredCode#$SumVal = "NA"
Domain FGPP Policies Test#CredCode#$AnyGap = "No"
Domain FGPP Policies Test#CredCode#
Domain FGPP Policies Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain FGPP Policies Test#CredCode#{
Domain FGPP Policies Test#CredCode#	$R = Get-ADFineGrainedPasswordPolicy -Server $ThisDomain -Filter * -Credential $Creds
Domain FGPP Policies Test#CredCode#	
Domain FGPP Policies Test#CredCode#	ForEach ($Item in $R)
Domain FGPP Policies Test#CredCode#	{
Domain FGPP Policies Test#CredCode#		
Domain FGPP Policies Test#CredCode#		$PolName = $R.Name
Domain FGPP Policies Test#CredCode#		
Domain FGPP Policies Test#CredCode#		$ThisNow = $R.ComplexityEnabled
Domain FGPP Policies Test#CredCode#		$STR = $PolName + "," + "Password Complexity," + $ThisNow + "," + $ThisDomain
Domain FGPP Policies Test#CredCode#		Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#		
Domain FGPP Policies Test#CredCode#		IF ($ThisNow -ne $true)
Domain FGPP Policies Test#CredCode#		{
Domain FGPP Policies Test#CredCode#			$AnyGap = "Yes"
Domain FGPP Policies Test#CredCode#			
Domain FGPP Policies Test#CredCode#		}
Domain FGPP Policies Test#CredCode#		
Domain FGPP Policies Test#CredCode#		$ThisNow = $R.LockoutDuration
Domain FGPP Policies Test#CredCode#		$STR = $PolName + "," + "Lockout Duration," + $ThisNow + "," + $ThisDomain
Domain FGPP Policies Test#CredCode#		Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#		
Domain FGPP Policies Test#CredCode#		$ThisNow = $R.LockoutObservationWindow
Domain FGPP Policies Test#CredCode#		$STR = $PolName + "," + "Lockout Observation Window," + $ThisNow + "," + $ThisDomain
Domain FGPP Policies Test#CredCode#		Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#		
Domain FGPP Policies Test#CredCode#		$ThisNow = $R.LockoutThreshold
Domain FGPP Policies Test#CredCode#		$STR = $PolName + "," + "Lockout Threshold," + $ThisNow + "," + $ThisDomain
Domain FGPP Policies Test#CredCode#		Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#		
Domain FGPP Policies Test#CredCode#		$ThisNow = $R.MaxPasswordAge
Domain FGPP Policies Test#CredCode#		$STR = $PolName + "," + "Maximum Password Age," + $ThisNow + "," + $ThisDomain
Domain FGPP Policies Test#CredCode#		Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#		
Domain FGPP Policies Test#CredCode#		$ThisNow = $R.MinPasswordAge
Domain FGPP Policies Test#CredCode#		$STR = $PolName + "," + "Minimum Password Age," + $ThisNow + "," + $ThisDomain
Domain FGPP Policies Test#CredCode#		Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#		
Domain FGPP Policies Test#CredCode#		$ThisNow = $R.MinPasswordLength
Domain FGPP Policies Test#CredCode#		$STR = $PolName + "," + "Minimum Password Length," + $ThisNow + "," + $ThisDomain
Domain FGPP Policies Test#CredCode#		Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#		
Domain FGPP Policies Test#CredCode#		$ThisNow = $R.PasswordHistoryCount
Domain FGPP Policies Test#CredCode#		$STR = $PolName + "," + "Password History Count," + $ThisNow + "," + $ThisDomain
Domain FGPP Policies Test#CredCode#		Add-Content $TestCSVFile $STR
Domain FGPP Policies Test#CredCode#		
Domain FGPP Policies Test#CredCode#	}
Domain FGPP Policies Test#CredCode#	
Domain FGPP Policies Test#CredCode#}
Domain FGPP Policies Test#CredCode#
Domain FGPP Policies Test#CredCode#IF ($AnyGap -eq "Yes")
Domain FGPP Policies Test#CredCode#{
Domain FGPP Policies Test#CredCode#	
Domain FGPP Policies Test#CredCode#	$TestText = " "
Domain FGPP Policies Test#CredCode#	$SumVal = ""
Domain FGPP Policies Test#CredCode#	$TestStatus = "High"
Domain FGPP Policies Test#CredCode#	
Domain FGPP Policies Test#CredCode#	
Domain FGPP Policies Test#CredCode#}
Domain FGPP Policies Test#CredCode#else
Domain FGPP Policies Test#CredCode#{
Domain FGPP Policies Test#CredCode#	
Domain FGPP Policies Test#CredCode#	$TestText = " "
Domain FGPP Policies Test#CredCode#	$SumVal = ""
Domain FGPP Policies Test#CredCode#	$TestStatus = "Passed"
Domain FGPP Policies Test#CredCode#	
Domain FGPP Policies Test#CredCode#}
Default Administrator Account Test#CredCode#
Default Administrator Account Test#CredCode#$TotNo = 0
Default Administrator Account Test#CredCode#$ItemCount = 0
Default Administrator Account Test#CredCode#$TestText = "Please check result"
Default Administrator Account Test#CredCode#$TestStatus = "Completed"
Default Administrator Account Test#CredCode#$SumVal = "NA"
Default Administrator Account Test#CredCode#$AnyGap = "No"
Default Administrator Account Test#CredCode#
Default Administrator Account Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Default Administrator Account Test#CredCode#{
Default Administrator Account Test#CredCode#	$Error.Clear()
Default Administrator Account Test#CredCode#	
Default Administrator Account Test#CredCode#	$R = Get-ADUser -Identity Administrator -Server $ThisDomain -Credential $Creds | Select-Object SamAccountName, Enabled 
Default Administrator Account Test#CredCode#	IF ($Error.count -eq 0)
Default Administrator Account Test#CredCode#	{
Default Administrator Account Test#CredCode#		$EnaStatus = $R.Enabled
Default Administrator Account Test#CredCode#		$NameNow = $R.SamAccountName
Default Administrator Account Test#CredCode#		
Default Administrator Account Test#CredCode#		$STR = $NameNow + "," + $EnaStatus + "," + $ThisDomain + ", NOT OK"
Default Administrator Account Test#CredCode#		Add-Content $TestCSVFile $STR
Default Administrator Account Test#CredCode#		$AnyGap = "Yes"
Default Administrator Account Test#CredCode#		
Default Administrator Account Test#CredCode#	}
Default Administrator Account Test#CredCode#	else
Default Administrator Account Test#CredCode#	{
Default Administrator Account Test#CredCode#		$EnaStatus = "NA"
Default Administrator Account Test#CredCode#		$STR = "Default Administrator account renamed" + "," + $EnaStatus + "," + $ThisDomain + ", OK"
Default Administrator Account Test#CredCode#		Add-Content $TestCSVFile $STR
Default Administrator Account Test#CredCode#		
Default Administrator Account Test#CredCode#	}
Default Administrator Account Test#CredCode#	
Default Administrator Account Test#CredCode#}
Default Administrator Account Test#CredCode#
Default Administrator Account Test#CredCode#IF ($AnyGap -eq "Yes")
Default Administrator Account Test#CredCode#{
Default Administrator Account Test#CredCode#	
Default Administrator Account Test#CredCode#	$TestText = " "
Default Administrator Account Test#CredCode#	$SumVal = ""
Default Administrator Account Test#CredCode#	$TestStatus = "High"
Default Administrator Account Test#CredCode#	
Default Administrator Account Test#CredCode#	
Default Administrator Account Test#CredCode#}
Default Administrator Account Test#CredCode#else
Default Administrator Account Test#CredCode#{
Default Administrator Account Test#CredCode#	
Default Administrator Account Test#CredCode#	$TestText = " "
Default Administrator Account Test#CredCode#	$SumVal = ""
Default Administrator Account Test#CredCode#	$TestStatus = "Passed"
Default Administrator Account Test#CredCode#	
Default Administrator Account Test#CredCode#}
Get AD Domain FGPP Application Test#CredCode#
Get AD Domain FGPP Application Test#CredCode#$TotNo = 0
Get AD Domain FGPP Application Test#CredCode#$ItemCount = 0
Get AD Domain FGPP Application Test#CredCode#$TestText = "Please check result"
Get AD Domain FGPP Application Test#CredCode#$TestStatus = "Completed"
Get AD Domain FGPP Application Test#CredCode#$SumVal = "NA"
Get AD Domain FGPP Application Test#CredCode#$AnyGap = "No"
Get AD Domain FGPP Application Test#CredCode#
Get AD Domain FGPP Application Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Get AD Domain FGPP Application Test#CredCode#{
Get AD Domain FGPP Application Test#CredCode#	$R = Get-ADFineGrainedPasswordPolicy -Server $ThisDomain -Filter * -Credential $Creds
Get AD Domain FGPP Application Test#CredCode#	
Get AD Domain FGPP Application Test#CredCode#	ForEach ($Item in $R)
Get AD Domain FGPP Application Test#CredCode#	{
Get AD Domain FGPP Application Test#CredCode#		
Get AD Domain FGPP Application Test#CredCode#		$PolName = $R.Name
Get AD Domain FGPP Application Test#CredCode#		$AppTo = $R.AppliesTo
Get AD Domain FGPP Application Test#CredCode#		$TotCountNow = $AppTo.Count
Get AD Domain FGPP Application Test#CredCode#		
Get AD Domain FGPP Application Test#CredCode#		IF ($TotCountNow -eq 0)
Get AD Domain FGPP Application Test#CredCode#		{
Get AD Domain FGPP Application Test#CredCode#			$AnyGap = "Yes"
Get AD Domain FGPP Application Test#CredCode#			$STR = $PolName + "," + $ThisDomain + "," + '"' + $AppTo + '"' + ", Not Applied"
Get AD Domain FGPP Application Test#CredCode#			Add-Content $TestCSVFile $STR
Get AD Domain FGPP Application Test#CredCode#			
Get AD Domain FGPP Application Test#CredCode#		}
Get AD Domain FGPP Application Test#CredCode#		else
Get AD Domain FGPP Application Test#CredCode#		{
Get AD Domain FGPP Application Test#CredCode#			$STR = $PolName + "," + $ThisDomain + "," + '"' + $AppTo + '"' + ", Ok"
Get AD Domain FGPP Application Test#CredCode#			Add-Content $TestCSVFile $STR
Get AD Domain FGPP Application Test#CredCode#			
Get AD Domain FGPP Application Test#CredCode#		}
Get AD Domain FGPP Application Test#CredCode#		
Get AD Domain FGPP Application Test#CredCode#	}
Get AD Domain FGPP Application Test#CredCode#	
Get AD Domain FGPP Application Test#CredCode#}
Get AD Domain FGPP Application Test#CredCode#
Get AD Domain FGPP Application Test#CredCode#IF ($AnyGap -eq "Yes")
Get AD Domain FGPP Application Test#CredCode#{
Get AD Domain FGPP Application Test#CredCode#	
Get AD Domain FGPP Application Test#CredCode#	$TestText = " "
Get AD Domain FGPP Application Test#CredCode#	$SumVal = ""
Get AD Domain FGPP Application Test#CredCode#	$TestStatus = "High"
Get AD Domain FGPP Application Test#CredCode#	
Get AD Domain FGPP Application Test#CredCode#	
Get AD Domain FGPP Application Test#CredCode#}
Get AD Domain FGPP Application Test#CredCode#else
Get AD Domain FGPP Application Test#CredCode#{
Get AD Domain FGPP Application Test#CredCode#	
Get AD Domain FGPP Application Test#CredCode#	$TestText = " "
Get AD Domain FGPP Application Test#CredCode#	$SumVal = ""
Get AD Domain FGPP Application Test#CredCode#	$TestStatus = "Passed"
Get AD Domain FGPP Application Test#CredCode#	
Get AD Domain FGPP Application Test#CredCode#}
Get AD Users Token Size Test#CredCode#$STR = "DistinguishedName, User Token Size, Global Groups, Universal Groups, Domain Local Groups, Groups With SID History, All Groups"
Get AD Users Token Size Test#CredCode#Add-Content $TestCSVFile $STR
Get AD Users Token Size Test#CredCode#$TotNo = 0
Get AD Users Token Size Test#CredCode#$ItemCount = 0
Get AD Users Token Size Test#CredCode#$TestText = "Please check result"
Get AD Users Token Size Test#CredCode#$TestStatus = "Completed"
Get AD Users Token Size Test#CredCode#$SumVal = "NA"
Get AD Users Token Size Test#CredCode#$AnyGap = "No"
Get AD Users Token Size Test#CredCode#
Get AD Users Token Size Test#CredCode#function Get-ADTokenSize
Get AD Users Token Size Test#CredCode#{
Get AD Users Token Size Test#CredCode#	#>	
Get AD Users Token Size Test#CredCode#	[CmdletBinding()]
Get AD Users Token Size Test#CredCode#	param ([Parameter(Mandatory = $True, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]
Get AD Users Token Size Test#CredCode#		[Alias('SamAccountName', 'DistinguishedName', 'ObjectGUID', 'SID')]
Get AD Users Token Size Test#CredCode#		[string]$Identity,
Get AD Users Token Size Test#CredCode#		[string]$Server)
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#	BEGIN { }
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#	PROCESS
Get AD Users Token Size Test#CredCode#	{
Get AD Users Token Size Test#CredCode#		# Make sure the user exists and that we have the distinguished name of it.
Get AD Users Token Size Test#CredCode#		try
Get AD Users Token Size Test#CredCode#		{
Get AD Users Token Size Test#CredCode#			$UserDN = Get-ADUser -Identity $Identity -Server $Server -Credential $Creds -ErrorAction Stop | select -ExpandProperty DistinguishedName -ErrorAction Stop
Get AD Users Token Size Test#CredCode#			
Get AD Users Token Size Test#CredCode#		}
Get AD Users Token Size Test#CredCode#		catch
Get AD Users Token Size Test#CredCode#		{
Get AD Users Token Size Test#CredCode#			Write-Error "Failed to locate the user in Active Directory. The error was: $($Error[0])"
Get AD Users Token Size Test#CredCode#			return
Get AD Users Token Size Test#CredCode#			
Get AD Users Token Size Test#CredCode#		}
Get AD Users Token Size Test#CredCode#		
Get AD Users Token Size Test#CredCode#		# Get the group memberships using LDAP_MATCHING_RULE_IN_CHAIN
Get AD Users Token Size Test#CredCode#		try
Get AD Users Token Size Test#CredCode#		{
Get AD Users Token Size Test#CredCode#			$Groups = Get-ADGroup -Credential $Creds -LDAPFilter "(member:1.2.840.113556.1.4.1941:=$UserDN)" -Properties sIDHistory -Server $Server -ErrorAction Stop
Get AD Users Token Size Test#CredCode#			
Get AD Users Token Size Test#CredCode#		}
Get AD Users Token Size Test#CredCode#		catch
Get AD Users Token Size Test#CredCode#		{
Get AD Users Token Size Test#CredCode#			Write-Error "Failed to lookup group memberships. The error was: $($Error[0])"
Get AD Users Token Size Test#CredCode#			return
Get AD Users Token Size Test#CredCode#			
Get AD Users Token Size Test#CredCode#		}
Get AD Users Token Size Test#CredCode#		
Get AD Users Token Size Test#CredCode#		# Initialize the variables and set token size to 1200 (ticket penalty)
Get AD Users Token Size Test#CredCode#		[int]$UserTokenSize = 1200
Get AD Users Token Size Test#CredCode#		[int]$GlobalGroups = 0
Get AD Users Token Size Test#CredCode#		[int]$UniversalGroups = 0
Get AD Users Token Size Test#CredCode#		[int]$DomainLocalGroups = 0
Get AD Users Token Size Test#CredCode#		[int]$GroupsWithSidHistory = 0
Get AD Users Token Size Test#CredCode#		
Get AD Users Token Size Test#CredCode#		# loop through them and check the type and token size of them
Get AD Users Token Size Test#CredCode#		foreach ($Group in $Groups)
Get AD Users Token Size Test#CredCode#		{
Get AD Users Token Size Test#CredCode#			Remove-Variable GroupTokenSize -ErrorAction SilentlyContinue
Get AD Users Token Size Test#CredCode#			
Get AD Users Token Size Test#CredCode#			# If they have a sidhistory the size is always 40
Get AD Users Token Size Test#CredCode#			if ($Group.SIDHistory.Count -ge 1)
Get AD Users Token Size Test#CredCode#			{
Get AD Users Token Size Test#CredCode#				[int]$GroupTokenSize = 40
Get AD Users Token Size Test#CredCode#				$GroupsWithSidHistory++
Get AD Users Token Size Test#CredCode#				
Get AD Users Token Size Test#CredCode#			}
Get AD Users Token Size Test#CredCode#			else
Get AD Users Token Size Test#CredCode#			{
Get AD Users Token Size Test#CredCode#				# otherwise set it according to the group scope
Get AD Users Token Size Test#CredCode#				[int]$GroupTokenSize = switch ($Group.GroupScope)
Get AD Users Token Size Test#CredCode#				{
Get AD Users Token Size Test#CredCode#					'Global'       { 8; $GlobalGroups++ }
Get AD Users Token Size Test#CredCode#					'Universal'    { 8; $UniversalGroups++ }
Get AD Users Token Size Test#CredCode#					'DomainLocal'  { 40; $DomainLocalGroups++ }
Get AD Users Token Size Test#CredCode#					
Get AD Users Token Size Test#CredCode#				}
Get AD Users Token Size Test#CredCode#				
Get AD Users Token Size Test#CredCode#			}
Get AD Users Token Size Test#CredCode#			
Get AD Users Token Size Test#CredCode#			# add it to the total size
Get AD Users Token Size Test#CredCode#			$UserTokenSize += $GroupTokenSize
Get AD Users Token Size Test#CredCode#			
Get AD Users Token Size Test#CredCode#			
Get AD Users Token Size Test#CredCode#		}
Get AD Users Token Size Test#CredCode#		
Get AD Users Token Size Test#CredCode#		# count all the groups
Get AD Users Token Size Test#CredCode#		[int]$AllGroups = $GlobalGroups + $UniversalGroups + $DomainLocalGroups
Get AD Users Token Size Test#CredCode#		
Get AD Users Token Size Test#CredCode#		# create the object
Get AD Users Token Size Test#CredCode#		$returnObject = New-Object System.Object
Get AD Users Token Size Test#CredCode#		$returnObject | Add-Member -Type NoteProperty -Name DistinguishedName -Value $UserDN
Get AD Users Token Size Test#CredCode#		$returnObject | Add-Member -Type NoteProperty -Name EstimatedTokenSize -Value $UserTokenSize
Get AD Users Token Size Test#CredCode#		$returnObject | Add-Member -Type NoteProperty -Name GlobalGroups -Value $GlobalGroups
Get AD Users Token Size Test#CredCode#		$returnObject | Add-Member -Type NoteProperty -Name UniversalGroups -Value $UniversalGroups
Get AD Users Token Size Test#CredCode#		$returnObject | Add-Member -Type NoteProperty -Name DomainLocalGroups -Value $DomainLocalGroups
Get AD Users Token Size Test#CredCode#		$returnObject | Add-Member -Type NoteProperty -Name GroupsWithSidHistory -Value $GroupsWithSidHistory
Get AD Users Token Size Test#CredCode#		$returnObject | Add-Member -Type NoteProperty -Name AllGroups -Value $AllGroups
Get AD Users Token Size Test#CredCode#		
Get AD Users Token Size Test#CredCode#		Write-Output $returnObject
Get AD Users Token Size Test#CredCode#		
Get AD Users Token Size Test#CredCode#	}
Get AD Users Token Size Test#CredCode#	END { }
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#}
Get AD Users Token Size Test#CredCode#
Get AD Users Token Size Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Get AD Users Token Size Test#CredCode#{
Get AD Users Token Size Test#CredCode#	$Error.Clear()
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#	$R = Get-ADUser -Filter * -Credential $Creds | Get-ADTokenSize -Server $ThisDomain, $Creds
Get AD Users Token Size Test#CredCode#	foreach ($ItemNow in $R)
Get AD Users Token Size Test#CredCode#	{
Get AD Users Token Size Test#CredCode#		$STR = '"' + $ItemNow.DistinguishedName + '"' + "," + $ItemNow.EstimatedTokenSize + "," + $ItemNow.GlobalGroups + "," + $ItemNow.UniversalGroups + "," + $ItemNow.DomainLocalGroups + "," + $ItemNow.GroupsWithSidHistory + "," + $ItemNow.AllGroups
Get AD Users Token Size Test#CredCode#		Add-Content $TestCSVFile $STR
Get AD Users Token Size Test#CredCode#		$AnyGap = "Yes"
Get AD Users Token Size Test#CredCode#		
Get AD Users Token Size Test#CredCode#	}
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#}
Get AD Users Token Size Test#CredCode#
Get AD Users Token Size Test#CredCode#IF ($AnyGap -eq "Yes")
Get AD Users Token Size Test#CredCode#{
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#	$TestText = " "
Get AD Users Token Size Test#CredCode#	$SumVal = ""
Get AD Users Token Size Test#CredCode#	$TestStatus = "High"
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#}
Get AD Users Token Size Test#CredCode#else
Get AD Users Token Size Test#CredCode#{
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#	$TestText = " "
Get AD Users Token Size Test#CredCode#	$SumVal = ""
Get AD Users Token Size Test#CredCode#	$TestStatus = "Passed"
Get AD Users Token Size Test#CredCode#	
Get AD Users Token Size Test#CredCode#}
Domain Managed Service Accounts Test#CredCode#$TotNo = 0
Domain Managed Service Accounts Test#CredCode#$ItemCount = 0
Domain Managed Service Accounts Test#CredCode#$TestText = "Please check result"
Domain Managed Service Accounts Test#CredCode#$TestStatus = "Completed"
Domain Managed Service Accounts Test#CredCode#$SumVal = "NA"
Domain Managed Service Accounts Test#CredCode#$AnyGap = "No"
Domain Managed Service Accounts Test#CredCode#
Domain Managed Service Accounts Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Managed Service Accounts Test#CredCode#{
Domain Managed Service Accounts Test#CredCode#	
Domain Managed Service Accounts Test#CredCode#	$AllServiceAccounts = Get-ADServiceAccount -Filter * -Server $ThisDomain -Credential $Creds
Domain Managed Service Accounts Test#CredCode#	
Domain Managed Service Accounts Test#CredCode#	ForEach ($Item in $AllServiceAccounts)
Domain Managed Service Accounts Test#CredCode#	{
Domain Managed Service Accounts Test#CredCode#		$AnyGap = "Yes"
Domain Managed Service Accounts Test#CredCode#		$ThisDName = $Item.Name
Domain Managed Service Accounts Test#CredCode#		$STR = $ThisDName + "," + $ThisDomain
Domain Managed Service Accounts Test#CredCode#		Add-Content $TestCSVFile $STR
Domain Managed Service Accounts Test#CredCode#		
Domain Managed Service Accounts Test#CredCode#	}
Domain Managed Service Accounts Test#CredCode#	
Domain Managed Service Accounts Test#CredCode#}
Domain Managed Service Accounts Test#CredCode#
Domain Managed Service Accounts Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Managed Service Accounts Test#CredCode#{
Domain Managed Service Accounts Test#CredCode#	
Domain Managed Service Accounts Test#CredCode#	$TestText = " "
Domain Managed Service Accounts Test#CredCode#	$SumVal = ""
Domain Managed Service Accounts Test#CredCode#	$TestStatus = "Low"
Domain Managed Service Accounts Test#CredCode#	
Domain Managed Service Accounts Test#CredCode#	
Domain Managed Service Accounts Test#CredCode#}
Domain Managed Service Accounts Test#CredCode#else
Domain Managed Service Accounts Test#CredCode#{
Domain Managed Service Accounts Test#CredCode#	
Domain Managed Service Accounts Test#CredCode#	$TestText = " "
Domain Managed Service Accounts Test#CredCode#	$SumVal = ""
Domain Managed Service Accounts Test#CredCode#	$TestStatus = "Passed"
Domain Managed Service Accounts Test#CredCode#	
Domain Managed Service Accounts Test#CredCode#}
Domain Organizational Unit Full Control Access Rights Test#CredCode#$TotNo = 0
Domain Organizational Unit Full Control Access Rights Test#CredCode#$ItemCount = 0
Domain Organizational Unit Full Control Access Rights Test#CredCode#$TestText = "Please check result"
Domain Organizational Unit Full Control Access Rights Test#CredCode#$TestStatus = "Completed"
Domain Organizational Unit Full Control Access Rights Test#CredCode#$SumVal = "NA"
Domain Organizational Unit Full Control Access Rights Test#CredCode#$AnyGap = "No"
Domain Organizational Unit Full Control Access Rights Test#CredCode#
Domain Organizational Unit Full Control Access Rights Test#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Domain Organizational Unit Full Control Access Rights Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Organizational Unit Full Control Access Rights Test#CredCode#$STR = "OU Name, Full Control Account, AD Domain"
Domain Organizational Unit Full Control Access Rights Test#CredCode#Add-Content $DataFileLocation $STR
Domain Organizational Unit Full Control Access Rights Test#CredCode#
Domain Organizational Unit Full Control Access Rights Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Organizational Unit Full Control Access Rights Test#CredCode#{
Domain Organizational Unit Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Full Control Access Rights Test#CredCode#	$AllOUs = Get-ADOrganizationalUnit -Filter * -Server $ThisDomain -Credential $Creds
Domain Organizational Unit Full Control Access Rights Test#CredCode#	$TotOUsNow = $AllOUs.Count
Domain Organizational Unit Full Control Access Rights Test#CredCode#	$TotWithFullControlsCount = 0
Domain Organizational Unit Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Full Control Access Rights Test#CredCode#	ForEach ($EachOU in $AllOUs)
Domain Organizational Unit Full Control Access Rights Test#CredCode#	{
Domain Organizational Unit Full Control Access Rights Test#CredCode#		$ThisDName = $EachOU.DistinguishedName
Domain Organizational Unit Full Control Access Rights Test#CredCode#		$R = (Get-ACL "AD:$((Get-ADOrganizationalUnit -Credential $Creds -Server $ThisDomain -Identity "$ThisDName").distinguishedname)").access | Select-Object IdentityReference, ActiveDirectoryRights
Domain Organizational Unit Full Control Access Rights Test#CredCode#		
Domain Organizational Unit Full Control Access Rights Test#CredCode#		ForEach ($Perms in $R)
Domain Organizational Unit Full Control Access Rights Test#CredCode#		{
Domain Organizational Unit Full Control Access Rights Test#CredCode#			$PermNow = $Perms.ActiveDirectoryRights
Domain Organizational Unit Full Control Access Rights Test#CredCode#			$IDRef = $Perms.IdentityReference
Domain Organizational Unit Full Control Access Rights Test#CredCode#			
Domain Organizational Unit Full Control Access Rights Test#CredCode#			IF ($PermNow -eq "GenericAll")
Domain Organizational Unit Full Control Access Rights Test#CredCode#			{
Domain Organizational Unit Full Control Access Rights Test#CredCode#				$TotWithFullControlsCount++
Domain Organizational Unit Full Control Access Rights Test#CredCode#				$AnyGap = "Yes"
Domain Organizational Unit Full Control Access Rights Test#CredCode#				$RemovedComma = $ThisDName.replace(",", " ")
Domain Organizational Unit Full Control Access Rights Test#CredCode#				$STR = '"' + $RemovedComma + '"' + $IDRef + "," + $ThisDomain
Domain Organizational Unit Full Control Access Rights Test#CredCode#				Add-Content $DataFileLocation $STR
Domain Organizational Unit Full Control Access Rights Test#CredCode#				
Domain Organizational Unit Full Control Access Rights Test#CredCode#			}
Domain Organizational Unit Full Control Access Rights Test#CredCode#			
Domain Organizational Unit Full Control Access Rights Test#CredCode#		}
Domain Organizational Unit Full Control Access Rights Test#CredCode#		
Domain Organizational Unit Full Control Access Rights Test#CredCode#	}
Domain Organizational Unit Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Full Control Access Rights Test#CredCode#	IF ($TotWithFullControlsCount -eq 0)
Domain Organizational Unit Full Control Access Rights Test#CredCode#	{
Domain Organizational Unit Full Control Access Rights Test#CredCode#		$FinalStatusNow = "Ok"
Domain Organizational Unit Full Control Access Rights Test#CredCode#		
Domain Organizational Unit Full Control Access Rights Test#CredCode#	}
Domain Organizational Unit Full Control Access Rights Test#CredCode#	else
Domain Organizational Unit Full Control Access Rights Test#CredCode#	{
Domain Organizational Unit Full Control Access Rights Test#CredCode#		$FinalStatusNow = "NOT OK"
Domain Organizational Unit Full Control Access Rights Test#CredCode#		
Domain Organizational Unit Full Control Access Rights Test#CredCode#	}
Domain Organizational Unit Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Full Control Access Rights Test#CredCode#	$STR = $TotOUsNow.ToString() + "," + $TotWithFullControlsCount.ToString() + "," + $ThisDomain + "," + $FinalStatusNow + "," + $DataFileLocation
Domain Organizational Unit Full Control Access Rights Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Organizational Unit Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Full Control Access Rights Test#CredCode#}
Domain Organizational Unit Full Control Access Rights Test#CredCode#
Domain Organizational Unit Full Control Access Rights Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Organizational Unit Full Control Access Rights Test#CredCode#{
Domain Organizational Unit Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Full Control Access Rights Test#CredCode#	$TestText = " "
Domain Organizational Unit Full Control Access Rights Test#CredCode#	$SumVal = ""
Domain Organizational Unit Full Control Access Rights Test#CredCode#	$TestStatus = "High"
Domain Organizational Unit Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Full Control Access Rights Test#CredCode#}
Domain Organizational Unit Full Control Access Rights Test#CredCode#else
Domain Organizational Unit Full Control Access Rights Test#CredCode#{
Domain Organizational Unit Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Full Control Access Rights Test#CredCode#	$TestText = " "
Domain Organizational Unit Full Control Access Rights Test#CredCode#	$SumVal = ""
Domain Organizational Unit Full Control Access Rights Test#CredCode#	$TestStatus = "Passed"
Domain Organizational Unit Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Full Control Access Rights Test#CredCode#}
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#$TotNo = 0
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#$ItemCount = 0
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#$TestText = "Please check result"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#$TestStatus = "Completed"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#$SumVal = "NA"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#$AnyGap = "No"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#{
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	$AllOUs = Get-ADOrganizationalUnit -Filter * -Server $ThisDomain -Credential $Creds
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	$TotOUsNow = $AllOUs.Count
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	$TotWithFullControlsCount = 0
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	ForEach ($EachOU in $AllOUs)
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	{
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		$ThisDName = $EachOU.DistinguishedName
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		$DispName = $EachOU.Name
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		$R = (Get-ACL "AD:$((Get-ADOrganizationalUnit -Credential $Creds -Server $ThisDomain -Identity "$ThisDName").distinguishedname)").access | Select-Object IdentityReference, ActiveDirectoryRights
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		$ThisDName
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		$FoundOrNot = "No"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		ForEach ($Perms in $R)
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		{
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#			$PermNow = $Perms.ActiveDirectoryRights
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#			$IDRef = $Perms.IdentityReference
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#			
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#			IF ($PermNow -eq "GenericAll" -and $IDRef -eq "Everyone")
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#			{
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#				$FoundOrNot = "Yes"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#				$AnyGap = "Yes"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#				break
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#				
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#			}
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#			
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		}
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		IF ($FoundOrNot -eq "Yes")
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		{
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#			$STR = $DispName + ",Yes," + $ThisDomain + ",NOT OK"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#			Add-Content $TestCSVFile $STR
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#			
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		}
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		else
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		{
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#			$STR = $DispName + ",NO," + $ThisDomain + ",OK"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#			Add-Content $TestCSVFile $STR
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#			
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		}
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#		
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	}
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#}
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#{
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	$TestText = " "
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	$SumVal = ""
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	$TestStatus = "High"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#}
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#else
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#{
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	$TestText = " "
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	$SumVal = ""
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	$TestStatus = "Passed"
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#	
Domain Organizational Unit Everyone Full Control Access Rights Test#CredCode#}
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#$TotNo = 0
Domain Controllers Internet Access Test#CredCode#$ItemCount = 0
Domain Controllers Internet Access Test#CredCode#$TestText = "Please check result"
Domain Controllers Internet Access Test#CredCode#$TestStatus = "Completed"
Domain Controllers Internet Access Test#CredCode#$SumVal = "NA"
Domain Controllers Internet Access Test#CredCode#$AnyGap = "No"
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controllers Internet Access Test#CredCode#{
Domain Controllers Internet Access Test#CredCode#	
Domain Controllers Internet Access Test#CredCode#	$IntOnOrNot = ""
Domain Controllers Internet Access Test#CredCode#	
Domain Controllers Internet Access Test#CredCode#	$Error.Clear()
Domain Controllers Internet Access Test#CredCode#	$NetStatus = Invoke-Command -ComputerName $ItemName -Script { Test-Connection www.google.com } -Credential $Creds
Domain Controllers Internet Access Test#CredCode#	IF ($Error.Count -eq 0)
Domain Controllers Internet Access Test#CredCode#	{
Domain Controllers Internet Access Test#CredCode#		$TotNetCount = $NetStatus.Count
Domain Controllers Internet Access Test#CredCode#		
Domain Controllers Internet Access Test#CredCode#		IF ($TotNetCount -eq 4)
Domain Controllers Internet Access Test#CredCode#		{
Domain Controllers Internet Access Test#CredCode#			$STR = $ItemName + ", Internet is Accessible from Domain Controller, NOT OK"
Domain Controllers Internet Access Test#CredCode#			Add-Content $TestCSVFile $STR
Domain Controllers Internet Access Test#CredCode#			$AnyGap = "Yes"
Domain Controllers Internet Access Test#CredCode#			
Domain Controllers Internet Access Test#CredCode#		}
Domain Controllers Internet Access Test#CredCode#		else
Domain Controllers Internet Access Test#CredCode#		{
Domain Controllers Internet Access Test#CredCode#			$STR = $ItemName + ", Not Accessible, OK"
Domain Controllers Internet Access Test#CredCode#			Add-Content $TestCSVFile $STR
Domain Controllers Internet Access Test#CredCode#			
Domain Controllers Internet Access Test#CredCode#		}
Domain Controllers Internet Access Test#CredCode#		
Domain Controllers Internet Access Test#CredCode#		
Domain Controllers Internet Access Test#CredCode#	}
Domain Controllers Internet Access Test#CredCode#	else
Domain Controllers Internet Access Test#CredCode#	{
Domain Controllers Internet Access Test#CredCode#		$STR = $ItemName + ", ERROR: NOT Reachable"
Domain Controllers Internet Access Test#CredCode#		Add-Content $TestCSVFile $STR
Domain Controllers Internet Access Test#CredCode#		
Domain Controllers Internet Access Test#CredCode#	}
Domain Controllers Internet Access Test#CredCode#	
Domain Controllers Internet Access Test#CredCode#	
Domain Controllers Internet Access Test#CredCode#}
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#$AnyGap = "Yes"
Domain Controllers Internet Access Test#CredCode#
Domain Controllers Internet Access Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controllers Internet Access Test#CredCode#{
Domain Controllers Internet Access Test#CredCode#	
Domain Controllers Internet Access Test#CredCode#	$TestText = "Please ensure Internet is blocked on Domain Controllers."
Domain Controllers Internet Access Test#CredCode#	$SumVal = ""
Domain Controllers Internet Access Test#CredCode#	$TestStatus = "High"
Domain Controllers Internet Access Test#CredCode#	
Domain Controllers Internet Access Test#CredCode#	
Domain Controllers Internet Access Test#CredCode#}
Domain Controllers Internet Access Test#CredCode#else
Domain Controllers Internet Access Test#CredCode#{
Domain Controllers Internet Access Test#CredCode#	
Domain Controllers Internet Access Test#CredCode#	$TestText = " "
Domain Controllers Internet Access Test#CredCode#	$SumVal = ""
Domain Controllers Internet Access Test#CredCode#	$TestStatus = "Passed"
Domain Controllers Internet Access Test#CredCode#	
Domain Controllers Internet Access Test#CredCode#}
Domain Controllers Roles and Features Test#CredCode#
Domain Controllers Roles and Features Test#CredCode#$TotNo = 0
Domain Controllers Roles and Features Test#CredCode#$ItemCount = 0
Domain Controllers Roles and Features Test#CredCode#$TestText = "Please check result"
Domain Controllers Roles and Features Test#CredCode#$TestStatus = "Completed"
Domain Controllers Roles and Features Test#CredCode#$SumVal = "NA"
Domain Controllers Roles and Features Test#CredCode#$AnyGap = "No"
Domain Controllers Roles and Features Test#CredCode#
Domain Controllers Roles and Features Test#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Domain Controllers Roles and Features Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Controllers Roles and Features Test#CredCode#$STR = "Domain Controller, RoleFeature Name, Feature/Role"
Domain Controllers Roles and Features Test#CredCode#Add-Content $DataFileLocation $STR
Domain Controllers Roles and Features Test#CredCode#
Domain Controllers Roles and Features Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controllers Roles and Features Test#CredCode#{
Domain Controllers Roles and Features Test#CredCode#	$Error.Clear()
Domain Controllers Roles and Features Test#CredCode#	$AllFet = Get-WindowsFeature -ComputerName Localhost -Credential $creds | Where-Object { $_."InstallState" -eq "Installed" } | Select-Object FeatureType, Name
Domain Controllers Roles and Features Test#CredCode#	IF ($Error.count -eq 0)
Domain Controllers Roles and Features Test#CredCode#	{
Domain Controllers Roles and Features Test#CredCode#		$TotRoles = 0
Domain Controllers Roles and Features Test#CredCode#		$TotFeatures = 0
Domain Controllers Roles and Features Test#CredCode#		
Domain Controllers Roles and Features Test#CredCode#		ForEach ($Item in $AllFet)
Domain Controllers Roles and Features Test#CredCode#		{
Domain Controllers Roles and Features Test#CredCode#			IF ($Item.FeatureType -eq "Role" -or $Item.FeatureType -eq "Role Service")
Domain Controllers Roles and Features Test#CredCode#			{
Domain Controllers Roles and Features Test#CredCode#				$TotRoles++
Domain Controllers Roles and Features Test#CredCode#				
Domain Controllers Roles and Features Test#CredCode#			}
Domain Controllers Roles and Features Test#CredCode#			IF ($Item.FeatureType -eq "Feature")
Domain Controllers Roles and Features Test#CredCode#			{
Domain Controllers Roles and Features Test#CredCode#				$TotFeatures++
Domain Controllers Roles and Features Test#CredCode#				
Domain Controllers Roles and Features Test#CredCode#			}
Domain Controllers Roles and Features Test#CredCode#			
Domain Controllers Roles and Features Test#CredCode#			$STRNew = $ItemName + "," + $Item.Name + "," + $Item.FeatureType
Domain Controllers Roles and Features Test#CredCode#			Add-Content $DataFileLocation $STRNew
Domain Controllers Roles and Features Test#CredCode#			
Domain Controllers Roles and Features Test#CredCode#		}
Domain Controllers Roles and Features Test#CredCode#		
Domain Controllers Roles and Features Test#CredCode#		$STR = $ItemName + "," + $TotRoles + "," + $TotFeatures + ",NOT OK," + $DataFileLocation
Domain Controllers Roles and Features Test#CredCode#		Add-Content $TestCSVFile $STR
Domain Controllers Roles and Features Test#CredCode#		$AnyGap = "Yes"
Domain Controllers Roles and Features Test#CredCode#		
Domain Controllers Roles and Features Test#CredCode#	}
Domain Controllers Roles and Features Test#CredCode#	else
Domain Controllers Roles and Features Test#CredCode#	{
Domain Controllers Roles and Features Test#CredCode#		$EnaStatus = "NA"
Domain Controllers Roles and Features Test#CredCode#		$STR = $ItemName + " ERROR: Not Reachable" + ","
Domain Controllers Roles and Features Test#CredCode#		Add-Content $TestCSVFile $STR
Domain Controllers Roles and Features Test#CredCode#		
Domain Controllers Roles and Features Test#CredCode#	}
Domain Controllers Roles and Features Test#CredCode#	
Domain Controllers Roles and Features Test#CredCode#}
Domain Controllers Roles and Features Test#CredCode#
Domain Controllers Roles and Features Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controllers Roles and Features Test#CredCode#{
Domain Controllers Roles and Features Test#CredCode#	
Domain Controllers Roles and Features Test#CredCode#	$TestText = " "
Domain Controllers Roles and Features Test#CredCode#	$SumVal = ""
Domain Controllers Roles and Features Test#CredCode#	$TestStatus = "High"
Domain Controllers Roles and Features Test#CredCode#	
Domain Controllers Roles and Features Test#CredCode#	
Domain Controllers Roles and Features Test#CredCode#}
Domain Controllers Roles and Features Test#CredCode#else
Domain Controllers Roles and Features Test#CredCode#{
Domain Controllers Roles and Features Test#CredCode#	
Domain Controllers Roles and Features Test#CredCode#	$TestText = " "
Domain Controllers Roles and Features Test#CredCode#	$SumVal = ""
Domain Controllers Roles and Features Test#CredCode#	$TestStatus = "Passed"
Domain Controllers Roles and Features Test#CredCode#	
Domain Controllers Roles and Features Test#CredCode#}
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Domain Controller Audit Policy Configuration Consistency Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$TotNo = 0
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$ItemCount = 0
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$TestText = "Please check result"
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$TestStatus = "Completed"
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$SumVal = "NA"
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$AnyGap = "No"
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Audit Policy Configuration Consistency Test#CredCode#{
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	$IntOnOrNot = ""
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	Remove-item $DataFileLocation -ErrorAction SilentlyContinue
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	$Error.Clear()
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	$AuditStatus = Invoke-Command -ComputerName $ItemName -Script { auditpol.exe /get /Category:* /r } -Credential $Creds
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	IF ($Error.Count -eq 0)
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	{
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		$AuditStatus > $DataFileLocation
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		$TotAudited = 0
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		$TotNotAudited = 0
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		$CSV = Import-CSV $DataFileLocation
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		ForEach ($Item in $CSV)
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		{
Domain Controller Audit Policy Configuration Consistency Test#CredCode#			$MName = $Item.Subcategory
Domain Controller Audit Policy Configuration Consistency Test#CredCode#			$IncSet = $Item.'Inclusion Setting'
Domain Controller Audit Policy Configuration Consistency Test#CredCode#			IF ($MName -eq $null -or $MName -eq "")
Domain Controller Audit Policy Configuration Consistency Test#CredCode#			{
Domain Controller Audit Policy Configuration Consistency Test#CredCode#				
Domain Controller Audit Policy Configuration Consistency Test#CredCode#			}
Domain Controller Audit Policy Configuration Consistency Test#CredCode#			else
Domain Controller Audit Policy Configuration Consistency Test#CredCode#			{
Domain Controller Audit Policy Configuration Consistency Test#CredCode#				IF ($IncSet -eq "No Auditing")
Domain Controller Audit Policy Configuration Consistency Test#CredCode#				{
Domain Controller Audit Policy Configuration Consistency Test#CredCode#					$TotNotAudited++
Domain Controller Audit Policy Configuration Consistency Test#CredCode#					
Domain Controller Audit Policy Configuration Consistency Test#CredCode#				}
Domain Controller Audit Policy Configuration Consistency Test#CredCode#				else
Domain Controller Audit Policy Configuration Consistency Test#CredCode#				{
Domain Controller Audit Policy Configuration Consistency Test#CredCode#					$TotAudited++
Domain Controller Audit Policy Configuration Consistency Test#CredCode#					
Domain Controller Audit Policy Configuration Consistency Test#CredCode#				}
Domain Controller Audit Policy Configuration Consistency Test#CredCode#				
Domain Controller Audit Policy Configuration Consistency Test#CredCode#			}
Domain Controller Audit Policy Configuration Consistency Test#CredCode#			
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		}
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		$STR = $ItemName + "," + $TotAudited.ToString() + "," + $TotNotAudited.ToString()
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		Add-Content $TestCSVFile $STR
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	}
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	else
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	{
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		$STR = $ItemName + ", ERROR: NOT Reachable"
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		Add-Content $TestCSVFile $STR
Domain Controller Audit Policy Configuration Consistency Test#CredCode#		
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	}
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	
Domain Controller Audit Policy Configuration Consistency Test#CredCode#}
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#$AnyGap = "Yes"
Domain Controller Audit Policy Configuration Consistency Test#CredCode#
Domain Controller Audit Policy Configuration Consistency Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Audit Policy Configuration Consistency Test#CredCode#{
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	$TestText = "Please ensure Internet is blocked on Domain Controllers."
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	$SumVal = ""
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	$TestStatus = "High"
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	
Domain Controller Audit Policy Configuration Consistency Test#CredCode#}
Domain Controller Audit Policy Configuration Consistency Test#CredCode#else
Domain Controller Audit Policy Configuration Consistency Test#CredCode#{
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	$TestText = " "
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	$SumVal = ""
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	$TestStatus = "Passed"
Domain Controller Audit Policy Configuration Consistency Test#CredCode#	
Domain Controller Audit Policy Configuration Consistency Test#CredCode#}
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Domain Controller DS Audit Policy Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#$TotNo = 0
Domain Controller DS Audit Policy Test#CredCode#$ItemCount = 0
Domain Controller DS Audit Policy Test#CredCode#$TestText = "Please check result"
Domain Controller DS Audit Policy Test#CredCode#$TestStatus = "Completed"
Domain Controller DS Audit Policy Test#CredCode#$SumVal = "NA"
Domain Controller DS Audit Policy Test#CredCode#$AnyGap = "No"
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller DS Audit Policy Test#CredCode#{
Domain Controller DS Audit Policy Test#CredCode#	
Domain Controller DS Audit Policy Test#CredCode#	$IntOnOrNot = ""
Domain Controller DS Audit Policy Test#CredCode#	Remove-item $DataFileLocation -ErrorAction SilentlyContinue
Domain Controller DS Audit Policy Test#CredCode#	
Domain Controller DS Audit Policy Test#CredCode#	$Error.Clear()
Domain Controller DS Audit Policy Test#CredCode#	$AuditStatus = Invoke-Command -ComputerName $ItemName -Script { auditpol.exe /get /Category:* /r } -Credential $Creds
Domain Controller DS Audit Policy Test#CredCode#	
Domain Controller DS Audit Policy Test#CredCode#	IF ($Error.Count -eq 0)
Domain Controller DS Audit Policy Test#CredCode#	{
Domain Controller DS Audit Policy Test#CredCode#		$AuditStatus > $DataFileLocation
Domain Controller DS Audit Policy Test#CredCode#		
Domain Controller DS Audit Policy Test#CredCode#		$CSV = Import-CSV $DataFileLocation
Domain Controller DS Audit Policy Test#CredCode#		ForEach ($Item in $CSV)
Domain Controller DS Audit Policy Test#CredCode#		{
Domain Controller DS Audit Policy Test#CredCode#			$MName = $Item.Subcategory
Domain Controller DS Audit Policy Test#CredCode#			$IncSet = $Item.'Inclusion Setting'
Domain Controller DS Audit Policy Test#CredCode#			
Domain Controller DS Audit Policy Test#CredCode#			IF ($MName -eq "Directory Service Access")
Domain Controller DS Audit Policy Test#CredCode#			{
Domain Controller DS Audit Policy Test#CredCode#				$DirSuccessOrNot = "Enabled"
Domain Controller DS Audit Policy Test#CredCode#				IF ($IncSet -eq "No Auditing")
Domain Controller DS Audit Policy Test#CredCode#				{
Domain Controller DS Audit Policy Test#CredCode#					$DirSuccessOrNot = "Not Enabled"
Domain Controller DS Audit Policy Test#CredCode#					
Domain Controller DS Audit Policy Test#CredCode#				}
Domain Controller DS Audit Policy Test#CredCode#				
Domain Controller DS Audit Policy Test#CredCode#			}
Domain Controller DS Audit Policy Test#CredCode#			
Domain Controller DS Audit Policy Test#CredCode#			IF ($MName -eq "Directory Service Changes")
Domain Controller DS Audit Policy Test#CredCode#			{
Domain Controller DS Audit Policy Test#CredCode#				$DirChangesOrNot = "Enabled"
Domain Controller DS Audit Policy Test#CredCode#				IF ($IncSet -eq "No Auditing")
Domain Controller DS Audit Policy Test#CredCode#				{
Domain Controller DS Audit Policy Test#CredCode#					$DirChangesOrNot = "Not Enabled"
Domain Controller DS Audit Policy Test#CredCode#					
Domain Controller DS Audit Policy Test#CredCode#				}
Domain Controller DS Audit Policy Test#CredCode#				
Domain Controller DS Audit Policy Test#CredCode#			}
Domain Controller DS Audit Policy Test#CredCode#			
Domain Controller DS Audit Policy Test#CredCode#			IF ($MName -eq "Directory Service Replication")
Domain Controller DS Audit Policy Test#CredCode#			{
Domain Controller DS Audit Policy Test#CredCode#				$DirReplOrNot = "Enabled"
Domain Controller DS Audit Policy Test#CredCode#				IF ($IncSet -eq "No Auditing")
Domain Controller DS Audit Policy Test#CredCode#				{
Domain Controller DS Audit Policy Test#CredCode#					$DirReplOrNot = "Not Enabled"
Domain Controller DS Audit Policy Test#CredCode#					
Domain Controller DS Audit Policy Test#CredCode#				}
Domain Controller DS Audit Policy Test#CredCode#				
Domain Controller DS Audit Policy Test#CredCode#			}
Domain Controller DS Audit Policy Test#CredCode#			
Domain Controller DS Audit Policy Test#CredCode#			IF ($MName -eq "Detailed Directory Service Replication")
Domain Controller DS Audit Policy Test#CredCode#			{
Domain Controller DS Audit Policy Test#CredCode#				$DirReplDOrNot = "Enabled"
Domain Controller DS Audit Policy Test#CredCode#				IF ($IncSet -eq "No Auditing")
Domain Controller DS Audit Policy Test#CredCode#				{
Domain Controller DS Audit Policy Test#CredCode#					$DirReplDOrNot = "Not Enabled"
Domain Controller DS Audit Policy Test#CredCode#					
Domain Controller DS Audit Policy Test#CredCode#				}
Domain Controller DS Audit Policy Test#CredCode#				
Domain Controller DS Audit Policy Test#CredCode#			}
Domain Controller DS Audit Policy Test#CredCode#			
Domain Controller DS Audit Policy Test#CredCode#		}
Domain Controller DS Audit Policy Test#CredCode#		
Domain Controller DS Audit Policy Test#CredCode#		$STR = $ItemName + "," + $DirSuccessOrNot + "," + $DirChangesOrNot + "," + $DirReplOrNot + "," + $DirReplDOrNot
Domain Controller DS Audit Policy Test#CredCode#		Add-Content $TestCSVFile $STR
Domain Controller DS Audit Policy Test#CredCode#		
Domain Controller DS Audit Policy Test#CredCode#		
Domain Controller DS Audit Policy Test#CredCode#	}
Domain Controller DS Audit Policy Test#CredCode#	else
Domain Controller DS Audit Policy Test#CredCode#	{
Domain Controller DS Audit Policy Test#CredCode#		$STR = $ItemName + ", ERROR: NOT Reachable"
Domain Controller DS Audit Policy Test#CredCode#		Add-Content $TestCSVFile $STR
Domain Controller DS Audit Policy Test#CredCode#		
Domain Controller DS Audit Policy Test#CredCode#	}
Domain Controller DS Audit Policy Test#CredCode#	
Domain Controller DS Audit Policy Test#CredCode#	
Domain Controller DS Audit Policy Test#CredCode#}
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#$AnyGap = "Yes"
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller DS Audit Policy Test#CredCode#{
Domain Controller DS Audit Policy Test#CredCode#	
Domain Controller DS Audit Policy Test#CredCode#	$TestText = "Please ensure Internet is blocked on Domain Controllers."
Domain Controller DS Audit Policy Test#CredCode#	$SumVal = ""
Domain Controller DS Audit Policy Test#CredCode#	$TestStatus = "High"
Domain Controller DS Audit Policy Test#CredCode#	
Domain Controller DS Audit Policy Test#CredCode#	
Domain Controller DS Audit Policy Test#CredCode#}
Domain Controller DS Audit Policy Test#CredCode#else
Domain Controller DS Audit Policy Test#CredCode#{
Domain Controller DS Audit Policy Test#CredCode#	
Domain Controller DS Audit Policy Test#CredCode#	$TestText = " "
Domain Controller DS Audit Policy Test#CredCode#	$SumVal = ""
Domain Controller DS Audit Policy Test#CredCode#	$TestStatus = "Passed"
Domain Controller DS Audit Policy Test#CredCode#	
Domain Controller DS Audit Policy Test#CredCode#}
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller DS Audit Policy Test#CredCode#
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#$TotNo = 0
Domain Controller Event Log Config Test#CredCode#$ItemCount = 0
Domain Controller Event Log Config Test#CredCode#$TestText = "Please check result"
Domain Controller Event Log Config Test#CredCode#$TestStatus = "Completed"
Domain Controller Event Log Config Test#CredCode#$SumVal = "NA"
Domain Controller Event Log Config Test#CredCode#$AnyGap = "No"
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#$DCLogs = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCLogs.DPC"
Domain Controller Event Log Config Test#CredCode#$DCLogCSVNow = Import-CSV $DCLogs -Delimiter ";"
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Event Log Config Test#CredCode#{
Domain Controller Event Log Config Test#CredCode#	
Domain Controller Event Log Config Test#CredCode#	ForEach ($ThisLog in $DCLogCSVNow)
Domain Controller Event Log Config Test#CredCode#	{
Domain Controller Event Log Config Test#CredCode#		$ThisLogToCheck = $ThisLog.EventLogName
Domain Controller Event Log Config Test#CredCode#		
Domain Controller Event Log Config Test#CredCode#		$Error.Clear()
Domain Controller Event Log Config Test#CredCode#		$R = Get-WmiObject Win32_NTEventlogFile -ComputerName $ItemName -Credential $creds | where LogFileName -EQ "$ThisLogToCheck" | Select-Object MaxFileSize, Archive, OverWritePolicy
Domain Controller Event Log Config Test#CredCode#		IF ($Error.count -eq 0)
Domain Controller Event Log Config Test#CredCode#		{
Domain Controller Event Log Config Test#CredCode#			ForEach ($Item in $R)
Domain Controller Event Log Config Test#CredCode#			{
Domain Controller Event Log Config Test#CredCode#				$SizeNow = $Item.MaxFileSize
Domain Controller Event Log Config Test#CredCode#				$SizeInMB = $SizeNow/1024/1024
Domain Controller Event Log Config Test#CredCode#				$AStatus = $Item.Archive
Domain Controller Event Log Config Test#CredCode#				$OPolicy = $Item.OverWritePolicy
Domain Controller Event Log Config Test#CredCode#				
Domain Controller Event Log Config Test#CredCode#				$STR = $ItemName + "," + $ThisLogToCheck + "," + $AStatus + "," + $OPolicy + "," + $SizeInMB + ","
Domain Controller Event Log Config Test#CredCode#				Add-Content $TestCSVFile $STR
Domain Controller Event Log Config Test#CredCode#				
Domain Controller Event Log Config Test#CredCode#			}
Domain Controller Event Log Config Test#CredCode#			
Domain Controller Event Log Config Test#CredCode#		}
Domain Controller Event Log Config Test#CredCode#		else
Domain Controller Event Log Config Test#CredCode#		{
Domain Controller Event Log Config Test#CredCode#			$EnaStatus = "NA"
Domain Controller Event Log Config Test#CredCode#			$STR = $ItemName + " ERROR: Not Reachable" + ","
Domain Controller Event Log Config Test#CredCode#			Add-Content $TestCSVFile $STR
Domain Controller Event Log Config Test#CredCode#			
Domain Controller Event Log Config Test#CredCode#		}
Domain Controller Event Log Config Test#CredCode#		
Domain Controller Event Log Config Test#CredCode#	}
Domain Controller Event Log Config Test#CredCode#	
Domain Controller Event Log Config Test#CredCode#}
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#$AnyGap = "Yes"
Domain Controller Event Log Config Test#CredCode#
Domain Controller Event Log Config Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Event Log Config Test#CredCode#{
Domain Controller Event Log Config Test#CredCode#	
Domain Controller Event Log Config Test#CredCode#	$TestText = "Please ensure Event log Configuration is consistent."
Domain Controller Event Log Config Test#CredCode#	$SumVal = ""
Domain Controller Event Log Config Test#CredCode#	$TestStatus = "Low"
Domain Controller Event Log Config Test#CredCode#	
Domain Controller Event Log Config Test#CredCode#	
Domain Controller Event Log Config Test#CredCode#}
Domain Controller Event Log Config Test#CredCode#else
Domain Controller Event Log Config Test#CredCode#{
Domain Controller Event Log Config Test#CredCode#	
Domain Controller Event Log Config Test#CredCode#	$TestText = " "
Domain Controller Event Log Config Test#CredCode#	$SumVal = ""
Domain Controller Event Log Config Test#CredCode#	$TestStatus = "Passed"
Domain Controller Event Log Config Test#CredCode#	
Domain Controller Event Log Config Test#CredCode#}
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#$TotNo = 0
Domain Controller Event Log Size Test#CredCode#$ItemCount = 0
Domain Controller Event Log Size Test#CredCode#$TestText = "Please check result"
Domain Controller Event Log Size Test#CredCode#$TestStatus = "Completed"
Domain Controller Event Log Size Test#CredCode#$SumVal = "NA"
Domain Controller Event Log Size Test#CredCode#$AnyGap = "No"
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#$DCLogs = "$LocAppDataNow\DynamicPacksTechnologies\ADHealthProfiler\DPConfig\DPConfigFiles\DCLogs.DPC"
Domain Controller Event Log Size Test#CredCode#$DCLogCSVNow = Import-CSV $DCLogs -Delimiter ";"
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#Foreach ($ItemName in Get-Content "$GDCList")
Domain Controller Event Log Size Test#CredCode#{
Domain Controller Event Log Size Test#CredCode#	
Domain Controller Event Log Size Test#CredCode#	ForEach ($ThisLog in $DCLogCSVNow)
Domain Controller Event Log Size Test#CredCode#	{
Domain Controller Event Log Size Test#CredCode#		$ThisLogToCheck = $ThisLog.EventLogName
Domain Controller Event Log Size Test#CredCode#		
Domain Controller Event Log Size Test#CredCode#		$Error.Clear()
Domain Controller Event Log Size Test#CredCode#		$R = Get-WmiObject Win32_NTEventlogFile -ComputerName $ItemName -Credential $Creds | where LogFileName -EQ "$ThisLogToCheck" | Select-Object MaxFileSize, Archive, OverWritePolicy
Domain Controller Event Log Size Test#CredCode#		IF ($Error.count -eq 0)
Domain Controller Event Log Size Test#CredCode#		{
Domain Controller Event Log Size Test#CredCode#			ForEach ($Item in $R)
Domain Controller Event Log Size Test#CredCode#			{
Domain Controller Event Log Size Test#CredCode#				$SizeNow = $Item.MaxFileSize
Domain Controller Event Log Size Test#CredCode#				$AStatus = $Item.Archive
Domain Controller Event Log Size Test#CredCode#				$OPolicy = $Item.OverWritePolicy
Domain Controller Event Log Size Test#CredCode#				
Domain Controller Event Log Size Test#CredCode#				$SizeInMB = $SizeNow/1024/1024
Domain Controller Event Log Size Test#CredCode#				
Domain Controller Event Log Size Test#CredCode#				$FinalStatus = "Ok"
Domain Controller Event Log Size Test#CredCode#				IF ($SizeInMB -lt 10)
Domain Controller Event Log Size Test#CredCode#				{
Domain Controller Event Log Size Test#CredCode#					$FinalStatus = "Please check why Event Log Maximum Size is set to less than 10 MB."
Domain Controller Event Log Size Test#CredCode#					$AnyGap = "Yes"
Domain Controller Event Log Size Test#CredCode#					
Domain Controller Event Log Size Test#CredCode#				}
Domain Controller Event Log Size Test#CredCode#				
Domain Controller Event Log Size Test#CredCode#				$STR = $ItemName + "," + $ThisLogToCheck + "," + $SizeInMB + "," + $FinalStatus
Domain Controller Event Log Size Test#CredCode#				Add-Content $TestCSVFile $STR
Domain Controller Event Log Size Test#CredCode#				
Domain Controller Event Log Size Test#CredCode#			}
Domain Controller Event Log Size Test#CredCode#			
Domain Controller Event Log Size Test#CredCode#		}
Domain Controller Event Log Size Test#CredCode#		else
Domain Controller Event Log Size Test#CredCode#		{
Domain Controller Event Log Size Test#CredCode#			$EnaStatus = "NA"
Domain Controller Event Log Size Test#CredCode#			$STR = $ItemName + " ERROR: Not Reachable" + ","
Domain Controller Event Log Size Test#CredCode#			Add-Content $TestCSVFile $STR
Domain Controller Event Log Size Test#CredCode#			
Domain Controller Event Log Size Test#CredCode#		}
Domain Controller Event Log Size Test#CredCode#		
Domain Controller Event Log Size Test#CredCode#	}
Domain Controller Event Log Size Test#CredCode#	
Domain Controller Event Log Size Test#CredCode#}
Domain Controller Event Log Size Test#CredCode#
Domain Controller Event Log Size Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Controller Event Log Size Test#CredCode#{
Domain Controller Event Log Size Test#CredCode#	
Domain Controller Event Log Size Test#CredCode#	$TestText = " "
Domain Controller Event Log Size Test#CredCode#	$SumVal = ""
Domain Controller Event Log Size Test#CredCode#	$TestStatus = "High"
Domain Controller Event Log Size Test#CredCode#	
Domain Controller Event Log Size Test#CredCode#	
Domain Controller Event Log Size Test#CredCode#}
Domain Controller Event Log Size Test#CredCode#else
Domain Controller Event Log Size Test#CredCode#{
Domain Controller Event Log Size Test#CredCode#	
Domain Controller Event Log Size Test#CredCode#	$TestText = " "
Domain Controller Event Log Size Test#CredCode#	$SumVal = ""
Domain Controller Event Log Size Test#CredCode#	$TestStatus = "Passed"
Domain Controller Event Log Size Test#CredCode#	
Domain Controller Event Log Size Test#CredCode#}
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
AD Domain Admin Failed Logon Attempts#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
AD Domain Admin Failed Logon Attempts#CredCode#$STR = "User Location, BadLogonCount"
AD Domain Admin Failed Logon Attempts#CredCode#Add-Content $DataFileLocation $STR
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#$AllAdmins = $CurrentLoc + "\Data\" + $UniqueTest + "_Admins.CSV"
AD Domain Admin Failed Logon Attempts#CredCode#Remove-Item $AllAdmins -ErrorAction SilentlyContinue
AD Domain Admin Failed Logon Attempts#CredCode#$STR = "Admin, In Domain"
AD Domain Admin Failed Logon Attempts#CredCode#Add-Content $AllAdmins $STR
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
AD Domain Admin Failed Logon Attempts#CredCode#{
AD Domain Admin Failed Logon Attempts#CredCode#	$RAllAdmins = Get-ADGroupMember -Identity "Domain Admins" -Server $ThisDomain -Credential $Creds | Select-Object Name
AD Domain Admin Failed Logon Attempts#CredCode#	ForEach ($Item in $RAllAdmins)
AD Domain Admin Failed Logon Attempts#CredCode#	{
AD Domain Admin Failed Logon Attempts#CredCode#		$STR = $Item.Name + "," + $ThisDomain
AD Domain Admin Failed Logon Attempts#CredCode#		Add-Content $AllAdmins $STR
AD Domain Admin Failed Logon Attempts#CredCode#		
AD Domain Admin Failed Logon Attempts#CredCode#	}
AD Domain Admin Failed Logon Attempts#CredCode#	
AD Domain Admin Failed Logon Attempts#CredCode#}
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#$CSVAdmin = Import-CSV $AllAdmins
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#$TotNo = 0
AD Domain Admin Failed Logon Attempts#CredCode#$ItemCount = 0
AD Domain Admin Failed Logon Attempts#CredCode#$TestText = "Please check result"
AD Domain Admin Failed Logon Attempts#CredCode#$TestStatus = "Completed"
AD Domain Admin Failed Logon Attempts#CredCode#$SumVal = "NA"
AD Domain Admin Failed Logon Attempts#CredCode#$AnyGap = "No"
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
AD Domain Admin Failed Logon Attempts#CredCode#{
AD Domain Admin Failed Logon Attempts#CredCode#	
AD Domain Admin Failed Logon Attempts#CredCode#	$AllComps = Get-ADUser -Filter * -Properties BadLogonCount, CanonicalName, Name -Server $ThisDomain -Credential $Creds
AD Domain Admin Failed Logon Attempts#CredCode#	$TotCompsNow = $AllComps.CanonicalName.Count
AD Domain Admin Failed Logon Attempts#CredCode#	$TotWithBadAttempts = 0
AD Domain Admin Failed Logon Attempts#CredCode#	
AD Domain Admin Failed Logon Attempts#CredCode#	ForEach ($Item in $AllComps)
AD Domain Admin Failed Logon Attempts#CredCode#	{
AD Domain Admin Failed Logon Attempts#CredCode#		$ThisDName = $Item.CanonicalName
AD Domain Admin Failed Logon Attempts#CredCode#		$BadNumber = $Item.BadLogonCount
AD Domain Admin Failed Logon Attempts#CredCode#		$ThisUserName = $Item.Name
AD Domain Admin Failed Logon Attempts#CredCode#		
AD Domain Admin Failed Logon Attempts#CredCode#		IF ($BadNumber -eq 0)
AD Domain Admin Failed Logon Attempts#CredCode#		{
AD Domain Admin Failed Logon Attempts#CredCode#			
AD Domain Admin Failed Logon Attempts#CredCode#		}
AD Domain Admin Failed Logon Attempts#CredCode#		else
AD Domain Admin Failed Logon Attempts#CredCode#		{
AD Domain Admin Failed Logon Attempts#CredCode#			
AD Domain Admin Failed Logon Attempts#CredCode#			$FoundOrNot = "No"
AD Domain Admin Failed Logon Attempts#CredCode#			ForEach ($ItemAdmin in $CSVAdmin)
AD Domain Admin Failed Logon Attempts#CredCode#			{
AD Domain Admin Failed Logon Attempts#CredCode#				IF ($ItemAdmin.Admin -eq $ThisUserName)
AD Domain Admin Failed Logon Attempts#CredCode#				{
AD Domain Admin Failed Logon Attempts#CredCode#					$FoundOrNot = "Yes"
AD Domain Admin Failed Logon Attempts#CredCode#					break
AD Domain Admin Failed Logon Attempts#CredCode#					
AD Domain Admin Failed Logon Attempts#CredCode#				}
AD Domain Admin Failed Logon Attempts#CredCode#				
AD Domain Admin Failed Logon Attempts#CredCode#			}
AD Domain Admin Failed Logon Attempts#CredCode#			
AD Domain Admin Failed Logon Attempts#CredCode#			IF ($FoundOrNot -eq "Yes")
AD Domain Admin Failed Logon Attempts#CredCode#			{
AD Domain Admin Failed Logon Attempts#CredCode#				$AnyGap = "Yes"
AD Domain Admin Failed Logon Attempts#CredCode#				$TotWithBadAttempts++
AD Domain Admin Failed Logon Attempts#CredCode#				$STR = $ThisDName + "," + $BadNumber
AD Domain Admin Failed Logon Attempts#CredCode#				Add-Content $DataFileLocation $STR
AD Domain Admin Failed Logon Attempts#CredCode#				
AD Domain Admin Failed Logon Attempts#CredCode#			}
AD Domain Admin Failed Logon Attempts#CredCode#			
AD Domain Admin Failed Logon Attempts#CredCode#		}
AD Domain Admin Failed Logon Attempts#CredCode#		
AD Domain Admin Failed Logon Attempts#CredCode#	}
AD Domain Admin Failed Logon Attempts#CredCode#	
AD Domain Admin Failed Logon Attempts#CredCode#	$STR = $TotCompsNow.ToString() + "," + $TotWithBadAttempts.ToString() + "," + $ThisDomain + "," + $DataFileLocation
AD Domain Admin Failed Logon Attempts#CredCode#	Add-Content $TestCSVFile $STR
AD Domain Admin Failed Logon Attempts#CredCode#	
AD Domain Admin Failed Logon Attempts#CredCode#}
AD Domain Admin Failed Logon Attempts#CredCode#
AD Domain Admin Failed Logon Attempts#CredCode#IF ($AnyGap -eq "Yes")
AD Domain Admin Failed Logon Attempts#CredCode#{
AD Domain Admin Failed Logon Attempts#CredCode#	
AD Domain Admin Failed Logon Attempts#CredCode#	$TestText = " "
AD Domain Admin Failed Logon Attempts#CredCode#	$SumVal = ""
AD Domain Admin Failed Logon Attempts#CredCode#	$TestStatus = "High"
AD Domain Admin Failed Logon Attempts#CredCode#	
AD Domain Admin Failed Logon Attempts#CredCode#	
AD Domain Admin Failed Logon Attempts#CredCode#}
AD Domain Admin Failed Logon Attempts#CredCode#else
AD Domain Admin Failed Logon Attempts#CredCode#{
AD Domain Admin Failed Logon Attempts#CredCode#	
AD Domain Admin Failed Logon Attempts#CredCode#	$TestText = " "
AD Domain Admin Failed Logon Attempts#CredCode#	$SumVal = ""
AD Domain Admin Failed Logon Attempts#CredCode#	$TestStatus = "Passed"
AD Domain Admin Failed Logon Attempts#CredCode#	
AD Domain Admin Failed Logon Attempts#CredCode#}
Domain Computers Bad Logon Attempts Test#CredCode#
Domain Computers Bad Logon Attempts Test#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Domain Computers Bad Logon Attempts Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Computers Bad Logon Attempts Test#CredCode#$STR = "Computer Location, BadLogonCount"
Domain Computers Bad Logon Attempts Test#CredCode#Add-Content $DataFileLocation $STR
Domain Computers Bad Logon Attempts Test#CredCode#
Domain Computers Bad Logon Attempts Test#CredCode#$TotNo = 0
Domain Computers Bad Logon Attempts Test#CredCode#$ItemCount = 0
Domain Computers Bad Logon Attempts Test#CredCode#$TestText = "Please check result"
Domain Computers Bad Logon Attempts Test#CredCode#$TestStatus = "Completed"
Domain Computers Bad Logon Attempts Test#CredCode#$SumVal = "NA"
Domain Computers Bad Logon Attempts Test#CredCode#$AnyGap = "No"
Domain Computers Bad Logon Attempts Test#CredCode#
Domain Computers Bad Logon Attempts Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Computers Bad Logon Attempts Test#CredCode#{
Domain Computers Bad Logon Attempts Test#CredCode#	
Domain Computers Bad Logon Attempts Test#CredCode#	$AllComps = Get-ADComputer -Filter * -Properties BadLogonCount, CanonicalName -Server $ThisDomain -Credential $creds
Domain Computers Bad Logon Attempts Test#CredCode#	$TotCompsNow = $AllComps.CanonicalName.Count
Domain Computers Bad Logon Attempts Test#CredCode#	$TotWithBadAttempts = 0
Domain Computers Bad Logon Attempts Test#CredCode#	
Domain Computers Bad Logon Attempts Test#CredCode#	ForEach ($Item in $AllComps)
Domain Computers Bad Logon Attempts Test#CredCode#	{
Domain Computers Bad Logon Attempts Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Computers Bad Logon Attempts Test#CredCode#		$BadNumber = $Item.BadLogonCount
Domain Computers Bad Logon Attempts Test#CredCode#		
Domain Computers Bad Logon Attempts Test#CredCode#		IF ($BadNumber -eq 0)
Domain Computers Bad Logon Attempts Test#CredCode#		{
Domain Computers Bad Logon Attempts Test#CredCode#			
Domain Computers Bad Logon Attempts Test#CredCode#		}
Domain Computers Bad Logon Attempts Test#CredCode#		else
Domain Computers Bad Logon Attempts Test#CredCode#		{
Domain Computers Bad Logon Attempts Test#CredCode#			$AnyGap = "Yes"
Domain Computers Bad Logon Attempts Test#CredCode#			$TotWithBadAttempts++
Domain Computers Bad Logon Attempts Test#CredCode#			$RemovedComma = $ThisDName.replace(",", " ")
Domain Computers Bad Logon Attempts Test#CredCode#			$STR = $RemovedComma + "," + $BadNumber
Domain Computers Bad Logon Attempts Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Computers Bad Logon Attempts Test#CredCode#			
Domain Computers Bad Logon Attempts Test#CredCode#		}
Domain Computers Bad Logon Attempts Test#CredCode#		
Domain Computers Bad Logon Attempts Test#CredCode#	}
Domain Computers Bad Logon Attempts Test#CredCode#	
Domain Computers Bad Logon Attempts Test#CredCode#	$STR = $TotCompsNow.ToString() + "," + $TotWithBadAttempts.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Computers Bad Logon Attempts Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Computers Bad Logon Attempts Test#CredCode#	
Domain Computers Bad Logon Attempts Test#CredCode#}
Domain Computers Bad Logon Attempts Test#CredCode#
Domain Computers Bad Logon Attempts Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Computers Bad Logon Attempts Test#CredCode#{
Domain Computers Bad Logon Attempts Test#CredCode#	
Domain Computers Bad Logon Attempts Test#CredCode#	$TestText = " "
Domain Computers Bad Logon Attempts Test#CredCode#	$SumVal = ""
Domain Computers Bad Logon Attempts Test#CredCode#	$TestStatus = "High"
Domain Computers Bad Logon Attempts Test#CredCode#	
Domain Computers Bad Logon Attempts Test#CredCode#	
Domain Computers Bad Logon Attempts Test#CredCode#}
Domain Computers Bad Logon Attempts Test#CredCode#else
Domain Computers Bad Logon Attempts Test#CredCode#{
Domain Computers Bad Logon Attempts Test#CredCode#	
Domain Computers Bad Logon Attempts Test#CredCode#	$TestText = " "
Domain Computers Bad Logon Attempts Test#CredCode#	$SumVal = ""
Domain Computers Bad Logon Attempts Test#CredCode#	$TestStatus = "Passed"
Domain Computers Bad Logon Attempts Test#CredCode#	
Domain Computers Bad Logon Attempts Test#CredCode#}
Domain Users Bad Logon Attempts Test#CredCode#
Domain Users Bad Logon Attempts Test#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Domain Users Bad Logon Attempts Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Users Bad Logon Attempts Test#CredCode#$STR = "User Location, BadLogonCount"
Domain Users Bad Logon Attempts Test#CredCode#Add-Content $DataFileLocation $STR
Domain Users Bad Logon Attempts Test#CredCode#
Domain Users Bad Logon Attempts Test#CredCode#$TotNo = 0
Domain Users Bad Logon Attempts Test#CredCode#$ItemCount = 0
Domain Users Bad Logon Attempts Test#CredCode#$TestText = "Please check result"
Domain Users Bad Logon Attempts Test#CredCode#$TestStatus = "Completed"
Domain Users Bad Logon Attempts Test#CredCode#$SumVal = "NA"
Domain Users Bad Logon Attempts Test#CredCode#$AnyGap = "No"
Domain Users Bad Logon Attempts Test#CredCode#
Domain Users Bad Logon Attempts Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Users Bad Logon Attempts Test#CredCode#{
Domain Users Bad Logon Attempts Test#CredCode#	
Domain Users Bad Logon Attempts Test#CredCode#	$AllComps = Get-ADUser -Filter * -Properties BadLogonCount, CanonicalName -Server $ThisDomain -Credential $Creds
Domain Users Bad Logon Attempts Test#CredCode#	$TotCompsNow = $AllComps.CanonicalName.Count
Domain Users Bad Logon Attempts Test#CredCode#	$TotWithBadAttempts = 0
Domain Users Bad Logon Attempts Test#CredCode#	
Domain Users Bad Logon Attempts Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Bad Logon Attempts Test#CredCode#	{
Domain Users Bad Logon Attempts Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Bad Logon Attempts Test#CredCode#		$BadNumber = $Item.BadLogonCount
Domain Users Bad Logon Attempts Test#CredCode#		
Domain Users Bad Logon Attempts Test#CredCode#		IF ($BadNumber -eq 0)
Domain Users Bad Logon Attempts Test#CredCode#		{
Domain Users Bad Logon Attempts Test#CredCode#			
Domain Users Bad Logon Attempts Test#CredCode#		}
Domain Users Bad Logon Attempts Test#CredCode#		else
Domain Users Bad Logon Attempts Test#CredCode#		{
Domain Users Bad Logon Attempts Test#CredCode#			$AnyGap = "Yes"
Domain Users Bad Logon Attempts Test#CredCode#			$TotWithBadAttempts++
Domain Users Bad Logon Attempts Test#CredCode#			$RemovedComma = $ThisDName.replace(",", " ")
Domain Users Bad Logon Attempts Test#CredCode#			$STR = $RemovedComma + "," + $BadNumber
Domain Users Bad Logon Attempts Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Bad Logon Attempts Test#CredCode#			
Domain Users Bad Logon Attempts Test#CredCode#		}
Domain Users Bad Logon Attempts Test#CredCode#		
Domain Users Bad Logon Attempts Test#CredCode#	}
Domain Users Bad Logon Attempts Test#CredCode#	
Domain Users Bad Logon Attempts Test#CredCode#	$STR = $TotCompsNow.ToString() + "," + $TotWithBadAttempts.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Bad Logon Attempts Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Bad Logon Attempts Test#CredCode#	
Domain Users Bad Logon Attempts Test#CredCode#}
Domain Users Bad Logon Attempts Test#CredCode#
Domain Users Bad Logon Attempts Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Users Bad Logon Attempts Test#CredCode#{
Domain Users Bad Logon Attempts Test#CredCode#	
Domain Users Bad Logon Attempts Test#CredCode#	$TestText = " "
Domain Users Bad Logon Attempts Test#CredCode#	$SumVal = ""
Domain Users Bad Logon Attempts Test#CredCode#	$TestStatus = "High"
Domain Users Bad Logon Attempts Test#CredCode#	
Domain Users Bad Logon Attempts Test#CredCode#	
Domain Users Bad Logon Attempts Test#CredCode#}
Domain Users Bad Logon Attempts Test#CredCode#else
Domain Users Bad Logon Attempts Test#CredCode#{
Domain Users Bad Logon Attempts Test#CredCode#	
Domain Users Bad Logon Attempts Test#CredCode#	$TestText = " "
Domain Users Bad Logon Attempts Test#CredCode#	$SumVal = ""
Domain Users Bad Logon Attempts Test#CredCode#	$TestStatus = "Passed"
Domain Users Bad Logon Attempts Test#CredCode#	
Domain Users Bad Logon Attempts Test#CredCode#}
Domain Users UPN Not Specified Test#CredCode#
Domain Users UPN Not Specified Test#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Domain Users UPN Not Specified Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Users UPN Not Specified Test#CredCode#$STR = "User Location, UPN, AD Domain"
Domain Users UPN Not Specified Test#CredCode#Add-Content $DataFileLocation $STR
Domain Users UPN Not Specified Test#CredCode#
Domain Users UPN Not Specified Test#CredCode#$TotNo = 0
Domain Users UPN Not Specified Test#CredCode#$ItemCount = 0
Domain Users UPN Not Specified Test#CredCode#$TestText = "Please check result"
Domain Users UPN Not Specified Test#CredCode#$TestStatus = "Completed"
Domain Users UPN Not Specified Test#CredCode#$SumVal = "NA"
Domain Users UPN Not Specified Test#CredCode#$AnyGap = "No"
Domain Users UPN Not Specified Test#CredCode#
Domain Users UPN Not Specified Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Users UPN Not Specified Test#CredCode#{
Domain Users UPN Not Specified Test#CredCode#	
Domain Users UPN Not Specified Test#CredCode#	$AllComps = Get-ADUser -Filter * -Properties UserPrincipalName, CanonicalName -Server $ThisDomain -Credential $Creds
Domain Users UPN Not Specified Test#CredCode#	$TotCompsNow = $AllComps.CanonicalName.Count
Domain Users UPN Not Specified Test#CredCode#	
Domain Users UPN Not Specified Test#CredCode#	$TotUPNBlank = 0
Domain Users UPN Not Specified Test#CredCode#	$TotUPNOk = 0
Domain Users UPN Not Specified Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users UPN Not Specified Test#CredCode#	{
Domain Users UPN Not Specified Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users UPN Not Specified Test#CredCode#		$ThisUPN = $Item.UserPrincipalName
Domain Users UPN Not Specified Test#CredCode#		IF ($ThisUPN -eq $Null -or $ThisUPN -eq "")
Domain Users UPN Not Specified Test#CredCode#		{
Domain Users UPN Not Specified Test#CredCode#			$AnyGap = "Yes"
Domain Users UPN Not Specified Test#CredCode#			$TotUPNBlank++
Domain Users UPN Not Specified Test#CredCode#			$STR = $ThisDName + "," + $ThisUPN + "," + $ThisDomain
Domain Users UPN Not Specified Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users UPN Not Specified Test#CredCode#			
Domain Users UPN Not Specified Test#CredCode#		}
Domain Users UPN Not Specified Test#CredCode#		else
Domain Users UPN Not Specified Test#CredCode#		{
Domain Users UPN Not Specified Test#CredCode#			$TotUPNOk++
Domain Users UPN Not Specified Test#CredCode#			
Domain Users UPN Not Specified Test#CredCode#		}
Domain Users UPN Not Specified Test#CredCode#		
Domain Users UPN Not Specified Test#CredCode#	}
Domain Users UPN Not Specified Test#CredCode#	
Domain Users UPN Not Specified Test#CredCode#	$STR = $TotCompsNow.ToString() + "," + $TotUPNBlank.ToString() + "," + $TotUPNOk.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users UPN Not Specified Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users UPN Not Specified Test#CredCode#	
Domain Users UPN Not Specified Test#CredCode#}
Domain Users UPN Not Specified Test#CredCode#
Domain Users UPN Not Specified Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Users UPN Not Specified Test#CredCode#{
Domain Users UPN Not Specified Test#CredCode#	
Domain Users UPN Not Specified Test#CredCode#	$TestText = " "
Domain Users UPN Not Specified Test#CredCode#	$SumVal = ""
Domain Users UPN Not Specified Test#CredCode#	$TestStatus = "Medium"
Domain Users UPN Not Specified Test#CredCode#	
Domain Users UPN Not Specified Test#CredCode#	
Domain Users UPN Not Specified Test#CredCode#}
Domain Users UPN Not Specified Test#CredCode#else
Domain Users UPN Not Specified Test#CredCode#{
Domain Users UPN Not Specified Test#CredCode#	
Domain Users UPN Not Specified Test#CredCode#	$TestText = " "
Domain Users UPN Not Specified Test#CredCode#	$SumVal = ""
Domain Users UPN Not Specified Test#CredCode#	$TestStatus = "Passed"
Domain Users UPN Not Specified Test#CredCode#	
Domain Users UPN Not Specified Test#CredCode#}
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#$DataFileLocation = $CurrentLoc + "\Data\" + $FinalLine + "_DATA.CSV"
Domain Users Empty Fields Test#CredCode#Remove-Item $DataFileLocation -ErrorAction SilentlyContinue
Domain Users Empty Fields Test#CredCode#$STR = "Field, User Location, AD Domain"
Domain Users Empty Fields Test#CredCode#Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#$TotNo = 0
Domain Users Empty Fields Test#CredCode#$ItemCount = 0
Domain Users Empty Fields Test#CredCode#$TestText = "Please check result"
Domain Users Empty Fields Test#CredCode#$TestStatus = "Completed"
Domain Users Empty Fields Test#CredCode#$SumVal = "NA"
Domain Users Empty Fields Test#CredCode#$AnyGap = "No"
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#ForEach ($ThisDomain in Get-Content "$GDomList")
Domain Users Empty Fields Test#CredCode#{
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$AllComps = Get-ADUser -Filter * -Properties * -Server $ThisDomain -Credential $creds
Domain Users Empty Fields Test#CredCode#	$TotCompsNow = $AllComps.CanonicalName.Count
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "City"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.City
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "Department"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.Department
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "Company"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.Company
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "Country"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.Country
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "Description"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.Description
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "DisplayName"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.DisplayName
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "Division"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.Division
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "EmailAddress"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.EmailAddress
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "EmployeeID"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.EmployeeID
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "EmployeeNumber"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.EmployeeNumber
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "Initials"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.Initials
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "HomeDirectory"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.HomeDirectory
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "HomePhone"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.HomePhone
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "Country"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.Country
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "Manager"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.Manager
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "MobilePhone"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.MobilePhone
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "Office"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.Office
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "OfficePhone"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.OfficePhone
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "Organization"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.Organization
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "POBox"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.POBox
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "PostalCode"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.PostalCode
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "State"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.State
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "StreetAddress"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.StreetAddress
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "Surname"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.Surname
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$WhichField = "Title"
Domain Users Empty Fields Test#CredCode#	$TotBlankNow = 0
Domain Users Empty Fields Test#CredCode#	$TotEnabled = 0
Domain Users Empty Fields Test#CredCode#	ForEach ($Item in $AllComps)
Domain Users Empty Fields Test#CredCode#	{
Domain Users Empty Fields Test#CredCode#		$ThisDName = $Item.CanonicalName
Domain Users Empty Fields Test#CredCode#		$ThisField = $Item.Title
Domain Users Empty Fields Test#CredCode#		IF ($ThisField -eq $Null -or $ThisField -eq "")
Domain Users Empty Fields Test#CredCode#		{
Domain Users Empty Fields Test#CredCode#			$AnyGap = "Yes"
Domain Users Empty Fields Test#CredCode#			$TotBlankNow++
Domain Users Empty Fields Test#CredCode#			$STR = $WhichField + "," + $ThisDName + "," + $ThisDomain
Domain Users Empty Fields Test#CredCode#			Add-Content $DataFileLocation $STR
Domain Users Empty Fields Test#CredCode#			IF ($Item.Enabled -eq $true)
Domain Users Empty Fields Test#CredCode#			{
Domain Users Empty Fields Test#CredCode#				$TotEnabled++
Domain Users Empty Fields Test#CredCode#				
Domain Users Empty Fields Test#CredCode#			}
Domain Users Empty Fields Test#CredCode#			
Domain Users Empty Fields Test#CredCode#		}
Domain Users Empty Fields Test#CredCode#		
Domain Users Empty Fields Test#CredCode#	}
Domain Users Empty Fields Test#CredCode#	$STR = $WhichField + "," + $TotCompsNow.ToString() + "," + $TotBlankNow.ToString() + "," + $TotEnabled.ToString() + "," + $ThisDomain + "," + $DataFileLocation
Domain Users Empty Fields Test#CredCode#	Add-Content $TestCSVFile $STR
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#}
Domain Users Empty Fields Test#CredCode#
Domain Users Empty Fields Test#CredCode#IF ($AnyGap -eq "Yes")
Domain Users Empty Fields Test#CredCode#{
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$TestText = " "
Domain Users Empty Fields Test#CredCode#	$SumVal = ""
Domain Users Empty Fields Test#CredCode#	$TestStatus = "Medium"
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#}
Domain Users Empty Fields Test#CredCode#else
Domain Users Empty Fields Test#CredCode#{
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#	$TestText = " "
Domain Users Empty Fields Test#CredCode#	$SumVal = ""
Domain Users Empty Fields Test#CredCode#	$TestStatus = "Passed"
Domain Users Empty Fields Test#CredCode#	
Domain Users Empty Fields Test#CredCode#}
Get AD Privileged Access Management Status#CredCode#
Get AD Privileged Access Management Status#CredCode#$TotSyncing = 0
Get AD Privileged Access Management Status#CredCode#$TotInError = 0
Get AD Privileged Access Management Status#CredCode#$AnyGap = "No"
Get AD Privileged Access Management Status#CredCode#$TestStatus = "Passed"
Get AD Privileged Access Management Status#CredCode#$SumVal = ""
Get AD Privileged Access Management Status#CredCode#$TestText = ""
Get AD Privileged Access Management Status#CredCode#
Get AD Privileged Access Management Status#CredCode#$Items = Get-ADOptionalFeature -Filter * -Credential $Creds -Server $CurForestName
Get AD Privileged Access Management Status#CredCode#
Get AD Privileged Access Management Status#CredCode#ForEach ($Item in $Items)
Get AD Privileged Access Management Status#CredCode#{
Get AD Privileged Access Management Status#CredCode#	
Get AD Privileged Access Management Status#CredCode#	$ADRName = $Item.Name
Get AD Privileged Access Management Status#CredCode#	$ADRName
Get AD Privileged Access Management Status#CredCode#	$ADRStatus = $Item.EnabledScopes
Get AD Privileged Access Management Status#CredCode#	$FinalStaTUS = "Enabled"
Get AD Privileged Access Management Status#CredCode#	
Get AD Privileged Access Management Status#CredCode#	IF ($ADRName -eq "Privileged Access Management Feature")
Get AD Privileged Access Management Status#CredCode#	{
Get AD Privileged Access Management Status#CredCode#		$TotCountNow = $ADRStatus.Count
Get AD Privileged Access Management Status#CredCode#		IF ($TotCountNow -eq 0)
Get AD Privileged Access Management Status#CredCode#		{
Get AD Privileged Access Management Status#CredCode#			$FinalStaTUS = "Disabled"
Get AD Privileged Access Management Status#CredCode#			$AnyGap = "Yes"
Get AD Privileged Access Management Status#CredCode#			
Get AD Privileged Access Management Status#CredCode#		}
Get AD Privileged Access Management Status#CredCode#		break		
Get AD Privileged Access Management Status#CredCode#	}
Get AD Privileged Access Management Status#CredCode#	
Get AD Privileged Access Management Status#CredCode#}
Get AD Privileged Access Management Status#CredCode#
Get AD Privileged Access Management Status#CredCode#If ($AnyGap -eq "Yes")
Get AD Privileged Access Management Status#CredCode#{
Get AD Privileged Access Management Status#CredCode#	$TestStatus = "High"
Get AD Privileged Access Management Status#CredCode#	$TestText = "Disabled"
Get AD Privileged Access Management Status#CredCode#	$SumVal = "NA"
Get AD Privileged Access Management Status#CredCode#	
Get AD Privileged Access Management Status#CredCode#}
Get AD Privileged Access Management Status#CredCode#else
Get AD Privileged Access Management Status#CredCode#{
Get AD Privileged Access Management Status#CredCode#	$TestStatus = "Passed"
Get AD Privileged Access Management Status#CredCode#	$TestText = "Enabled"
Get AD Privileged Access Management Status#CredCode#	$SumVal = "NA"
Get AD Privileged Access Management Status#CredCode#	
Get AD Privileged Access Management Status#CredCode#}
Get AD Privileged Access Management Status#CredCode#
Get AD Privileged Access Management Status#CredCode#$ThisSTR = "Privileged Access Management Feature," + '"' + $ADRStatus + '"' + "," + $FinalStaTUS
Get AD Privileged Access Management Status#CredCode#Add-Content "$TestCSVFile" $ThisStr
Get AD Privileged Access Management Status#CredCode#
Get AD Privileged Access Management Status#CredCode#$STR = $ADTestName + "," + $TestStartTime + "," + $TestStatus + "," + $SumVal + "," + $TestText
Get Azure Billing Data#CredCode#$STR = "BillName,Cost,Currency,Start Date, End Date"
Get Azure Billing Data#CredCode#Add-Content $FinalResultFile $STR
Get Azure Billing Data#CredCode#
Get Azure Billing Data#CredCode#$RC = Select-AzSubscription -Subscription $SPNSubID
Get Azure Billing Data#CredCode#$i = 0
Get Azure Billing Data#CredCode#
Get Azure Billing Data#CredCode#$AllBP = Get-AzBillingPeriod -WarningAction Ignore
Get Azure Billing Data#CredCode#ForEach ($Item in $AllBP)
Get Azure Billing Data#CredCode#{
Get Azure Billing Data#CredCode#	
Get Azure Billing Data#CredCode#	$BPNameForFile, $T = $Item.Name.Split("-")
Get Azure Billing Data#CredCode#	$BPStartDate = $Item.BillingPeriodStartDate
Get Azure Billing Data#CredCode#	$BPEndDate = $Item.BillingPeriodEndDate
Get Azure Billing Data#CredCode#	$TotAllNow = 0
Get Azure Billing Data#CredCode#	$FinalCost = 0
Get Azure Billing Data#CredCode#	$BPCurrency = "USD"
Get Azure Billing Data#CredCode#	
Get Azure Billing Data#CredCode#	IF ($i -eq 0)
Get Azure Billing Data#CredCode#	{
Get Azure Billing Data#CredCode#		
Get Azure Billing Data#CredCode#		$BPFileNow = $UserHomeDir + "\$SPNSubID" + "_" + $BPNameForFile + ".CSV"		
Get Azure Billing Data#CredCode#		Remove-item $BPFileNow -ErrorAction SilentlyContinue
Get Azure Billing Data#CredCode#		
Get Azure Billing Data#CredCode#		$RT = Get-AzConsumptionUsageDetail -StartDate $BPStartDate -EndDate $BPEndDate | Select-Object ConsumedService, Currency, InstanceID, InstanceLocation, InstanceName, PretaxCost, UsageStart, UsageEnd
Get Azure Billing Data#CredCode#		$RT | Export-CSV $BPFileNow -NoTypeInformation
Get Azure Billing Data#CredCode#	}
Get Azure Billing Data#CredCode#	
Get Azure Billing Data#CredCode#	$BPFileNow = $UserHomeDir + "\$SPNSubID" + "_" + $BPNameForFile + ".CSV"
Get Azure Billing Data#CredCode#	if (Test-Path $BPFileNow)
Get Azure Billing Data#CredCode#	{
Get Azure Billing Data#CredCode#		$CSVC = Import-CSV $BPFileNow
Get Azure Billing Data#CredCode#		ForEach ($ThisItemC in $CSVC)
Get Azure Billing Data#CredCode#		{
Get Azure Billing Data#CredCode#			$BPCurrency = $ThisItemC.Currency
Get Azure Billing Data#CredCode#			break
Get Azure Billing Data#CredCode#		}
Get Azure Billing Data#CredCode#		
Get Azure Billing Data#CredCode#		
Get Azure Billing Data#CredCode#		$GetCostFile = Import-CSV $BPFileNow
Get Azure Billing Data#CredCode#		
Get Azure Billing Data#CredCode#		$TCost = $GetCostFile | Measure-Object -Property 'PretaxCost' -Sum
Get Azure Billing Data#CredCode#		$TotAllNow = $TCost.Sum
Get Azure Billing Data#CredCode#		$FinalCost = [math]::Round($TotAllNow, 2)
Get Azure Billing Data#CredCode#		
Get Azure Billing Data#CredCode#		$STR = $Item.Name + "-BP" + "," + $FinalCost.ToString() + "," + $BPCurrency + "," + $ITem.BillingPeriodStartDate.ToString() + "," + $Item.BillingPeriodEndDate.ToString()
Get Azure Billing Data#CredCode#		Add-Content $FinalResultFile $STR
Get Azure Billing Data#CredCode#	}
Get Azure Billing Data#CredCode#	else
Get Azure Billing Data#CredCode#	{
Get Azure Billing Data#CredCode#		
Get Azure Billing Data#CredCode#		$RT = Get-AzConsumptionUsageDetail -StartDate $BPStartDate -EndDate $BPEndDate | Select-Object ConsumedService, Currency, InstanceID, InstanceLocation, InstanceName, PretaxCost, UsageStart, UsageEnd		
Get Azure Billing Data#CredCode#		$RT | Export-CSV $BPFileNow -NoTypeInformation
Get Azure Billing Data#CredCode#		
Get Azure Billing Data#CredCode#		
Get Azure Billing Data#CredCode#		$CSVC = Import-CSV $BPFileNow
Get Azure Billing Data#CredCode#		ForEach ($ThisItemC in $CSVC)
Get Azure Billing Data#CredCode#		{
Get Azure Billing Data#CredCode#			$BPCurrency = $ThisItemC.Currency
Get Azure Billing Data#CredCode#			break
Get Azure Billing Data#CredCode#		}
Get Azure Billing Data#CredCode#		
Get Azure Billing Data#CredCode#		
Get Azure Billing Data#CredCode#		$GetCostFile = Import-CSV $BPFileNow
Get Azure Billing Data#CredCode#		
Get Azure Billing Data#CredCode#		$TCost = $GetCostFile | Measure-Object -Property 'PretaxCost' -Sum
Get Azure Billing Data#CredCode#		$TotAllNow = $TCost.Sum
Get Azure Billing Data#CredCode#		$FinalCost = [math]::Round($TotAllNow, 2)
Get Azure Billing Data#CredCode#		
Get Azure Billing Data#CredCode#		$STR = $Item.Name + "-BP" + "," + $FinalCost.ToString() + "," + $BPCurrency + "," + $ITem.BillingPeriodStartDate.ToString() + "," + $Item.BillingPeriodEndDate.ToString()
Get Azure Billing Data#CredCode#		Add-Content $FinalResultFile $STR
Get Azure Billing Data#CredCode#	}
Get Azure Billing Data#CredCode#	
Get Azure Billing Data#CredCode#	$i++
Get Azure Billing Data#CredCode#}
Get Azure Billing Data#CredCode#		
Test Session Host Endpoint Protection Status#CredCode#$Error.Clear()
Test Session Host Endpoint Protection Status#CredCode#$AzSecFileForTenant = "$UserHomeDir\AzSecurityFile.CSV"
Test Session Host Endpoint Protection Status#CredCode#Remove-Item $AzSecFileForTenant -ErrorAction SilentlyContinue
Test Session Host Endpoint Protection Status#CredCode#
Test Session Host Endpoint Protection Status#CredCode#$AnyGap = "No"
Test Session Host Endpoint Protection Status#CredCode#$TotEndPointProtectionNot = 0
Test Session Host Endpoint Protection Status#CredCode#$STR = "Resource Group, Affected VM"
Test Session Host Endpoint Protection Status#CredCode#Add-Content $TestCSVFile $STR
Test Session Host Endpoint Protection Status#CredCode#
Test Session Host Endpoint Protection Status#CredCode#$R = Get-AzSecurityTask | Export-CSV $AzSecFileForTenant -NoTypeInformation
Test Session Host Endpoint Protection Status#CredCode#if ($Error.Count -eq 0)
Test Session Host Endpoint Protection Status#CredCode#{
Test Session Host Endpoint Protection Status#CredCode#	$NewCSV = Import-Csv $AzSecFileForTenant
Test Session Host Endpoint Protection Status#CredCode#	foreach ($SItem in $NewCSV)
Test Session Host Endpoint Protection Status#CredCode#	{
Test Session Host Endpoint Protection Status#CredCode#		$ThisResNow = $SItem.ResourceId
Test Session Host Endpoint Protection Status#CredCode#		$A, $B, $C, $D, $E, $F, $G, $H, $I, $J, $K = $ThisResNow.Split("/")
Test Session Host Endpoint Protection Status#CredCode#		IF ($SItem.RecommendationType -eq "Install endpoint protection solution on virtual machines")
Test Session Host Endpoint Protection Status#CredCode#		{
Test Session Host Endpoint Protection Status#CredCode#			$TotEndPointProtectionNot++
Test Session Host Endpoint Protection Status#CredCode#			$AnyGap = "Yes"
Test Session Host Endpoint Protection Status#CredCode#			$STR = $E + "," + $I
Test Session Host Endpoint Protection Status#CredCode#			Add-Content $TestCSVFile $STR
Test Session Host Endpoint Protection Status#CredCode#		}		
Test Session Host Endpoint Protection Status#CredCode#	}	
Test Session Host Endpoint Protection Status#CredCode#}
Test Session Host Endpoint Protection Status#CredCode#else
Test Session Host Endpoint Protection Status#CredCode#{
Test Session Host Endpoint Protection Status#CredCode#	$STR = "Error running ResGroup SecCommand: " + $Error
Test Session Host Endpoint Protection Status#CredCode#	Add-Content $FinalLogFile $STR
Test Session Host Endpoint Protection Status#CredCode#}
Test Session Host Endpoint Protection Status#CredCode#
Test Session Host Endpoint Protection Status#CredCode#IF ($AnyGap -eq "Yes")
Test Session Host Endpoint Protection Status#CredCode#{
Test Session Host Endpoint Protection Status#CredCode#	$SumVal = ""
Test Session Host Endpoint Protection Status#CredCode#	$TestStatus = "High"
Test Session Host Endpoint Protection Status#CredCode#	$TestText = ""
Test Session Host Endpoint Protection Status#CredCode#	
Test Session Host Endpoint Protection Status#CredCode#}
Test Session Host Endpoint Protection Status#CredCode#else
Test Session Host Endpoint Protection Status#CredCode#{
Test Session Host Endpoint Protection Status#CredCode#	$SumVal = ""
Test Session Host Endpoint Protection Status#CredCode#	$TestStatus = "Passed"
Test Session Host Endpoint Protection Status#CredCode#	$TestText = ""	
Test Session Host Endpoint Protection Status#CredCode#}
Test Session Host Anti-Malware Solution Status#CredCode#$Error.Clear()
Test Session Host Anti-Malware Solution Status#CredCode#$AzSecFileForTenant = "$UserHomeDir\AzSecurityFile.CSV"
Test Session Host Anti-Malware Solution Status#CredCode#Remove-Item $AzSecFileForTenant -ErrorAction SilentlyContinue
Test Session Host Anti-Malware Solution Status#CredCode#
Test Session Host Anti-Malware Solution Status#CredCode#$STR = "Resource Group, Affected VM"
Test Session Host Anti-Malware Solution Status#CredCode#Add-Content $TestCSVFile $STR
Test Session Host Anti-Malware Solution Status#CredCode#
Test Session Host Anti-Malware Solution Status#CredCode#$AnyGap = "No"
Test Session Host Anti-Malware Solution Status#CredCode#
Test Session Host Anti-Malware Solution Status#CredCode#$R = Get-AzSecurityTask | Export-CSV $AzSecFileForTenant -NoTypeInformation
Test Session Host Anti-Malware Solution Status#CredCode#if ($Error.Count -eq 0)
Test Session Host Anti-Malware Solution Status#CredCode#{
Test Session Host Anti-Malware Solution Status#CredCode#	$NewCSV = Import-Csv $AzSecFileForTenant
Test Session Host Anti-Malware Solution Status#CredCode#	foreach ($SItem in $NewCSV)
Test Session Host Anti-Malware Solution Status#CredCode#	{
Test Session Host Anti-Malware Solution Status#CredCode#		$ThisResNow = $SItem.ResourceId
Test Session Host Anti-Malware Solution Status#CredCode#		$A, $B, $C, $D, $E, $F, $G, $H, $I, $J, $K = $ThisResNow.Split("/")
Test Session Host Anti-Malware Solution Status#CredCode#		
Test Session Host Anti-Malware Solution Status#CredCode#		IF ($SItem.RecommendationType -eq "InstallAntimalware")
Test Session Host Anti-Malware Solution Status#CredCode#		{
Test Session Host Anti-Malware Solution Status#CredCode#			$AnyGap = "Yes"			
Test Session Host Anti-Malware Solution Status#CredCode#			$STR = $E + "," + $I			
Test Session Host Anti-Malware Solution Status#CredCode#			Add-Content $TestCSVFile $STR
Test Session Host Anti-Malware Solution Status#CredCode#		}		
Test Session Host Anti-Malware Solution Status#CredCode#	}	
Test Session Host Anti-Malware Solution Status#CredCode#}
Test Session Host Anti-Malware Solution Status#CredCode#else
Test Session Host Anti-Malware Solution Status#CredCode#{
Test Session Host Anti-Malware Solution Status#CredCode#	$STR = "Error running ResGroup SecCommand: " + $Error
Test Session Host Anti-Malware Solution Status#CredCode#	Add-Content $FinalLogFile $STR
Test Session Host Anti-Malware Solution Status#CredCode#}
Test Session Host Anti-Malware Solution Status#CredCode#
Test Session Host Anti-Malware Solution Status#CredCode#IF ($AnyGap -eq "Yes")
Test Session Host Anti-Malware Solution Status#CredCode#{
Test Session Host Anti-Malware Solution Status#CredCode#	$SumVal = ""
Test Session Host Anti-Malware Solution Status#CredCode#	$TestStatus = "High"
Test Session Host Anti-Malware Solution Status#CredCode#	$TestText = "Not Logged in"
Test Session Host Anti-Malware Solution Status#CredCode#	
Test Session Host Anti-Malware Solution Status#CredCode#}
Test Session Host Anti-Malware Solution Status#CredCode#else
Test Session Host Anti-Malware Solution Status#CredCode#{
Test Session Host Anti-Malware Solution Status#CredCode#	$SumVal = ""
Test Session Host Anti-Malware Solution Status#CredCode#	$TestStatus = "Passed"
Test Session Host Anti-Malware Solution Status#CredCode#	$TestText = "All Mailboxes have been using."	
Test Session Host Anti-Malware Solution Status#CredCode#}
Test Session Host OS Disk Encryption Status#CredCode#
Test Session Host OS Disk Encryption Status#CredCode#$AnyGap = "No"
Test Session Host OS Disk Encryption Status#CredCode#$STR = "VM Name, Resource Group, VM Location"
Test Session Host OS Disk Encryption Status#CredCode#Add-Content $TestCSVFile $STR
Test Session Host OS Disk Encryption Status#CredCode#
Test Session Host OS Disk Encryption Status#CredCode#$TenantResGroup = "$UserHomeDir\ResourceGroups" + $TargetNameNow + ".CSV"
Test Session Host OS Disk Encryption Status#CredCode#$CSVResGroup = Import-Csv $TenantResGroup
Test Session Host OS Disk Encryption Status#CredCode#foreach ($ResGroup in $CSVResGroup)
Test Session Host OS Disk Encryption Status#CredCode#{
Test Session Host OS Disk Encryption Status#CredCode#	$ThisResGroup = $ResGroup.ResGroup
Test Session Host OS Disk Encryption Status#CredCode#	
Test Session Host OS Disk Encryption Status#CredCode#	$VMs = Get-AzVM -ResourceGroupName $ThisResGroup
Test Session Host OS Disk Encryption Status#CredCode#	foreach ($VM in $VMs)
Test Session Host OS Disk Encryption Status#CredCode#	{
Test Session Host OS Disk Encryption Status#CredCode#		$tmpEncryption = Get-AzVMDiskEncryptionStatus -VMName $VM.Name -ResourceGroupName $VM.ResourceGroupName
Test Session Host OS Disk Encryption Status#CredCode#		$VMResGroupNow = $VM.ResourceGroupName
Test Session Host OS Disk Encryption Status#CredCode#		$ThisVMLoc = $VM.Location
Test Session Host OS Disk Encryption Status#CredCode#		$ThisVMName = $VM.Name
Test Session Host OS Disk Encryption Status#CredCode#		
Test Session Host OS Disk Encryption Status#CredCode#		IF ($tmpEncryption.OSVolumeEncrypted -eq "NotEncrypted")
Test Session Host OS Disk Encryption Status#CredCode#		{
Test Session Host OS Disk Encryption Status#CredCode#			$STR = $ThisVMName + "," + $VMResGroupNow + "," + $ThisVMLoc
Test Session Host OS Disk Encryption Status#CredCode#			Add-Content $TestCSVFile $STR
Test Session Host OS Disk Encryption Status#CredCode#			$AnyGap = "Yes"
Test Session Host OS Disk Encryption Status#CredCode#		}			
Test Session Host OS Disk Encryption Status#CredCode#	}
Test Session Host OS Disk Encryption Status#CredCode#}
Test Session Host OS Disk Encryption Status#CredCode#
Test Session Host OS Disk Encryption Status#CredCode#IF ($AnyGap -eq "Yes")
Test Session Host OS Disk Encryption Status#CredCode#{
Test Session Host OS Disk Encryption Status#CredCode#	$SumVal = ""
Test Session Host OS Disk Encryption Status#CredCode#	$TestStatus = "High"
Test Session Host OS Disk Encryption Status#CredCode#	$TestText = "Not Logged in"
Test Session Host OS Disk Encryption Status#CredCode#}
Test Session Host OS Disk Encryption Status#CredCode#else
Test Session Host OS Disk Encryption Status#CredCode#{
Test Session Host OS Disk Encryption Status#CredCode#	$SumVal = ""
Test Session Host OS Disk Encryption Status#CredCode#	$TestStatus = "Passed"
Test Session Host OS Disk Encryption Status#CredCode#	$TestText = "All Mailboxes have been using."
Test Session Host OS Disk Encryption Status#CredCode#}
Test Session Host Data Disk Encryption Status#CredCode#$AnyGap = "No"
Test Session Host Data Disk Encryption Status#CredCode#$STR = "VM Name, Resource Group, VM Location"
Test Session Host Data Disk Encryption Status#CredCode#Add-Content $TestCSVFile $STR
Test Session Host Data Disk Encryption Status#CredCode#
Test Session Host Data Disk Encryption Status#CredCode#$TenantResGroup = "$UserHomeDir\ResourceGroups" + $TargetNameNow + ".CSV"
Test Session Host Data Disk Encryption Status#CredCode#$CSVResGroup = Import-Csv $TenantResGroup
Test Session Host Data Disk Encryption Status#CredCode#foreach ($ResGroup in $CSVResGroup)
Test Session Host Data Disk Encryption Status#CredCode#{
Test Session Host Data Disk Encryption Status#CredCode#	$ThisResGroup = $ResGroup.ResGroup
Test Session Host Data Disk Encryption Status#CredCode#	
Test Session Host Data Disk Encryption Status#CredCode#	$VMs = Get-AzVM -ResourceGroupName $ThisResGroup
Test Session Host Data Disk Encryption Status#CredCode#	foreach ($VM in $VMs)
Test Session Host Data Disk Encryption Status#CredCode#	{
Test Session Host Data Disk Encryption Status#CredCode#		$tmpEncryption = Get-AzVMDiskEncryptionStatus -VMName $VM.Name -ResourceGroupName $VM.ResourceGroupName
Test Session Host Data Disk Encryption Status#CredCode#		$VMResGroupNow = $VM.ResourceGroupName
Test Session Host Data Disk Encryption Status#CredCode#		$ThisVMLoc = $VM.Location
Test Session Host Data Disk Encryption Status#CredCode#		$ThisVMName = $VM.Name
Test Session Host Data Disk Encryption Status#CredCode#		
Test Session Host Data Disk Encryption Status#CredCode#		IF ($tmpEncryption.DataVolumesEncrypted -eq "NotEncrypted")
Test Session Host Data Disk Encryption Status#CredCode#		{
Test Session Host Data Disk Encryption Status#CredCode#			$STR = $ThisVMName + "," + $VMResGroupNow + "," + $ThisVMLoc
Test Session Host Data Disk Encryption Status#CredCode#			Add-Content $TestCSVFile $STR
Test Session Host Data Disk Encryption Status#CredCode#			$AnyGap = "Yes"
Test Session Host Data Disk Encryption Status#CredCode#		}			
Test Session Host Data Disk Encryption Status#CredCode#	}
Test Session Host Data Disk Encryption Status#CredCode#}
Test Session Host Data Disk Encryption Status#CredCode#
Test Session Host Data Disk Encryption Status#CredCode#IF ($AnyGap -eq "Yes")
Test Session Host Data Disk Encryption Status#CredCode#{
Test Session Host Data Disk Encryption Status#CredCode#	$SumVal = ""
Test Session Host Data Disk Encryption Status#CredCode#	$TestStatus = "High"
Test Session Host Data Disk Encryption Status#CredCode#	$TestText = "Not Logged in"
Test Session Host Data Disk Encryption Status#CredCode#}
Test Session Host Data Disk Encryption Status#CredCode#else
Test Session Host Data Disk Encryption Status#CredCode#{
Test Session Host Data Disk Encryption Status#CredCode#	$SumVal = ""
Test Session Host Data Disk Encryption Status#CredCode#	$TestStatus = "Passed"
Test Session Host Data Disk Encryption Status#CredCode#	$TestText = "All Mailboxes have been using."
Test Session Host Data Disk Encryption Status#CredCode#}
Test Session Host Boot Diagnostics Status#CredCode#$AnyGap = "No"
Test Session Host Boot Diagnostics Status#CredCode#$STR = "VM Name, Resource Group, VM Location"
Test Session Host Boot Diagnostics Status#CredCode#Add-Content $TestCSVFile $STR
Test Session Host Boot Diagnostics Status#CredCode#
Test Session Host Boot Diagnostics Status#CredCode#$TenantResGroup = "$UserHomeDir\ResourceGroups" + $TargetNameNow + ".CSV"
Test Session Host Boot Diagnostics Status#CredCode#$CSVResGroup = Import-Csv $TenantResGroup
Test Session Host Boot Diagnostics Status#CredCode#foreach ($ResGroup in $CSVResGroup)
Test Session Host Boot Diagnostics Status#CredCode#{
Test Session Host Boot Diagnostics Status#CredCode#	$ThisResGroup = $ResGroup.ResGroup
Test Session Host Boot Diagnostics Status#CredCode#	
Test Session Host Boot Diagnostics Status#CredCode#	$VMs = Get-AzVM -ResourceGroupName $ThisResGroup
Test Session Host Boot Diagnostics Status#CredCode#	foreach ($VM in $VMs)
Test Session Host Boot Diagnostics Status#CredCode#	{
Test Session Host Boot Diagnostics Status#CredCode#		$tmpEncryption = Get-AzVMDiskEncryptionStatus -VMName $VM.Name -ResourceGroupName $VM.ResourceGroupName
Test Session Host Boot Diagnostics Status#CredCode#		$VMResGroupNow = $VM.ResourceGroupName
Test Session Host Boot Diagnostics Status#CredCode#		$ThisVMLoc = $VM.Location
Test Session Host Boot Diagnostics Status#CredCode#		$ThisVMName = $VM.Name
Test Session Host Boot Diagnostics Status#CredCode#		
Test Session Host Boot Diagnostics Status#CredCode#		$BootStatus = $VM.DiagnosticsProfile.BootDiagnostics.Enabled
Test Session Host Boot Diagnostics Status#CredCode#		IF ($BootStatus -eq $True)
Test Session Host Boot Diagnostics Status#CredCode#		{
Test Session Host Boot Diagnostics Status#CredCode#		}
Test Session Host Boot Diagnostics Status#CredCode#		else
Test Session Host Boot Diagnostics Status#CredCode#		{
Test Session Host Boot Diagnostics Status#CredCode#			$STR = $ThisVMName + "," + $VMResGroupNow + "," + $ThisVMLoc
Test Session Host Boot Diagnostics Status#CredCode#			Add-Content $TestCSVFile $STR
Test Session Host Boot Diagnostics Status#CredCode#			$AnyGap = "Yes"
Test Session Host Boot Diagnostics Status#CredCode#		}				
Test Session Host Boot Diagnostics Status#CredCode#	}
Test Session Host Boot Diagnostics Status#CredCode#}
Test Session Host Boot Diagnostics Status#CredCode#
Test Session Host Boot Diagnostics Status#CredCode#IF ($AnyGap -eq "Yes")
Test Session Host Boot Diagnostics Status#CredCode#{
Test Session Host Boot Diagnostics Status#CredCode#	$SumVal = ""
Test Session Host Boot Diagnostics Status#CredCode#	$TestStatus = "High"
Test Session Host Boot Diagnostics Status#CredCode#	$TestText = "Not Logged in"
Test Session Host Boot Diagnostics Status#CredCode#}
Test Session Host Boot Diagnostics Status#CredCode#else
Test Session Host Boot Diagnostics Status#CredCode#{
Test Session Host Boot Diagnostics Status#CredCode#	$SumVal = ""
Test Session Host Boot Diagnostics Status#CredCode#	$TestStatus = "Passed"
Test Session Host Boot Diagnostics Status#CredCode#	$TestText = "All Mailboxes have been using."
Test Session Host Boot Diagnostics Status#CredCode#}
Test Session Host VM Agent Status#CredCode#$AnyGap = "No"
Test Session Host VM Agent Status#CredCode#$STR = "VM Name, Resource Group, VM Location"
Test Session Host VM Agent Status#CredCode#Add-Content $TestCSVFile $STR
Test Session Host VM Agent Status#CredCode#
Test Session Host VM Agent Status#CredCode#$TenantResGroup = "$UserHomeDir\ResourceGroups" + $TargetNameNow + ".CSV"
Test Session Host VM Agent Status#CredCode#$CSVResGroup = Import-Csv $TenantResGroup
Test Session Host VM Agent Status#CredCode#foreach ($ResGroup in $CSVResGroup)
Test Session Host VM Agent Status#CredCode#{
Test Session Host VM Agent Status#CredCode#	$ThisResGroup = $ResGroup.ResGroup
Test Session Host VM Agent Status#CredCode#	
Test Session Host VM Agent Status#CredCode#	$VMs = Get-AzVM -ResourceGroupName $ThisResGroup
Test Session Host VM Agent Status#CredCode#	foreach ($VM in $VMs)
Test Session Host VM Agent Status#CredCode#	{
Test Session Host VM Agent Status#CredCode#		$tmpEncryption = Get-AzVMDiskEncryptionStatus -VMName $VM.Name -ResourceGroupName $VM.ResourceGroupName
Test Session Host VM Agent Status#CredCode#		$VMResGroupNow = $VM.ResourceGroupName
Test Session Host VM Agent Status#CredCode#		$ThisVMLoc = $VM.Location
Test Session Host VM Agent Status#CredCode#		$ThisVMName = $VM.Name
Test Session Host VM Agent Status#CredCode#		
Test Session Host VM Agent Status#CredCode#		$AllProp = $VM.OSProfile.Windowsconfiguration
Test Session Host VM Agent Status#CredCode#		$AgentStatus = $AllProp.ProvisionVMAgent
Test Session Host VM Agent Status#CredCode#		
Test Session Host VM Agent Status#CredCode#		IF ($AgentStatus -eq $True)
Test Session Host VM Agent Status#CredCode#		{
Test Session Host VM Agent Status#CredCode#		}
Test Session Host VM Agent Status#CredCode#		else
Test Session Host VM Agent Status#CredCode#		{
Test Session Host VM Agent Status#CredCode#			$STR = $ThisVMName + "," + $VMResGroupNow + "," + $ThisVMLoc
Test Session Host VM Agent Status#CredCode#			Add-Content $TestCSVFile $STR
Test Session Host VM Agent Status#CredCode#			$AnyGap = "Yes"
Test Session Host VM Agent Status#CredCode#		}	
Test Session Host VM Agent Status#CredCode#	}
Test Session Host VM Agent Status#CredCode#}
Test Session Host VM Agent Status#CredCode#
Test Session Host VM Agent Status#CredCode#IF ($AnyGap -eq "Yes")
Test Session Host VM Agent Status#CredCode#{
Test Session Host VM Agent Status#CredCode#	$SumVal = ""
Test Session Host VM Agent Status#CredCode#	$TestStatus = "High"
Test Session Host VM Agent Status#CredCode#	$TestText = "Not Logged in"
Test Session Host VM Agent Status#CredCode#}
Test Session Host VM Agent Status#CredCode#else
Test Session Host VM Agent Status#CredCode#{
Test Session Host VM Agent Status#CredCode#	$SumVal = ""
Test Session Host VM Agent Status#CredCode#	$TestStatus = "Passed"
Test Session Host VM Agent Status#CredCode#	$TestText = "All Mailboxes have been using."
Test Session Host VM Agent Status#CredCode#}
Test Session Host Vulnerability Solution Status#CredCode#$Error.Clear()
Test Session Host Vulnerability Solution Status#CredCode#$AzSecFileForTenant = "$UserHomeDir\AzSecurityFile.CSV"
Test Session Host Vulnerability Solution Status#CredCode#Remove-Item $AzSecFileForTenant -ErrorAction SilentlyContinue
Test Session Host Vulnerability Solution Status#CredCode#
Test Session Host Vulnerability Solution Status#CredCode#$AnyGap = "No"
Test Session Host Vulnerability Solution Status#CredCode#$TotEndPointProtectionNot = 0
Test Session Host Vulnerability Solution Status#CredCode#$STR = "Resource Group, Affected VM"
Test Session Host Vulnerability Solution Status#CredCode#Add-Content $TestCSVFile $STR
Test Session Host Vulnerability Solution Status#CredCode#
Test Session Host Vulnerability Solution Status#CredCode#$R = Get-AzSecurityTask | Export-CSV $AzSecFileForTenant -NoTypeInformation
Test Session Host Vulnerability Solution Status#CredCode#if ($Error.Count -eq 0)
Test Session Host Vulnerability Solution Status#CredCode#{
Test Session Host Vulnerability Solution Status#CredCode#	$NewCSV = Import-Csv $AzSecFileForTenant
Test Session Host Vulnerability Solution Status#CredCode#	foreach ($SItem in $NewCSV)
Test Session Host Vulnerability Solution Status#CredCode#	{
Test Session Host Vulnerability Solution Status#CredCode#		$ThisResNow = $SItem.ResourceId
Test Session Host Vulnerability Solution Status#CredCode#		$A, $B, $C, $D, $E, $F, $G, $H, $I, $J, $K = $ThisResNow.Split("/")
Test Session Host Vulnerability Solution Status#CredCode#		IF ($SItem.RecommendationType -eq "Machines should have a vulnerability assessment solution")
Test Session Host Vulnerability Solution Status#CredCode#		{
Test Session Host Vulnerability Solution Status#CredCode#			$TotEndPointProtectionNot++
Test Session Host Vulnerability Solution Status#CredCode#			$AnyGap = "Yes"
Test Session Host Vulnerability Solution Status#CredCode#			$STR = $E + "," + $I
Test Session Host Vulnerability Solution Status#CredCode#			Add-Content $TestCSVFile $STR
Test Session Host Vulnerability Solution Status#CredCode#}
Test Session Host Vulnerability Solution Status#CredCode#}
Test Session Host Vulnerability Solution Status#CredCode#}
Test Session Host Vulnerability Solution Status#CredCode#else
Test Session Host Vulnerability Solution Status#CredCode#{
Test Session Host Vulnerability Solution Status#CredCode#	$STR = "Error running ResGroup SecCommand: " + $Error
Test Session Host Vulnerability Solution Status#CredCode#	Add-Content $FinalLogFile $STR
Test Session Host Vulnerability Solution Status#CredCode#}
Test Session Host Vulnerability Solution Status#CredCode#
Test Session Host Vulnerability Solution Status#CredCode#IF ($AnyGap -eq "Yes")
Test Session Host Vulnerability Solution Status#CredCode#{
Test Session Host Vulnerability Solution Status#CredCode#	$SumVal = ""
Test Session Host Vulnerability Solution Status#CredCode#	$TestStatus = "High"
Test Session Host Vulnerability Solution Status#CredCode#	$TestText = ""
Test Session Host Vulnerability Solution Status#CredCode#
Test Session Host Vulnerability Solution Status#CredCode#}
Test Session Host Vulnerability Solution Status#CredCode#else
Test Session Host Vulnerability Solution Status#CredCode#{
Test Session Host Vulnerability Solution Status#CredCode#	$SumVal = ""
Test Session Host Vulnerability Solution Status#CredCode#	$TestStatus = "Passed"
Test Session Host Vulnerability Solution Status#CredCode#	$TestText = ""
Test Session Host Vulnerability Solution Status#CredCode#}
Test Session Host Vulnerability Findings Status#CredCode#$Error.Clear()
Test Session Host Vulnerability Findings Status#CredCode#$AzSecFileForTenant = "$UserHomeDir\AzSecurityFile.CSV"
Test Session Host Vulnerability Findings Status#CredCode#Remove-Item $AzSecFileForTenant -ErrorAction SilentlyContinue
Test Session Host Vulnerability Findings Status#CredCode#
Test Session Host Vulnerability Findings Status#CredCode#$AnyGap = "No"
Test Session Host Vulnerability Findings Status#CredCode#$TotEndPointProtectionNot = 0
Test Session Host Vulnerability Findings Status#CredCode#$STR = "Resource Group, Affected VM"
Test Session Host Vulnerability Findings Status#CredCode#Add-Content $TestCSVFile $STR
Test Session Host Vulnerability Findings Status#CredCode#
Test Session Host Vulnerability Findings Status#CredCode#$R = Get-AzSecurityTask | Export-CSV $AzSecFileForTenant -NoTypeInformation
Test Session Host Vulnerability Findings Status#CredCode#if ($Error.Count -eq 0)
Test Session Host Vulnerability Findings Status#CredCode#{
Test Session Host Vulnerability Findings Status#CredCode#	$NewCSV = Import-Csv $AzSecFileForTenant
Test Session Host Vulnerability Findings Status#CredCode#	foreach ($SItem in $NewCSV)
Test Session Host Vulnerability Findings Status#CredCode#	{
Test Session Host Vulnerability Findings Status#CredCode#		$ThisResNow = $SItem.ResourceId
Test Session Host Vulnerability Findings Status#CredCode#		$A, $B, $C, $D, $E, $F, $G, $H, $I, $J, $K = $ThisResNow.Split("/")
Test Session Host Vulnerability Findings Status#CredCode#		IF ($SItem.RecommendationType -eq "Machines should have vulnerability findings resolved")
Test Session Host Vulnerability Findings Status#CredCode#		{
Test Session Host Vulnerability Findings Status#CredCode#			$TotEndPointProtectionNot++
Test Session Host Vulnerability Findings Status#CredCode#			$AnyGap = "Yes"
Test Session Host Vulnerability Findings Status#CredCode#			$STR = $E + "," + $I
Test Session Host Vulnerability Findings Status#CredCode#			Add-Content $TestCSVFile $STR
Test Session Host Vulnerability Findings Status#CredCode#}
Test Session Host Vulnerability Findings Status#CredCode#}
Test Session Host Vulnerability Findings Status#CredCode#}
Test Session Host Vulnerability Findings Status#CredCode#else
Test Session Host Vulnerability Findings Status#CredCode#{
Test Session Host Vulnerability Findings Status#CredCode#	$STR = "Error running ResGroup SecCommand: " + $Error
Test Session Host Vulnerability Findings Status#CredCode#	Add-Content $FinalLogFile $STR
Test Session Host Vulnerability Findings Status#CredCode#}
Test Session Host Vulnerability Findings Status#CredCode#
Test Session Host Vulnerability Findings Status#CredCode#IF ($AnyGap -eq "Yes")
Test Session Host Vulnerability Findings Status#CredCode#{
Test Session Host Vulnerability Findings Status#CredCode#	$SumVal = ""
Test Session Host Vulnerability Findings Status#CredCode#	$TestStatus = "High"
Test Session Host Vulnerability Findings Status#CredCode#	$TestText = ""
Test Session Host Vulnerability Findings Status#CredCode#
Test Session Host Vulnerability Findings Status#CredCode#}
Test Session Host Vulnerability Findings Status#CredCode#else
Test Session Host Vulnerability Findings Status#CredCode#{
Test Session Host Vulnerability Findings Status#CredCode#	$SumVal = ""
Test Session Host Vulnerability Findings Status#CredCode#	$TestStatus = "Passed"
Test Session Host Vulnerability Findings Status#CredCode#	$TestText = ""
Test Session Host Vulnerability Findings Status#CredCode#}
AVD Environment Discovery#CredCode#
AVD Environment Discovery#CredCode#$STR = "Host Pool, Host Pool Resource Group, Pool Type, Load Balancer Type, Location, Session Limit, Session Host, Last Heartbeat Status, Last Updated Time, Update Error Message, Update State, Status, OS Version, Agent Version, VM Status"
AVD Environment Discovery#CredCode#Add-Content $TestCSVFile $STR
AVD Environment Discovery#CredCode#
AVD Environment Discovery#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
AVD Environment Discovery#CredCode#Remove-Item $TenantPoolAndHostFile -ErrorAction SilentlyContinue
AVD Environment Discovery#CredCode#$STR = "HostPool,Resource Group,Session Host,VM Status"
AVD Environment Discovery#CredCode#Add-Content $TenantPoolAndHostFile $STR
AVD Environment Discovery#CredCode#
AVD Environment Discovery#CredCode#$AllAzureVMs = "$UserHomeDir\AzureVMs_" + $TargetNameNow + ".CSV"
AVD Environment Discovery#CredCode#Remove-Item $AllAzureVMs -ErrorAction SilentlyContinue
AVD Environment Discovery#CredCode#$STR = "VMName,ResGroup,VMStatus"
AVD Environment Discovery#CredCode#Add-Content $AllAzureVMs $STR
AVD Environment Discovery#CredCode#$TenantResGroup = "$UserHomeDir\ResourceGroups" + $TargetNameNow + ".CSV"
AVD Environment Discovery#CredCode#Remove-Item $TenantResGroup -ErrorAction SilentlyContinue
AVD Environment Discovery#CredCode#$STR = "ResGroup,"
AVD Environment Discovery#CredCode#Add-Content $TenantResGroup $STR
AVD Environment Discovery#CredCode#
AVD Environment Discovery#CredCode#$Error.Clear()
AVD Environment Discovery#CredCode#$R = Get-AzWVDHostPool | Select-Object *
AVD Environment Discovery#CredCode#
AVD Environment Discovery#CredCode#foreach ($Item in $R)
AVD Environment Discovery#CredCode#{
AVD Environment Discovery#CredCode#	$ThisLine = $Item.ApplicationGroupReference
AVD Environment Discovery#CredCode#	$R = $ThisLine
AVD Environment Discovery#CredCode#	$A, $B, $C, $D, $E, $F = $R.Split("/")
AVD Environment Discovery#CredCode#	
AVD Environment Discovery#CredCode#	$FinalResGroup = $E
AVD Environment Discovery#CredCode#	$HostPoolName = $Item.Name
AVD Environment Discovery#CredCode#	$LoadBalancerType = $Item.LoadBalancerType
AVD Environment Discovery#CredCode#	$Location = $Item.Location
AVD Environment Discovery#CredCode#	$MaxSessionLimit = $Item.MaxSessionLimit
AVD Environment Discovery#CredCode#	$HostPoolType = $Item.HostPoolType
AVD Environment Discovery#CredCode#	
AVD Environment Discovery#CredCode#	$CSVResGroup = Import-Csv $TenantResGroup
AVD Environment Discovery#CredCode#	$FoundOrNot = "No"
AVD Environment Discovery#CredCode#	foreach ($CSVR in $CSVResGroup)
AVD Environment Discovery#CredCode#	{
AVD Environment Discovery#CredCode#		IF ($CSVR.ResGroup -eq $FinalResGroup)
AVD Environment Discovery#CredCode#		{
AVD Environment Discovery#CredCode#			$FoundOrNot = "Yes"
AVD Environment Discovery#CredCode#			Break						
AVD Environment Discovery#CredCode#		}
AVD Environment Discovery#CredCode#		
AVD Environment Discovery#CredCode#	}
AVD Environment Discovery#CredCode#	IF ($FoundOrNot -eq "No")
AVD Environment Discovery#CredCode#	{
AVD Environment Discovery#CredCode#		$STR = $FinalResGroup + ","
AVD Environment Discovery#CredCode#		Add-Content $TenantResGroup $STR
AVD Environment Discovery#CredCode#		
AVD Environment Discovery#CredCode#		$AllVMs = Get-AzVM -ResourceGroupName $FinalResGroup -Status | Select-Object Name, PowerState
AVD Environment Discovery#CredCode#		foreach ($VM in $AllVMs)
AVD Environment Discovery#CredCode#		{
AVD Environment Discovery#CredCode#			$STR = $VM.Name + "," + $FinalResGroup + "," + $VM.PowerState
AVD Environment Discovery#CredCode#			Add-Content $AllAzureVMs $STR			
AVD Environment Discovery#CredCode#		}
AVD Environment Discovery#CredCode#				
AVD Environment Discovery#CredCode#	}
AVD Environment Discovery#CredCode#	
AVD Environment Discovery#CredCode#	$AllHostsNow = Get-AzWvdSessionHost -ResourceGroupName $FinalResGroup -HostPoolName $HostPoolName | Select-Object Name, LastHeartbeat, Status, LastUpdateTime, UpdateErrorMessage, UpdateState, Status, OSVersion, AgentVersion
AVD Environment Discovery#CredCode#	
AVD Environment Discovery#CredCode#	foreach ($PackItem in $AllHostsNow)
AVD Environment Discovery#CredCode#	{
AVD Environment Discovery#CredCode#		$NameNow = $PackItem.Name
AVD Environment Discovery#CredCode#		$LastHNow = $PackItem.LastHeartbeat
AVD Environment Discovery#CredCode#		$LastUpdateTime = $PackItem.LastUpdateTime
AVD Environment Discovery#CredCode#		$UPDError = $PackItem.UpdateErrorMessage
AVD Environment Discovery#CredCode#		$UPDStatus = $PackItem.UpdateState
AVD Environment Discovery#CredCode#		$OSVersion = $PackItem.OSVersion
AVD Environment Discovery#CredCode#		$AgentVersion = $PackItem.AgentVersion
AVD Environment Discovery#CredCode#		
AVD Environment Discovery#CredCode#		$B, $FinalHostName = $NameNow.Split("/")
AVD Environment Discovery#CredCode#		$HostWithoutDots, $C = $FinalHostName.Split(".")
AVD Environment Discovery#CredCode#		
AVD Environment Discovery#CredCode#		$AllVMCSV = Import-Csv $AllAzureVMs
AVD Environment Discovery#CredCode#		
AVD Environment Discovery#CredCode#		$VMStatus = "Unknown"				
AVD Environment Discovery#CredCode#		foreach ($VMNow in $AllVMCSV)
AVD Environment Discovery#CredCode#		{
AVD Environment Discovery#CredCode#			$ThisVMNow = $VMNow.VMName
AVD Environment Discovery#CredCode#			IF ($ThisVMNow.ToLower() -eq $HostWithoutDots.ToLower())
AVD Environment Discovery#CredCode#			{
AVD Environment Discovery#CredCode#				$VMStatus = $VMNow.VMStatus
AVD Environment Discovery#CredCode#				break
AVD Environment Discovery#CredCode#			}
AVD Environment Discovery#CredCode#		}
AVD Environment Discovery#CredCode#		
AVD Environment Discovery#CredCode#		$STR = $HostPoolName + "," + $FinalResGroup + "," + $HostPoolType + "," + $LoadBalancerType + "," + $Location + "," + $MaxSessionLimit + "," + $NameNow + "," + $LastHNow + "," + $LastUpdateTime + "," + $UPDError + "," + $UPDStatus + "," + $UStatus + "," + $OSVersion + "," + $AgentVersion + "," + $VMStatus		
AVD Environment Discovery#CredCode#		Add-Content $TestCSVFile $STR
AVD Environment Discovery#CredCode#		
AVD Environment Discovery#CredCode#		$FoundOrNot = "No"
AVD Environment Discovery#CredCode#		$CSVResGroup = Import-Csv $TenantPoolAndHostFile
AVD Environment Discovery#CredCode#		foreach ($CSVR in $CSVResGroup)
AVD Environment Discovery#CredCode#		{
AVD Environment Discovery#CredCode#			IF ($CSVR.HostPool -eq $HostPoolName -and $CSVR.'Resource Group' -eq $FinalResGroup -and $CSVR.'VM Status' -eq "VM running")
AVD Environment Discovery#CredCode#			{
AVD Environment Discovery#CredCode#				$FoundOrNot = "Yes"
AVD Environment Discovery#CredCode#				break				
AVD Environment Discovery#CredCode#			}
AVD Environment Discovery#CredCode#			
AVD Environment Discovery#CredCode#		}
AVD Environment Discovery#CredCode#		IF ($FoundOrNot -eq "No")
AVD Environment Discovery#CredCode#		{
AVD Environment Discovery#CredCode#			$STR = $HostPoolName + "," + $FinalResGroup + "," + $NameNow + "," + $VMStatus			
AVD Environment Discovery#CredCode#			Add-Content $TenantPoolAndHostFile $STR
AVD Environment Discovery#CredCode#			
AVD Environment Discovery#CredCode#		}
AVD Environment Discovery#CredCode#		
AVD Environment Discovery#CredCode#	}
AVD Environment Discovery#CredCode#	
AVD Environment Discovery#CredCode#}
FSLogix Configuration Collection Task#CredCode#$ExecutionLogFile = "$UserHomeDir\FSLOGIXExecutionLog" + $TargetNameNow + ".LOG"
FSLogix Configuration Collection Task#CredCode#Remove-Item $ExecutionLogFile -ErrorAction SilentlyContinue
FSLogix Configuration Collection Task#CredCode#
FSLogix Configuration Collection Task#CredCode#$FinalScriptPath = "$LocAppDataNow\Public\DPConfig\DPCode\FSLogixConfig.ps1"
FSLogix Configuration Collection Task#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
FSLogix Configuration Collection Task#CredCode#
FSLogix Configuration Collection Task#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
FSLogix Configuration Collection Task#CredCode#foreach ($Item in $CSVNow)
FSLogix Configuration Collection Task#CredCode#{
FSLogix Configuration Collection Task#CredCode#	
FSLogix Configuration Collection Task#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
FSLogix Configuration Collection Task#CredCode#	$ThisHostNow = $Item.'Session Host'
FSLogix Configuration Collection Task#CredCode#	$A, $B = $ThisHostNow.Split("/")
FSLogix Configuration Collection Task#CredCode#	$C, $D, $E = $B.Split(".")
FSLogix Configuration Collection Task#CredCode#	$ThisHostName = $C
FSLogix Configuration Collection Task#CredCode#	
FSLogix Configuration Collection Task#CredCode#	$STR = "Final Resource Group: " + $ThisHostResGroup
FSLogix Configuration Collection Task#CredCode#	Add-Content $ExecutionLogFile $STR
FSLogix Configuration Collection Task#CredCode#	$STR = "Final Host Name: " + $ThisHostName
FSLogix Configuration Collection Task#CredCode#	Add-Content $ExecutionLogFile $STR
FSLogix Configuration Collection Task#CredCode#	
FSLogix Configuration Collection Task#CredCode#	$FSLogixResultFileProfC = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
FSLogix Configuration Collection Task#CredCode#	Remove-Item $FSLogixResultFileProfC -ErrorAction SilentlyContinue	
FSLogix Configuration Collection Task#CredCode#	$FSLogixResultFileODFCC = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
FSLogix Configuration Collection Task#CredCode#	Remove-Item $FSLogixResultFileODFCC -ErrorAction SilentlyContinue
FSLogix Configuration Collection Task#CredCode#	
FSLogix Configuration Collection Task#CredCode#	$STR = "Executing for Host: " + $ThisHostName
FSLogix Configuration Collection Task#CredCode#	Add-Content $ExecutionLogFile $STR
FSLogix Configuration Collection Task#CredCode#	$Error.Clear()
FSLogix Configuration Collection Task#CredCode#	$Status = Invoke-AzVMRunCommand -ResourceGroupName $ThisHostResGroup -Name $ThisHostName -CommandId 'RunPowerShellScript' -ScriptPath "$FinalScriptPath"
FSLogix Configuration Collection Task#CredCode#	IF ($Error.Count -eq 0)
FSLogix Configuration Collection Task#CredCode#	{
FSLogix Configuration Collection Task#CredCode#		$STR = "Script Executed Successfully on Host: " + $ThisHostName
FSLogix Configuration Collection Task#CredCode#		Add-Content $ExecutionLogFile $STR
FSLogix Configuration Collection Task#CredCode#		$ResTMP = "$UserHomeDir\FSLogixResultsTMP.DPC"
FSLogix Configuration Collection Task#CredCode#		Remove-Item $ResTMP -ErrorAction SilentlyContinue	
FSLogix Configuration Collection Task#CredCode#		
FSLogix Configuration Collection Task#CredCode#		$STR = $Status.value[0].Message
FSLogix Configuration Collection Task#CredCode#		Add-Content $ResTMP $STR
FSLogix Configuration Collection Task#CredCode#		foreach ($NewItem in Get-Content $ResTMP)
FSLogix Configuration Collection Task#CredCode#		{
FSLogix Configuration Collection Task#CredCode#			$A, $B = $NewItem.Split("*")
FSLogix Configuration Collection Task#CredCode#			IF ($A -eq "PROFILE")
FSLogix Configuration Collection Task#CredCode#			{
FSLogix Configuration Collection Task#CredCode#				Add-Content $FSLogixResultFileProfC $B
FSLogix Configuration Collection Task#CredCode#			}
FSLogix Configuration Collection Task#CredCode#			IF ($A -eq "ODFC")
FSLogix Configuration Collection Task#CredCode#			{
FSLogix Configuration Collection Task#CredCode#				Add-Content $FSLogixResultFileODFCC $B
FSLogix Configuration Collection Task#CredCode#			}			
FSLogix Configuration Collection Task#CredCode#		}		
FSLogix Configuration Collection Task#CredCode#	}
FSLogix Configuration Collection Task#CredCode#	else
FSLogix Configuration Collection Task#CredCode#	{
FSLogix Configuration Collection Task#CredCode#		$STR = "Error Executing Script: " + $ThisHostName
FSLogix Configuration Collection Task#CredCode#		Add-Content $ExecutionLogFile $STR
FSLogix Configuration Collection Task#CredCode#		$STR = "Error: " + $Error
FSLogix Configuration Collection Task#CredCode#		Add-Content $ExecutionLogFile $STR
FSLogix Configuration Collection Task#CredCode#				
FSLogix Configuration Collection Task#CredCode#	}
FSLogix Configuration Collection Task#CredCode#	
FSLogix Configuration Collection Task#CredCode#}
Test FSLogix Locked Retry Count (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Locked Retry Count (Profile Container)#CredCode#
Test FSLogix Locked Retry Count (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Locked Retry Count (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Locked Retry Count (Profile Container)#CredCode#
Test FSLogix Locked Retry Count (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Locked Retry Count (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Locked Retry Count (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Locked Retry Count (Profile Container)#CredCode#{
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	{
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		{
Test FSLogix Locked Retry Count (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Locked Retry Count (Profile Container)#CredCode#			break
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		}
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	}
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	{
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		{
Test FSLogix Locked Retry Count (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Locked Retry Count (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Locked Retry Count (Profile Container)#CredCode#			break
Test FSLogix Locked Retry Count (Profile Container)#CredCode#			
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		}		
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	}
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	{
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	}
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	{
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		$IntValue = $RegValue -as [int]
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		IF ($IntValue -lt 50)
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		{
Test FSLogix Locked Retry Count (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Locked Retry Count (Profile Container)#CredCode#		}
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	}
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	
Test FSLogix Locked Retry Count (Profile Container)#CredCode#}
Test FSLogix Locked Retry Count (Profile Container)#CredCode#
Test FSLogix Locked Retry Count (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Locked Retry Count (Profile Container)#CredCode#{
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$TestStatus = "High"
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	
Test FSLogix Locked Retry Count (Profile Container)#CredCode#}
Test FSLogix Locked Retry Count (Profile Container)#CredCode#else
Test FSLogix Locked Retry Count (Profile Container)#CredCode#{
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Locked Retry Count (Profile Container)#CredCode#	
Test FSLogix Locked Retry Count (Profile Container)#CredCode#}
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#{
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	{
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		{
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#			break
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		}
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	}
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	{
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		{
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#			break
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#			
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		}		
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	}
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	{
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	}
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	{
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		$IntValue = $RegValue -as [int]
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		IF ($IntValue -ge 6)
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		{
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#		}
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	}
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#}
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#{
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$TestStatus = "High"
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#}
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#else
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#{
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#	
Test FSLogix Locked Retry Interval (Profile Container)#CredCode#}
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#{
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	{
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		{
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#			break
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		}
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	}
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	{
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		{
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#			break
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#			
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		}		
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	}
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	{
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	}
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	{
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		$IntValue = $RegValue
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		IF ($IntValue -ne "0x1000")
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		{
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#		}
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	}
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#}
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#{
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$TestStatus = "High"
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$TestText = ""
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#}
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#else
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#{
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	$TestText = ""
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#	
Test FSLogix VHDX Sector Size (Profile Container)#CredCode#}
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#{
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	{
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		{
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#			break
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		}
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	}
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	{
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		{
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#			break
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#			
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		}		
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	}
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	{
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	}
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	{
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		$IntValue = $RegValue -as [int]
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		IF ($IntValue -ge 20000)
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		{
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#		}
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	}
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#}
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#{
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$TestStatus = "High"
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#}
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#else
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#{
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#	
Test FSLogix Volume Wait Attachment (Profile Container)#CredCode#}
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#{
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	{
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		{
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#			break
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		}
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	}
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	{
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		{
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#			break
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#			
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		}		
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	}
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	{
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	}
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	{
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		$IntValue = $RegValue.Trim()
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		{
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#		}
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	}
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#}
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#{
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$TestStatus = "High"
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#}
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#else
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#{
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#	
Test FSLogix Delete Local Profile Setting (Profile Container)#CredCode#}
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#{
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	{
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		{
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#			break
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		}
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	}
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	{
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		{
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#			break
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#			
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		}		
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	}
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	{
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	}
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	{
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		$IntValue = $RegValue.Trim()
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		{
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#		}
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	}
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#}
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#{
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$TestStatus = "High"
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#}
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#else
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#{
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#	
Test FSLogix Flip Flop Profile Directory Setting (Profile Container)#CredCode#}
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#{
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	{
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		{
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#			break
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		}
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	}
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	{
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		{
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#			break
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#			
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		}		
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	}
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	{
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	}
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	{
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		$IntValue = $RegValue.Trim()
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		{
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#		}
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	}
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#}
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#{
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$TestStatus = "High"
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#}
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#else
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#{
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#	
Test FSLogix Prevent Login With Failure Setting (Profile Container)#CredCode#}
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#{
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	{
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		{
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#			break
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		}
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	}
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	{
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		{
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#			break
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#			
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		}		
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	}
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	{
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	}
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	{
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		$IntValue = $RegValue.Trim()
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		{
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#		}
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	}
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#}
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#{
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$TestStatus = "High"
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#}
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#else
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#{
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#	
Test FSLogix Prevent Login With Temp Profile Setting (Profile Container)#CredCode#}
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#{
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		{
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#			break
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		}
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	}
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		{
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#			break
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#			
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		}		
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	}
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	}
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		$IntValue = $RegValue -as [int]
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		IF ($IntValue -lt 120)
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		{
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#		}
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	}	
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#}
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#{
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#}
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#else
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#{
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Count Setting (Profile Container)#CredCode#}
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#{
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		{
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#			break
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		}
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	}
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		{
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#			break
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#			
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		}		
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	}
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	}
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		$IntValue = $RegValue -as [int]
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		IF ($IntValue -gt 5)
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		{
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#		}
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	}	
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#}
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#{
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#}
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#else
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#{
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Interval Setting (Profile Container)#CredCode#}
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#{
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	{
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		{
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#			break
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		}
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	}
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	{
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		{
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#			break
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		}
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	}
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	{
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Attaching as user object"
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	}
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	{
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		{
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#		}
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	}	
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#}
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#{
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#}
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#else
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#{
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#	
Test FSLogix Accessing Network As User Object Setting (Profile Container)#CredCode#}
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#{
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	{
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		{
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#			break
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		}
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	}
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	{
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		{
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#			break
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		}
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	}
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	{
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Using Dynamic VHDX. Please see remark"
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	}
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	{
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		{
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#		}
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	}	
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#}
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#{
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#}
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#else
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#{
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#	
Test FSLogix Use of Dynamic VHDX Setting (Profile Container)#CredCode#}
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#{
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	{
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		{
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#			break
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		}
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	}
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	{
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		{
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#			break
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		}
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	}
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	{
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Using default 30 MB size"
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	}
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	{
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		$IntValue = $RegValue -as [int]
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		IF ($IntValue -lt 30000)
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		{
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#		}
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	}	
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#}
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#{
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#}
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#else
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#{
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#	
Test FSLogix VHD(X) Size In MB Setting (Profile Container)#CredCode#}
Test FSLogix Search Capability Test (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Search Capability Test (Profile Container)#CredCode#
Test FSLogix Search Capability Test (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Search Capability Test (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Search Capability Test (Profile Container)#CredCode#
Test FSLogix Search Capability Test (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Search Capability Test (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Search Capability Test (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Search Capability Test (Profile Container)#CredCode#{
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Search Capability Test (Profile Container)#CredCode#	
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Search Capability Test (Profile Container)#CredCode#	
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Search Capability Test (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Search Capability Test (Profile Container)#CredCode#	{
Test FSLogix Search Capability Test (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Search Capability Test (Profile Container)#CredCode#		{
Test FSLogix Search Capability Test (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Search Capability Test (Profile Container)#CredCode#			break
Test FSLogix Search Capability Test (Profile Container)#CredCode#		}
Test FSLogix Search Capability Test (Profile Container)#CredCode#	}
Test FSLogix Search Capability Test (Profile Container)#CredCode#	
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Search Capability Test (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Search Capability Test (Profile Container)#CredCode#	{
Test FSLogix Search Capability Test (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Search Capability Test (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Search Capability Test (Profile Container)#CredCode#		{
Test FSLogix Search Capability Test (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Search Capability Test (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Search Capability Test (Profile Container)#CredCode#			break
Test FSLogix Search Capability Test (Profile Container)#CredCode#		}
Test FSLogix Search Capability Test (Profile Container)#CredCode#	}
Test FSLogix Search Capability Test (Profile Container)#CredCode#	
Test FSLogix Search Capability Test (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Search Capability Test (Profile Container)#CredCode#	{
Test FSLogix Search Capability Test (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Roam Search is disabled"
Test FSLogix Search Capability Test (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Search Capability Test (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Search Capability Test (Profile Container)#CredCode#	}
Test FSLogix Search Capability Test (Profile Container)#CredCode#	
Test FSLogix Search Capability Test (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Search Capability Test (Profile Container)#CredCode#	{
Test FSLogix Search Capability Test (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Search Capability Test (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Search Capability Test (Profile Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Search Capability Test (Profile Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix Search Capability Test (Profile Container)#CredCode#		{
Test FSLogix Search Capability Test (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Search Capability Test (Profile Container)#CredCode#		}
Test FSLogix Search Capability Test (Profile Container)#CredCode#	}	
Test FSLogix Search Capability Test (Profile Container)#CredCode#}
Test FSLogix Search Capability Test (Profile Container)#CredCode#
Test FSLogix Search Capability Test (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Search Capability Test (Profile Container)#CredCode#{
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Search Capability Test (Profile Container)#CredCode#	
Test FSLogix Search Capability Test (Profile Container)#CredCode#}
Test FSLogix Search Capability Test (Profile Container)#CredCode#else
Test FSLogix Search Capability Test (Profile Container)#CredCode#{
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Search Capability Test (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Search Capability Test (Profile Container)#CredCode#	
Test FSLogix Search Capability Test (Profile Container)#CredCode#}
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#{
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	{
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		{
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#			break
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		}
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	}
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	{
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		{
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#			break
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		}
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	}
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	{
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Outlook Cache is disabled"
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	}
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	{
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		$IntValue = $RegValue
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		{
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#		}
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	}	
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#}
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#{
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#}
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#else
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#{
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#	
Test FSLogix OutLook Cached Mode Setting (Profile Container)#CredCode#}
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#{
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	{
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		{
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#			break
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		}
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	}
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	{
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		{
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#			break
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		}
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	}
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	{
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Profile Folder is kept under SID Folder."
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	}
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	{
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		$IntValue = $RegValue
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		{
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#		}
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	}	
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#}
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#{
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#}
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#else
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#{
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#	
Test FSLogix SID Folder Creation Setting (Profile Container)#CredCode#}
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#{
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	{
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		{
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#			break
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		}
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	}
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	{
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		{
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#			break
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		}
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	}
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	{
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Reboot is not conifgured."
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	}
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	{
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		{
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		}
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		IF ($IntValue -eq "2")
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		{
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#		}
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	}	
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#}
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#{
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#}
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#else
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#{
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#	
Test FSLogix Reboot When Log Off Setting (Profile Container)#CredCode#}
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#{
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	{
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		{
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#			break
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		}
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	}
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	{
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		{
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#			break
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		}
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	}
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	{
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Shutdown is not conifgured."
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	}
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	{
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		{
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		}
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		IF ($IntValue -eq "2")
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		{
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#		}
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	}	
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#}
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#{
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#}
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#else
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#{
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#	
Test FSLogix Shutdown When Log Off Setting (Profile Container)#CredCode#}
Test FSLogix Volume Type Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Volume Type Setting (Profile Container)#CredCode#
Test FSLogix Volume Type Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Volume Type Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Volume Type Setting (Profile Container)#CredCode#
Test FSLogix Volume Type Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Volume Type Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Volume Type Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Volume Type Setting (Profile Container)#CredCode#{
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	{
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		{
Test FSLogix Volume Type Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Volume Type Setting (Profile Container)#CredCode#			break
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		}
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	}
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	{
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		{
Test FSLogix Volume Type Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Volume Type Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Volume Type Setting (Profile Container)#CredCode#			break
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		}
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	}
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	{
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - VHD is configured."
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	}
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	{
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		IF ($IntValue -eq "vhd")
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		{
Test FSLogix Volume Type Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Volume Type Setting (Profile Container)#CredCode#		}		
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	}	
Test FSLogix Volume Type Setting (Profile Container)#CredCode#}
Test FSLogix Volume Type Setting (Profile Container)#CredCode#
Test FSLogix Volume Type Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Volume Type Setting (Profile Container)#CredCode#{
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	
Test FSLogix Volume Type Setting (Profile Container)#CredCode#}
Test FSLogix Volume Type Setting (Profile Container)#CredCode#else
Test FSLogix Volume Type Setting (Profile Container)#CredCode#{
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Volume Type Setting (Profile Container)#CredCode#	
Test FSLogix Volume Type Setting (Profile Container)#CredCode#}
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#{
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	{
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		{
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#			break
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		}
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	}
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	{
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		{
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#			break
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		}
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	}
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	{
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Removal of duplicate OST files are not configured."
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	}
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	{
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		{
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#		}		
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	}	
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#}
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#{
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#}
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#else
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#{
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#	
Test FSLogix Removal of Orphaned OST Setting (Profile Container)#CredCode#}
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#{
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	{
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		{
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#			break
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		}
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	}
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	{
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		{
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#			break
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		}
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	}
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	{
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Local Folder will not be kept."
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	}
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	{
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		{
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#		}		
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	}	
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#}
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#{
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#}
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#else
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#{
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#	
Test FSLogix Keeping Local Folder Setting (Profile Container)#CredCode#}
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#$AnyGap = "No"
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#{
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$ThisHostName = $C
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$RegValue = ""
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	{
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		{
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#			break
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		}
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	}
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	{
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		{
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#			$RegValue = $B
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#			break
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		}
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	}
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	{
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Concurrent User Sessions are disabled."
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	}
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	{
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		{
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#		}		
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	}	
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#}
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#{
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#}
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#else
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#{
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$SumVal = ""
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	$TestText = ""
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#	
Test FSLogix Allowed Concurrent User Sessions (Profile Container)#CredCode#}
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#{
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	{
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		{
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#			break
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		}
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	}
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	{
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		{
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#			break
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		}
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	}
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	{
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	}
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	{
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		{
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#		}		
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	}	
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#}
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#{
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#}
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#else
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#{
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#	
Test FSLogix Sync OST To VHD Setting (Office Container)#CredCode#}
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#{
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	{
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		{
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#			break
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		}
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	}
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	{
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		{
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#			break
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		}
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	}
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	{
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Using default Outlook Profile Folder Path"
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	}
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	{
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		{
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#		}		
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	}	
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#}
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#{
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#}
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#else
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#{
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#	
Test FSLogix Outlook Folder Path Setting (Office Container)#CredCode#}
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#{
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	{
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		{
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#			break
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		}
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	}
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	{
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		{
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#			break
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		}
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	}
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	{
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	}
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	{
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		$IntValue = $RegValue -as [int]
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		IF ($IntValue -gt 2)
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		{
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#		}		
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	}	
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#}
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#{
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#}
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#else
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#{
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#	
Test FSLogix Number of Per-Session VHDs To Persist Setting (Office Container)#CredCode#}
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#{
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#			break
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		}
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#			break
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		}
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#		}		
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	}	
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#}
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#{
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#}
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#else
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#{
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#	
Test FSLogix Include Teams Data Setting (Office Container)#CredCode#}
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#{
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#			break
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		}
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#			break
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		}
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, SharePoint Redirection is enabled by default."
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#		}		
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	}	
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#}
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#{
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#}
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#else
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#{
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#	
Test FSLogix Include Sharepoint Data Setting (Office Container)#CredCode#}
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#{
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#			break
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		}
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#			break
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		}
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, SharePoint Redirection is enabled by default."
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#		}		
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	}	
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#}
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#{
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#}
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#else
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#{
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#	
Test FSLogix Include Outlook Personalization Data Setting (Office Container)#CredCode#}
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#{
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#			break
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		}
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#			break
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		}
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Outlook Redirection is enabled by default."
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#		}		
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	}	
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#}
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#{
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#}
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#else
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#{
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#	
Test FSLogix Include Outlook Data Setting (Office Container)#CredCode#}
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#{
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	{
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		{
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#			break
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		}
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	}
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	{
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		{
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#			break
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		}
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	}
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	{
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, OneDrive Redirection is enabled by default."
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	}
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	{
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		{
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#		}		
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	}	
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#}
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#{
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#}
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#else
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#{
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#	
Test FSLogix Include OneDrive Data Setting (Office Container)#CredCode#}
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#{
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	{
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		{
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#			break
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		}
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	}
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	{
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		{
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#			break
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		}
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	}
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	{
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Outlook Cache Mode is enabled by default."
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	}
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	{
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		{
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#		}		
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	}	
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#}
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#{
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#}
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#else
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#{
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#	
Test FSLogix OutLook Cached Mode Setting (Office Container)#CredCode#}
Test FSLogix Search Capability Test (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Search Capability Test (Office Container)#CredCode#
Test FSLogix Search Capability Test (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Search Capability Test (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Search Capability Test (Office Container)#CredCode#
Test FSLogix Search Capability Test (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Search Capability Test (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Search Capability Test (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Search Capability Test (Office Container)#CredCode#{
Test FSLogix Search Capability Test (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Search Capability Test (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Search Capability Test (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Search Capability Test (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Search Capability Test (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Search Capability Test (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Search Capability Test (Office Container)#CredCode#	
Test FSLogix Search Capability Test (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Search Capability Test (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Search Capability Test (Office Container)#CredCode#	
Test FSLogix Search Capability Test (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Search Capability Test (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Search Capability Test (Office Container)#CredCode#	{
Test FSLogix Search Capability Test (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Search Capability Test (Office Container)#CredCode#		{
Test FSLogix Search Capability Test (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Search Capability Test (Office Container)#CredCode#			break
Test FSLogix Search Capability Test (Office Container)#CredCode#		}
Test FSLogix Search Capability Test (Office Container)#CredCode#	}
Test FSLogix Search Capability Test (Office Container)#CredCode#	
Test FSLogix Search Capability Test (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Search Capability Test (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Search Capability Test (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Search Capability Test (Office Container)#CredCode#	{
Test FSLogix Search Capability Test (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Search Capability Test (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Search Capability Test (Office Container)#CredCode#		{
Test FSLogix Search Capability Test (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Search Capability Test (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Search Capability Test (Office Container)#CredCode#			break
Test FSLogix Search Capability Test (Office Container)#CredCode#		}
Test FSLogix Search Capability Test (Office Container)#CredCode#	}
Test FSLogix Search Capability Test (Office Container)#CredCode#	
Test FSLogix Search Capability Test (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Search Capability Test (Office Container)#CredCode#	{
Test FSLogix Search Capability Test (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck,"
Test FSLogix Search Capability Test (Office Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Search Capability Test (Office Container)#CredCode#	}
Test FSLogix Search Capability Test (Office Container)#CredCode#	
Test FSLogix Search Capability Test (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Search Capability Test (Office Container)#CredCode#	{
Test FSLogix Search Capability Test (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Search Capability Test (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Search Capability Test (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Search Capability Test (Office Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix Search Capability Test (Office Container)#CredCode#		{
Test FSLogix Search Capability Test (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Search Capability Test (Office Container)#CredCode#		}		
Test FSLogix Search Capability Test (Office Container)#CredCode#	}	
Test FSLogix Search Capability Test (Office Container)#CredCode#}
Test FSLogix Search Capability Test (Office Container)#CredCode#
Test FSLogix Search Capability Test (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Search Capability Test (Office Container)#CredCode#{
Test FSLogix Search Capability Test (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Search Capability Test (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Search Capability Test (Office Container)#CredCode#	$TestText = ""
Test FSLogix Search Capability Test (Office Container)#CredCode#	
Test FSLogix Search Capability Test (Office Container)#CredCode#}
Test FSLogix Search Capability Test (Office Container)#CredCode#else
Test FSLogix Search Capability Test (Office Container)#CredCode#{
Test FSLogix Search Capability Test (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Search Capability Test (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Search Capability Test (Office Container)#CredCode#	$TestText = ""
Test FSLogix Search Capability Test (Office Container)#CredCode#	
Test FSLogix Search Capability Test (Office Container)#CredCode#}
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#$AnyGap = "No"
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#foreach ($Item in $CSVNow)
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#{
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$ThisHostName = $C
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$RegToCheck = "None"
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$RegValue = ""
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	{
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		{
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#			break
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		}
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	}
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$FoundOrNot = "No"
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	{
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		{
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#			$FoundOrNot = "Yes"
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#			$RegValue = $B
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#			break
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		}
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	}
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	{
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Using default 30 MB size"
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		$AnyGap = "Yes"
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	}
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	{
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		$IntValue = $RegValue -as [int]
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		IF ($IntValue -lt 30000)
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		{
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#			$AnyGap = "Yes"
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#		}
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	}	
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#}
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#{
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$SumVal = ""
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$TestStatus = "Medium"
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$TestText = ""
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#}
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#else
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#{
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$SumVal = ""
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$TestStatus = "Passed"
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	$TestText = ""
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#	
Test FSLogix VHD(X) Size In MB Setting (Office Container) #CredCode#}
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#{
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	{
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		{
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#			break
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		}
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	}
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	{
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		{
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#			break
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		}
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	}
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	{
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Using Dynamic VHDX. Please see remark"
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	}
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	{
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		{
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#		}
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	}	
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#}
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#{
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#}
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#else
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#{
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#	
Test FSLogix Use of Dynamic VHDX Setting (Office Container)#CredCode#}
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#{
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	{
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		{
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#			break
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		}
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	}
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	{
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		{
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#			break
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		}
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	}
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	{
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Attaching as user object"
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	}
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	{
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		{
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#		}
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	}	
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#}
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#{
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#}
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#else
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#{
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#	
Test FSLogix Accessing Network As User Object Setting (Office Container)#CredCode#}
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#{
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		{
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#			break
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		}
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	}
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		{
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#			break
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#			
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		}		
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	}
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	}
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		$IntValue = $RegValue -as [int]
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		IF ($IntValue -gt 5)
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		{
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#		}
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	}	
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#}
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#{
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#}
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#else
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#{
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Interval Setting (Office Container)#CredCode#}
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#{
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		{
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#			break
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		}
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	}
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		{
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#			break
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#			
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		}		
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	}
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	}
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	{
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		$IntValue = $RegValue -as [int]
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		IF ($IntValue -lt 120)
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		{
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#		}
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	}	
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#}
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#{
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#}
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#else
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#{
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#	
Test FSLogix VHD(X) Attach Retry Count Setting (Office Container)#CredCode#}
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#{
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	{
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		{
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#			break
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		}
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	}
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	{
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		{
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#			break
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#			
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		}		
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	}
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	{
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	}
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	{
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		$IntValue = $RegValue.Trim()
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		{
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#		}
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	}
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#}
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#{
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$TestStatus = "High"
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#}
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#else
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#{
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#	
Test FSLogix Prevent Login With Temp Profile Setting (Office Container)#CredCode#}
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#{
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	{
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		{
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#			break
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		}
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	}
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	{
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		{
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#			break
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#			
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		}		
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	}
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	{
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	}
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	{
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		$IntValue = $RegValue.Trim()
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		{
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#		}
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	}
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#}
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#{
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$TestStatus = "High"
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#}
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#else
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#{
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#	
Test FSLogix Prevent Login With Failure Setting (Office Container)#CredCode#}
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#{
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	{
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		{
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#			break
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		}
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	}
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	{
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		{
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#			break
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#			
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		}		
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	}
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	{
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	}
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	{
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		$IntValue = $RegValue.Trim()
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		{
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#		}
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	}
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#}
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#{
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$TestStatus = "High"
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#}
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#else
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#{
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#	
Test FSLogix Flip Flop Profile Directory Setting (Office Container)#CredCode#}
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#{
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	{
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		{
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#			break
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		}
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	}
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	{
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		{
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#			break
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#			
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		}		
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	}
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	{
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	}
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	{
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		$IntValue = $RegValue -as [int]
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		IF ($IntValue -ge 20000)
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		{
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#		}
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	}
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#}
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#{
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$TestStatus = "High"
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$TestText = ""
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#}
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#else
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#{
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	$TestText = ""
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#	
Test FSLogix Volume Wait Attachment (Office Container)#CredCode#}
Test FSLogix VHDX Sector Size (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix VHDX Sector Size (Office Container)#CredCode#
Test FSLogix VHDX Sector Size (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix VHDX Sector Size (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix VHDX Sector Size (Office Container)#CredCode#
Test FSLogix VHDX Sector Size (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix VHDX Sector Size (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix VHDX Sector Size (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix VHDX Sector Size (Office Container)#CredCode#{
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$RegValue = ""
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	{
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		{
Test FSLogix VHDX Sector Size (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix VHDX Sector Size (Office Container)#CredCode#			break
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		}
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	}
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	{
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		{
Test FSLogix VHDX Sector Size (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix VHDX Sector Size (Office Container)#CredCode#			$RegValue = $B
Test FSLogix VHDX Sector Size (Office Container)#CredCode#			break
Test FSLogix VHDX Sector Size (Office Container)#CredCode#			
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		}		
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	}
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	{
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	}
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	{
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		IF ($IntValue -ne "0x1000")
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		{
Test FSLogix VHDX Sector Size (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix VHDX Sector Size (Office Container)#CredCode#		}
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	}
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	
Test FSLogix VHDX Sector Size (Office Container)#CredCode#}
Test FSLogix VHDX Sector Size (Office Container)#CredCode#
Test FSLogix VHDX Sector Size (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix VHDX Sector Size (Office Container)#CredCode#{
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$SumVal = ""
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$TestStatus = "High"
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$TestText = ""
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	
Test FSLogix VHDX Sector Size (Office Container)#CredCode#}
Test FSLogix VHDX Sector Size (Office Container)#CredCode#else
Test FSLogix VHDX Sector Size (Office Container)#CredCode#{
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$SumVal = ""
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	$TestText = ""
Test FSLogix VHDX Sector Size (Office Container)#CredCode#	
Test FSLogix VHDX Sector Size (Office Container)#CredCode#}
Test FSLogix Locked Retry Interval (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Locked Retry Interval (Office Container)#CredCode#
Test FSLogix Locked Retry Interval (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Locked Retry Interval (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Locked Retry Interval (Office Container)#CredCode#
Test FSLogix Locked Retry Interval (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Locked Retry Interval (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Locked Retry Interval (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Locked Retry Interval (Office Container)#CredCode#{
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	{
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		{
Test FSLogix Locked Retry Interval (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Locked Retry Interval (Office Container)#CredCode#			break
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		}
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	}
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	{
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		{
Test FSLogix Locked Retry Interval (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Locked Retry Interval (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Locked Retry Interval (Office Container)#CredCode#			break
Test FSLogix Locked Retry Interval (Office Container)#CredCode#			
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		}		
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	}
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	{
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	}
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	{
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		$IntValue = $RegValue -as [int]
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		IF ($IntValue -ge 6)
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		{
Test FSLogix Locked Retry Interval (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Locked Retry Interval (Office Container)#CredCode#		}
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	}
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	
Test FSLogix Locked Retry Interval (Office Container)#CredCode#}
Test FSLogix Locked Retry Interval (Office Container)#CredCode#
Test FSLogix Locked Retry Interval (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Locked Retry Interval (Office Container)#CredCode#{
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$TestStatus = "High"
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$TestText = ""
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	
Test FSLogix Locked Retry Interval (Office Container)#CredCode#}
Test FSLogix Locked Retry Interval (Office Container)#CredCode#else
Test FSLogix Locked Retry Interval (Office Container)#CredCode#{
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	$TestText = ""
Test FSLogix Locked Retry Interval (Office Container)#CredCode#	
Test FSLogix Locked Retry Interval (Office Container)#CredCode#}
Test FSLogix Locked Retry Count (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Locked Retry Count (Office Container)#CredCode#
Test FSLogix Locked Retry Count (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Locked Retry Count (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Locked Retry Count (Office Container)#CredCode#
Test FSLogix Locked Retry Count (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Locked Retry Count (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Locked Retry Count (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Locked Retry Count (Office Container)#CredCode#{
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Locked Retry Count (Office Container)#CredCode#	
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Locked Retry Count (Office Container)#CredCode#	
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Locked Retry Count (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Locked Retry Count (Office Container)#CredCode#	{
Test FSLogix Locked Retry Count (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Locked Retry Count (Office Container)#CredCode#		{
Test FSLogix Locked Retry Count (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Locked Retry Count (Office Container)#CredCode#			break
Test FSLogix Locked Retry Count (Office Container)#CredCode#		}
Test FSLogix Locked Retry Count (Office Container)#CredCode#	}
Test FSLogix Locked Retry Count (Office Container)#CredCode#	
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Locked Retry Count (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Locked Retry Count (Office Container)#CredCode#	{
Test FSLogix Locked Retry Count (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Locked Retry Count (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Locked Retry Count (Office Container)#CredCode#		{
Test FSLogix Locked Retry Count (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Locked Retry Count (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Locked Retry Count (Office Container)#CredCode#			break
Test FSLogix Locked Retry Count (Office Container)#CredCode#			
Test FSLogix Locked Retry Count (Office Container)#CredCode#		}		
Test FSLogix Locked Retry Count (Office Container)#CredCode#	}
Test FSLogix Locked Retry Count (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Locked Retry Count (Office Container)#CredCode#	{
Test FSLogix Locked Retry Count (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Locked Retry Count (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Locked Retry Count (Office Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Locked Retry Count (Office Container)#CredCode#		
Test FSLogix Locked Retry Count (Office Container)#CredCode#	}
Test FSLogix Locked Retry Count (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Locked Retry Count (Office Container)#CredCode#	{
Test FSLogix Locked Retry Count (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Locked Retry Count (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Locked Retry Count (Office Container)#CredCode#		$IntValue = $RegValue -as [int]
Test FSLogix Locked Retry Count (Office Container)#CredCode#		IF ($IntValue -lt 50)
Test FSLogix Locked Retry Count (Office Container)#CredCode#		{
Test FSLogix Locked Retry Count (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Locked Retry Count (Office Container)#CredCode#		}
Test FSLogix Locked Retry Count (Office Container)#CredCode#	}
Test FSLogix Locked Retry Count (Office Container)#CredCode#	
Test FSLogix Locked Retry Count (Office Container)#CredCode#}
Test FSLogix Locked Retry Count (Office Container)#CredCode#
Test FSLogix Locked Retry Count (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Locked Retry Count (Office Container)#CredCode#{
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$TestStatus = "High"
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$TestText = ""
Test FSLogix Locked Retry Count (Office Container)#CredCode#	
Test FSLogix Locked Retry Count (Office Container)#CredCode#}
Test FSLogix Locked Retry Count (Office Container)#CredCode#else
Test FSLogix Locked Retry Count (Office Container)#CredCode#{
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Locked Retry Count (Office Container)#CredCode#	$TestText = ""
Test FSLogix Locked Retry Count (Office Container)#CredCode#	
Test FSLogix Locked Retry Count (Office Container)#CredCode#}
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#{
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	{
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		{
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#			break
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		}
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	}
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	{
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		{
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#			break
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		}
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	}
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	{
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Concurrent User Sessions are disabled."
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	}
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	{
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		{
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#		}		
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	}	
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#}
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#{
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$TestText = ""
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#}
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#else
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#{
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	$TestText = ""
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#	
Test FSLogix Allowed Concurrent User Sessions (Office Container)#CredCode#}
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#{
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#			break
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		}
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#			break
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		}
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#		}		
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	}	
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#}
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#{
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#}
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#else
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#{
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#	
Test FSLogix Include Office Cache Data Setting (Office Container)#CredCode#}
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#{
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#			break
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		}
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "ODFC_Container.CSV"
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#			break
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		}
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found"
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	}
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	{
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		{
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#		}		
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	}	
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#}
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#{
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#}
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#else
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#{
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#	
Test FSLogix Include Office Activation Data Setting (Office Container)#CredCode#}
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#{
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	{
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		{
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#			break
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		}
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	}
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	{
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		{
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#			break
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		}
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	}
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	{
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Removal of duplicate OST files are not configured."
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	}
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	{
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		IF ($IntValue -eq "0")
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		{
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#		}		
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	}	
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#}
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#{
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#}
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#else
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#{
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#	
Test FSLogix Removal of Orphaned OST Setting (Office Container)#CredCode#}
Test FSLogix Volume Type Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix Volume Type Setting (Office Container)#CredCode#
Test FSLogix Volume Type Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Volume Type Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Volume Type Setting (Office Container)#CredCode#
Test FSLogix Volume Type Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Volume Type Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Volume Type Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix Volume Type Setting (Office Container)#CredCode#{
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix Volume Type Setting (Office Container)#CredCode#	
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix Volume Type Setting (Office Container)#CredCode#	
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Volume Type Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Volume Type Setting (Office Container)#CredCode#	{
Test FSLogix Volume Type Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Volume Type Setting (Office Container)#CredCode#		{
Test FSLogix Volume Type Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Volume Type Setting (Office Container)#CredCode#			break
Test FSLogix Volume Type Setting (Office Container)#CredCode#		}
Test FSLogix Volume Type Setting (Office Container)#CredCode#	}
Test FSLogix Volume Type Setting (Office Container)#CredCode#	
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix Volume Type Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Volume Type Setting (Office Container)#CredCode#	{
Test FSLogix Volume Type Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Volume Type Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Volume Type Setting (Office Container)#CredCode#		{
Test FSLogix Volume Type Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix Volume Type Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix Volume Type Setting (Office Container)#CredCode#			break
Test FSLogix Volume Type Setting (Office Container)#CredCode#		}
Test FSLogix Volume Type Setting (Office Container)#CredCode#	}
Test FSLogix Volume Type Setting (Office Container)#CredCode#	
Test FSLogix Volume Type Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Volume Type Setting (Office Container)#CredCode#	{
Test FSLogix Volume Type Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - VHD is configured."
Test FSLogix Volume Type Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Volume Type Setting (Office Container)#CredCode#		$AnyGap = "Yes"
Test FSLogix Volume Type Setting (Office Container)#CredCode#	}
Test FSLogix Volume Type Setting (Office Container)#CredCode#	
Test FSLogix Volume Type Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Volume Type Setting (Office Container)#CredCode#	{
Test FSLogix Volume Type Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Volume Type Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Volume Type Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix Volume Type Setting (Office Container)#CredCode#		IF ($IntValue -eq "vhd")
Test FSLogix Volume Type Setting (Office Container)#CredCode#		{
Test FSLogix Volume Type Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix Volume Type Setting (Office Container)#CredCode#		}		
Test FSLogix Volume Type Setting (Office Container)#CredCode#	}	
Test FSLogix Volume Type Setting (Office Container)#CredCode#}
Test FSLogix Volume Type Setting (Office Container)#CredCode#
Test FSLogix Volume Type Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Volume Type Setting (Office Container)#CredCode#{
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Volume Type Setting (Office Container)#CredCode#	
Test FSLogix Volume Type Setting (Office Container)#CredCode#}
Test FSLogix Volume Type Setting (Office Container)#CredCode#else
Test FSLogix Volume Type Setting (Office Container)#CredCode#{
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix Volume Type Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix Volume Type Setting (Office Container)#CredCode#	
Test FSLogix Volume Type Setting (Office Container)#CredCode#}
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#$AnyGap = "No"
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#Add-Content $TestCSVFile $STR
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#foreach ($Item in $CSVNow)
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#{
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$ThisHostName = $C
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$RegToCheck = "None"
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$RegValue = ""
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	{
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		{
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#			break
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		}
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	}
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$FoundOrNot = "No"
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	{
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		{
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#			$FoundOrNot = "Yes"
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#			$RegValue = $B
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#			break
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		}
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	}
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	{
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Profile Folder is kept under SID Folder."
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR		
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	}
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	{
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		$IntValue = $RegValue
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		IF ($IntValue -eq "1")
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		{
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#			$AnyGap = "Yes"
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#		}
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	}	
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#}
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#{
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$TestStatus = "Medium"
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#}
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#else
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#{
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$SumVal = ""
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$TestStatus = "Passed"
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	$TestText = ""
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#	
Test FSLogix SID Folder Creation Setting (Office Container)#CredCode#}
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#$AnyGap = "No"
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#Add-Content $TestCSVFile $STR
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#foreach ($Item in $CSVNow)
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#{
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$ThisHostName = $C
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$RegToCheck = "None"
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$RegValue = ""
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	{
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		{
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#			break
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		}
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	}
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$FoundOrNot = "No"
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	{
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		{
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#			$FoundOrNot = "Yes"
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#			$RegValue = $B
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#			break
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		}
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	}
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	{
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Outlook Cache is disabled"
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		$AnyGap = "Yes"
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	}
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	{
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		$IntValue = $RegValue
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		IF ($IntValue -eq "0")
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		{
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#			$AnyGap = "Yes"
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#		}
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	}	
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#}
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#{
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$SumVal = ""
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$TestStatus = "Medium"
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$TestText = ""
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#}
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#else
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#{
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$SumVal = ""
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$TestStatus = "Passed"
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	$TestText = ""
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#	
Test FSLogix OutLook Cached Mode Setting (Office Container) #CredCode#}
Test FSLogix Search Capability Test (Office Container) #CredCode#$AnyGap = "No"
Test FSLogix Search Capability Test (Office Container) #CredCode#
Test FSLogix Search Capability Test (Office Container) #CredCode#$STR = "Host Pool, Resource Group, Session Host Checked, Item, Value"
Test FSLogix Search Capability Test (Office Container) #CredCode#Add-Content $TestCSVFile $STR
Test FSLogix Search Capability Test (Office Container) #CredCode#
Test FSLogix Search Capability Test (Office Container) #CredCode#$TenantPoolAndHostFile = "$UserHomeDir\PoolAndHostForFSLogix" + $TargetNameNow + ".CSV"
Test FSLogix Search Capability Test (Office Container) #CredCode#$CSVNow = Import-Csv $TenantPoolAndHostFile
Test FSLogix Search Capability Test (Office Container) #CredCode#foreach ($Item in $CSVNow)
Test FSLogix Search Capability Test (Office Container) #CredCode#{
Test FSLogix Search Capability Test (Office Container) #CredCode#	$ThisPoolNow = $Item.HostPool
Test FSLogix Search Capability Test (Office Container) #CredCode#	$ThisHostResGroup = $Item.'Resource Group'
Test FSLogix Search Capability Test (Office Container) #CredCode#	$ThisHostNow = $Item.'Session Host'
Test FSLogix Search Capability Test (Office Container) #CredCode#	$A, $B = $ThisHostNow.Split("/")
Test FSLogix Search Capability Test (Office Container) #CredCode#	$C, $D, $E = $B.Split(".")
Test FSLogix Search Capability Test (Office Container) #CredCode#	$ThisHostName = $C
Test FSLogix Search Capability Test (Office Container) #CredCode#	
Test FSLogix Search Capability Test (Office Container) #CredCode#	$RegToCheck = "None"
Test FSLogix Search Capability Test (Office Container) #CredCode#	$RegValue = ""
Test FSLogix Search Capability Test (Office Container) #CredCode#	
Test FSLogix Search Capability Test (Office Container) #CredCode#	$ModCSV = Import-Csv $DCModuleFile
Test FSLogix Search Capability Test (Office Container) #CredCode#	foreach ($RegNow in $ModCSV)
Test FSLogix Search Capability Test (Office Container) #CredCode#	{
Test FSLogix Search Capability Test (Office Container) #CredCode#		IF ($RegNow.Module -eq $ADTestName)
Test FSLogix Search Capability Test (Office Container) #CredCode#		{
Test FSLogix Search Capability Test (Office Container) #CredCode#			$RegToCheck = $RegNow.RegEntry
Test FSLogix Search Capability Test (Office Container) #CredCode#			break
Test FSLogix Search Capability Test (Office Container) #CredCode#		}
Test FSLogix Search Capability Test (Office Container) #CredCode#	}
Test FSLogix Search Capability Test (Office Container) #CredCode#	
Test FSLogix Search Capability Test (Office Container) #CredCode#	$FSLogixResultFile = "$UserHomeDir\FSLogixResults" + $TargetNameNow + $ThisHostResGroup + "_" + $ThisHostName + "PROF_Container.CSV"
Test FSLogix Search Capability Test (Office Container) #CredCode#	$FoundOrNot = "No"
Test FSLogix Search Capability Test (Office Container) #CredCode#	foreach ($Reg in Get-Content $FSLogixResultFile)
Test FSLogix Search Capability Test (Office Container) #CredCode#	{
Test FSLogix Search Capability Test (Office Container) #CredCode#		$A, $B = $Reg.Split(":")
Test FSLogix Search Capability Test (Office Container) #CredCode#		IF ($A -eq $RegToCheck)
Test FSLogix Search Capability Test (Office Container) #CredCode#		{
Test FSLogix Search Capability Test (Office Container) #CredCode#			$FoundOrNot = "Yes"
Test FSLogix Search Capability Test (Office Container) #CredCode#			$RegValue = $B
Test FSLogix Search Capability Test (Office Container) #CredCode#			break
Test FSLogix Search Capability Test (Office Container) #CredCode#		}
Test FSLogix Search Capability Test (Office Container) #CredCode#	}
Test FSLogix Search Capability Test (Office Container) #CredCode#	
Test FSLogix Search Capability Test (Office Container) #CredCode#	IF ($FoundOrNot -eq "No")
Test FSLogix Search Capability Test (Office Container) #CredCode#	{
Test FSLogix Search Capability Test (Office Container) #CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck, Not Found - Roam Search is disabled"
Test FSLogix Search Capability Test (Office Container) #CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Search Capability Test (Office Container) #CredCode#		$AnyGap = "Yes"
Test FSLogix Search Capability Test (Office Container) #CredCode#	}
Test FSLogix Search Capability Test (Office Container) #CredCode#	
Test FSLogix Search Capability Test (Office Container) #CredCode#	IF ($FoundOrNot -eq "Yes")
Test FSLogix Search Capability Test (Office Container) #CredCode#	{
Test FSLogix Search Capability Test (Office Container) #CredCode#		$STR = $ThisPoolNow + "," + $ThisHostResGroup + "," + $ThisHostName + ",$RegToCheck," + $RegValue
Test FSLogix Search Capability Test (Office Container) #CredCode#		Add-Content $TestCSVFile $STR
Test FSLogix Search Capability Test (Office Container) #CredCode#		$IntValue = $RegValue
Test FSLogix Search Capability Test (Office Container) #CredCode#		IF ($IntValue -eq "1")
Test FSLogix Search Capability Test (Office Container) #CredCode#		{
Test FSLogix Search Capability Test (Office Container) #CredCode#			$AnyGap = "Yes"
Test FSLogix Search Capability Test (Office Container) #CredCode#		}
Test FSLogix Search Capability Test (Office Container) #CredCode#	}	
Test FSLogix Search Capability Test (Office Container) #CredCode#}
Test FSLogix Search Capability Test (Office Container) #CredCode#
Test FSLogix Search Capability Test (Office Container) #CredCode#IF ($AnyGap -eq "Yes")
Test FSLogix Search Capability Test (Office Container) #CredCode#{
Test FSLogix Search Capability Test (Office Container) #CredCode#	$SumVal = ""
Test FSLogix Search Capability Test (Office Container) #CredCode#	$TestStatus = "Medium"
Test FSLogix Search Capability Test (Office Container) #CredCode#	$TestText = ""
Test FSLogix Search Capability Test (Office Container) #CredCode#	
Test FSLogix Search Capability Test (Office Container) #CredCode#}
Test FSLogix Search Capability Test (Office Container) #CredCode#else
Test FSLogix Search Capability Test (Office Container) #CredCode#{
Test FSLogix Search Capability Test (Office Container) #CredCode#	$SumVal = ""
Test FSLogix Search Capability Test (Office Container) #CredCode#	$TestStatus = "Passed"
Test FSLogix Search Capability Test (Office Container) #CredCode#	$TestText = ""
Test FSLogix Search Capability Test (Office Container) #CredCode#	
Test FSLogix Search Capability Test (Office Container) #CredCode#}
