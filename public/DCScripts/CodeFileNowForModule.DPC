$TemplateToUse = "FSLogix Two"
$ScopedHostPools = "ALL"
$TargetHostsInPools = "COLLECT"

$ScopedHosts = "$NewLocNow\public\$TRPKey\Users\TEMP\ScopedHosts.CSV"
Remove-item $ScopedHosts -ErrorAction SilentlyContinue
$STR = "Host Pool, Session Host,ResGroup"
Add-Content $ScopedHosts $STR

$STR = "Scoped Host Pools: $ScopedHostPools"
Add-Content $FinalLogFile $STR
$STR = "Target Hosts: $TargetHostsInPools"
Add-Content $FinalLogFile $STR

IF ($TargetHostsInPools -eq "" -or $TargetHostsInPools -eq $null)
{
	$STR = "Target Hosts NOT Defined..."
	Add-Content $FinalLogFile $STR
	$STR = "Aborting..."
	Add-Content $FinalLogFile $STR
}
else
{
	
	IF ($TargetHostsInPools -eq "COLLECT")
	{
		$R = Get-AzWvdHostPool | Select-Object *
		$AllPoolsNow = ""
		ForEach ($Item in $R)
		{
			$HostPool = $Item.Name
			$ThisLine = $Item.ApplicationGroupReference
			$R = $ThisLine
			$A, $B, $C, $D, $E, $F = $R.Split("/")
			
			$FinalResGroup = $E
			
			$DoOrNot = "No"
			IF ($ScopedHostPools -eq "ALL")
			{
				$DoOrNot = "Yes"
			}
			else
			{
				$SplittedPools = $ScopedHostPools.Split(",")
				foreach ($SplitPool in $SplittedPools)
				{
					IF ($SplitPool.ToLower() -eq $HostPool.ToLower())
					{
						$DoOrNot = "Yes"
						break
					}
				}
			}
			
			IF ($DoOrNot -eq "Yes")
			{
				$FinalHostToAddNow = "NONE"
				$AllHosts = Get-AzWvdSessionHost -HostPoolName $HostPool -ResourceGroupName $FinalResGroup | Select-Object Name, Status
				foreach ($HostNow in $AllHosts)
				{
					IF ($HostNow.Status -eq "Available")
					{
						$A = $HostNow.Name
						$B, $C, $D = $A.Split("/")
						$FinalHostToAddNow, $U = $C.Split(".")
					}
				}
				
				$STR = $HostPool + "," + $FinalHostToAddNow + "," + $FinalResGroup
				Add-Content $ScopedHosts $STR
			}
		}
	}
	else
	{
		$ThisSplit = $TargetHostsInPools.Split(":")
		foreach ($Item in $ThisSplit)
		{
			$HostPool, $FinalHostToAddNow, $FinalResGroup = $Item.Split(":")
			$STR = $HostPool + "," + $FinalHostToAddNow + "," + $FinalResGroup
			Add-Content $ScopedHosts $STR
		}
	}
	
	$AllPoolsFile = "$NewLocNow\public\$TRPKey\Users\TEMP\FSLogixAllHostPools.CSV"
	Remove-Item $AllPoolsFile -ErrorAction SilentlyContinue
	$STR = "Host Pool,"
	Add-Content $AllPoolsFile $STR
	
	$TargetCSV = Import-Csv $ScopedHosts
	$AllPoolsNow = ""
	ForEach ($Item in $TargetCSV)
	{
		$HostPool = $Item.'Host Pool'
		$FinalResGroup = $Item.ResGroup
		
		$DoneOrNot = "Yes"
		IF ($DoOrNot -eq "Yes")
		{
			$STR = $HostPool + ","
			Add-Content $AllPoolsFile $STR
			
			$AllPoolsNow = $Item.Name + "," + $AllPoolsNow
			
			$STR = "Processing Host Pool: " + $HostPool
			Add-Content $FinalLogFile $STR
			$STR = "Resource Group: " + $FinalResGroup
			Add-Content $FinalLogFile $STR
			
			$FinalHostToTarget = $Item.'Session Host'
			IF ($FinalHostToTarget -eq "NONE")
			{
			}
			else
			{
				$STR = "Host To Target: " + $FinalHostToTarget
				Add-Content $FinalLogFile $STR
				
				$FSLogixResultFileProfC = "$NewLocNow\public\$TRPKey\Users\TEMP\" + $HostPool + "_" + $FinalHostToTarget + "PROF_Container.CSV"
				Remove-Item $FSLogixResultFileProfC -ErrorAction SilentlyContinue
				$FSLogixResultFileODFCC = "$NewLocNow\public\$TRPKey\Users\TEMP\" + $HostPool + "_" + $FinalHostToTarget + "ODFC_Container.CSV"
				Remove-Item $FSLogixResultFileODFCC -ErrorAction SilentlyContinue
				
				$STR = "Checking VM Status: " + $FinalHostToTarget
				Add-Content $FinalLogFile $STR
				
				$AllGoodOrNot = "Yes"
				$Error.Clear()
				
				$AllVMs = Get-AzVM -Name $FinalHostToTarget -Status | Select-Object Name, PowerState
				IF ($Error.Count -eq 0)
				{
					foreach ($VM in $AllVMs)
					{
						IF ($VM.Name.ToLower() -eq $FinalHostToTarget.ToLower())
						{
							IF ($VM.PowerState -eq "VM running")
							{
								$EXEVMStatus = "VM Running"
								$STR = "VM is running"
								Add-Content $FinalLogFile $STR
								
							}
							else
							{
								$EXEVMStatus = "VM NOT Running"
								$STR = "VM is NOT running"
								Add-Content $FinalLogFile $STR
								$AllGoodOrNot = "No"
								
							}
							break
							
						}
						
					}
					
				}
				else
				{
					$STR = "Error Checking VM Status: " + $Error
					Add-Content $FinalLogFile $STR
					$AllGoodOrNot = "No"
					
				}
				
				IF ($AllGoodOrNot -eq "Yes")
				{
					$AllJobsFile = "$NewLocNow\Public\$TRPKey\Users\TEMP\AllJobs.CSV"
					Remove-Item $AllJobsFile -ErrorAction SilentlyContinue
					$STR = "JobID,HostName"
					Add-Content $AllJobsFile $STR
					
					$STR = "Triggering Job for VM: " + $FinalHostToTarget
					Add-Content $FinalLogFile $STR
					
					$FinalScriptPath = "$NewLocNow\Public\DPConfig\DPCode\VMScriptTest.ps1"
					
					$Error.Clear()
					$Status = Invoke-AzVMRunCommand -ResourceGroupName $FinalResGroup -Name $FinalHostToTarget -CommandId 'RunPowerShellScript' -ScriptPath "$FinalScriptPath" -AsJob
					$ThisJobID = $Status.ID.ToString() + "," + $ThisHostName
					Add-Content $AllJobsFile $ThisJobID
					
					$STR = "Checking to see if Job Was completed for VM: " + $FinalHostToTarget
					Add-Content $FinalLogFile $STR
					
					$TimeStart = Get-Date
					$TimeEnd = $timeStart.addminutes(8)
					Do
					{
						$AllJobsFileCSV = Import-Csv $AllJobsFile
						
						$TimeNow = Get-Date
						
						$STR = "Status - 8 Minutes to run: Start: " + $TimeStart.ToString() + " Now: " + $TimeNow.ToString()
						Add-Content $FinalLogFile $STR
						
						if ($TimeNow -ge $TimeEnd)
						{
							foreach ($JobIDNow in $AllJobsFileCSV)
							{
								$ThisHostName = $JobIDNow.HostName
								$ThisJobID = $JobIDNow.JobID
								Stop-Job -Id $ThisJobID
								Remove-Job -Id $ThisJobID -Force
								
								$STR = "Job was removed: ID: " + $ThisJobID + " For Host: " + $ThisHostName
								Add-Content $FinalLogFile $STR
								$STR = "Error: Took Longer time to completed for VM: $FinalHostToTarget"
								Add-Content $FinalLogFile $STR
								$STR = "Aborting for VM: $FinalHostToTarget"
								Add-Content $FinalLogFile $STR
								
								$AllGoodOrNot = "No"
								
							}
							
						}
						else
						{
							
						}
						
						Start-Sleep -Seconds 10
						
						$DoneOrNot = "Yes"
						foreach ($JobIDNow in $AllJobsFileCSV)
						{
							$ThisJobID = $JobIDNow.JobID
							$FinalJobID = $ThisJobID
							$JobStatus = Get-Job -Id $FinalJobID
							IF ($JobStatus.State -eq "Running")
							{
								$DoneOrNot = "No"
								
							}
							
						}
						IF ($DoneOrNot -eq "Yes")
						{
							$AllJobsFileCSV = Import-Csv $AllJobsFile
							foreach ($JobIDNow in $AllJobsFileCSV)
							{
								$ThisHostName = $JobIDNow.HostName
								$ThisJobID = $JobIDNow.JobID -as [int]
								$JobStatus = Get-Job -Id $ThisJobID
								IF ($JobStatus.State -eq "Completed")
								{
									
								}
								
							}
							
							
							foreach ($JobIDNow in $AllJobsFileCSV)
							{
								$ThisJobID = $JobIDNow.JobID
								Stop-Job -Id $ThisJobID
								Remove-Job -Id $ThisJobID -Force
								
							}
							
							$STR = "Job Completed for VM: $FinalHostToTarget"
							Add-Content $FinalLogFile $STR
							Break
							
						}
						
					}
					Until ($TimeNow -ge $TimeEnd)
					
				}
				
				IF ($AllGoodOrNot -eq "Yes")
				{
					$STR = "VM Job Test was a Success for VM:" + $FinalHostToTarget
					Add-Content $FinalLogFile $STR
					
					$STR = "Executing Script for Host: " + $FinalHostToTarget
					Add-Content $FinalLogFile $STR
					
					$FinalScriptPath = "$NewLocNow\Public\DPConfig\DPCode\AVD\FSLogixConfigZERO.ps1"
					
					$Error.Clear()
					$Status = Invoke-AzVMRunCommand -ResourceGroupName $FinalResGroup -Name $FinalHostToTarget -CommandId 'RunPowerShellScript' -ScriptPath "$FinalScriptPath"
					IF ($Error.Count -eq 0)
					{
						$STR = "Script Executed Successfully on Host: " + $FinalHostToTarget
						Add-Content $FinalLogFile $STR
						
						$ResTMP = "$NewLocNow\Public\$TRPKey\Users\FSLogixResultsTMP.DPC"
						Remove-Item $ResTMP -ErrorAction SilentlyContinue
						
						$STR = $Status.value[0].Message
						Add-Content $ResTMP $STR
						foreach ($NewItem in Get-Content $ResTMP)
						{
							$A, $B = $NewItem.Split(";")
							IF ($A -eq "PROFILE" -or $A -eq "PROF")
							{
								Add-Content $FSLogixResultFileProfC $B
								
							}
							IF ($A -eq "ODFC")
							{
								Add-Content $FSLogixResultFileODFCC $B
								
							}
							
						}
						
					}
					else
					{
						$STR = "Error Executing Script: " + $ThisHostName
						Add-Content $FinalLogFile $STR
						$STR = "Error: " + $Error
						Add-Content $FinalLogFile $STR
						
					}
					
				}
			}
		}
		
	}
	
	$AVDDash = "$NewLocNow\public\DPConfig\DPCode\AVD\AVDDPDASH.CSV"
	$DashCSV = Import-Csv $AVDDash
	
	$AllPoolsNow = ""
	$PoolsCSV = Import-Csv $AllPoolsFile
	foreach ($Item in $PoolsCSV)
	{
		$AllPoolsNow = $Item.'Host Pool' + "," + $AllPoolsNow
	}
	
	$STR = "Script Execution is Over"
	Add-Content $FinalLogFile $STR
	
	$STR = "Collecting Results"
	Add-Content $FinalLogFile $STR
	
	$STR = "FSLogix Setting/Test,Container Type,Consistency Status," + $AllPoolsNow + "Config Status"
	Add-Content $FinalResultFile $STR
	
	$ReplName = $TemplateToUse.replace(" ", "_")
	$ParamFile = "$NewLocNow\public\DPConfig\" + $ReplName + "_FSLOGIX_ASS.DPC"	
	$FSLogixTestsFile = $ParamFile
	$PropCSV = Import-Csv $FSLogixTestsFile
	
	$PoolsCSV = Import-Csv $AllPoolsFile
	
	foreach ($Item in $PropCSV)
	{
		$ThisProp = $Item.FSLogixTest.Trim()
		$ThisReg = $Item.RegEntry
		$ContType = $Item.Type
		$DefValue = $Item.ExpValue
		$CheckEXPValue = $Item.ExpValue
		$FinalProp = '"' + $ThisProp + "`n[" + $ThisReg + "]" + '"'
		$ThisDesNow = $Item.Description
		
		IF ($ThisProp -eq "" -or $ThisProp -eq $null)
		{
			
		}
		else
		{
			$ThisFinalPropName = $ThisProp
			
			$AllDataNow = ""
			$AnyGap = "No"
			$FCContainer = New-Object System.Collections.ArrayList
			
			ForEach ($PoolItem in $PoolsCSV)
			{
				$ThisHostPoolR = $PoolItem.'Host Pool'
				
				$FinalHostToTarget = "NONE"
				$ValueToAddInCont = ""
				
				$TargetCSV = Import-Csv $ScopedHosts
				ForEach ($ItemInHostFile in $TargetCSV)
				{
					$TargetHostPool = $ItemInHostFile.'Host Pool'
					IF ($TargetHostPool -eq $ThisHostPoolR)
					{
						$FinalHostToTarget = $ItemInHostFile.'Session Host'
					}
				}
				
				$FilesFoundOrNo = "No"
				
				$FSLogixResultFileProfCCSV = "$NewLocNow\public\$TRPKey\Users\TEMP\" + $ThisHostPoolR + "_" + $FinalHostToTarget + "PROF_Container.CSV"
				IF (Test-Path $FSLogixResultFileODFCCCSV)
				{
					$FilesFoundOrNo = "Yes"
				}
				$FSLogixResultFileODFCCCSV = "$NewLocNow\public\$TRPKey\Users\TEMP\" + $ThisHostPoolR + "_" + $FinalHostToTarget + "ODFC_Container.CSV"
				IF (Test-Path $FSLogixResultFileODFCCCSV)
				{
					$FilesFoundOrNo = "Yes"					
				}
				
				IF ($FilesFoundOrNo -eq "Yes")
				{
					
					IF ($ContType -eq "ProfileContainer")
					{
						$CSVTestFile = Get-Content $FSLogixResultFileProfCCSV
						
					}
					IF ($ContType -eq "OfficeContainer")
					{
						$CSVTestFile = Get-Content $FSLogixResultFileODFCCCSV						
					}
					
					$FoundORNot = "No"
					
					$GotFinalPropNameNow = $DefValue
					foreach ($ItemCSV in $CSVTestFile)
					{
						$A, $B = $ItemCSV.Split(":")
						$FinalA = $A.Trim()
						$FinalB = $B.Trim()
						
						$FinalValueSet = $FinalB
						IF ($ThisReg -eq $FinalA)
						{
							$SomethingWrongOrNot = "No"
							IF ($FinalB.ToLower() -eq $CheckEXPValue.ToLower())
							{
								$DefPropClass = '<div class = "FSLogixAllGoodClass">' + $FinalValueSet + '</div>'
								$GotFinalPropNameNow = $DefPropClass
								$AnyGap = "No"
								$ValueToAddInCont = $FinalValueSet
								
							}
							else
							{
								$FinalNowNew = "Value:" + $FinalB + " Expected: " + $DefValue
								$DefPropClass = '<div class = "RDPPropSomethingWrong">' + $FinalNowNew + '</div>'
								$GotFinalPropNameNow = $DefPropClass
								$AnyGap = "Yes"
								
								$ValueToAddInCont = $FinalValueSet
							}
							$FoundORNot = "Yes"
							break
							
						}						
					}
					
					IF ($FoundORNot -eq "No")
					{
						$FinalNowNew = '<span class="FSLogixNotFoundClass">Not Found</span><br>' + "Expected: " + $DefValue
						$DefPropClass = '<div class = "RDPPropSomethingWrong">' + $FinalNowNew + '</div>'
						$GotFinalPropNameNow = $DefPropClass
						$AnyGap = "No"
						$ValueToAddInCont = "Not Found"
					}
										
					$AllDataNow = $GotFinalPropNameNow + "," + $AllDataNow
					
				}
				else
				{
					$GotFinalPropNameNow = "No Result"
					$AllDataNow = $GotFinalPropNameNow + "," + $AllDataNow
					$ValueToAddInCont = "No Result"
				}
				
				$ContFoundOrNot = "No"
				foreach ($FItem in $FCContainer)
				{
					IF ($FItem -eq $ValueToAddInCont)
					{
						$ContFoundOrNot = "Yes"
						break
					}
				}
				
				IF ($ContFoundOrNot -eq "No")
				{
					$CompletedText = $ValueToAddInCont
					$FCContainer.Add($CompletedText) > $null
				}
				
			}
			
			IF ($AnyGap -eq "Yes")
			{
				$ThisDivNow = '<div class="AllViewHighTEXTClass"><i class="fa fa-times-circle" style="font-size: 12px;margin-right: 5px;" aria-hidden="true"></i>Failed</div>'
				$FinalDetDivToAdd = $ThisDivNow
			}
			else
			{
				$ThisDivNow = '<div class="AllViewPassedTEXTClass"><i class="fa fa-check-circle" style="font-size: 12px;margin-right: 5px;" aria-hidden="true"></i>Passed</div>'
				$FinalDetDivToAdd = $ThisDivNow
			}
			
			$ConsistencyStatus = "Consistent"
			IF ($FCContainer.Count -gt 1)
			{
				$ThisConDiv = '<div class="ConsInconsClassForAVD">Inconsistent</div>'
				$ConsistencyStatus = $ThisConDiv
			}
			else
			{
				$ThisConDiv = '<div class="ConsInconsClassForAVD">Consistent</div>'
				$ConsistencyStatus = $ThisConDiv
			}
			
			$ContTypeDiv = '<div class="ConsInconsClassForAVD">' + $ContType + '</div>'
			
			$InsertRegEnt = '<br><p class="FSLogixRegEntNameClass">' + $ThisReg + '</p>'
			$PropClassHere = '<div class = "RDPPropPropNameClass">' + $ThisProp + $InsertRegEnt + '</div><div class = "RDPPropDescriptionSet">' + $ThisDesNow + '</div>'
			$STR = $PropClassHere + "," + $ContTypeDiv + "," + $ConsistencyStatus + "," + $AllDataNow + $FinalDetDivToAdd			
			Add-Content $FinalResultFile $STR
			
			
		}
		
	}
	
	
}




